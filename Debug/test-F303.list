
test-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d678  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001260  0800d808  0800d808  0000e808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea68  0800ea68  00010248  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea68  0800ea68  0000fa68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea70  0800ea70  00010248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea70  0800ea70  0000fa70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ea74  0800ea74  0000fa74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000248  20000000  0800ea78  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010248  2**0
                  CONTENTS
 10 .bss          00008d3c  20000248  20000248  00010248  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20008f84  20008f84  00010248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010248  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003423c  00000000  00000000  00010278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006cc8  00000000  00000000  000444b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00010aee  00000000  00000000  0004b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001da8  00000000  00000000  0005bc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001f84  00000000  00000000  0005da18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025930  00000000  00000000  0005f99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000325c3  00000000  00000000  000852cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7e20  00000000  00000000  000b788f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0018f6af  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006db0  00000000  00000000  0018f6f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  001964a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d7f0 	.word	0x0800d7f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	0800d7f0 	.word	0x0800d7f0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <coldStart>:
	osDelay(50);	//	50 is OK
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
}

void coldStart(void){
 8000d14:	b508      	push	{r3, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)"$PMTK104*37\r\n", strlen("$PMTK104*37\r\n"), 2000);
 8000d16:	4906      	ldr	r1, [pc, #24]	@ (8000d30 <coldStart+0x1c>)
 8000d18:	4806      	ldr	r0, [pc, #24]	@ (8000d34 <coldStart+0x20>)
 8000d1a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d1e:	220d      	movs	r2, #13
 8000d20:	f004 fe6a 	bl	80059f8 <HAL_UART_Transmit>
	osDelay(100);
}
 8000d24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	osDelay(100);
 8000d28:	2064      	movs	r0, #100	@ 0x64
 8000d2a:	f004 bfd5 	b.w	8005cd8 <osDelay>
 8000d2e:	bf00      	nop
 8000d30:	0800d84c 	.word	0x0800d84c
 8000d34:	2000209c 	.word	0x2000209c

08000d38 <validateChecksum>:
	osDelay(1000);

}

// Function to validate the checksum of an NMEA sentence
int validateChecksum(uint8_t *nmeaSentence, size_t len) {
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	4401      	add	r1, r0
 8000d3c:	4603      	mov	r3, r0
    const uint8_t *start = nmeaSentence;  // Start of the sentence (after '$')
    const uint8_t *checksumStart = NULL;

    // Find the checksum part (after '*')
    for (size_t i = 0; i < len; i++) {
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	d101      	bne.n	8000d46 <validateChecksum+0xe>
            break;
        }
    }

    if (!checksumStart) {
        return 0;  // Invalid sentence format
 8000d42:	2000      	movs	r0, #0
 8000d44:	e021      	b.n	8000d8a <validateChecksum+0x52>
        if (nmeaSentence[i] == '*') {
 8000d46:	461c      	mov	r4, r3
 8000d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d4c:	2a2a      	cmp	r2, #42	@ 0x2a
 8000d4e:	d1f6      	bne.n	8000d3e <validateChecksum+0x6>

    uint8_t calculatedChecksum = 0;
    uint8_t receivedChecksum = 1;

    // XOR all characters between '$' and '*', excluding both symbols
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d50:	3001      	adds	r0, #1
    uint8_t calculatedChecksum = 0;
 8000d52:	2500      	movs	r5, #0
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d54:	e002      	b.n	8000d5c <validateChecksum+0x24>
        calculatedChecksum ^= *p;
 8000d56:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000d5a:	405d      	eors	r5, r3
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d5c:	4284      	cmp	r4, r0
 8000d5e:	d8fa      	bhi.n	8000d56 <validateChecksum+0x1e>
    }

    // Extract the received checksum (after '*')
    if (checksumStart + 2 < nmeaSentence + len) {
 8000d60:	1ca3      	adds	r3, r4, #2
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d212      	bcs.n	8000d8c <validateChecksum+0x54>
        receivedChecksum = (uint8_t)strtol((char *)(checksumStart + 1), NULL, 16);
 8000d66:	2210      	movs	r2, #16
 8000d68:	2100      	movs	r1, #0
 8000d6a:	1c60      	adds	r0, r4, #1
 8000d6c:	f007 fd0e 	bl	800878c <strtol>
 8000d70:	4604      	mov	r4, r0

        // Debugging: Print calculated and received checksums
//        snprintf()
        printf("Calculated checksum: %02x\n", calculatedChecksum);
 8000d72:	4629      	mov	r1, r5
        printf("Received checksum: %02x\n", receivedChecksum);
 8000d74:	b2e4      	uxtb	r4, r4
        printf("Calculated checksum: %02x\n", calculatedChecksum);
 8000d76:	4808      	ldr	r0, [pc, #32]	@ (8000d98 <validateChecksum+0x60>)
 8000d78:	f008 fc40 	bl	80095fc <iprintf>
        printf("Received checksum: %02x\n", receivedChecksum);
 8000d7c:	4807      	ldr	r0, [pc, #28]	@ (8000d9c <validateChecksum+0x64>)
 8000d7e:	4621      	mov	r1, r4
 8000d80:	f008 fc3c 	bl	80095fc <iprintf>

        // Compare the calculated checksum with the received checksum
        return calculatedChecksum == receivedChecksum;
 8000d84:	1b63      	subs	r3, r4, r5
 8000d86:	4258      	negs	r0, r3
 8000d88:	4158      	adcs	r0, r3
    }
    printf("Checksum mismatch: calculated 0x%02X, received 0x%02X\n",
                         calculatedChecksum, receivedChecksum);
    return 0; // Invalid checksum
}
 8000d8a:	bd38      	pop	{r3, r4, r5, pc}
    printf("Checksum mismatch: calculated 0x%02X, received 0x%02X\n",
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4629      	mov	r1, r5
 8000d90:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <validateChecksum+0x68>)
 8000d92:	f008 fc33 	bl	80095fc <iprintf>
    return 0; // Invalid checksum
 8000d96:	e7d4      	b.n	8000d42 <validateChecksum+0xa>
 8000d98:	0800d85a 	.word	0x0800d85a
 8000d9c:	0800d875 	.word	0x0800d875
 8000da0:	0800d88e 	.word	0x0800d88e

08000da4 <display_rmc_data>:

void display_rmc_data() {
 8000da4:	b513      	push	{r0, r1, r4, lr}

    printf("Time: %02d:%02d:%02d\r\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8000da6:	4c1d      	ldr	r4, [pc, #116]	@ (8000e1c <display_rmc_data+0x78>)
 8000da8:	481d      	ldr	r0, [pc, #116]	@ (8000e20 <display_rmc_data+0x7c>)
 8000daa:	6821      	ldr	r1, [r4, #0]
 8000dac:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8000db0:	f008 fc24 	bl	80095fc <iprintf>

    printf("Date: %02d/%02d/20%02d\r\n", rmc.date.Day, rmc.date.Mon, rmc.date.Yr);
 8000db4:	6921      	ldr	r1, [r4, #16]
 8000db6:	481b      	ldr	r0, [pc, #108]	@ (8000e24 <display_rmc_data+0x80>)
 8000db8:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8000dbc:	f008 fc1e 	bl	80095fc <iprintf>
	
    printf("Latitude: %.6f %c\r\n", rmc.lcation.latitude, rmc.lcation.NS);
 8000dc0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8000dca:	4817      	ldr	r0, [pc, #92]	@ (8000e28 <display_rmc_data+0x84>)
 8000dcc:	f008 fc16 	bl	80095fc <iprintf>

    printf("Longitude: %.6f %c\r\n", rmc.lcation.longitude, rmc.lcation.EW);
 8000dd0:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8000dda:	4814      	ldr	r0, [pc, #80]	@ (8000e2c <display_rmc_data+0x88>)
 8000ddc:	f008 fc0e 	bl	80095fc <iprintf>

    printf("Speed: %.1f knots\r\n", rmc.speed);
 8000de0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8000de2:	f7ff fbc1 	bl	8000568 <__aeabi_f2d>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	4811      	ldr	r0, [pc, #68]	@ (8000e30 <display_rmc_data+0x8c>)
 8000dec:	f008 fc06 	bl	80095fc <iprintf>

    printf("Course: %.1f\r\n", rmc.course);
 8000df0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8000df2:	f7ff fbb9 	bl	8000568 <__aeabi_f2d>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	480e      	ldr	r0, [pc, #56]	@ (8000e34 <display_rmc_data+0x90>)
 8000dfc:	f008 fbfe 	bl	80095fc <iprintf>

    printf("Validity: %s\r\n", rmc.isValid ? "Valid" : "Invalid");
 8000e00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000e02:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <display_rmc_data+0x94>)
 8000e04:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <display_rmc_data+0x98>)
 8000e06:	480e      	ldr	r0, [pc, #56]	@ (8000e40 <display_rmc_data+0x9c>)
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	bf0c      	ite	eq
 8000e0c:	4611      	moveq	r1, r2
 8000e0e:	4619      	movne	r1, r3
}
 8000e10:	b002      	add	sp, #8
 8000e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printf("Validity: %s\r\n", rmc.isValid ? "Valid" : "Invalid");
 8000e16:	f008 bbf1 	b.w	80095fc <iprintf>
 8000e1a:	bf00      	nop
 8000e1c:	200003c8 	.word	0x200003c8
 8000e20:	0800d8d3 	.word	0x0800d8d3
 8000e24:	0800d8ea 	.word	0x0800d8ea
 8000e28:	0800d903 	.word	0x0800d903
 8000e2c:	0800d917 	.word	0x0800d917
 8000e30:	0800d92c 	.word	0x0800d92c
 8000e34:	0800d940 	.word	0x0800d940
 8000e38:	0800d8cb 	.word	0x0800d8cb
 8000e3c:	0800d8c5 	.word	0x0800d8c5
 8000e40:	0800d94f 	.word	0x0800d94f

08000e44 <convertToEpoch>:

time_t convertToEpoch(int year, int month, int day, int hour, int min, int sec) {
 8000e44:	b510      	push	{r4, lr}
 8000e46:	b08a      	sub	sp, #40	@ 0x28
    struct tm timeinfo = {0};

    // Set timeinfo fields
    timeinfo.tm_year = year + 100; // Year since 1900
 8000e48:	3064      	adds	r0, #100	@ 0x64
    timeinfo.tm_mon = month - 1;    // Month (0-11, so subtract 1)
    timeinfo.tm_mday = day;         // Day of the month
    timeinfo.tm_hour = hour;        // Hour (0-23)
 8000e4a:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = min;          // Minute (0-59)
 8000e4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000e4e:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = sec;          // Second (0-59)
 8000e50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    timeinfo.tm_year = year + 100; // Year since 1900
 8000e52:	9006      	str	r0, [sp, #24]
    timeinfo.tm_sec = sec;          // Second (0-59)
 8000e54:	9301      	str	r3, [sp, #4]
    struct tm timeinfo = {0};
 8000e56:	2400      	movs	r4, #0
    timeinfo.tm_isdst = -1;         // Automatically determine Daylight Saving Time
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
    timeinfo.tm_mon = month - 1;    // Month (0-11, so subtract 1)
 8000e5c:	3901      	subs	r1, #1

    // Convert to epoch time (seconds since 1970-01-01 00:00:00 UTC)
    time_t epoch = mktime(&timeinfo);
 8000e5e:	a801      	add	r0, sp, #4
    struct tm timeinfo = {0};
 8000e60:	e9cd 4407 	strd	r4, r4, [sp, #28]
    timeinfo.tm_mday = day;         // Day of the month
 8000e64:	e9cd 2104 	strd	r2, r1, [sp, #16]
    timeinfo.tm_isdst = -1;         // Automatically determine Daylight Saving Time
 8000e68:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t epoch = mktime(&timeinfo);
 8000e6a:	f008 fed1 	bl	8009c10 <mktime>

    return epoch;
}
 8000e6e:	b00a      	add	sp, #40	@ 0x28
 8000e70:	bd10      	pop	{r4, pc}
 8000e72:	0000      	movs	r0, r0
 8000e74:	0000      	movs	r0, r0
	...

08000e78 <parse_rmc>:

void parse_rmc(uint8_t *rmc_sentence) {
 8000e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e7c:	ed2d 8b02 	vpush	{d8}
 8000e80:	b0a3      	sub	sp, #140	@ 0x8c
    int field = 0;
    uint8_t str_cpy[128];
    strcpy((char*)str_cpy,(char*) rmc_sentence);
 8000e82:	4601      	mov	r1, r0
void parse_rmc(uint8_t *rmc_sentence) {
 8000e84:	4604      	mov	r4, r0
    strcpy((char*)str_cpy,(char*) rmc_sentence);
 8000e86:	a802      	add	r0, sp, #8
 8000e88:	f009 fc2a 	bl	800a6e0 <strcpy>
    str_cpy[sizeof(str_cpy) - 1] = '\0';
 8000e8c:	2600      	movs	r6, #0

    printf("\n");
 8000e8e:	200a      	movs	r0, #10
    str_cpy[sizeof(str_cpy) - 1] = '\0';
 8000e90:	f88d 6087 	strb.w	r6, [sp, #135]	@ 0x87
    printf("\n");
 8000e94:	f008 fbc4 	bl	8009620 <putchar>
    printf((char *)rmc_sentence);
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f008 fbaf 	bl	80095fc <iprintf>
    printf("\n");
 8000e9e:	200a      	movs	r0, #10
 8000ea0:	f008 fbbe 	bl	8009620 <putchar>

	if(validateChecksum(rmc_sentence, 128) == 0){
 8000ea4:	2180      	movs	r1, #128	@ 0x80
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	f7ff ff46 	bl	8000d38 <validateChecksum>
 8000eac:	b1a0      	cbz	r0, 8000ed8 <parse_rmc+0x60>
 8000eae:	ad02      	add	r5, sp, #8

    uint8_t *ptr = str_cpy;

    while (*ptr) {
        if (*ptr == ',' || *ptr == '*') {
            *ptr = '\0';
 8000eb0:	4637      	mov	r7, r6
    while (*ptr) {
 8000eb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000eb6:	b9a3      	cbnz	r3, 8000ee2 <parse_rmc+0x6a>
            rmc_sentence = ptr + 1;
            field++;
        }
        ptr++;
    }
	if(rmc.isValid == 1)
 8000eb8:	4c77      	ldr	r4, [pc, #476]	@ (8001098 <parse_rmc+0x220>)
 8000eba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d10b      	bne.n	8000ed8 <parse_rmc+0x60>
		rmc.date.epoch = convertToEpoch(rmc.date.Yr, rmc.date.Mon, rmc.date.Day, rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8000ec0:	68a3      	ldr	r3, [r4, #8]
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	6863      	ldr	r3, [r4, #4]
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	69a0      	ldr	r0, [r4, #24]
 8000ed0:	f7ff ffb8 	bl	8000e44 <convertToEpoch>
 8000ed4:	e9c4 0108 	strd	r0, r1, [r4, #32]
}
 8000ed8:	b023      	add	sp, #140	@ 0x8c
 8000eda:	ecbd 8b02 	vpop	{d8}
 8000ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (*ptr == ',' || *ptr == '*') {
 8000ee2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000ee4:	d001      	beq.n	8000eea <parse_rmc+0x72>
 8000ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ee8:	d1e3      	bne.n	8000eb2 <parse_rmc+0x3a>
            switch (field) {
 8000eea:	1e73      	subs	r3, r6, #1
            *ptr = '\0';
 8000eec:	f805 7c01 	strb.w	r7, [r5, #-1]
            switch (field) {
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d81d      	bhi.n	8000f30 <parse_rmc+0xb8>
 8000ef4:	e8df f003 	tbb	[pc, r3]
 8000ef8:	5d271f05 	.word	0x5d271f05
 8000efc:	a79d9862 	.word	0xa79d9862
 8000f00:	b1          	.byte	0xb1
 8000f01:	00          	.byte	0x00
                    rmc.tim.hour = (rmc_sentence[0] - '0') * 10 + (rmc_sentence[1] - '0');
 8000f02:	7820      	ldrb	r0, [r4, #0]
 8000f04:	7863      	ldrb	r3, [r4, #1]
 8000f06:	4a64      	ldr	r2, [pc, #400]	@ (8001098 <parse_rmc+0x220>)
 8000f08:	210a      	movs	r1, #10
 8000f0a:	3830      	subs	r0, #48	@ 0x30
 8000f0c:	3b30      	subs	r3, #48	@ 0x30
 8000f0e:	fb01 3300 	mla	r3, r1, r0, r3
 8000f12:	6013      	str	r3, [r2, #0]
                    rmc.tim.min = (rmc_sentence[2] - '0') * 10 + (rmc_sentence[3] - '0');
 8000f14:	78a0      	ldrb	r0, [r4, #2]
 8000f16:	78e3      	ldrb	r3, [r4, #3]
 8000f18:	3830      	subs	r0, #48	@ 0x30
 8000f1a:	3b30      	subs	r3, #48	@ 0x30
 8000f1c:	fb01 3300 	mla	r3, r1, r0, r3
 8000f20:	6053      	str	r3, [r2, #4]
                    rmc.tim.sec = (rmc_sentence[4] - '0') * 10 + (rmc_sentence[5] - '0');
 8000f22:	7920      	ldrb	r0, [r4, #4]
 8000f24:	7963      	ldrb	r3, [r4, #5]
 8000f26:	3830      	subs	r0, #48	@ 0x30
 8000f28:	3b30      	subs	r3, #48	@ 0x30
 8000f2a:	fb01 3300 	mla	r3, r1, r0, r3
 8000f2e:	6093      	str	r3, [r2, #8]
            field++;
 8000f30:	3601      	adds	r6, #1
            rmc_sentence = ptr + 1;
 8000f32:	462c      	mov	r4, r5
        ptr++;
 8000f34:	e7bd      	b.n	8000eb2 <parse_rmc+0x3a>
                    rmc.isValid = (rmc_sentence[0] == 'A') ? 1 : 0;
 8000f36:	7823      	ldrb	r3, [r4, #0]
 8000f38:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8000f3c:	4253      	negs	r3, r2
 8000f3e:	4153      	adcs	r3, r2
 8000f40:	4a55      	ldr	r2, [pc, #340]	@ (8001098 <parse_rmc+0x220>)
 8000f42:	6313      	str	r3, [r2, #48]	@ 0x30
                    break;
 8000f44:	e7f4      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.lcation.latitude = (atof((char *)rmc_sentence) )/100;
 8000f46:	4620      	mov	r0, r4
 8000f48:	f006 fccc 	bl	80078e4 <atof>
 8000f4c:	4b53      	ldr	r3, [pc, #332]	@ (800109c <parse_rmc+0x224>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	ec51 0b10 	vmov	r0, r1, d0
 8000f54:	f7ff fc8a 	bl	800086c <__aeabi_ddiv>
 8000f58:	4680      	mov	r8, r0
 8000f5a:	4689      	mov	r9, r1
                    int lati_int = (int)floor(rmc.lcation.latitude);
 8000f5c:	ec49 8b10 	vmov	d0, r8, r9
 8000f60:	f00c fbca 	bl	800d6f8 <floor>
 8000f64:	ec51 0b10 	vmov	r0, r1, d0
 8000f68:	f7ff fe06 	bl	8000b78 <__aeabi_d2iz>
 8000f6c:	ee08 0a10 	vmov	s16, r0
					float lati_float = rmc.lcation.latitude - lati_int;
 8000f70:	f7ff fae8 	bl	8000544 <__aeabi_i2d>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4640      	mov	r0, r8
 8000f7a:	4649      	mov	r1, r9
 8000f7c:	f7ff f994 	bl	80002a8 <__aeabi_dsub>
 8000f80:	f7ff fe42 	bl	8000c08 <__aeabi_d2f>
					lati_float = lati_float/0.6;
 8000f84:	f7ff faf0 	bl	8000568 <__aeabi_f2d>
 8000f88:	a341      	add	r3, pc, #260	@ (adr r3, 8001090 <parse_rmc+0x218>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	f7ff fc6d 	bl	800086c <__aeabi_ddiv>
 8000f92:	f7ff fe39 	bl	8000c08 <__aeabi_d2f>
					rmc.lcation.latitude = lati_int + lati_float;
 8000f96:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
					lati_float = lati_float/0.6;
 8000f9a:	ee07 0a90 	vmov	s15, r0
					rmc.lcation.latitude = lati_int + lati_float;
 8000f9e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000fa2:	ee17 0a90 	vmov	r0, s15
 8000fa6:	f7ff fadf 	bl	8000568 <__aeabi_f2d>
 8000faa:	4b3b      	ldr	r3, [pc, #236]	@ (8001098 <parse_rmc+0x220>)
 8000fac:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
                    break;
 8000fb0:	e7be      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.lcation.NS = rmc_sentence[0];
 8000fb2:	4b39      	ldr	r3, [pc, #228]	@ (8001098 <parse_rmc+0x220>)
 8000fb4:	7822      	ldrb	r2, [r4, #0]
 8000fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8000fba:	e7b9      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.lcation.longitude = (atof((char *)rmc_sentence))/100;
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	f006 fc91 	bl	80078e4 <atof>
 8000fc2:	4b36      	ldr	r3, [pc, #216]	@ (800109c <parse_rmc+0x224>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	ec51 0b10 	vmov	r0, r1, d0
 8000fca:	f7ff fc4f 	bl	800086c <__aeabi_ddiv>
 8000fce:	4680      	mov	r8, r0
 8000fd0:	4689      	mov	r9, r1
                    int longi_int = (int)floor(rmc.lcation.longitude);
 8000fd2:	ec49 8b10 	vmov	d0, r8, r9
 8000fd6:	f00c fb8f 	bl	800d6f8 <floor>
 8000fda:	ec51 0b10 	vmov	r0, r1, d0
 8000fde:	f7ff fdcb 	bl	8000b78 <__aeabi_d2iz>
 8000fe2:	ee08 0a10 	vmov	s16, r0
					float longi_float = rmc.lcation.longitude - longi_int;
 8000fe6:	f7ff faad 	bl	8000544 <__aeabi_i2d>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4640      	mov	r0, r8
 8000ff0:	4649      	mov	r1, r9
 8000ff2:	f7ff f959 	bl	80002a8 <__aeabi_dsub>
 8000ff6:	f7ff fe07 	bl	8000c08 <__aeabi_d2f>
					longi_float = longi_float / 0.6;
 8000ffa:	f7ff fab5 	bl	8000568 <__aeabi_f2d>
 8000ffe:	a324      	add	r3, pc, #144	@ (adr r3, 8001090 <parse_rmc+0x218>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	f7ff fc32 	bl	800086c <__aeabi_ddiv>
 8001008:	f7ff fdfe 	bl	8000c08 <__aeabi_d2f>
					rmc.lcation.longitude = longi_int + longi_float;
 800100c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
					longi_float = longi_float / 0.6;
 8001010:	ee07 0a90 	vmov	s15, r0
					rmc.lcation.longitude = longi_int + longi_float;
 8001014:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001018:	ee17 0a90 	vmov	r0, s15
 800101c:	f7ff faa4 	bl	8000568 <__aeabi_f2d>
 8001020:	4b1d      	ldr	r3, [pc, #116]	@ (8001098 <parse_rmc+0x220>)
 8001022:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
                    break;
 8001026:	e783      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.lcation.EW = rmc_sentence[0];
 8001028:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <parse_rmc+0x220>)
 800102a:	7822      	ldrb	r2, [r4, #0]
 800102c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                    break;
 8001030:	e77e      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.speed = atof((char *)rmc_sentence);
 8001032:	4620      	mov	r0, r4
 8001034:	f006 fc56 	bl	80078e4 <atof>
 8001038:	ec51 0b10 	vmov	r0, r1, d0
 800103c:	f7ff fde4 	bl	8000c08 <__aeabi_d2f>
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <parse_rmc+0x220>)
 8001042:	6298      	str	r0, [r3, #40]	@ 0x28
                    break;
 8001044:	e774      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.course = atof((char *)rmc_sentence);
 8001046:	4620      	mov	r0, r4
 8001048:	f006 fc4c 	bl	80078e4 <atof>
 800104c:	ec51 0b10 	vmov	r0, r1, d0
 8001050:	f7ff fdda 	bl	8000c08 <__aeabi_d2f>
 8001054:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <parse_rmc+0x220>)
 8001056:	62d8      	str	r0, [r3, #44]	@ 0x2c
                    break;
 8001058:	e76a      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.date.Day = (rmc_sentence[0] - '0') * 10 + (rmc_sentence[1] - '0');
 800105a:	7820      	ldrb	r0, [r4, #0]
 800105c:	7863      	ldrb	r3, [r4, #1]
 800105e:	4a0e      	ldr	r2, [pc, #56]	@ (8001098 <parse_rmc+0x220>)
 8001060:	210a      	movs	r1, #10
 8001062:	3830      	subs	r0, #48	@ 0x30
 8001064:	3b30      	subs	r3, #48	@ 0x30
 8001066:	fb01 3300 	mla	r3, r1, r0, r3
 800106a:	6113      	str	r3, [r2, #16]
                    rmc.date.Mon = (rmc_sentence[2] - '0') * 10 + (rmc_sentence[3] - '0');
 800106c:	78a0      	ldrb	r0, [r4, #2]
 800106e:	78e3      	ldrb	r3, [r4, #3]
 8001070:	3830      	subs	r0, #48	@ 0x30
 8001072:	3b30      	subs	r3, #48	@ 0x30
 8001074:	fb01 3300 	mla	r3, r1, r0, r3
 8001078:	6153      	str	r3, [r2, #20]
                    rmc.date.Yr = (rmc_sentence[4] - '0') * 10 + (rmc_sentence[5] - '0');
 800107a:	7920      	ldrb	r0, [r4, #4]
 800107c:	7963      	ldrb	r3, [r4, #5]
 800107e:	3830      	subs	r0, #48	@ 0x30
 8001080:	3b30      	subs	r3, #48	@ 0x30
 8001082:	fb01 3300 	mla	r3, r1, r0, r3
 8001086:	6193      	str	r3, [r2, #24]
                    break;
 8001088:	e752      	b.n	8000f30 <parse_rmc+0xb8>
 800108a:	bf00      	nop
 800108c:	f3af 8000 	nop.w
 8001090:	33333333 	.word	0x33333333
 8001094:	3fe33333 	.word	0x3fe33333
 8001098:	200003c8 	.word	0x200003c8
 800109c:	40590000 	.word	0x40590000

080010a0 <sendRMCDataToFlash>:


void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 80010a0:	b570      	push	{r4, r5, r6, lr}
	 RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 80010a2:	4e0f      	ldr	r6, [pc, #60]	@ (80010e0 <sendRMCDataToFlash+0x40>)
void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 80010a4:	4605      	mov	r5, r0
	 RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 80010a6:	f04f 31ff 	mov.w	r1, #4294967295
 80010aa:	6830      	ldr	r0, [r6, #0]
 80010ac:	f004 ff0f 	bl	8005ece <osMailAlloc>
 80010b0:	4604      	mov	r4, r0
	if (mail != NULL) {
 80010b2:	b180      	cbz	r0, 80010d6 <sendRMCDataToFlash+0x36>
		*mail = *rmcData; // Copy data into allocated memory
 80010b4:	2258      	movs	r2, #88	@ 0x58
 80010b6:	4629      	mov	r1, r5
 80010b8:	f009 fb1a 	bl	800a6f0 <memcpy>
		osStatus status = osMailPut(RMC_MailQFLASHId, mail); // Put message in queue
 80010bc:	4621      	mov	r1, r4
 80010be:	6830      	ldr	r0, [r6, #0]
 80010c0:	f004 ff0a 	bl	8005ed8 <osMailPut>
		if (status != osOK) {
 80010c4:	4601      	mov	r1, r0
 80010c6:	b120      	cbz	r0, 80010d2 <sendRMCDataToFlash+0x32>
			printf("\n\n-------------------------Failed to send message: %d ------------------------\n\n", status);
 80010c8:	4806      	ldr	r0, [pc, #24]	@ (80010e4 <sendRMCDataToFlash+0x44>)
	}
	else{
		printf("CANNOT MALLOC MAIL");
	}

}
 80010ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printf("\n\n-------------------------SEND message successfullly at GPS: %d ------------------------\n\n", status);
 80010ce:	f008 ba95 	b.w	80095fc <iprintf>
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <sendRMCDataToFlash+0x48>)
 80010d4:	e7f9      	b.n	80010ca <sendRMCDataToFlash+0x2a>
}
 80010d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("CANNOT MALLOC MAIL");
 80010da:	4804      	ldr	r0, [pc, #16]	@ (80010ec <sendRMCDataToFlash+0x4c>)
 80010dc:	f008 ba8e 	b.w	80095fc <iprintf>
 80010e0:	20001ef0 	.word	0x20001ef0
 80010e4:	0800d95e 	.word	0x0800d95e
 80010e8:	0800d9af 	.word	0x0800d9af
 80010ec:	0800da0b 	.word	0x0800da0b

080010f0 <handleIncomingChar>:

int handleIncomingChar(char c) {
 80010f0:	b570      	push	{r4, r5, r6, lr}
    static char tempBuffer[256]; // Increased size for safety
    static uint16_t tempIndex = 0;

    if (c == '\n') { // Sentence delimiter
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 80010f2:	4c12      	ldr	r4, [pc, #72]	@ (800113c <handleIncomingChar+0x4c>)
    if (c == '\n') { // Sentence delimiter
 80010f4:	280a      	cmp	r0, #10
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 80010f6:	8823      	ldrh	r3, [r4, #0]
    if (c == '\n') { // Sentence delimiter
 80010f8:	d112      	bne.n	8001120 <handleIncomingChar+0x30>
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 80010fa:	4d11      	ldr	r5, [pc, #68]	@ (8001140 <handleIncomingChar+0x50>)
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 80010fc:	4911      	ldr	r1, [pc, #68]	@ (8001144 <handleIncomingChar+0x54>)
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 80010fe:	2600      	movs	r6, #0
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 8001100:	4628      	mov	r0, r5
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 8001102:	54ee      	strb	r6, [r5, r3]
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 8001104:	f008 fc9a 	bl	8009a3c <strstr>
 8001108:	b138      	cbz	r0, 800111a <handleIncomingChar+0x2a>
            strncpy((char*)rmc_str, tempBuffer, sizeof(rmc_str)); // Copy sentence
 800110a:	480f      	ldr	r0, [pc, #60]	@ (8001148 <handleIncomingChar+0x58>)
 800110c:	2280      	movs	r2, #128	@ 0x80
 800110e:	4629      	mov	r1, r5
 8001110:	f008 fc6b 	bl	80099ea <strncpy>
            tempIndex = 0;
 8001114:	8026      	strh	r6, [r4, #0]
 8001116:	2001      	movs	r0, #1
    } else {
        printf("Warning: Sentence too long, discarding\n");
        tempIndex = 0; // Reset if line too long
    }
    return 0;
}
 8001118:	bd70      	pop	{r4, r5, r6, pc}
        tempIndex = 0; // Reset for the next sentence
 800111a:	8020      	strh	r0, [r4, #0]
    return 0;
 800111c:	2000      	movs	r0, #0
 800111e:	e7fb      	b.n	8001118 <handleIncomingChar+0x28>
    } else if (tempIndex < sizeof(tempBuffer) - 1) {
 8001120:	2bfe      	cmp	r3, #254	@ 0xfe
 8001122:	d804      	bhi.n	800112e <handleIncomingChar+0x3e>
        tempBuffer[tempIndex++] = c;
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	8022      	strh	r2, [r4, #0]
 8001128:	4a05      	ldr	r2, [pc, #20]	@ (8001140 <handleIncomingChar+0x50>)
 800112a:	54d0      	strb	r0, [r2, r3]
 800112c:	e7f6      	b.n	800111c <handleIncomingChar+0x2c>
        printf("Warning: Sentence too long, discarding\n");
 800112e:	4807      	ldr	r0, [pc, #28]	@ (800114c <handleIncomingChar+0x5c>)
 8001130:	f008 fad4 	bl	80096dc <puts>
        tempIndex = 0; // Reset if line too long
 8001134:	2300      	movs	r3, #0
 8001136:	8023      	strh	r3, [r4, #0]
 8001138:	e7f0      	b.n	800111c <handleIncomingChar+0x2c>
 800113a:	bf00      	nop
 800113c:	20000366 	.word	0x20000366
 8001140:	20000266 	.word	0x20000266
 8001144:	0800da1e 	.word	0x0800da1e
 8001148:	20001ab0 	.word	0x20001ab0
 800114c:	0800da25 	.word	0x0800da25

08001150 <getRMC>:

void getRMC() {
    static uint16_t lastReadIndex = 0; // Tracks the last read position in DMA
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8001150:	4b3c      	ldr	r3, [pc, #240]	@ (8001244 <getRMC+0xf4>)
 8001152:	681b      	ldr	r3, [r3, #0]
void getRMC() {
 8001154:	b570      	push	{r4, r5, r6, lr}
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8001156:	685c      	ldr	r4, [r3, #4]

    // Process new data in the buffer
    while (lastReadIndex != writeIndex) {
 8001158:	4d3b      	ldr	r5, [pc, #236]	@ (8001248 <getRMC+0xf8>)
        char c = gpsSentence[lastReadIndex];
 800115a:	4e3c      	ldr	r6, [pc, #240]	@ (800124c <getRMC+0xfc>)
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800115c:	f5c4 54b4 	rsb	r4, r4, #5760	@ 0x1680
 8001160:	b2a4      	uxth	r4, r4
    while (lastReadIndex != writeIndex) {
 8001162:	882b      	ldrh	r3, [r5, #0]
 8001164:	42a3      	cmp	r3, r4
 8001166:	d14b      	bne.n	8001200 <getRMC+0xb0>

        lastReadIndex = (lastReadIndex + 1) % GPS_STACK_SIZE;
    }

    // Process `$GNRMC` sentence if detected
    if (isRMCExist){
 8001168:	4e39      	ldr	r6, [pc, #228]	@ (8001250 <getRMC+0x100>)
 800116a:	4c3a      	ldr	r4, [pc, #232]	@ (8001254 <getRMC+0x104>)
 800116c:	6833      	ldr	r3, [r6, #0]
 800116e:	b1fb      	cbz	r3, 80011b0 <getRMC+0x60>
		parse_rmc(rmc_str);// Parse the `$GNRMC` sentence
		display_rmc_data();
		get_RTC_time_date(&rmc);
 8001170:	4d39      	ldr	r5, [pc, #228]	@ (8001258 <getRMC+0x108>)
		parse_rmc(rmc_str);// Parse the `$GNRMC` sentence
 8001172:	483a      	ldr	r0, [pc, #232]	@ (800125c <getRMC+0x10c>)
 8001174:	f7ff fe80 	bl	8000e78 <parse_rmc>
		display_rmc_data();
 8001178:	f7ff fe14 	bl	8000da4 <display_rmc_data>
		get_RTC_time_date(&rmc);
 800117c:	4628      	mov	r0, r5
 800117e:	f000 f94f 	bl	8001420 <get_RTC_time_date>

//		if (rmc.isValid &&
//			(rmc_saved.isValid == 0 ||
//			 isWithinThreshold(rmc_saved.lcation.latitude, rmc_saved.lcation.longitude,
//							   rmc.lcation.latitude, rmc.lcation.longitude, 1.0))) {
		if (rmc.isValid){
 8001182:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001184:	2b00      	cmp	r3, #0
 8001186:	d04c      	beq.n	8001222 <getRMC+0xd2>
			printf("\n\n------------ Sending RMC ------------\n\n");
 8001188:	4835      	ldr	r0, [pc, #212]	@ (8001260 <getRMC+0x110>)
 800118a:	f008 faa7 	bl	80096dc <puts>
			sendRMCDataToFlash(&rmc);
 800118e:	4628      	mov	r0, r5
 8001190:	f7ff ff86 	bl	80010a0 <sendRMCDataToFlash>
			getRMC_time = 0;
 8001194:	2300      	movs	r3, #0
			rmc_saved = rmc;
 8001196:	4833      	ldr	r0, [pc, #204]	@ (8001264 <getRMC+0x114>)
			getRMC_time = 0;
 8001198:	6023      	str	r3, [r4, #0]
			rmc_saved = rmc;
 800119a:	2258      	movs	r2, #88	@ 0x58
 800119c:	4629      	mov	r1, r5
 800119e:	f009 faa7 	bl	800a6f0 <memcpy>
			printf("\n\n------------ DATA FROM GPS MODULE IS NOT VALID YET ------------\n\n");
		}


        // Clear RMC data after processing
        memset(rmc_str, 0x00, sizeof(rmc_str));
 80011a2:	482e      	ldr	r0, [pc, #184]	@ (800125c <getRMC+0x10c>)
 80011a4:	2280      	movs	r2, #128	@ 0x80
 80011a6:	2100      	movs	r1, #0
 80011a8:	f008 fbf8 	bl	800999c <memset>
        isRMCExist = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	6033      	str	r3, [r6, #0]
    }

    // GPS timeout logic
    if (getRMC_time >= 150 && getRMC_time % 150 == 0) {
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	2b95      	cmp	r3, #149	@ 0x95
 80011b4:	dd0a      	ble.n	80011cc <getRMC+0x7c>
 80011b6:	2296      	movs	r2, #150	@ 0x96
 80011b8:	fb93 f1f2 	sdiv	r1, r3, r2
 80011bc:	fb02 3311 	mls	r3, r2, r1, r3
 80011c0:	b923      	cbnz	r3, 80011cc <getRMC+0x7c>
        printf("\n\n-------------------  COLD START GPS module -----------------------\n\n");
 80011c2:	4829      	ldr	r0, [pc, #164]	@ (8001268 <getRMC+0x118>)
 80011c4:	f008 fa8a 	bl	80096dc <puts>
        coldStart();
 80011c8:	f7ff fda4 	bl	8000d14 <coldStart>
    }

    if (getRMC_time >= 500) {
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011d2:	db0f      	blt.n	80011f4 <getRMC+0xa4>
        GPS_DISABLE();
 80011d4:	2201      	movs	r2, #1
 80011d6:	2104      	movs	r1, #4
 80011d8:	4824      	ldr	r0, [pc, #144]	@ (800126c <getRMC+0x11c>)
 80011da:	f002 fdfb 	bl	8003dd4 <HAL_GPIO_WritePin>
        osDelay(500);
 80011de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011e2:	f004 fd79 	bl	8005cd8 <osDelay>
        GPS_ENABLE();
 80011e6:	4821      	ldr	r0, [pc, #132]	@ (800126c <getRMC+0x11c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	2104      	movs	r1, #4
 80011ec:	f002 fdf2 	bl	8003dd4 <HAL_GPIO_WritePin>
        getRMC_time = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	6023      	str	r3, [r4, #0]
    }

    printf("Elapsed Time: %d\n", getRMC_time);
 80011f4:	6821      	ldr	r1, [r4, #0]
 80011f6:	481e      	ldr	r0, [pc, #120]	@ (8001270 <getRMC+0x120>)
}
 80011f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printf("Elapsed Time: %d\n", getRMC_time);
 80011fc:	f008 b9fe 	b.w	80095fc <iprintf>
        if (handleIncomingChar(c)){
 8001200:	5cf0      	ldrb	r0, [r6, r3]
 8001202:	f7ff ff75 	bl	80010f0 <handleIncomingChar>
 8001206:	b110      	cbz	r0, 800120e <getRMC+0xbe>
        	isRMCExist = 1; // `$GNRMC` sentence is ready
 8001208:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <getRMC+0x100>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]
        lastReadIndex = (lastReadIndex + 1) % GPS_STACK_SIZE;
 800120e:	882b      	ldrh	r3, [r5, #0]
 8001210:	f44f 52b4 	mov.w	r2, #5760	@ 0x1680
 8001214:	3301      	adds	r3, #1
 8001216:	fbb3 f1f2 	udiv	r1, r3, r2
 800121a:	fb02 3311 	mls	r3, r2, r1, r3
 800121e:	802b      	strh	r3, [r5, #0]
 8001220:	e79f      	b.n	8001162 <getRMC+0x12>
		} else if (rmc_saved.isValid) {
 8001222:	4d10      	ldr	r5, [pc, #64]	@ (8001264 <getRMC+0x114>)
 8001224:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001226:	b14b      	cbz	r3, 800123c <getRMC+0xec>
			printf("\n\n------------ GPS BUG: Sending latest RMC ------------\n\n");
 8001228:	4812      	ldr	r0, [pc, #72]	@ (8001274 <getRMC+0x124>)
 800122a:	f008 fa57 	bl	80096dc <puts>
			get_RTC_time_date(&rmc_saved);
 800122e:	4628      	mov	r0, r5
 8001230:	f000 f8f6 	bl	8001420 <get_RTC_time_date>
			sendRMCDataToFlash(&rmc_saved);
 8001234:	4628      	mov	r0, r5
 8001236:	f7ff ff33 	bl	80010a0 <sendRMCDataToFlash>
 800123a:	e7b2      	b.n	80011a2 <getRMC+0x52>
			printf("\n\n------------ DATA FROM GPS MODULE IS NOT VALID YET ------------\n\n");
 800123c:	480e      	ldr	r0, [pc, #56]	@ (8001278 <getRMC+0x128>)
 800123e:	f008 fa4d 	bl	80096dc <puts>
 8001242:	e7ae      	b.n	80011a2 <getRMC+0x52>
 8001244:	20001f48 	.word	0x20001f48
 8001248:	20000264 	.word	0x20000264
 800124c:	20000420 	.word	0x20000420
 8001250:	2000036c 	.word	0x2000036c
 8001254:	20000368 	.word	0x20000368
 8001258:	200003c8 	.word	0x200003c8
 800125c:	20001ab0 	.word	0x20001ab0
 8001260:	0800da4c 	.word	0x0800da4c
 8001264:	20000370 	.word	0x20000370
 8001268:	0800daf1 	.word	0x0800daf1
 800126c:	48000800 	.word	0x48000800
 8001270:	0800db37 	.word	0x0800db37
 8001274:	0800da75 	.word	0x0800da75
 8001278:	0800daae 	.word	0x0800daae

0800127c <StartGPS>:

void StartGPS(void const * argument)
{
 800127c:	b580      	push	{r7, lr}
	printf("\n\n--------------------STARTING GPS ---------------------\n\n");
 800127e:	481c      	ldr	r0, [pc, #112]	@ (80012f0 <StartGPS+0x74>)

	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
	while(1)
	{
		if (osMutexWait(myMutexHandle, osWaitForever) == osOK){
 8001280:	4e1c      	ldr	r6, [pc, #112]	@ (80012f4 <StartGPS+0x78>)
			printf("\n\n----------------------- Inside GPS ------------------------\n\n");
 8001282:	4f1d      	ldr	r7, [pc, #116]	@ (80012f8 <StartGPS+0x7c>)
	//		uint32_t freeStack2 = osThreadGetStackSpace(GPSHandle);
	//		printf("Thread GPS %p is running low on stack: %04ld bytes remaining\n", GPSHandle, freeStack2);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001284:	4d1d      	ldr	r5, [pc, #116]	@ (80012fc <StartGPS+0x80>)
	printf("\n\n--------------------STARTING GPS ---------------------\n\n");
 8001286:	f008 fa29 	bl	80096dc <puts>
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
 800128a:	4a1d      	ldr	r2, [pc, #116]	@ (8001300 <StartGPS+0x84>)
 800128c:	491d      	ldr	r1, [pc, #116]	@ (8001304 <StartGPS+0x88>)
 800128e:	481e      	ldr	r0, [pc, #120]	@ (8001308 <StartGPS+0x8c>)
 8001290:	f44f 53b4 	mov.w	r3, #5760	@ 0x1680
 8001294:	f000 f8b6 	bl	8001404 <RingBufferDmaU8_initUSARTRx>
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8001298:	4819      	ldr	r0, [pc, #100]	@ (8001300 <StartGPS+0x84>)
 800129a:	f44f 52b4 	mov.w	r2, #5760	@ 0x1680
 800129e:	2100      	movs	r1, #0
 80012a0:	f008 fb7c 	bl	800999c <memset>
		if (osMutexWait(myMutexHandle, osWaitForever) == osOK){
 80012a4:	6830      	ldr	r0, [r6, #0]
 80012a6:	f04f 31ff 	mov.w	r1, #4294967295
 80012aa:	f004 fd24 	bl	8005cf6 <osMutexWait>
 80012ae:	4604      	mov	r4, r0
 80012b0:	2800      	cmp	r0, #0
 80012b2:	d1f7      	bne.n	80012a4 <StartGPS+0x28>
			printf("\n\n----------------------- Inside GPS ------------------------\n\n");
 80012b4:	4638      	mov	r0, r7
 80012b6:	f008 fa11 	bl	80096dc <puts>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012c0:	4628      	mov	r0, r5
 80012c2:	f002 fd87 	bl	8003dd4 <HAL_GPIO_WritePin>
			osDelay(500);
 80012c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012ca:	f004 fd05 	bl	8005cd8 <osDelay>
//			printf("Hello World!!!!\n");
			getRMC();
 80012ce:	f7ff ff3f 	bl	8001150 <getRMC>
			osMutexRelease(myMutexHandle);
 80012d2:	6830      	ldr	r0, [r6, #0]
 80012d4:	f004 fd35 	bl	8005d42 <osMutexRelease>
//		printf("\n------------------------------ GPS SENTENCE ------------------------------\n");
//		printf((char*) gpsSentence);

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80012d8:	4628      	mov	r0, r5
 80012da:	4622      	mov	r2, r4
 80012dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012e0:	f002 fd78 	bl	8003dd4 <HAL_GPIO_WritePin>
			osDelay(500);
 80012e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012e8:	f004 fcf6 	bl	8005cd8 <osDelay>
 80012ec:	e7da      	b.n	80012a4 <StartGPS+0x28>
 80012ee:	bf00      	nop
 80012f0:	0800db49 	.word	0x0800db49
 80012f4:	20001ef8 	.word	0x20001ef8
 80012f8:	0800db83 	.word	0x0800db83
 80012fc:	48000800 	.word	0x48000800
 8001300:	20000420 	.word	0x20000420
 8001304:	2000209c 	.word	0x2000209c
 8001308:	20001aa0 	.word	0x20001aa0

0800130c <printQueue_GSM>:
    q->rear = -1;
    q->size = 0;
}

// Function to print the Queue_GSM contents (for debugging)
int printQueue_GSM(Queue_GSM* q) {
 800130c:	b570      	push	{r4, r5, r6, lr}
    return q->size == 0;
 800130e:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
int printQueue_GSM(Queue_GSM* q) {
 8001312:	4604      	mov	r4, r0
    if (isEmpty_GSM(q)) {
 8001314:	b925      	cbnz	r5, 8001320 <printQueue_GSM+0x14>
        printf("Queue_GSM is empty\n");
 8001316:	4813      	ldr	r0, [pc, #76]	@ (8001364 <printQueue_GSM+0x58>)
 8001318:	f008 f9e0 	bl	80096dc <puts>
        int idx = (q->front + i) % MAX_SIZE;
        printf("Index %d: %08lx\n", i, q->data[idx]);
    }
    printf("\n");
    return q->size;
}
 800131c:	4628      	mov	r0, r5
 800131e:	bd70      	pop	{r4, r5, r6, pc}
    printf("Queue_GSM contents: \n");
 8001320:	4811      	ldr	r0, [pc, #68]	@ (8001368 <printQueue_GSM+0x5c>)
        printf("Index %d: %08lx\n", i, q->data[idx]);
 8001322:	4e12      	ldr	r6, [pc, #72]	@ (800136c <printQueue_GSM+0x60>)
    printf("Queue_GSM contents: \n");
 8001324:	f008 f9da 	bl	80096dc <puts>
    for (int i = 0; i < q->size; i++) {
 8001328:	2500      	movs	r5, #0
 800132a:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 800132e:	42ab      	cmp	r3, r5
 8001330:	dc05      	bgt.n	800133e <printQueue_GSM+0x32>
    printf("\n");
 8001332:	200a      	movs	r0, #10
 8001334:	f008 f974 	bl	8009620 <putchar>
    return q->size;
 8001338:	f8d4 5208 	ldr.w	r5, [r4, #520]	@ 0x208
 800133c:	e7ee      	b.n	800131c <printQueue_GSM+0x10>
        int idx = (q->front + i) % MAX_SIZE;
 800133e:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 8001342:	442b      	add	r3, r5
 8001344:	425a      	negs	r2, r3
 8001346:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800134a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800134e:	bf58      	it	pl
 8001350:	4253      	negpl	r3, r2
        printf("Index %d: %08lx\n", i, q->data[idx]);
 8001352:	4629      	mov	r1, r5
 8001354:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8001358:	4630      	mov	r0, r6
 800135a:	f008 f94f 	bl	80095fc <iprintf>
    for (int i = 0; i < q->size; i++) {
 800135e:	3501      	adds	r5, #1
 8001360:	e7e3      	b.n	800132a <printQueue_GSM+0x1e>
 8001362:	bf00      	nop
 8001364:	0800dbc2 	.word	0x0800dbc2
 8001368:	0800dbd5 	.word	0x0800dbd5
 800136c:	0800dbea 	.word	0x0800dbea

08001370 <deleteMiddle_GSM>:
    printf("NOT FOUND ADDRESS: %08lx\n", addr);
    return 0;
}

// Function to delete a parameter in the middle of the Queue_GSM
void deleteMiddle_GSM(Queue_GSM* q, int indexToDelete) {
 8001370:	b4f0      	push	{r4, r5, r6, r7}
    return q->size == 0;
 8001372:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
    if (isEmpty_GSM(q)) {
 8001376:	b91d      	cbnz	r5, 8001380 <deleteMiddle_GSM+0x10>
        printf("Queue_GSM is empty. Nothing to delete.\n");
 8001378:	481f      	ldr	r0, [pc, #124]	@ (80013f8 <deleteMiddle_GSM+0x88>)

    // Update rear and size
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
    q->size--;
    printf("Element at index %d deleted successfully.\n", indexToDelete);
}
 800137a:	bcf0      	pop	{r4, r5, r6, r7}
        printf("Invalid index. Cannot delete.\n");
 800137c:	f008 b9ae 	b.w	80096dc <puts>
    if (indexToDelete < 0 || indexToDelete >= q->size) {
 8001380:	2900      	cmp	r1, #0
 8001382:	db01      	blt.n	8001388 <deleteMiddle_GSM+0x18>
 8001384:	428d      	cmp	r5, r1
 8001386:	dc01      	bgt.n	800138c <deleteMiddle_GSM+0x1c>
        printf("Invalid index. Cannot delete.\n");
 8001388:	481c      	ldr	r0, [pc, #112]	@ (80013fc <deleteMiddle_GSM+0x8c>)
 800138a:	e7f6      	b.n	800137a <deleteMiddle_GSM+0xa>
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 800138c:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 8001390:	440b      	add	r3, r1
 8001392:	425a      	negs	r2, r3
 8001394:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001398:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    for (int i = 0; i < q->size - 1; i++) {
 800139c:	f04f 0600 	mov.w	r6, #0
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 80013a0:	bf58      	it	pl
 80013a2:	4253      	negpl	r3, r2
    for (int i = 0; i < q->size - 1; i++) {
 80013a4:	3d01      	subs	r5, #1
 80013a6:	42b5      	cmp	r5, r6
 80013a8:	dc0f      	bgt.n	80013ca <deleteMiddle_GSM+0x5a>
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
 80013aa:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 80013ae:	337f      	adds	r3, #127	@ 0x7f
 80013b0:	425a      	negs	r2, r3
 80013b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80013b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013ba:	bf58      	it	pl
 80013bc:	4253      	negpl	r3, r2
    q->size--;
 80013be:	e9c0 3581 	strd	r3, r5, [r0, #516]	@ 0x204
}
 80013c2:	bcf0      	pop	{r4, r5, r6, r7}
    printf("Element at index %d deleted successfully.\n", indexToDelete);
 80013c4:	480e      	ldr	r0, [pc, #56]	@ (8001400 <deleteMiddle_GSM+0x90>)
 80013c6:	f008 b919 	b.w	80095fc <iprintf>
        int currentIdx = (actualIndex + i) % MAX_SIZE;
 80013ca:	199a      	adds	r2, r3, r6
 80013cc:	4254      	negs	r4, r2
 80013ce:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 80013d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80013d6:	bf58      	it	pl
 80013d8:	4262      	negpl	r2, r4
        int nextIdx = (currentIdx + 1) % MAX_SIZE;
 80013da:	1c54      	adds	r4, r2, #1
 80013dc:	4267      	negs	r7, r4
 80013de:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 80013e2:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 80013e6:	bf58      	it	pl
 80013e8:	427c      	negpl	r4, r7
    for (int i = 0; i < q->size - 1; i++) {
 80013ea:	3601      	adds	r6, #1
        q->data[currentIdx] = q->data[nextIdx];
 80013ec:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80013f0:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
    for (int i = 0; i < q->size - 1; i++) {
 80013f4:	e7d7      	b.n	80013a6 <deleteMiddle_GSM+0x36>
 80013f6:	bf00      	nop
 80013f8:	0800dbfb 	.word	0x0800dbfb
 80013fc:	0800dc22 	.word	0x0800dc22
 8001400:	0800dc40 	.word	0x0800dc40

08001404 <RingBufferDmaU8_initUSARTRx>:
// int daychange = 0;

uint8_t message1[] = "Hello from DSS\n";

void RingBufferDmaU8_initUSARTRx(RingBufferDmaU8_TypeDef* ring, UART_HandleTypeDef* husart, uint8_t* buffer, uint16_t size) // cai dat dma
{
 8001404:	b410      	push	{r4}
 8001406:	4604      	mov	r4, r0
 8001408:	4608      	mov	r0, r1
  ring->buffer = buffer;
  ring->size = size;
 800140a:	80a3      	strh	r3, [r4, #4]
{
 800140c:	4611      	mov	r1, r2
 800140e:	461a      	mov	r2, r3
  ring->tailPtr = buffer;
  ring->dmaHandle = husart->hdmarx;
 8001410:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  ring->buffer = buffer;
 8001412:	6021      	str	r1, [r4, #0]
  ring->tailPtr = buffer;
 8001414:	60a1      	str	r1, [r4, #8]
  ring->dmaHandle = husart->hdmarx;
 8001416:	60e3      	str	r3, [r4, #12]
  HAL_UART_Receive_DMA(husart, buffer, size);
}
 8001418:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_DMA(husart, buffer, size);
 800141c:	f004 bc12 	b.w	8005c44 <HAL_UART_Receive_DMA>

08001420 <get_RTC_time_date>:
		Error_Handler();
	}
}

void get_RTC_time_date(RMCSTRUCT *rmc)
{
 8001420:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	  /* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001422:	4d19      	ldr	r5, [pc, #100]	@ (8001488 <get_RTC_time_date+0x68>)
{
 8001424:	b087      	sub	sp, #28
 8001426:	4604      	mov	r4, r0
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001428:	a901      	add	r1, sp, #4
 800142a:	2200      	movs	r2, #0
 800142c:	4628      	mov	r0, r5
 800142e:	f003 f9f1 	bl	8004814 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001432:	4669      	mov	r1, sp
 8001434:	2200      	movs	r2, #0
 8001436:	4628      	mov	r0, r5
 8001438:	f003 fa0f 	bl	800485a <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  /* Format time as "HH:MM:SS" */
	printf("%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 800143c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001440:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001444:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001448:	4810      	ldr	r0, [pc, #64]	@ (800148c <get_RTC_time_date+0x6c>)
 800144a:	f008 f8d7 	bl	80095fc <iprintf>

	/* Format date as "YYYY-MM-DD" */
	printf("20%02d-%02d-%02d\n", gDate.Year, gDate.Month, gDate.Date);
 800144e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001452:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001456:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800145a:	480d      	ldr	r0, [pc, #52]	@ (8001490 <get_RTC_time_date+0x70>)
 800145c:	f008 f8ce 	bl	80095fc <iprintf>

	rmc->date.Yr = gDate.Year;
 8001460:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001464:	61a3      	str	r3, [r4, #24]
	rmc->date.Mon = gDate.Month;
 8001466:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800146a:	6163      	str	r3, [r4, #20]
	rmc->date.Day = gDate.Date;
 800146c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001470:	6123      	str	r3, [r4, #16]
	rmc->tim.hour = gTime.Hours;
 8001472:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001476:	6023      	str	r3, [r4, #0]
	rmc->tim.min = gTime.Minutes;
 8001478:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800147c:	6063      	str	r3, [r4, #4]
	rmc->tim.sec = gTime.Seconds;
 800147e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001482:	60a3      	str	r3, [r4, #8]

	//save_rmc_to_location_info(location_info);
//	snprintf((char*)output_buffer, 128, "Time to GMT+8 saved to RMC: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc->date.Yr, rmc->date.Mon, rmc->date.Day, rmc->tim.hour, rmc->tim.min, rmc->tim.sec);
//	uart_transmit_string(&huart1, (uint8_t*) output_buffer);
}
 8001484:	b007      	add	sp, #28
 8001486:	bd30      	pop	{r4, r5, pc}
 8001488:	200022c0 	.word	0x200022c0
 800148c:	0800e16e 	.word	0x0800e16e
 8001490:	0800dc6b 	.word	0x0800dc6b

08001494 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001494:	4b03      	ldr	r3, [pc, #12]	@ (80014a4 <vApplicationGetIdleTaskMemory+0x10>)
 8001496:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <vApplicationGetIdleTaskMemory+0x14>)
 800149a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800149c:	2340      	movs	r3, #64	@ 0x40
 800149e:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20001e4c 	.word	0x20001e4c
 80014a8:	20001d4c 	.word	0x20001d4c

080014ac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80014ac:	b507      	push	{r0, r1, r2, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1000);
 80014ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 80014b2:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1000);
 80014b4:	2201      	movs	r2, #1
 80014b6:	a901      	add	r1, sp, #4
 80014b8:	4803      	ldr	r0, [pc, #12]	@ (80014c8 <__io_putchar+0x1c>)
 80014ba:	f004 fa9d 	bl	80059f8 <HAL_UART_Transmit>
  return ch;
}
 80014be:	9801      	ldr	r0, [sp, #4]
 80014c0:	b003      	add	sp, #12
 80014c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80014c6:	bf00      	nop
 80014c8:	20002124 	.word	0x20002124

080014cc <Initialize_RTC>:


void Initialize_RTC(void) {
    // Enable Power Clock
    __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	4b21      	ldr	r3, [pc, #132]	@ (8001554 <Initialize_RTC+0x88>)
void Initialize_RTC(void) {
 80014ce:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_PWR_CLK_ENABLE();
 80014d0:	69da      	ldr	r2, [r3, #28]

    // Allow access to the backup domain
    hrtc.Instance = RTC;
 80014d2:	4c21      	ldr	r4, [pc, #132]	@ (8001558 <Initialize_RTC+0x8c>)
 80014d4:	4e21      	ldr	r6, [pc, #132]	@ (800155c <Initialize_RTC+0x90>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80014da:	61da      	str	r2, [r3, #28]
 80014dc:	69db      	ldr	r3, [r3, #28]
    hrtc.Instance = RTC;
 80014de:	6026      	str	r6, [r4, #0]
void Initialize_RTC(void) {
 80014e0:	b088      	sub	sp, #32
    __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	9b01      	ldr	r3, [sp, #4]
    HAL_PWR_EnableBkUpAccess();
 80014ea:	f002 fc79 	bl	8003de0 <HAL_PWR_EnableBkUpAccess>
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != RTC_INIT_FLAG) {
 80014ee:	2101      	movs	r1, #1
 80014f0:	4620      	mov	r0, r4
 80014f2:	f003 f9d4 	bl	800489e <HAL_RTCEx_BKUPRead>
 80014f6:	f243 25f2 	movw	r5, #13042	@ 0x32f2
 80014fa:	42a8      	cmp	r0, r5
 80014fc:	d01a      	beq.n	8001534 <Initialize_RTC+0x68>
    	printf("\n--------------------------------------------- FIRST TIME RTC INITIALISATION ----------------------------------------------\n");
 80014fe:	4818      	ldr	r0, [pc, #96]	@ (8001560 <Initialize_RTC+0x94>)
 8001500:	f008 f8ec 	bl	80096dc <puts>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8001504:	2300      	movs	r3, #0
 8001506:	227f      	movs	r2, #127	@ 0x7f
 8001508:	e9c4 3201 	strd	r3, r2, [r4, #4]
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800150c:	4620      	mov	r0, r4
  hrtc.Init.SynchPrediv = 255;
 800150e:	22ff      	movs	r2, #255	@ 0xff
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001510:	e9c4 2303 	strd	r2, r3, [r4, #12]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001514:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hrtc.Instance = RTC;
 8001518:	6026      	str	r6, [r4, #0]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800151a:	f003 f92a 	bl	8004772 <HAL_RTC_Init>
 800151e:	b108      	cbz	r0, 8001524 <Initialize_RTC+0x58>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001522:	e7fe      	b.n	8001522 <Initialize_RTC+0x56>
        HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_INIT_FLAG);  // Store initialization flag
 8001524:	462a      	mov	r2, r5
 8001526:	2101      	movs	r1, #1
 8001528:	4620      	mov	r0, r4
}
 800152a:	b008      	add	sp, #32
 800152c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_INIT_FLAG);  // Store initialization flag
 8001530:	f003 b9b0 	b.w	8004894 <HAL_RTCEx_BKUPWrite>
    	printf("\n-------------------------------------------- BACK UP RTC:  GETTING RTC FROM BACK UP ----------------------------------------\n");
 8001534:	480b      	ldr	r0, [pc, #44]	@ (8001564 <Initialize_RTC+0x98>)
 8001536:	f008 f8d1 	bl	80096dc <puts>
        HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800153a:	a903      	add	r1, sp, #12
 800153c:	2200      	movs	r2, #0
 800153e:	4620      	mov	r0, r4
 8001540:	f003 f968 	bl	8004814 <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001544:	2200      	movs	r2, #0
 8001546:	a902      	add	r1, sp, #8
 8001548:	4620      	mov	r0, r4
 800154a:	f003 f986 	bl	800485a <HAL_RTC_GetDate>
}
 800154e:	b008      	add	sp, #32
 8001550:	bd70      	pop	{r4, r5, r6, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	200022c0 	.word	0x200022c0
 800155c:	40002800 	.word	0x40002800
 8001560:	0800dc7d 	.word	0x0800dc7d
 8001564:	0800dcf9 	.word	0x0800dcf9

08001568 <SystemClock_Config>:
{
 8001568:	b500      	push	{lr}
 800156a:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156c:	2228      	movs	r2, #40	@ 0x28
 800156e:	2100      	movs	r1, #0
 8001570:	a805      	add	r0, sp, #20
 8001572:	f008 fa13 	bl	800999c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001576:	2214      	movs	r2, #20
 8001578:	2100      	movs	r1, #0
 800157a:	4668      	mov	r0, sp
 800157c:	f008 fa0e 	bl	800999c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001580:	223c      	movs	r2, #60	@ 0x3c
 8001582:	2100      	movs	r1, #0
 8001584:	eb0d 0002 	add.w	r0, sp, r2
 8001588:	f008 fa08 	bl	800999c <memset>
  HAL_PWR_EnableBkUpAccess();
 800158c:	f002 fc28 	bl	8003de0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001590:	4a1d      	ldr	r2, [pc, #116]	@ (8001608 <SystemClock_Config+0xa0>)
 8001592:	6a13      	ldr	r3, [r2, #32]
 8001594:	f023 0318 	bic.w	r3, r3, #24
 8001598:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800159a:	2306      	movs	r3, #6
 800159c:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800159e:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a0:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a4:	2310      	movs	r3, #16
 80015a6:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a8:	2002      	movs	r0, #2
 80015aa:	2300      	movs	r3, #0
 80015ac:	e9cd 030c 	strd	r0, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80015b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b4:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80015b6:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f002 fc1a 	bl	8003df0 <HAL_RCC_OscConfig>
 80015bc:	4601      	mov	r1, r0
 80015be:	b108      	cbz	r0, 80015c4 <SystemClock_Config+0x5c>
 80015c0:	b672      	cpsid	i
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015c6:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ca:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ce:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015d0:	4668      	mov	r0, sp
 80015d2:	f002 fe8d 	bl	80042f0 <HAL_RCC_ClockConfig>
 80015d6:	b108      	cbz	r0, 80015dc <SystemClock_Config+0x74>
 80015d8:	b672      	cpsid	i
  while (1)
 80015da:	e7fe      	b.n	80015da <SystemClock_Config+0x72>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <SystemClock_Config+0xa4>)
 80015de:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015e0:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80015e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015e8:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80015ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ee:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80015f0:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80015f4:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f6:	f002 ff71 	bl	80044dc <HAL_RCCEx_PeriphCLKConfig>
 80015fa:	b108      	cbz	r0, 8001600 <SystemClock_Config+0x98>
 80015fc:	b672      	cpsid	i
  while (1)
 80015fe:	e7fe      	b.n	80015fe <SystemClock_Config+0x96>
}
 8001600:	b01f      	add	sp, #124	@ 0x7c
 8001602:	f85d fb04 	ldr.w	pc, [sp], #4
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000
 800160c:	00010187 	.word	0x00010187

08001610 <main>:
{
 8001610:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	4dbd      	ldr	r5, [pc, #756]	@ (8001908 <main+0x2f8>)
{
 8001614:	b0a2      	sub	sp, #136	@ 0x88
  HAL_Init();
 8001616:	f001 fc9f 	bl	8002f58 <HAL_Init>
  SystemClock_Config();
 800161a:	f7ff ffa5 	bl	8001568 <SystemClock_Config>
  	Initialize_RTC();
 800161e:	f7ff ff55 	bl	80014cc <Initialize_RTC>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	2214      	movs	r2, #20
 8001624:	2100      	movs	r1, #0
 8001626:	a81b      	add	r0, sp, #108	@ 0x6c
 8001628:	f008 f9b8 	bl	800999c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162c:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800162e:	48b7      	ldr	r0, [pc, #732]	@ (800190c <main+0x2fc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001630:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001634:	616b      	str	r3, [r5, #20]
 8001636:	696b      	ldr	r3, [r5, #20]
 8001638:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800163c:	9306      	str	r3, [sp, #24]
 800163e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001640:	696b      	ldr	r3, [r5, #20]
 8001642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001646:	616b      	str	r3, [r5, #20]
 8001648:	696b      	ldr	r3, [r5, #20]
 800164a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164e:	9307      	str	r3, [sp, #28]
 8001650:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	696b      	ldr	r3, [r5, #20]
 8001654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001658:	616b      	str	r3, [r5, #20]
 800165a:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800165c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001662:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001664:	9308      	str	r3, [sp, #32]
 8001666:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001668:	f002 fbb4 	bl	8003dd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6
 800166c:	48a7      	ldr	r0, [pc, #668]	@ (800190c <main+0x2fc>)
 800166e:	2200      	movs	r2, #0
 8001670:	f240 3156 	movw	r1, #854	@ 0x356
 8001674:	f002 fbae 	bl	8003dd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001678:	48a5      	ldr	r0, [pc, #660]	@ (8001910 <main+0x300>)
 800167a:	2200      	movs	r2, #0
 800167c:	2104      	movs	r1, #4
 800167e:	f002 fba9 	bl	8003dd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001682:	48a3      	ldr	r0, [pc, #652]	@ (8001910 <main+0x300>)
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800168a:	f002 fba3 	bl	8003dd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800169a:	f002 fb9b 	bl	8003dd4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169e:	2601      	movs	r6, #1
 80016a0:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a4:	4899      	ldr	r0, [pc, #612]	@ (800190c <main+0x2fc>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a6:	961d      	str	r6, [sp, #116]	@ 0x74
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a8:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	e9cd 361b 	strd	r3, r6, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	941e      	str	r4, [sp, #120]	@ 0x78
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b0:	f002 facc 	bl	8003c4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 80016b4:	f44f 73aa 	mov.w	r3, #340	@ 0x154
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	4894      	ldr	r0, [pc, #592]	@ (800190c <main+0x2fc>)
 80016ba:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	e9cd 361b 	strd	r3, r6, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016c0:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c8:	f002 fac0 	bl	8003c4c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	4890      	ldr	r0, [pc, #576]	@ (8001910 <main+0x300>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	941d      	str	r4, [sp, #116]	@ 0x74
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d2:	e9cd 841b 	strd	r8, r4, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016d6:	2704      	movs	r7, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	f002 fab8 	bl	8003c4c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	488c      	ldr	r0, [pc, #560]	@ (8001910 <main+0x300>)
 80016de:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e0:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	e9cd 761b 	strd	r7, r6, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016ec:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f002 faac 	bl	8003c4c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f4:	4886      	ldr	r0, [pc, #536]	@ (8001910 <main+0x300>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f6:	f8cd a078 	str.w	sl, [sp, #120]	@ 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	e9cd 961b 	strd	r9, r6, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001700:	961d      	str	r6, [sp, #116]	@ 0x74
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f002 faa3 	bl	8003c4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	a91b      	add	r1, sp, #108	@ 0x6c
 800170c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	e9cd 361b 	strd	r3, r6, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001714:	e9cd 6a1d 	strd	r6, sl, [sp, #116]	@ 0x74
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f002 fa98 	bl	8003c4c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800171c:	696b      	ldr	r3, [r5, #20]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800171e:	f8df a218 	ldr.w	sl, [pc, #536]	@ 8001938 <main+0x328>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001722:	4333      	orrs	r3, r6
 8001724:	616b      	str	r3, [r5, #20]
 8001726:	696b      	ldr	r3, [r5, #20]
 8001728:	4033      	ands	r3, r6
 800172a:	9304      	str	r3, [sp, #16]
 800172c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800172e:	696b      	ldr	r3, [r5, #20]
 8001730:	ea43 0308 	orr.w	r3, r3, r8
 8001734:	616b      	str	r3, [r5, #20]
 8001736:	696b      	ldr	r3, [r5, #20]
 8001738:	ea03 0308 	and.w	r3, r3, r8
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800173c:	4622      	mov	r2, r4
 800173e:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001740:	9305      	str	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001742:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001744:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001746:	f002 f97d 	bl	8003a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800174a:	200d      	movs	r0, #13
 800174c:	f002 f9ac 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001750:	4622      	mov	r2, r4
 8001752:	2105      	movs	r1, #5
 8001754:	200e      	movs	r0, #14
 8001756:	f002 f975 	bl	8003a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800175a:	200e      	movs	r0, #14
 800175c:	f002 f9a4 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001760:	4622      	mov	r2, r4
 8001762:	2105      	movs	r1, #5
 8001764:	200f      	movs	r0, #15
 8001766:	f002 f96d 	bl	8003a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800176a:	200f      	movs	r0, #15
 800176c:	f002 f99c 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001770:	4622      	mov	r2, r4
 8001772:	2105      	movs	r1, #5
 8001774:	2010      	movs	r0, #16
 8001776:	f002 f965 	bl	8003a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800177a:	2010      	movs	r0, #16
 800177c:	f002 f994 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8001780:	4622      	mov	r2, r4
 8001782:	2105      	movs	r1, #5
 8001784:	2038      	movs	r0, #56	@ 0x38
 8001786:	f002 f95d 	bl	8003a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800178a:	2038      	movs	r0, #56	@ 0x38
 800178c:	f002 f98c 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8001790:	4622      	mov	r2, r4
 8001792:	2105      	movs	r1, #5
 8001794:	203c      	movs	r0, #60	@ 0x3c
 8001796:	f002 f955 	bl	8003a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800179a:	203c      	movs	r0, #60	@ 0x3c
 800179c:	f002 f984 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 80017a0:	485c      	ldr	r0, [pc, #368]	@ (8001914 <main+0x304>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017a2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80017a6:	e9c0 a300 	strd	sl, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017aa:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ae:	e9c0 3403 	strd	r3, r4, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80017b2:	2510      	movs	r5, #16
 80017b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017b8:	e9c0 3506 	strd	r3, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 80017bc:	2307      	movs	r3, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017be:	e9c0 340b 	strd	r3, r4, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017c2:	2308      	movs	r3, #8
 80017c4:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017c6:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ca:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017cc:	6144      	str	r4, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ce:	6284      	str	r4, [r0, #40]	@ 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017d0:	f003 f979 	bl	8004ac6 <HAL_SPI_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	b108      	cbz	r0, 80017dc <main+0x1cc>
 80017d8:	b672      	cpsid	i
  while (1)
 80017da:	e7fe      	b.n	80017da <main+0x1ca>
  huart1.Instance = USART1;
 80017dc:	484e      	ldr	r0, [pc, #312]	@ (8001918 <main+0x308>)
  huart1.Init.BaudRate = 115200;
 80017de:	4a4f      	ldr	r2, [pc, #316]	@ (800191c <main+0x30c>)
  huart1.Init.Parity = UART_PARITY_NONE;
 80017e0:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 80017e2:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017e6:	f04f 0a0c 	mov.w	sl, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ea:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ee:	e9c0 a305 	strd	sl, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f2:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f6:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 80017f8:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017fc:	f004 f9a6 	bl	8005b4c <HAL_UART_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	b108      	cbz	r0, 8001808 <main+0x1f8>
 8001804:	b672      	cpsid	i
  while (1)
 8001806:	e7fe      	b.n	8001806 <main+0x1f6>
  huart2.Instance = USART2;
 8001808:	4845      	ldr	r0, [pc, #276]	@ (8001920 <main+0x310>)
  huart2.Init.BaudRate = 9600;
 800180a:	f8df e130 	ldr.w	lr, [pc, #304]	@ 800193c <main+0x32c>
 800180e:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001812:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001816:	e9c0 3a04 	strd	r3, sl, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800181a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800181e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 8001822:	e9c0 e200 	strd	lr, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001826:	f004 f991 	bl	8005b4c <HAL_UART_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	b108      	cbz	r0, 8001832 <main+0x222>
 800182e:	b672      	cpsid	i
  while (1)
 8001830:	e7fe      	b.n	8001830 <main+0x220>
  huart3.Instance = USART3;
 8001832:	483c      	ldr	r0, [pc, #240]	@ (8001924 <main+0x314>)
 8001834:	4a3c      	ldr	r2, [pc, #240]	@ (8001928 <main+0x318>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001836:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 800183a:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800183e:	e9c0 3a04 	strd	r3, sl, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001842:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001846:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800184a:	f004 f97f 	bl	8005b4c <HAL_UART_Init>
 800184e:	4604      	mov	r4, r0
 8001850:	b108      	cbz	r0, 8001856 <main+0x246>
 8001852:	b672      	cpsid	i
  while (1)
 8001854:	e7fe      	b.n	8001854 <main+0x244>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001856:	462a      	mov	r2, r5
 8001858:	4601      	mov	r1, r0
 800185a:	a81b      	add	r0, sp, #108	@ 0x6c
 800185c:	f008 f89e 	bl	800999c <memset>
  htim3.Instance = TIM3;
 8001860:	4d32      	ldr	r5, [pc, #200]	@ (800192c <main+0x31c>)
  htim3.Init.Prescaler = 8000;
 8001862:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 8001940 <main+0x330>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001866:	9416      	str	r4, [sp, #88]	@ 0x58
  htim3.Init.Prescaler = 8000;
 8001868:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800186c:	e9c5 c300 	strd	ip, r3, [r5]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001870:	4628      	mov	r0, r5
  htim3.Init.Period = 65535;
 8001872:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001876:	e9cd 4414 	strd	r4, r4, [sp, #80]	@ 0x50
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187a:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001882:	f003 fd7d 	bl	8005380 <HAL_TIM_Base_Init>
 8001886:	b108      	cbz	r0, 800188c <main+0x27c>
 8001888:	b672      	cpsid	i
  while (1)
 800188a:	e7fe      	b.n	800188a <main+0x27a>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800188c:	a91b      	add	r1, sp, #108	@ 0x6c
 800188e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001890:	f8cd 906c 	str.w	r9, [sp, #108]	@ 0x6c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001894:	f003 fdae 	bl	80053f4 <HAL_TIM_ConfigClockSource>
 8001898:	b108      	cbz	r0, 800189e <main+0x28e>
 800189a:	b672      	cpsid	i
  while (1)
 800189c:	e7fe      	b.n	800189c <main+0x28c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189e:	9014      	str	r0, [sp, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a0:	9016      	str	r0, [sp, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018a2:	a914      	add	r1, sp, #80	@ 0x50
 80018a4:	4628      	mov	r0, r5
 80018a6:	f003 fe3f 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 80018aa:	4605      	mov	r5, r0
 80018ac:	b108      	cbz	r0, 80018b2 <main+0x2a2>
 80018ae:	b672      	cpsid	i
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <main+0x2a0>
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018b2:	4c1f      	ldr	r4, [pc, #124]	@ (8001930 <main+0x320>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80018b4:	4601      	mov	r1, r0
 80018b6:	2218      	movs	r2, #24
 80018b8:	a81b      	add	r0, sp, #108	@ 0x6c
 80018ba:	f008 f86f 	bl	800999c <memset>
  hadc2.Instance = ADC2;
 80018be:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <main+0x324>)
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018c0:	f884 5020 	strb.w	r5, [r4, #32]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018c4:	4620      	mov	r0, r4
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018c6:	e9c4 650a 	strd	r6, r5, [r4, #40]	@ 0x28
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018ca:	e9c4 3500 	strd	r3, r5, [r4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ce:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018d2:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hadc2.Init.NbrOfConversion = 1;
 80018d6:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80018d8:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80018dc:	8325      	strh	r5, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018de:	6365      	str	r5, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018e0:	f001 fb94 	bl	800300c <HAL_ADC_Init>
 80018e4:	b108      	cbz	r0, 80018ea <main+0x2da>
 80018e6:	b672      	cpsid	i
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <main+0x2d8>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018ea:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  sConfig.Offset = 0;
 80018ee:	e9cd 001f 	strd	r0, r0, [sp, #124]	@ 0x7c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018f2:	a91b      	add	r1, sp, #108	@ 0x6c
 80018f4:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018f6:	e9cd 861b 	strd	r8, r6, [sp, #108]	@ 0x6c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018fa:	f001 fe89 	bl	8003610 <HAL_ADC_ConfigChannel>
 80018fe:	4604      	mov	r4, r0
 8001900:	b300      	cbz	r0, 8001944 <main+0x334>
 8001902:	b672      	cpsid	i
  while (1)
 8001904:	e7fe      	b.n	8001904 <main+0x2f4>
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000
 800190c:	48000800 	.word	0x48000800
 8001910:	48000400 	.word	0x48000400
 8001914:	2000225c 	.word	0x2000225c
 8001918:	20002124 	.word	0x20002124
 800191c:	40013800 	.word	0x40013800
 8001920:	2000209c 	.word	0x2000209c
 8001924:	20002014 	.word	0x20002014
 8001928:	40004800 	.word	0x40004800
 800192c:	200021ac 	.word	0x200021ac
 8001930:	200023b8 	.word	0x200023b8
 8001934:	50000100 	.word	0x50000100
 8001938:	40013000 	.word	0x40013000
 800193c:	40004400 	.word	0x40004400
 8001940:	40000400 	.word	0x40000400
  ADC_MultiModeTypeDef multimode = {0};
 8001944:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
 8001948:	9016      	str	r0, [sp, #88]	@ 0x58
  ADC_ChannelConfTypeDef sConfig = {0};
 800194a:	4601      	mov	r1, r0
 800194c:	2218      	movs	r2, #24
 800194e:	a81b      	add	r0, sp, #108	@ 0x6c
 8001950:	f008 f824 	bl	800999c <memset>
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001954:	484a      	ldr	r0, [pc, #296]	@ (8001a80 <main+0x470>)
  hadc3.Instance = ADC3;
 8001956:	4b4b      	ldr	r3, [pc, #300]	@ (8001a84 <main+0x474>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001958:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800195c:	e9c0 640a 	strd	r6, r4, [r0, #40]	@ 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001960:	e9c0 3400 	strd	r3, r4, [r0]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001964:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001968:	e9c0 4704 	strd	r4, r7, [r0, #16]
  hadc3.Init.NbrOfConversion = 1;
 800196c:	61c6      	str	r6, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800196e:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001972:	8304      	strh	r4, [r0, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001974:	6344      	str	r4, [r0, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001976:	f001 fb49 	bl	800300c <HAL_ADC_Init>
 800197a:	b108      	cbz	r0, 8001980 <main+0x370>
 800197c:	b672      	cpsid	i
  while (1)
 800197e:	e7fe      	b.n	800197e <main+0x36e>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001980:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001982:	483f      	ldr	r0, [pc, #252]	@ (8001a80 <main+0x470>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001984:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001986:	a914      	add	r1, sp, #80	@ 0x50
 8001988:	f001 ffc6 	bl	8003918 <HAL_ADCEx_MultiModeConfigChannel>
 800198c:	b108      	cbz	r0, 8001992 <main+0x382>
 800198e:	b672      	cpsid	i
  while (1)
 8001990:	e7fe      	b.n	8001990 <main+0x380>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001992:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001994:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  sConfig.Offset = 0;
 8001998:	e9cd 001f 	strd	r0, r0, [sp, #124]	@ 0x7c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800199c:	2401      	movs	r4, #1
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800199e:	4838      	ldr	r0, [pc, #224]	@ (8001a80 <main+0x470>)
 80019a0:	a91b      	add	r1, sp, #108	@ 0x6c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019a2:	e9cd 341b 	strd	r3, r4, [sp, #108]	@ 0x6c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019a6:	f001 fe33 	bl	8003610 <HAL_ADC_ConfigChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b108      	cbz	r0, 80019b2 <main+0x3a2>
 80019ae:	b672      	cpsid	i
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <main+0x3a0>
  hspi2.Instance = SPI2;
 80019b2:	4835      	ldr	r0, [pc, #212]	@ (8001a88 <main+0x478>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019b4:	4d35      	ldr	r5, [pc, #212]	@ (8001a8c <main+0x47c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019b6:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019bc:	e9c0 5200 	strd	r5, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80019c0:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c4:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019cc:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 80019d0:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019d6:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019da:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019dc:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019de:	2308      	movs	r3, #8
 80019e0:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019e2:	f003 f870 	bl	8004ac6 <HAL_SPI_Init>
 80019e6:	4605      	mov	r5, r0
 80019e8:	b108      	cbz	r0, 80019ee <main+0x3de>
 80019ea:	b672      	cpsid	i
  while (1)
 80019ec:	e7fe      	b.n	80019ec <main+0x3dc>
  osMutexDef(myMutex);
 80019ee:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  myMutexHandle = osMutexCreate(osMutex(myMutex));
 80019f2:	a809      	add	r0, sp, #36	@ 0x24
 80019f4:	f004 f978 	bl	8005ce8 <osMutexCreate>
 80019f8:	4b25      	ldr	r3, [pc, #148]	@ (8001a90 <main+0x480>)
  osMailQDef(GSM_MailQ, 32, GSM_MAIL_STRUCT);
 80019fa:	2220      	movs	r2, #32
  myMutexHandle = osMutexCreate(osMutex(myMutex));
 80019fc:	6018      	str	r0, [r3, #0]
  osMailQDef(GSM_MailQ, 32, GSM_MAIL_STRUCT);
 80019fe:	2360      	movs	r3, #96	@ 0x60
 8001a00:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
  RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8001a04:	4629      	mov	r1, r5
  osMailQDef(GSM_MailQ, 32, GSM_MAIL_STRUCT);
 8001a06:	ab01      	add	r3, sp, #4
  RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8001a08:	a80b      	add	r0, sp, #44	@ 0x2c
  osMailQDef(GSM_MailQ, 32, GSM_MAIL_STRUCT);
 8001a0a:	930d      	str	r3, [sp, #52]	@ 0x34
  RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8001a0c:	f004 fa34 	bl	8005e78 <osMailCreate>
 8001a10:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <main+0x484>)
  osMailQDef(FLASH_MailQ, 5, RMCSTRUCT);
 8001a12:	2105      	movs	r1, #5
  RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8001a14:	6018      	str	r0, [r3, #0]
  osMailQDef(FLASH_MailQ, 5, RMCSTRUCT);
 8001a16:	2358      	movs	r3, #88	@ 0x58
 8001a18:	e9cd 130e 	strd	r1, r3, [sp, #56]	@ 0x38
  RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8001a1c:	a80e      	add	r0, sp, #56	@ 0x38
  osMailQDef(FLASH_MailQ, 5, RMCSTRUCT);
 8001a1e:	ab02      	add	r3, sp, #8
  RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8001a20:	4629      	mov	r1, r5
  osMailQDef(FLASH_MailQ, 5, RMCSTRUCT);
 8001a22:	9310      	str	r3, [sp, #64]	@ 0x40
  RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8001a24:	f004 fa28 	bl	8005e78 <osMailCreate>
 8001a28:	4b1b      	ldr	r3, [pc, #108]	@ (8001a98 <main+0x488>)
  osMailQDef(Tax_MailQ, 1, TAX_MAIL_STRUCT);
 8001a2a:	9411      	str	r4, [sp, #68]	@ 0x44
  RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8001a2c:	6018      	str	r0, [r3, #0]
  osMailQDef(Tax_MailQ, 1, TAX_MAIL_STRUCT);
 8001a2e:	2380      	movs	r3, #128	@ 0x80
 8001a30:	9312      	str	r3, [sp, #72]	@ 0x48
  tax_MailQId = osMailCreate(osMailQ(Tax_MailQ), NULL);
 8001a32:	4629      	mov	r1, r5
  osMailQDef(Tax_MailQ, 1, TAX_MAIL_STRUCT);
 8001a34:	ab03      	add	r3, sp, #12
  tax_MailQId = osMailCreate(osMailQ(Tax_MailQ), NULL);
 8001a36:	a811      	add	r0, sp, #68	@ 0x44
  osMailQDef(Tax_MailQ, 1, TAX_MAIL_STRUCT);
 8001a38:	9313      	str	r3, [sp, #76]	@ 0x4c
  tax_MailQId = osMailCreate(osMailQ(Tax_MailQ), NULL);
 8001a3a:	f004 fa1d 	bl	8005e78 <osMailCreate>
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityLow, 0, 1280);
 8001a3e:	4c17      	ldr	r4, [pc, #92]	@ (8001a9c <main+0x48c>)
  tax_MailQId = osMailCreate(osMailQ(Tax_MailQ), NULL);
 8001a40:	4b17      	ldr	r3, [pc, #92]	@ (8001aa0 <main+0x490>)
 8001a42:	6018      	str	r0, [r3, #0]
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityLow, 0, 1280);
 8001a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a46:	ae14      	add	r6, sp, #80	@ 0x50
 8001a48:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001a4a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a4e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 8001a52:	4629      	mov	r1, r5
 8001a54:	a814      	add	r0, sp, #80	@ 0x50
 8001a56:	f004 f917 	bl	8005c88 <osThreadCreate>
 8001a5a:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <main+0x494>)
  osThreadDef(GPS, StartGPS, osPriorityLow, 0, 480);
 8001a5c:	340c      	adds	r4, #12
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 8001a5e:	6018      	str	r0, [r3, #0]
  osThreadDef(GPS, StartGPS, osPriorityLow, 0, 480);
 8001a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a62:	ae1b      	add	r6, sp, #108	@ 0x6c
 8001a64:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001a66:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a6a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8001a6e:	4629      	mov	r1, r5
 8001a70:	a81b      	add	r0, sp, #108	@ 0x6c
 8001a72:	f004 f909 	bl	8005c88 <osThreadCreate>
 8001a76:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <main+0x498>)
 8001a78:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001a7a:	f004 f900 	bl	8005c7e <osKernelStart>
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <main+0x46e>
 8001a80:	20002368 	.word	0x20002368
 8001a84:	50000400 	.word	0x50000400
 8001a88:	200021f8 	.word	0x200021f8
 8001a8c:	40003800 	.word	0x40003800
 8001a90:	20001ef8 	.word	0x20001ef8
 8001a94:	20001eec 	.word	0x20001eec
 8001a98:	20001ef0 	.word	0x20001ef0
 8001a9c:	0800d808 	.word	0x0800d808
 8001aa0:	20001ef4 	.word	0x20001ef4
 8001aa4:	20001f00 	.word	0x20001f00
 8001aa8:	20001efc 	.word	0x20001efc

08001aac <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 8001aac:	6803      	ldr	r3, [r0, #0]
 8001aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ab2:	d101      	bne.n	8001ab8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001ab4:	f001 ba62 	b.w	8002f7c <HAL_IncTick>
}
 8001ab8:	4770      	bx	lr

08001aba <Error_Handler>:
 8001aba:	b672      	cpsid	i
  while (1)
 8001abc:	e7fe      	b.n	8001abc <Error_Handler+0x2>
	...

08001ac0 <W25_ReadStatusReg1>:
	W25_CS_DISABLE();
	W25_DelayWhileBusy(CHIP_ERASE_TIMEOUT);
	return retval;
} // W25_ChipErase()

uint8_t W25_ReadStatusReg1(void) {
 8001ac0:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 8001ac2:	2305      	movs	r3, #5
	uint8_t status_reg1;
	int retval;
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001aca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 8001ace:	f88d 3006 	strb.w	r3, [sp, #6]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001ad2:	f002 f97f 	bl	8003dd4 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Read Status Reg 1 command
 8001ad6:	4810      	ldr	r0, [pc, #64]	@ (8001b18 <W25_ReadStatusReg1+0x58>)
 8001ad8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001adc:	2201      	movs	r2, #1
 8001ade:	f10d 0106 	add.w	r1, sp, #6
 8001ae2:	f003 f85e 	bl	8004ba2 <HAL_SPI_Transmit>
	if(retval == HAL_OK)
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	b940      	cbnz	r0, 8001afc <W25_ReadStatusReg1+0x3c>
	retval = HAL_SPI_Receive(&hspi1, &status_reg1, sizeof(status_reg1), TIMEOUT);
 8001aea:	480b      	ldr	r0, [pc, #44]	@ (8001b18 <W25_ReadStatusReg1+0x58>)
 8001aec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001af0:	2201      	movs	r2, #1
 8001af2:	f10d 0107 	add.w	r1, sp, #7
 8001af6:	f003 fa4e 	bl	8004f96 <HAL_SPI_Receive>
 8001afa:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8001afc:	2201      	movs	r2, #1
 8001afe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b06:	f002 f965 	bl	8003dd4 <HAL_GPIO_WritePin>
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 8001b0a:	b91c      	cbnz	r4, 8001b14 <W25_ReadStatusReg1+0x54>
 8001b0c:	f89d 0007 	ldrb.w	r0, [sp, #7]
} // W25_ReadStatusReg1()
 8001b10:	b002      	add	sp, #8
 8001b12:	bd10      	pop	{r4, pc}
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 8001b14:	20ff      	movs	r0, #255	@ 0xff
 8001b16:	e7fb      	b.n	8001b10 <W25_ReadStatusReg1+0x50>
 8001b18:	2000225c 	.word	0x2000225c

08001b1c <W25_Busy>:

int W25_Busy(void)
{
 8001b1c:	b508      	push	{r3, lr}
	return (W25_ReadStatusReg1() & W25_STATUS1_BUSY);
 8001b1e:	f7ff ffcf 	bl	8001ac0 <W25_ReadStatusReg1>
}
 8001b22:	f000 0001 	and.w	r0, r0, #1
 8001b26:	bd08      	pop	{r3, pc}

08001b28 <W25_DelayWhileBusy>:

int W25_DelayWhileBusy(uint32_t msTimeout)
{
 8001b28:	b570      	push	{r4, r5, r6, lr}
 8001b2a:	4605      	mov	r5, r0
	uint32_t initial_count = HAL_GetTick();
 8001b2c:	f001 fa32 	bl	8002f94 <HAL_GetTick>
 8001b30:	4606      	mov	r6, r0
	int busy;
	uint32_t deltaticks;
	uint32_t count = 0;
	do {
	busy = W25_Busy();
 8001b32:	f7ff fff3 	bl	8001b1c <W25_Busy>
 8001b36:	4604      	mov	r4, r0
	deltaticks = HAL_GetTick() - initial_count;
 8001b38:	f001 fa2c 	bl	8002f94 <HAL_GetTick>
 8001b3c:	1b83      	subs	r3, r0, r6
	count++;
	} while(busy && deltaticks < msTimeout);
 8001b3e:	b114      	cbz	r4, 8001b46 <W25_DelayWhileBusy+0x1e>
 8001b40:	42ab      	cmp	r3, r5
 8001b42:	d3f6      	bcc.n	8001b32 <W25_DelayWhileBusy+0xa>
	int retval = busy ? HAL_TIMEOUT:HAL_OK;
 8001b44:	2403      	movs	r4, #3
	return retval;
}
 8001b46:	4620      	mov	r0, r4
 8001b48:	bd70      	pop	{r4, r5, r6, pc}

08001b4a <W25_Reset>:
void W25_Reset(){
 8001b4a:	b508      	push	{r3, lr}
	W25_CS_ENABLE();
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b56:	f002 f93d 	bl	8003dd4 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b64:	f002 f936 	bl	8003dd4 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b72:	f002 f92f 	bl	8003dd4 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 8001b76:	2201      	movs	r2, #1
 8001b78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b80:	f002 f928 	bl	8003dd4 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8001b84:	2200      	movs	r2, #0
 8001b86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b8e:	f002 f921 	bl	8003dd4 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
}
 8001b92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	W25_CS_DISABLE();
 8001b96:	2201      	movs	r2, #1
 8001b98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba0:	f002 b918 	b.w	8003dd4 <HAL_GPIO_WritePin>

08001ba4 <W25_ReadJedecID>:

int W25_ReadJedecID() {
 8001ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba6:	b08d      	sub	sp, #52	@ 0x34
	int retval;
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8001ba8:	239f      	movs	r3, #159	@ 0x9f
	uint8_t jdec_id[4];
	char result[11];
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001baa:	2200      	movs	r2, #0
 8001bac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8001bb4:	f88d 300b 	strb.w	r3, [sp, #11]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001bb8:	f002 f90c 	bl	8003dd4 <HAL_GPIO_WritePin>
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8001bbc:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	aa03      	add	r2, sp, #12
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	f10d 010b 	add.w	r1, sp, #11
 8001bca:	4820      	ldr	r0, [pc, #128]	@ (8001c4c <W25_ReadJedecID+0xa8>)
 8001bcc:	f003 f8b3 	bl	8004d36 <HAL_SPI_TransmitReceive>
	W25_CS_DISABLE();
 8001bd0:	2201      	movs	r2, #1
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8001bd2:	4605      	mov	r5, r0
	W25_CS_DISABLE();
 8001bd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bdc:	f002 f8fa 	bl	8003dd4 <HAL_GPIO_WritePin>
	char spi_flash_intro[] = "Flash ID received: ";
 8001be0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c50 <W25_ReadJedecID+0xac>)
 8001be2:	aa07      	add	r2, sp, #28
 8001be4:	f103 0710 	add.w	r7, r3, #16
 8001be8:	4616      	mov	r6, r2
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	6859      	ldr	r1, [r3, #4]
 8001bee:	4614      	mov	r4, r2
 8001bf0:	c403      	stmia	r4!, {r0, r1}
 8001bf2:	3308      	adds	r3, #8
 8001bf4:	42bb      	cmp	r3, r7
 8001bf6:	4622      	mov	r2, r4
 8001bf8:	d1f7      	bne.n	8001bea <W25_ReadJedecID+0x46>
 8001bfa:	6818      	ldr	r0, [r3, #0]
 8001bfc:	6020      	str	r0, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_intro, strlen(spi_flash_intro), 1000);
 8001bfe:	4630      	mov	r0, r6
 8001c00:	f7fe fb46 	bl	8000290 <strlen>
 8001c04:	4631      	mov	r1, r6
 8001c06:	b282      	uxth	r2, r0
 8001c08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c0c:	4811      	ldr	r0, [pc, #68]	@ (8001c54 <W25_ReadJedecID+0xb0>)
 8001c0e:	f003 fef3 	bl	80059f8 <HAL_UART_Transmit>

	sprintf(result, "%02X, %02X, %02X", jdec_id[1], jdec_id[2], jdec_id[3]);
 8001c12:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001c16:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	490e      	ldr	r1, [pc, #56]	@ (8001c58 <W25_ReadJedecID+0xb4>)
 8001c1e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001c22:	a804      	add	r0, sp, #16
 8001c24:	f007 fd96 	bl	8009754 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) result, 11, 1000);
 8001c28:	a904      	add	r1, sp, #16
 8001c2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c2e:	220b      	movs	r2, #11
 8001c30:	4808      	ldr	r0, [pc, #32]	@ (8001c54 <W25_ReadJedecID+0xb0>)
 8001c32:	f003 fee1 	bl	80059f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 8001c36:	4909      	ldr	r1, [pc, #36]	@ (8001c5c <W25_ReadJedecID+0xb8>)
 8001c38:	4806      	ldr	r0, [pc, #24]	@ (8001c54 <W25_ReadJedecID+0xb0>)
 8001c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f003 feda 	bl	80059f8 <HAL_UART_Transmit>
	return retval;
} // W25_ReadJEDECID()
 8001c44:	4628      	mov	r0, r5
 8001c46:	b00d      	add	sp, #52	@ 0x34
 8001c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2000225c 	.word	0x2000225c
 8001c50:	0800dd95 	.word	0x0800dd95
 8001c54:	20002124 	.word	0x20002124
 8001c58:	0800dd84 	.word	0x0800dd84
 8001c5c:	0800dfb1 	.word	0x0800dfb1

08001c60 <W25_WriteEnable>:

	return retval;
} // W25_ReadUniqueID()


int W25_WriteEnable(void) {
 8001c60:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8001c62:	2306      	movs	r3, #6
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8001c6e:	f88d 3007 	strb.w	r3, [sp, #7]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001c72:	f002 f8af 	bl	8003dd4 <HAL_GPIO_WritePin>
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 8001c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c7a:	f10d 0107 	add.w	r1, sp, #7
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4806      	ldr	r0, [pc, #24]	@ (8001c9c <W25_WriteEnable+0x3c>)
 8001c82:	f002 ff8e 	bl	8004ba2 <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8001c86:	2201      	movs	r2, #1
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 8001c88:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8001c8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c92:	f002 f89f 	bl	8003dd4 <HAL_GPIO_WritePin>
	return retval;
} // W25_WriteEnable()
 8001c96:	4620      	mov	r0, r4
 8001c98:	b002      	add	sp, #8
 8001c9a:	bd10      	pop	{r4, pc}
 8001c9c:	2000225c 	.word	0x2000225c

08001ca0 <W25_SectorErase>:

int W25_SectorErase(uint32_t address)
{
 8001ca0:	b513      	push	{r0, r1, r4, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_SECTOR_ERASE,address>>16,address>>8,address};
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	f88d 3004 	strb.w	r3, [sp, #4]
 8001ca8:	0c03      	lsrs	r3, r0, #16
 8001caa:	ba40      	rev16	r0, r0
 8001cac:	f88d 3005 	strb.w	r3, [sp, #5]
 8001cb0:	f8ad 0006 	strh.w	r0, [sp, #6]
	W25_WriteEnable(); // Make sure we can write...
 8001cb4:	f7ff ffd4 	bl	8001c60 <W25_WriteEnable>
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc2:	f002 f887 	bl	8003dd4 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ccc:	eb0d 0102 	add.w	r1, sp, r2
 8001cd0:	4808      	ldr	r0, [pc, #32]	@ (8001cf4 <W25_SectorErase+0x54>)
 8001cd2:	f002 ff66 	bl	8004ba2 <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8001cd6:	2201      	movs	r2, #1
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8001cd8:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8001cda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ce2:	f002 f877 	bl	8003dd4 <HAL_GPIO_WritePin>
	W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 8001ce6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cea:	f7ff ff1d 	bl	8001b28 <W25_DelayWhileBusy>
	return retval;
} // W25_SectorErase()
 8001cee:	4620      	mov	r0, r4
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd10      	pop	{r4, pc}
 8001cf4:	2000225c 	.word	0x2000225c

08001cf8 <W25_PageProgram>:

int W25_PageProgram(uint32_t address, uint8_t *buf, uint32_t count)
{
 8001cf8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001cfc:	4606      	mov	r6, r0
 8001cfe:	4688      	mov	r8, r1
 8001d00:	4617      	mov	r7, r2
	int retval = HAL_OK;
	W25_WriteEnable(); // Make sure we can write...
 8001d02:	f7ff ffad 	bl	8001c60 <W25_WriteEnable>
	while(count) {
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 8001d06:	f8df a080 	ldr.w	sl, [pc, #128]	@ 8001d88 <W25_PageProgram+0x90>
	int retval = HAL_OK;
 8001d0a:	2400      	movs	r4, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8001d0c:	f04f 0902 	mov.w	r9, #2
	while(count) {
 8001d10:	b91f      	cbnz	r7, 8001d1a <W25_PageProgram+0x22>
		address += count_this_pass;
		buf += count_this_pass;
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
	}
	return retval;
} 
 8001d12:	4620      	mov	r0, r4
 8001d14:	b002      	add	sp, #8
 8001d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8001d1a:	b2f5      	uxtb	r5, r6
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8001d1c:	0c33      	lsrs	r3, r6, #16
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8001d1e:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8001d22:	42bd      	cmp	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8001d24:	f88d 3005 	strb.w	r3, [sp, #5]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001d28:	f04f 0200 	mov.w	r2, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8001d2c:	ba73      	rev16	r3, r6
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001d2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8001d36:	f8ad 3006 	strh.w	r3, [sp, #6]
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8001d3a:	bf28      	it	cs
 8001d3c:	463d      	movcs	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8001d3e:	f88d 9004 	strb.w	r9, [sp, #4]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001d42:	f002 f847 	bl	8003dd4 <HAL_GPIO_WritePin>
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 8001d46:	2204      	movs	r2, #4
 8001d48:	480f      	ldr	r0, [pc, #60]	@ (8001d88 <W25_PageProgram+0x90>)
 8001d4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d4e:	eb0d 0102 	add.w	r1, sp, r2
 8001d52:	f002 ff26 	bl	8004ba2 <HAL_SPI_Transmit>
		if(retval == HAL_OK)
 8001d56:	4604      	mov	r4, r0
 8001d58:	b938      	cbnz	r0, 8001d6a <W25_PageProgram+0x72>
		  retval = HAL_SPI_Transmit(&hspi1, buf, count_this_pass, TIMEOUT); // Write page data
 8001d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d5e:	b2aa      	uxth	r2, r5
 8001d60:	4641      	mov	r1, r8
 8001d62:	4650      	mov	r0, sl
 8001d64:	f002 ff1d 	bl	8004ba2 <HAL_SPI_Transmit>
 8001d68:	4604      	mov	r4, r0
		W25_CS_DISABLE();
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d74:	f002 f82e 	bl	8003dd4 <HAL_GPIO_WritePin>
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8001d78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		count -= count_this_pass;
 8001d7c:	1b7f      	subs	r7, r7, r5
		address += count_this_pass;
 8001d7e:	442e      	add	r6, r5
		buf += count_this_pass;
 8001d80:	44a8      	add	r8, r5
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8001d82:	f7ff fed1 	bl	8001b28 <W25_DelayWhileBusy>
 8001d86:	e7c3      	b.n	8001d10 <W25_PageProgram+0x18>
 8001d88:	2000225c 	.word	0x2000225c

08001d8c <W25_ReadData>:

// Winbond 8.2.6 Read Data (03h)
// The only limit for quantity of data is memory / device size
int W25_ReadData(uint32_t address, uint8_t *buf, int bufSize)
{
 8001d8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8001d8e:	2303      	movs	r3, #3
 8001d90:	f88d 3004 	strb.w	r3, [sp, #4]
 8001d94:	0c03      	lsrs	r3, r0, #16
 8001d96:	ba40      	rev16	r0, r0
 8001d98:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 8001d9c:	460d      	mov	r5, r1
	//printf("+%s(Addr 0x%06X, buf 0x%08X, Len 0x%04X)\r\n",__func__,address,buf,bufSize);
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
{
 8001da6:	4616      	mov	r6, r2
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001da8:	2200      	movs	r2, #0
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8001daa:	f88d 3005 	strb.w	r3, [sp, #5]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001dae:	f002 f811 	bl	8003dd4 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), 500); // Send Read Data command with address
 8001db2:	2204      	movs	r2, #4
 8001db4:	480d      	ldr	r0, [pc, #52]	@ (8001dec <W25_ReadData+0x60>)
 8001db6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001dba:	eb0d 0102 	add.w	r1, sp, r2
 8001dbe:	f002 fef0 	bl	8004ba2 <HAL_SPI_Transmit>
	if(retval != HAL_OK) {
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	b978      	cbnz	r0, 8001de6 <W25_ReadData+0x5a>
		return retval;
	}
	//memset(buf,0,bufSize); // Buffer is transmitted during receive
	retval = HAL_SPI_Receive(&hspi1, buf, bufSize, 2000); // need longer time-outs when using slow SPI clock
 8001dc6:	4809      	ldr	r0, [pc, #36]	@ (8001dec <W25_ReadData+0x60>)
 8001dc8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001dcc:	b2b2      	uxth	r2, r6
 8001dce:	4629      	mov	r1, r5
 8001dd0:	f003 f8e1 	bl	8004f96 <HAL_SPI_Receive>
	if(retval != HAL_OK)
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	b130      	cbz	r0, 8001de6 <W25_ReadData+0x5a>

	W25_CS_DISABLE();
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001de2:	f001 fff7 	bl	8003dd4 <HAL_GPIO_WritePin>

	return retval;
} // W25_ReadData()
 8001de6:	4620      	mov	r0, r4
 8001de8:	b002      	add	sp, #8
 8001dea:	bd70      	pop	{r4, r5, r6, pc}
 8001dec:	2000225c 	.word	0x2000225c

08001df0 <IsPageValid>:


// Function to check if a page contains valid data
int IsPageValid(uint8_t *page) {
 8001df0:	b510      	push	{r4, lr}
    char *last_semicolon = strrchr((char *)page, ';'); // Find the last semicolon
 8001df2:	213b      	movs	r1, #59	@ 0x3b
 8001df4:	f007 fe0c 	bl	8009a10 <strrchr>
    if (!last_semicolon) {
 8001df8:	4604      	mov	r4, r0
 8001dfa:	b1a0      	cbz	r0, 8001e26 <IsPageValid+0x36>
        return 0; // No semicolon found, invalid page
    }

    char *last_param = last_semicolon + 1; // Last parameter starts after the last semicolon
    size_t len = strlen(last_param);
 8001dfc:	3001      	adds	r0, #1
 8001dfe:	f7fe fa47 	bl	8000290 <strlen>

    // Ensure the last parameter is exactly 6 characters and numeric
    if (len < 6) {
 8001e02:	2805      	cmp	r0, #5
 8001e04:	d90f      	bls.n	8001e26 <IsPageValid+0x36>
 8001e06:	1da2      	adds	r2, r4, #6
        return 0; // Too short to be valid
    }

    for (int i = 0; i < 6; ++i) {
        if ((last_param[i] < '0' || last_param[i] > '9' ) &&
 8001e08:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001e0c:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8001e10:	2909      	cmp	r1, #9
 8001e12:	d904      	bls.n	8001e1e <IsPageValid+0x2e>
 8001e14:	f023 0320 	bic.w	r3, r3, #32
 8001e18:	3b41      	subs	r3, #65	@ 0x41
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d803      	bhi.n	8001e26 <IsPageValid+0x36>
    for (int i = 0; i < 6; ++i) {
 8001e1e:	4294      	cmp	r4, r2
 8001e20:	d1f2      	bne.n	8001e08 <IsPageValid+0x18>
				(last_param[i] < 'A' || last_param[i] > 'F')) {
            return 0; // Not numeric
        }
    }

    return 1; // Page contains valid data
 8001e22:	2001      	movs	r0, #1
}
 8001e24:	bd10      	pop	{r4, pc}
        return 0; // No semicolon found, invalid page
 8001e26:	2000      	movs	r0, #0
 8001e28:	e7fc      	b.n	8001e24 <IsPageValid+0x34>

08001e2a <UpdatePageAddress>:


// Function to update the last parameter of the page (address)
void UpdatePageAddress(uint8_t *page, uint32_t new_address) {
 8001e2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001e2c:	4604      	mov	r4, r0
    char new_address_str[10];
    Uint32ToHex(new_address, new_address_str, 8);
 8001e2e:	2208      	movs	r2, #8
void UpdatePageAddress(uint8_t *page, uint32_t new_address) {
 8001e30:	4608      	mov	r0, r1
    Uint32ToHex(new_address, new_address_str, 8);
 8001e32:	a901      	add	r1, sp, #4
 8001e34:	f000 fff0 	bl	8002e18 <Uint32ToHex>
    memcpy(page + strlen((char *)page) - 6, new_address_str+2, 6); // Overwrite last 6 characters
 8001e38:	4620      	mov	r0, r4
 8001e3a:	f7fe fa29 	bl	8000290 <strlen>
 8001e3e:	3806      	subs	r0, #6
 8001e40:	f8dd 2006 	ldr.w	r2, [sp, #6]
 8001e44:	5022      	str	r2, [r4, r0]
 8001e46:	1823      	adds	r3, r4, r0
 8001e48:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8001e4c:	809a      	strh	r2, [r3, #4]
}
 8001e4e:	b004      	add	sp, #16
 8001e50:	bd10      	pop	{r4, pc}
	...

08001e54 <W25_ShiftLeftFlashDataByPage>:

int W25_ShiftLeftFlashDataByPage(void) {
 8001e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t current_sector_start = FLASH_START_ADDRESS;

    printf("\n\n ------------------------------ IN SHIFT LEFT: ----------------------------\n\n");
 8001e58:	483f      	ldr	r0, [pc, #252]	@ (8001f58 <W25_ShiftLeftFlashDataByPage+0x104>)
    while (current_sector_start < FLASH_END_ADDRESS) {
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;

        W25_Reset();
        // Step 1: Read the entire current sector into the buffer
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8001e5a:	f8df 910c 	ldr.w	r9, [pc, #268]	@ 8001f68 <W25_ShiftLeftFlashDataByPage+0x114>
    printf("\n\n ------------------------------ IN SHIFT LEFT: ----------------------------\n\n");
 8001e5e:	f007 fc3d 	bl	80096dc <puts>
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 8001e62:	f44f 5540 	mov.w	r5, #12288	@ 0x3000
        W25_Reset();
 8001e66:	f7ff fe70 	bl	8001b4a <W25_Reset>
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8001e6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e6e:	4649      	mov	r1, r9
 8001e70:	4628      	mov	r0, r5
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 8001e72:	f505 5780 	add.w	r7, r5, #4096	@ 0x1000
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8001e76:	f7ff ff89 	bl	8001d8c <W25_ReadData>
 8001e7a:	b118      	cbz	r0, 8001e84 <W25_ShiftLeftFlashDataByPage+0x30>
//        	printf("READING ALL THE SECTOR: ERROR\n");
            return HAL_ERROR; // Exit if read fails
 8001e7c:	2401      	movs	r4, #1
        current_sector_start = next_sector_start;
    }

    printf("\n\n ----------------------END OF SHIFT LEFT -----------------------------\n\n");
    return HAL_OK;
}
 8001e7e:	4620      	mov	r0, r4
 8001e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (next_sector_start < FLASH_END_ADDRESS) {
 8001e84:	f5b7 4fa0 	cmp.w	r7, #20480	@ 0x5000
 8001e88:	d147      	bne.n	8001f1a <W25_ShiftLeftFlashDataByPage+0xc6>
 8001e8a:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8001f68 <W25_ShiftLeftFlashDataByPage+0x114>
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 8001e8e:	2600      	movs	r6, #0
 8001e90:	4644      	mov	r4, r8
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 8001e92:	46a2      	mov	sl, r4
 8001e94:	3480      	adds	r4, #128	@ 0x80
 8001e96:	4620      	mov	r0, r4
 8001e98:	f7ff ffaa 	bl	8001df0 <IsPageValid>
                memcpy(current_sector_buffer + offset, current_sector_buffer + offset + PAGE_SIZE, PAGE_SIZE);
 8001e9c:	2280      	movs	r2, #128	@ 0x80
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	d046      	beq.n	8001f30 <W25_ShiftLeftFlashDataByPage+0xdc>
                memcpy(current_sector_buffer + offset, current_sector_buffer + offset + PAGE_SIZE, PAGE_SIZE);
 8001ea2:	4621      	mov	r1, r4
 8001ea4:	4650      	mov	r0, sl
 8001ea6:	f008 fc23 	bl	800a6f0 <memcpy>
                UpdatePageAddress(current_sector_buffer + offset, current_sector_start + offset);
 8001eaa:	1971      	adds	r1, r6, r5
 8001eac:	4650      	mov	r0, sl
 8001eae:	f7ff ffbc 	bl	8001e2a <UpdatePageAddress>
        for (uint32_t offset = 0; offset < SECTOR_SIZE - PAGE_SIZE; offset += PAGE_SIZE) {
 8001eb2:	3680      	adds	r6, #128	@ 0x80
 8001eb4:	f5b6 6f78 	cmp.w	r6, #3968	@ 0xf80
 8001eb8:	d1eb      	bne.n	8001e92 <W25_ShiftLeftFlashDataByPage+0x3e>
        if (next_sector_start < FLASH_END_ADDRESS && IsPageValid(next_page_buffer)) {
 8001eba:	f5b7 4fa0 	cmp.w	r7, #20480	@ 0x5000
 8001ebe:	d03c      	beq.n	8001f3a <W25_ShiftLeftFlashDataByPage+0xe6>
 8001ec0:	4826      	ldr	r0, [pc, #152]	@ (8001f5c <W25_ShiftLeftFlashDataByPage+0x108>)
 8001ec2:	f7ff ff95 	bl	8001df0 <IsPageValid>
 8001ec6:	2800      	cmp	r0, #0
 8001ec8:	d037      	beq.n	8001f3a <W25_ShiftLeftFlashDataByPage+0xe6>
            memcpy(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), next_page_buffer, PAGE_SIZE);
 8001eca:	4924      	ldr	r1, [pc, #144]	@ (8001f5c <W25_ShiftLeftFlashDataByPage+0x108>)
 8001ecc:	4824      	ldr	r0, [pc, #144]	@ (8001f60 <W25_ShiftLeftFlashDataByPage+0x10c>)
 8001ece:	2280      	movs	r2, #128	@ 0x80
 8001ed0:	f008 fc0e 	bl	800a6f0 <memcpy>
            UpdatePageAddress(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), current_sector_start + (SECTOR_SIZE - PAGE_SIZE));
 8001ed4:	4822      	ldr	r0, [pc, #136]	@ (8001f60 <W25_ShiftLeftFlashDataByPage+0x10c>)
 8001ed6:	f44f 517e 	mov.w	r1, #16256	@ 0x3f80
 8001eda:	f7ff ffa6 	bl	8001e2a <UpdatePageAddress>
        W25_Reset();
 8001ede:	f7ff fe34 	bl	8001b4a <W25_Reset>
        if (W25_SectorErase(current_sector_start) != HAL_OK) {
 8001ee2:	4628      	mov	r0, r5
 8001ee4:	f7ff fedc 	bl	8001ca0 <W25_SectorErase>
 8001ee8:	4604      	mov	r4, r0
 8001eea:	2800      	cmp	r0, #0
 8001eec:	d1c6      	bne.n	8001e7c <W25_ShiftLeftFlashDataByPage+0x28>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 8001eee:	4606      	mov	r6, r0
        	uint8_t *page_data = current_sector_buffer + offset;
 8001ef0:	eb08 0a06 	add.w	sl, r8, r6
        	W25_Reset();
 8001ef4:	f7ff fe29 	bl	8001b4a <W25_Reset>
        	if (IsPageValid(page_data)) {
 8001ef8:	4650      	mov	r0, sl
 8001efa:	f7ff ff79 	bl	8001df0 <IsPageValid>
 8001efe:	bb10      	cbnz	r0, 8001f46 <W25_ShiftLeftFlashDataByPage+0xf2>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 8001f00:	3680      	adds	r6, #128	@ 0x80
 8001f02:	f5b6 5f80 	cmp.w	r6, #4096	@ 0x1000
 8001f06:	d1f3      	bne.n	8001ef0 <W25_ShiftLeftFlashDataByPage+0x9c>
    while (current_sector_start < FLASH_END_ADDRESS) {
 8001f08:	f5b7 4fa0 	cmp.w	r7, #20480	@ 0x5000
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 8001f0c:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
    while (current_sector_start < FLASH_END_ADDRESS) {
 8001f10:	d1a9      	bne.n	8001e66 <W25_ShiftLeftFlashDataByPage+0x12>
    printf("\n\n ----------------------END OF SHIFT LEFT -----------------------------\n\n");
 8001f12:	4814      	ldr	r0, [pc, #80]	@ (8001f64 <W25_ShiftLeftFlashDataByPage+0x110>)
 8001f14:	f007 fbe2 	bl	80096dc <puts>
    return HAL_OK;
 8001f18:	e7b1      	b.n	8001e7e <W25_ShiftLeftFlashDataByPage+0x2a>
        	W25_Reset();
 8001f1a:	f7ff fe16 	bl	8001b4a <W25_Reset>
            if (W25_ReadData(next_sector_start, next_page_buffer, PAGE_SIZE) != HAL_OK) {
 8001f1e:	490f      	ldr	r1, [pc, #60]	@ (8001f5c <W25_ShiftLeftFlashDataByPage+0x108>)
 8001f20:	2280      	movs	r2, #128	@ 0x80
 8001f22:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001f26:	f7ff ff31 	bl	8001d8c <W25_ReadData>
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d0ad      	beq.n	8001e8a <W25_ShiftLeftFlashDataByPage+0x36>
 8001f2e:	e7a5      	b.n	8001e7c <W25_ShiftLeftFlashDataByPage+0x28>
                memset(current_sector_buffer + offset, 0xFF, PAGE_SIZE); // Invalidate the page
 8001f30:	21ff      	movs	r1, #255	@ 0xff
 8001f32:	4650      	mov	r0, sl
 8001f34:	f007 fd32 	bl	800999c <memset>
 8001f38:	e7bb      	b.n	8001eb2 <W25_ShiftLeftFlashDataByPage+0x5e>
        	memset(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), 0xFF, PAGE_SIZE); // Invalidate the last page
 8001f3a:	2280      	movs	r2, #128	@ 0x80
 8001f3c:	21ff      	movs	r1, #255	@ 0xff
 8001f3e:	4808      	ldr	r0, [pc, #32]	@ (8001f60 <W25_ShiftLeftFlashDataByPage+0x10c>)
 8001f40:	f007 fd2c 	bl	800999c <memset>
 8001f44:	e7cb      	b.n	8001ede <W25_ShiftLeftFlashDataByPage+0x8a>
        		if (W25_PageProgram(current_sector_start + offset, current_sector_buffer + offset, PAGE_SIZE) != HAL_OK) {
 8001f46:	2280      	movs	r2, #128	@ 0x80
 8001f48:	4651      	mov	r1, sl
 8001f4a:	19a8      	adds	r0, r5, r6
 8001f4c:	f7ff fed4 	bl	8001cf8 <W25_PageProgram>
 8001f50:	2800      	cmp	r0, #0
 8001f52:	d0d5      	beq.n	8001f00 <W25_ShiftLeftFlashDataByPage+0xac>
 8001f54:	e792      	b.n	8001e7c <W25_ShiftLeftFlashDataByPage+0x28>
 8001f56:	bf00      	nop
 8001f58:	0800dda9 	.word	0x0800dda9
 8001f5c:	200024d0 	.word	0x200024d0
 8001f60:	200034d0 	.word	0x200034d0
 8001f64:	0800ddf8 	.word	0x0800ddf8
 8001f68:	20002550 	.word	0x20002550

08001f6c <calculate_epoch_time_utc>:
		address_tax += 128;
		osDelay(1000);
		memset(flashBufferTaxReceived, 0x00,128);
	}
}
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8001f6c:	b500      	push	{lr}
    struct tm timeinfo;
    // Set up time structure
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8001f6e:	6883      	ldr	r3, [r0, #8]
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8001f70:	b08b      	sub	sp, #44	@ 0x2c
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8001f72:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8001f76:	9306      	str	r3, [sp, #24]
    timeinfo.tm_mon = date->Mon - 1;
 8001f78:	6843      	ldr	r3, [r0, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	9305      	str	r3, [sp, #20]
    timeinfo.tm_mday = date->Day;
 8001f7e:	6803      	ldr	r3, [r0, #0]
 8001f80:	9304      	str	r3, [sp, #16]
    timeinfo.tm_hour = time->hour;
 8001f82:	680b      	ldr	r3, [r1, #0]
 8001f84:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = time->min;
 8001f86:	684b      	ldr	r3, [r1, #4]
 8001f88:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = time->sec;
 8001f8a:	688b      	ldr	r3, [r1, #8]
 8001f8c:	9301      	str	r3, [sp, #4]
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary

    // Get the local epoch time and then adjust for timezone offset
    time_t local_epoch = mktime(&timeinfo);
 8001f8e:	a801      	add	r0, sp, #4
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary
 8001f90:	f04f 33ff 	mov.w	r3, #4294967295
 8001f94:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t local_epoch = mktime(&timeinfo);
 8001f96:	f007 fe3b 	bl	8009c10 <mktime>
    return (uint32_t)(local_epoch + 25200); // Subtract timezone offset
}
 8001f9a:	f500 40c4 	add.w	r0, r0, #25088	@ 0x6200
 8001f9e:	3070      	adds	r0, #112	@ 0x70
 8001fa0:	b00b      	add	sp, #44	@ 0x2c
 8001fa2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001fa8 <format_rmc_data>:

void format_rmc_data(RMCSTRUCT *rmc_data, char *output_buffer, size_t buffer_size) {
 8001fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fac:	ed2d 8b04 	vpush	{d8-d9}
 8001fb0:	4604      	mov	r4, r0
 8001fb2:	b09b      	sub	sp, #108	@ 0x6c
 8001fb4:	e9cd 1218 	strd	r1, r2, [sp, #96]	@ 0x60
	//uart_transmit_string(&huart1, (uint8_t*) "Format RMC data");
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8001fb8:	4601      	mov	r1, r0
 8001fba:	3010      	adds	r0, #16
 8001fbc:	f7ff ffd6 	bl	8001f6c <calculate_epoch_time_utc>

    // Format all fields in a single line with semicolon separation, including date
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8001fc0:	69a3      	ldr	r3, [r4, #24]
 8001fc2:	9314      	str	r3, [sp, #80]	@ 0x50
 8001fc4:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8001fc8:	4607      	mov	r7, r0
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8001fca:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001fcc:	9315      	str	r3, [sp, #84]	@ 0x54
 8001fce:	f7fe facb 	bl	8000568 <__aeabi_f2d>
 8001fd2:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8001fd6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8001fd8:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8001fdc:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
 8001fe0:	f894 8050 	ldrb.w	r8, [r4, #80]	@ 0x50
 8001fe4:	f7fe fac0 	bl	8000568 <__aeabi_f2d>
 8001fe8:	e9d4 9a00 	ldrd	r9, sl, [r4]
 8001fec:	ed94 8b0e 	vldr	d8, [r4, #56]	@ 0x38
 8001ff0:	ed94 9b12 	vldr	d9, [r4, #72]	@ 0x48
 8001ff4:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
 8001ff8:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8001ffa:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4811      	ldr	r0, [pc, #68]	@ (8002048 <format_rmc_data+0xa0>)
 8002004:	4911      	ldr	r1, [pc, #68]	@ (800204c <format_rmc_data+0xa4>)
 8002006:	9608      	str	r6, [sp, #32]
 8002008:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800200c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800200e:	4a10      	ldr	r2, [pc, #64]	@ (8002050 <format_rmc_data+0xa8>)
 8002010:	f8cd 9008 	str.w	r9, [sp, #8]
 8002014:	2c00      	cmp	r4, #0
 8002016:	bf08      	it	eq
 8002018:	4601      	moveq	r1, r0
 800201a:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800201e:	e9cd 5300 	strd	r5, r3, [sp]
 8002022:	e9cd 1712 	strd	r1, r7, [sp, #72]	@ 0x48
 8002026:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002028:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 800202c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8002030:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002034:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8002038:	f007 fb58 	bl	80096ec <sniprintf>
}
 800203c:	b01b      	add	sp, #108	@ 0x6c
 800203e:	ecbd 8b04 	vpop	{d8-d9}
 8002042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002046:	bf00      	nop
 8002048:	0800d8cb 	.word	0x0800d8cb
 800204c:	0800d8c5 	.word	0x0800d8c5
 8002050:	0800de42 	.word	0x0800de42

08002054 <saveRMC>:


void saveRMC(){
 8002054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printf("\n\n Inside SAVING RMC TO FLASH \n\n");
	int k = 0;
	int j = 0;
	W25_Reset();
	if (is_erased_rmc == 0){
 8002058:	4cb8      	ldr	r4, [pc, #736]	@ (800233c <saveRMC+0x2e8>)
	printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 800205a:	48b9      	ldr	r0, [pc, #740]	@ (8002340 <saveRMC+0x2ec>)
void saveRMC(){
 800205c:	b093      	sub	sp, #76	@ 0x4c
	printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 800205e:	f007 fb3d 	bl	80096dc <puts>
	W25_Reset();
 8002062:	f7ff fd72 	bl	8001b4a <W25_Reset>
	if (is_erased_rmc == 0){
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	b92b      	cbnz	r3, 8002076 <saveRMC+0x22>
		W25_SectorErase(address_rmc);
 800206a:	4bb6      	ldr	r3, [pc, #728]	@ (8002344 <saveRMC+0x2f0>)
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	f7ff fe17 	bl	8001ca0 <W25_SectorErase>
		is_erased_rmc = 1;
 8002072:	2301      	movs	r3, #1
 8002074:	6023      	str	r3, [r4, #0]
	}
	
	for(size_t i = 0; i < 128; i++){
 8002076:	4ab4      	ldr	r2, [pc, #720]	@ (8002348 <saveRMC+0x2f4>)
 8002078:	2300      	movs	r3, #0
 800207a:	4616      	mov	r6, r2
		if(rmcBufferDemo[i] != 0x00 && rmcBufferDemo[i+1] == 0x00){
 800207c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002080:	461d      	mov	r5, r3
 8002082:	3301      	adds	r3, #1
 8002084:	b109      	cbz	r1, 800208a <saveRMC+0x36>
 8002086:	7811      	ldrb	r1, [r2, #0]
 8002088:	b111      	cbz	r1, 8002090 <saveRMC+0x3c>
	for(size_t i = 0; i < 128; i++){
 800208a:	2b80      	cmp	r3, #128	@ 0x80
 800208c:	d1f6      	bne.n	800207c <saveRMC+0x28>
	int k = 0;
 800208e:	2500      	movs	r5, #0
			k = i;
			break;
		}
	}
	Uint32ToHex(address_rmc, addr_out_flash, 8);
 8002090:	4fae      	ldr	r7, [pc, #696]	@ (800234c <saveRMC+0x2f8>)
 8002092:	4cac      	ldr	r4, [pc, #688]	@ (8002344 <saveRMC+0x2f0>)
 8002094:	2208      	movs	r2, #8
 8002096:	6820      	ldr	r0, [r4, #0]
 8002098:	4639      	mov	r1, r7
 800209a:	f000 febd 	bl	8002e18 <Uint32ToHex>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out_flash, 8, 1000);
 800209e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020a2:	2208      	movs	r2, #8
 80020a4:	4639      	mov	r1, r7
 80020a6:	48aa      	ldr	r0, [pc, #680]	@ (8002350 <saveRMC+0x2fc>)
 80020a8:	f003 fca6 	bl	80059f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 80020ac:	49a9      	ldr	r1, [pc, #676]	@ (8002354 <saveRMC+0x300>)
 80020ae:	48a8      	ldr	r0, [pc, #672]	@ (8002350 <saveRMC+0x2fc>)
 80020b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020b4:	2201      	movs	r2, #1
 80020b6:	f003 fc9f 	bl	80059f8 <HAL_UART_Transmit>

	k++;
	rmcBufferDemo[k] = ';';
 80020ba:	1973      	adds	r3, r6, r5
 80020bc:	223b      	movs	r2, #59	@ 0x3b
 80020be:	705a      	strb	r2, [r3, #1]
	for(size_t idx = 6; idx > 0 ; idx--){
		k++;
		rmcBufferDemo[k] = addr_out_flash[8 - idx];
 80020c0:	1cab      	adds	r3, r5, #2
 80020c2:	f8d7 1002 	ldr.w	r1, [r7, #2]
 80020c6:	50f1      	str	r1, [r6, r3]
 80020c8:	18f2      	adds	r2, r6, r3
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	8093      	strh	r3, [r2, #4]
	}
	
	for (j=0;j<110-k-1;j++)
	{
		rmcBufferDemo[j+k+1]=0x00;
 80020ce:	f105 0008 	add.w	r0, r5, #8
 80020d2:	f1c5 0266 	rsb	r2, r5, #102	@ 0x66
 80020d6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80020da:	2100      	movs	r1, #0
 80020dc:	4430      	add	r0, r6
 80020de:	f007 fc5d 	bl	800999c <memset>
	}

	if(address_rmc % 0x1000 == 0x0000){
 80020e2:	6820      	ldr	r0, [r4, #0]
 80020e4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80020e8:	b90b      	cbnz	r3, 80020ee <saveRMC+0x9a>
//		printf("\n\nErasing SECTOR IN ADVANCE\n");
		W25_SectorErase(address_rmc);
 80020ea:	f7ff fdd9 	bl	8001ca0 <W25_SectorErase>
	}

	W25_Reset();
 80020ee:	f7ff fd2c 	bl	8001b4a <W25_Reset>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
//	printf("Buffer before saving to FLASH: ");
//	printf((char*)rmcBufferDemo);
//	printf("\n");

	current_addr = address_rmc;
 80020f2:	4d99      	ldr	r5, [pc, #612]	@ (8002358 <saveRMC+0x304>)
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 80020f4:	4994      	ldr	r1, [pc, #592]	@ (8002348 <saveRMC+0x2f4>)
 80020f6:	6820      	ldr	r0, [r4, #0]
 80020f8:	2280      	movs	r2, #128	@ 0x80
 80020fa:	f7ff fdfd 	bl	8001cf8 <W25_PageProgram>
	current_addr = address_rmc;
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	602b      	str	r3, [r5, #0]
//	printf("Buffer after saving to FLASH: ");
	W25_Reset();
 8002102:	f7ff fd22 	bl	8001b4a <W25_Reset>
	W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8002106:	2280      	movs	r2, #128	@ 0x80
 8002108:	4994      	ldr	r1, [pc, #592]	@ (800235c <saveRMC+0x308>)
 800210a:	6828      	ldr	r0, [r5, #0]
 800210c:	f7ff fe3e 	bl	8001d8c <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA received: ";
 8002110:	4b93      	ldr	r3, [pc, #588]	@ (8002360 <saveRMC+0x30c>)
 8002112:	aa01      	add	r2, sp, #4
 8002114:	f103 0c10 	add.w	ip, r3, #16
 8002118:	4617      	mov	r7, r2
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	6859      	ldr	r1, [r3, #4]
 800211e:	4616      	mov	r6, r2
 8002120:	c603      	stmia	r6!, {r0, r1}
 8002122:	3308      	adds	r3, #8
 8002124:	4563      	cmp	r3, ip
 8002126:	4632      	mov	r2, r6
 8002128:	d1f7      	bne.n	800211a <saveRMC+0xc6>
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	889b      	ldrh	r3, [r3, #4]
 800212e:	6030      	str	r0, [r6, #0]
 8002130:	80b3      	strh	r3, [r6, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8002132:	4638      	mov	r0, r7
 8002134:	f7fe f8ac 	bl	8000290 <strlen>
 8002138:	4639      	mov	r1, r7
 800213a:	b282      	uxth	r2, r0
 800213c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002140:	4883      	ldr	r0, [pc, #524]	@ (8002350 <saveRMC+0x2fc>)
 8002142:	f003 fc59 	bl	80059f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8002146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800214a:	4984      	ldr	r1, [pc, #528]	@ (800235c <saveRMC+0x308>)
 800214c:	4880      	ldr	r0, [pc, #512]	@ (8002350 <saveRMC+0x2fc>)
 800214e:	2280      	movs	r2, #128	@ 0x80
 8002150:	f003 fc52 	bl	80059f8 <HAL_UART_Transmit>

	memset(flashBufferRMCReceived, 0x00,128);
 8002154:	2280      	movs	r2, #128	@ 0x80
 8002156:	2100      	movs	r1, #0
 8002158:	4880      	ldr	r0, [pc, #512]	@ (800235c <saveRMC+0x308>)
 800215a:	f007 fc1f 	bl	800999c <memset>


	printf("\n-------------------------- Updating the latest location info----------------\n");
 800215e:	4881      	ldr	r0, [pc, #516]	@ (8002364 <saveRMC+0x310>)
 8002160:	f007 fabc 	bl	80096dc <puts>
	W25_Reset();
 8002164:	f7ff fcf1 	bl	8001b4a <W25_Reset>
	W25_SectorErase(0x9000);
 8002168:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 800216c:	f7ff fd98 	bl	8001ca0 <W25_SectorErase>
	W25_Reset();
 8002170:	f7ff fceb 	bl	8001b4a <W25_Reset>
	W25_PageProgram(0x9000, rmcBufferDemo, 128);
 8002174:	4974      	ldr	r1, [pc, #464]	@ (8002348 <saveRMC+0x2f4>)
 8002176:	2280      	movs	r2, #128	@ 0x80
 8002178:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 800217c:	f7ff fdbc 	bl	8001cf8 <W25_PageProgram>
	W25_ReadData(0x9000, flashBufferRMCReceived, 128);
 8002180:	2280      	movs	r2, #128	@ 0x80
 8002182:	4976      	ldr	r1, [pc, #472]	@ (800235c <saveRMC+0x308>)
 8002184:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8002188:	f7ff fe00 	bl	8001d8c <W25_ReadData>
	char spi_flash_data_intro_backup[] = "Flash DATA received at 0x9000 (BACKUP): ";
 800218c:	4b76      	ldr	r3, [pc, #472]	@ (8002368 <saveRMC+0x314>)
 800218e:	aa07      	add	r2, sp, #28
 8002190:	f103 0c28 	add.w	ip, r3, #40	@ 0x28
 8002194:	4617      	mov	r7, r2
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	6859      	ldr	r1, [r3, #4]
 800219a:	4616      	mov	r6, r2
 800219c:	c603      	stmia	r6!, {r0, r1}
 800219e:	3308      	adds	r3, #8
 80021a0:	4563      	cmp	r3, ip
 80021a2:	4632      	mov	r2, r6
 80021a4:	d1f7      	bne.n	8002196 <saveRMC+0x142>
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	7033      	strb	r3, [r6, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro_backup, strlen(spi_flash_data_intro_backup), 1000);
 80021aa:	4638      	mov	r0, r7
 80021ac:	f7fe f870 	bl	8000290 <strlen>
 80021b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021b4:	b282      	uxth	r2, r0
 80021b6:	4639      	mov	r1, r7
 80021b8:	4865      	ldr	r0, [pc, #404]	@ (8002350 <saveRMC+0x2fc>)
 80021ba:	f003 fc1d 	bl	80059f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 80021be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021c2:	4966      	ldr	r1, [pc, #408]	@ (800235c <saveRMC+0x308>)
 80021c4:	4862      	ldr	r0, [pc, #392]	@ (8002350 <saveRMC+0x2fc>)
 80021c6:	2280      	movs	r2, #128	@ 0x80
 80021c8:	f003 fc16 	bl	80059f8 <HAL_UART_Transmit>
	memset(flashBufferRMCReceived, 0x00,128);
 80021cc:	4863      	ldr	r0, [pc, #396]	@ (800235c <saveRMC+0x308>)
 80021ce:	2280      	movs	r2, #128	@ 0x80
 80021d0:	2100      	movs	r1, #0
 80021d2:	f007 fbe3 	bl	800999c <memset>

	if(address_rmc == FLASH_END_ADDRESS-128){
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	f5b3 4f9f 	cmp.w	r3, #20352	@ 0x4f80
 80021dc:	4b63      	ldr	r3, [pc, #396]	@ (800236c <saveRMC+0x318>)
 80021de:	f040 80aa 	bne.w	8002336 <saveRMC+0x2e2>
		is_flash_overflow = 1;
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
//		printf(" ADDRESS RMC before SHIFT LEFT BY ONE PAGE");
		W25_Reset();
 80021e6:	f7ff fcb0 	bl	8001b4a <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 80021ea:	495c      	ldr	r1, [pc, #368]	@ (800235c <saveRMC+0x308>)
 80021ec:	6820      	ldr	r0, [r4, #0]
 80021ee:	4f60      	ldr	r7, [pc, #384]	@ (8002370 <saveRMC+0x31c>)
 80021f0:	2280      	movs	r2, #128	@ 0x80
 80021f2:	f7ff fdcb 	bl	8001d8c <W25_ReadData>
		printf((char*) flashBufferRMCReceived);
 80021f6:	4859      	ldr	r0, [pc, #356]	@ (800235c <saveRMC+0x308>)
 80021f8:	f007 fa00 	bl	80095fc <iprintf>

		W25_ShiftLeftFlashDataByPage();
 80021fc:	f7ff fe2a 	bl	8001e54 <W25_ShiftLeftFlashDataByPage>
		address_rmc -= 128;
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	3b80      	subs	r3, #128	@ 0x80
 8002204:	6023      	str	r3, [r4, #0]
		if(is_using_flash == 0){
 8002206:	4b5b      	ldr	r3, [pc, #364]	@ (8002374 <saveRMC+0x320>)
 8002208:	f8d3 8000 	ldr.w	r8, [r3]
 800220c:	f1b8 0f00 	cmp.w	r8, #0
 8002210:	f040 808c 	bne.w	800232c <saveRMC+0x2d8>
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 8002214:	683b      	ldr	r3, [r7, #0]
				start_addr_disconnect -= 128;
			printf("\n-----------------BEFORE update the result address data --------------\n");
			printQueue_GSM(&result_addr_queue);
 8002216:	4e58      	ldr	r6, [pc, #352]	@ (8002378 <saveRMC+0x324>)
			printf("\n-----------------BEFORE update the result address data --------------\n");
 8002218:	4858      	ldr	r0, [pc, #352]	@ (800237c <saveRMC+0x328>)
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 800221a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
				start_addr_disconnect -= 128;
 800221e:	bf82      	ittt	hi
 8002220:	683b      	ldrhi	r3, [r7, #0]
 8002222:	3b80      	subhi	r3, #128	@ 0x80
 8002224:	603b      	strhi	r3, [r7, #0]
			printf("\n-----------------BEFORE update the result address data --------------\n");
 8002226:	f007 fa59 	bl	80096dc <puts>
			printQueue_GSM(&result_addr_queue);
 800222a:	4630      	mov	r0, r6
 800222c:	f7ff f86e 	bl	800130c <printQueue_GSM>
			printf("\n---------------Update the result address data--------------\n");
 8002230:	4853      	ldr	r0, [pc, #332]	@ (8002380 <saveRMC+0x32c>)
 8002232:	f007 fa53 	bl	80096dc <puts>
			for (int i = 0; i < result_addr_queue.size; i++) {
 8002236:	f8d6 0208 	ldr.w	r0, [r6, #520]	@ 0x208
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 800223a:	f8d6 c200 	ldr.w	ip, [r6, #512]	@ 0x200
			for (int i = 0; i < result_addr_queue.size; i++) {
 800223e:	2200      	movs	r2, #0
 8002240:	4290      	cmp	r0, r2
 8002242:	dc4b      	bgt.n	80022dc <saveRMC+0x288>
					result_addr_queue.data[idx] -= 128;
			}
			for (int i = 0; i < result_addr_queue.size; i++) {
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
				if(result_addr_queue.data[idx] < 0x3000)
					deleteMiddle_GSM(&result_addr_queue, idx);
 8002244:	f8df 9130 	ldr.w	r9, [pc, #304]	@ 8002378 <saveRMC+0x324>
			for (int i = 0; i < result_addr_queue.size; i++) {
 8002248:	f8d6 3208 	ldr.w	r3, [r6, #520]	@ 0x208
 800224c:	4543      	cmp	r3, r8
 800224e:	dc58      	bgt.n	8002302 <saveRMC+0x2ae>
			}
			printQueue_GSM(&result_addr_queue);
 8002250:	4849      	ldr	r0, [pc, #292]	@ (8002378 <saveRMC+0x324>)
 8002252:	f7ff f85b 	bl	800130c <printQueue_GSM>
			if(end_addr_disconnect > start_addr_disconnect)
 8002256:	4b4b      	ldr	r3, [pc, #300]	@ (8002384 <saveRMC+0x330>)
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	4291      	cmp	r1, r2
 800225e:	d902      	bls.n	8002266 <saveRMC+0x212>
				end_addr_disconnect -= 128;
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	3a80      	subs	r2, #128	@ 0x80
 8002264:	601a      	str	r2, [r3, #0]
		}
		else{
			count_shiftleft++;
		}
		Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 8002266:	2208      	movs	r2, #8
 8002268:	6838      	ldr	r0, [r7, #0]
 800226a:	4938      	ldr	r1, [pc, #224]	@ (800234c <saveRMC+0x2f8>)
 800226c:	f000 fdd4 	bl	8002e18 <Uint32ToHex>
		printf("\n\n------------------ CURRENT START ADDRESS DISCONNECT: %s ---------------\n\n", addr_out_flash);
 8002270:	4936      	ldr	r1, [pc, #216]	@ (800234c <saveRMC+0x2f8>)
 8002272:	4845      	ldr	r0, [pc, #276]	@ (8002388 <saveRMC+0x334>)
 8002274:	f007 f9c2 	bl	80095fc <iprintf>
		printf("\n--------------SHIFT LEFT COUNT: %d-------------\n", count_shiftleft);
 8002278:	4b44      	ldr	r3, [pc, #272]	@ (800238c <saveRMC+0x338>)
 800227a:	4845      	ldr	r0, [pc, #276]	@ (8002390 <saveRMC+0x33c>)
 800227c:	7819      	ldrb	r1, [r3, #0]
 800227e:	f007 f9bd 	bl	80095fc <iprintf>
		current_addr -= 128;
 8002282:	682b      	ldr	r3, [r5, #0]
	    printf("\n");
 8002284:	200a      	movs	r0, #10
		current_addr -= 128;
 8002286:	3b80      	subs	r3, #128	@ 0x80
 8002288:	602b      	str	r3, [r5, #0]
	    printf("\n");
 800228a:	f007 f9c9 	bl	8009620 <putchar>
		printf(" ADDRESS RMC after SHIFT LEFT BY ONE PAGE:");
 800228e:	4841      	ldr	r0, [pc, #260]	@ (8002394 <saveRMC+0x340>)
 8002290:	f007 f9b4 	bl	80095fc <iprintf>
		W25_Reset();
 8002294:	f7ff fc59 	bl	8001b4a <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 8002298:	4930      	ldr	r1, [pc, #192]	@ (800235c <saveRMC+0x308>)
 800229a:	6820      	ldr	r0, [r4, #0]
 800229c:	2280      	movs	r2, #128	@ 0x80
 800229e:	f7ff fd75 	bl	8001d8c <W25_ReadData>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 80022a2:	492e      	ldr	r1, [pc, #184]	@ (800235c <saveRMC+0x308>)
 80022a4:	482a      	ldr	r0, [pc, #168]	@ (8002350 <saveRMC+0x2fc>)
 80022a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022aa:	2280      	movs	r2, #128	@ 0x80
 80022ac:	f003 fba4 	bl	80059f8 <HAL_UART_Transmit>
	}
	else {
		is_flash_overflow = 0;
	}
	if(address_rmc < FLASH_END_ADDRESS-128)
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	f5b3 4f9f 	cmp.w	r3, #20352	@ 0x4f80
		address_rmc += 128;
 80022b6:	bf38      	it	cc
 80022b8:	3380      	addcc	r3, #128	@ 0x80
	osDelay(1000);
 80022ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		address_rmc += 128;
 80022be:	bf38      	it	cc
 80022c0:	6023      	strcc	r3, [r4, #0]
	osDelay(1000);
 80022c2:	f003 fd09 	bl	8005cd8 <osDelay>
	printf("\n");
 80022c6:	200a      	movs	r0, #10
 80022c8:	f007 f9aa 	bl	8009620 <putchar>
	memset(flashBufferRMCReceived, 0x00,128);
 80022cc:	4823      	ldr	r0, [pc, #140]	@ (800235c <saveRMC+0x308>)
 80022ce:	2280      	movs	r2, #128	@ 0x80
 80022d0:	2100      	movs	r1, #0
}
 80022d2:	b013      	add	sp, #76	@ 0x4c
 80022d4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memset(flashBufferRMCReceived, 0x00,128);
 80022d8:	f007 bb60 	b.w	800999c <memset>
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 80022dc:	eb02 030c 	add.w	r3, r2, ip
 80022e0:	4259      	negs	r1, r3
 80022e2:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80022e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022ea:	bf58      	it	pl
 80022ec:	424b      	negpl	r3, r1
			for (int i = 0; i < result_addr_queue.size; i++) {
 80022ee:	3201      	adds	r2, #1
				if(result_addr_queue.data[idx] >= 0x3000)
 80022f0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80022f4:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
					result_addr_queue.data[idx] -= 128;
 80022f8:	bf24      	itt	cs
 80022fa:	3980      	subcs	r1, #128	@ 0x80
 80022fc:	f846 1023 	strcs.w	r1, [r6, r3, lsl #2]
			for (int i = 0; i < result_addr_queue.size; i++) {
 8002300:	e79e      	b.n	8002240 <saveRMC+0x1ec>
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002302:	f8d6 1200 	ldr.w	r1, [r6, #512]	@ 0x200
 8002306:	4441      	add	r1, r8
 8002308:	424b      	negs	r3, r1
 800230a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800230e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002312:	bf58      	it	pl
 8002314:	4259      	negpl	r1, r3
				if(result_addr_queue.data[idx] < 0x3000)
 8002316:	f856 3021 	ldr.w	r3, [r6, r1, lsl #2]
 800231a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800231e:	d202      	bcs.n	8002326 <saveRMC+0x2d2>
					deleteMiddle_GSM(&result_addr_queue, idx);
 8002320:	4648      	mov	r0, r9
 8002322:	f7ff f825 	bl	8001370 <deleteMiddle_GSM>
			for (int i = 0; i < result_addr_queue.size; i++) {
 8002326:	f108 0801 	add.w	r8, r8, #1
 800232a:	e78d      	b.n	8002248 <saveRMC+0x1f4>
			count_shiftleft++;
 800232c:	4a17      	ldr	r2, [pc, #92]	@ (800238c <saveRMC+0x338>)
 800232e:	7813      	ldrb	r3, [r2, #0]
 8002330:	3301      	adds	r3, #1
 8002332:	7013      	strb	r3, [r2, #0]
 8002334:	e797      	b.n	8002266 <saveRMC+0x212>
		is_flash_overflow = 0;
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	e7b9      	b.n	80022b0 <saveRMC+0x25c>
 800233c:	20003650 	.word	0x20003650
 8002340:	0800de75 	.word	0x0800de75
 8002344:	20000008 	.word	0x20000008
 8002348:	20003550 	.word	0x20003550
 800234c:	2000240c 	.word	0x2000240c
 8002350:	20002124 	.word	0x20002124
 8002354:	0800d857 	.word	0x0800d857
 8002358:	20000004 	.word	0x20000004
 800235c:	200035d0 	.word	0x200035d0
 8002360:	0800e010 	.word	0x0800e010
 8002364:	0800de95 	.word	0x0800de95
 8002368:	0800e026 	.word	0x0800e026
 800236c:	20003654 	.word	0x20003654
 8002370:	20001b34 	.word	0x20001b34
 8002374:	20001d48 	.word	0x20001d48
 8002378:	20001b38 	.word	0x20001b38
 800237c:	0800dee3 	.word	0x0800dee3
 8002380:	0800df2a 	.word	0x0800df2a
 8002384:	20001b30 	.word	0x20001b30
 8002388:	0800df67 	.word	0x0800df67
 800238c:	20001d44 	.word	0x20001d44
 8002390:	0800dfb3 	.word	0x0800dfb3
 8002394:	0800dfe5 	.word	0x0800dfe5

08002398 <parseRMCString>:
			osMailPut(RMC_MailQGSMId, mail); // Put message in queue
		}
	}
}

void parseRMCString(uint8_t *str, RMCSTRUCT *rmc) {
 8002398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800239c:	b0d4      	sub	sp, #336	@ 0x150
 800239e:	460c      	mov	r4, r1
    // Cast the uint8_t* to char* for string operations
    char buffer[256];
    strncpy(buffer, (char*)str, sizeof(buffer));
 80023a0:	22ff      	movs	r2, #255	@ 0xff
 80023a2:	4601      	mov	r1, r0
 80023a4:	a814      	add	r0, sp, #80	@ 0x50
 80023a6:	f007 fb20 	bl	80099ea <strncpy>
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 80023aa:	2500      	movs	r5, #0

    // Remove the last parameter by locating the last ';'
    char *lastSemicolon = strrchr(buffer, ';');
 80023ac:	213b      	movs	r1, #59	@ 0x3b
 80023ae:	a814      	add	r0, sp, #80	@ 0x50
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 80023b0:	f88d 514f 	strb.w	r5, [sp, #335]	@ 0x14f
    char *lastSemicolon = strrchr(buffer, ';');
 80023b4:	f007 fb2c 	bl	8009a10 <strrchr>
    if (lastSemicolon) {
 80023b8:	b100      	cbz	r0, 80023bc <parseRMCString+0x24>
        *lastSemicolon = '\0'; // Terminate the string here to exclude the last parameter
 80023ba:	7005      	strb	r5, [r0, #0]

    // Parse the string (now excluding the last parameter)
    char validStr[10];
   // unsigned long long epoch;
    int epoch0, epoch1, epoch2;
    sscanf(buffer, "%d;%d;%d;%d;%d;%d;%lf;%c;%lf;%c;%f;%f;%9[^;];%04d%04d%02d",
 80023bc:	f104 032c 	add.w	r3, r4, #44	@ 0x2c
 80023c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80023c2:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80023c6:	9308      	str	r3, [sp, #32]
 80023c8:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 80023cc:	9307      	str	r3, [sp, #28]
 80023ce:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80023d2:	9306      	str	r3, [sp, #24]
 80023d4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80023d8:	9305      	str	r3, [sp, #20]
 80023da:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80023de:	9304      	str	r3, [sp, #16]
 80023e0:	f104 0308 	add.w	r3, r4, #8
 80023e4:	9303      	str	r3, [sp, #12]
 80023e6:	1d23      	adds	r3, r4, #4
 80023e8:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80023ec:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 80023f0:	f104 0310 	add.w	r3, r4, #16
 80023f4:	ad10      	add	r5, sp, #64	@ 0x40
 80023f6:	ae0f      	add	r6, sp, #60	@ 0x3c
 80023f8:	af0e      	add	r7, sp, #56	@ 0x38
 80023fa:	f104 0218 	add.w	r2, r4, #24
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	4911      	ldr	r1, [pc, #68]	@ (8002448 <parseRMCString+0xb0>)
 8002402:	950d      	str	r5, [sp, #52]	@ 0x34
 8002404:	f104 0314 	add.w	r3, r4, #20
 8002408:	960c      	str	r6, [sp, #48]	@ 0x30
 800240a:	970b      	str	r7, [sp, #44]	@ 0x2c
 800240c:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002410:	a814      	add	r0, sp, #80	@ 0x50
 8002412:	f007 f9bf 	bl	8009794 <siscanf>
		   &epoch1,
		   &epoch2// Epoch time
    );

    // Set validity as an integer (1 for "Valid", 0 for others)
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8002416:	490d      	ldr	r1, [pc, #52]	@ (800244c <parseRMCString+0xb4>)
 8002418:	4640      	mov	r0, r8
 800241a:	f7fd fed9 	bl	80001d0 <strcmp>

    // Store the epoch value
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 800241e:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 8002422:	17d1      	asrs	r1, r2, #31
 8002424:	0409      	lsls	r1, r1, #16
 8002426:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800242a:	430b      	orrs	r3, r1
 800242c:	9910      	ldr	r1, [sp, #64]	@ 0x40
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 800242e:	fab0 f080 	clz	r0, r0
 8002432:	0940      	lsrs	r0, r0, #5
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 8002434:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8002438:	ea43 73e1 	orr.w	r3, r3, r1, asr #31
 800243c:	e9c4 2308 	strd	r2, r3, [r4, #32]
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8002440:	6320      	str	r0, [r4, #48]	@ 0x30
}
 8002442:	b054      	add	sp, #336	@ 0x150
 8002444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002448:	0800e04f 	.word	0x0800e04f
 800244c:	0800d8c5 	.word	0x0800d8c5

08002450 <readFlash>:

RMCSTRUCT readFlash(uint32_t addr){
 8002450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002452:	460d      	mov	r5, r1
 8002454:	b0a7      	sub	sp, #156	@ 0x9c
	Uint32ToHex(addr, addr_out_flash, 8);
 8002456:	2208      	movs	r2, #8
 8002458:	4942      	ldr	r1, [pc, #264]	@ (8002564 <readFlash+0x114>)
RMCSTRUCT readFlash(uint32_t addr){
 800245a:	4604      	mov	r4, r0
	Uint32ToHex(addr, addr_out_flash, 8);
 800245c:	4628      	mov	r0, r5
 800245e:	f000 fcdb 	bl	8002e18 <Uint32ToHex>
	printf("Address received from FLASH: %s \n", addr_out_flash);
 8002462:	4940      	ldr	r1, [pc, #256]	@ (8002564 <readFlash+0x114>)
 8002464:	4840      	ldr	r0, [pc, #256]	@ (8002568 <readFlash+0x118>)
 8002466:	f007 f8c9 	bl	80095fc <iprintf>
	W25_Reset();
 800246a:	f7ff fb6e 	bl	8001b4a <W25_Reset>
	W25_ReadData(addr, flashBufferRMCReceived, 128);
 800246e:	2280      	movs	r2, #128	@ 0x80
 8002470:	493e      	ldr	r1, [pc, #248]	@ (800256c <readFlash+0x11c>)
 8002472:	4628      	mov	r0, r5
 8002474:	f7ff fc8a 	bl	8001d8c <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA at READ FLASH received: ";
 8002478:	4b3d      	ldr	r3, [pc, #244]	@ (8002570 <readFlash+0x120>)
 800247a:	aa07      	add	r2, sp, #28
 800247c:	f103 0720 	add.w	r7, r3, #32
 8002480:	4616      	mov	r6, r2
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	6859      	ldr	r1, [r3, #4]
 8002486:	4615      	mov	r5, r2
 8002488:	c503      	stmia	r5!, {r0, r1}
 800248a:	3308      	adds	r3, #8
 800248c:	42bb      	cmp	r3, r7
 800248e:	462a      	mov	r2, r5
 8002490:	d1f7      	bne.n	8002482 <readFlash+0x32>
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	6028      	str	r0, [r5, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8002496:	4630      	mov	r0, r6
 8002498:	f7fd fefa 	bl	8000290 <strlen>
 800249c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024a0:	b282      	uxth	r2, r0
 80024a2:	4631      	mov	r1, r6
 80024a4:	4833      	ldr	r0, [pc, #204]	@ (8002574 <readFlash+0x124>)
 80024a6:	f003 faa7 	bl	80059f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 80024aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024ae:	492f      	ldr	r1, [pc, #188]	@ (800256c <readFlash+0x11c>)
 80024b0:	4830      	ldr	r0, [pc, #192]	@ (8002574 <readFlash+0x124>)
 80024b2:	2280      	movs	r2, #128	@ 0x80
 80024b4:	f003 faa0 	bl	80059f8 <HAL_UART_Transmit>

	RMCSTRUCT rmc = {0};
 80024b8:	2258      	movs	r2, #88	@ 0x58
 80024ba:	2100      	movs	r1, #0
 80024bc:	a810      	add	r0, sp, #64	@ 0x40
 80024be:	f007 fa6d 	bl	800999c <memset>
	parseRMCString(flashBufferRMCReceived, &rmc);
 80024c2:	482a      	ldr	r0, [pc, #168]	@ (800256c <readFlash+0x11c>)
 80024c4:	a910      	add	r1, sp, #64	@ 0x40
 80024c6:	f7ff ff67 	bl	8002398 <parseRMCString>

	if(IsPageValid(flashBufferRMCReceived) == 0){
 80024ca:	4828      	ldr	r0, [pc, #160]	@ (800256c <readFlash+0x11c>)
 80024cc:	f7ff fc90 	bl	8001df0 <IsPageValid>
 80024d0:	4a29      	ldr	r2, [pc, #164]	@ (8002578 <readFlash+0x128>)
 80024d2:	2800      	cmp	r0, #0
 80024d4:	d141      	bne.n	800255a <readFlash+0x10a>
		is_read_flash_valid = 0;
 80024d6:	6010      	str	r0, [r2, #0]
		rmc.isValid = 0;
 80024d8:	901c      	str	r0, [sp, #112]	@ 0x70
		printf("\n\n--------------------- READING FLASH (RMC) ERROR ----------------------------\n\n");
 80024da:	4828      	ldr	r0, [pc, #160]	@ (800257c <readFlash+0x12c>)
	}
	else{
		is_read_flash_valid = 1;
		rmc.isValid = 1;
		printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 80024dc:	f007 f8fe 	bl	80096dc <puts>
	}

	printf("Date: %02d-%02d-%02d\n", rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
 80024e0:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	@ 0x50
 80024e4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80024e6:	4826      	ldr	r0, [pc, #152]	@ (8002580 <readFlash+0x130>)
 80024e8:	f007 f888 	bl	80095fc <iprintf>

	printf("Time: %02d:%02d:%02d\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 80024ec:	e9dd 2311 	ldrd	r2, r3, [sp, #68]	@ 0x44
 80024f0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80024f2:	4824      	ldr	r0, [pc, #144]	@ (8002584 <readFlash+0x134>)
 80024f4:	f007 f882 	bl	80095fc <iprintf>

	printf("Location: %.6f %c, %.6f %c\n", rmc.lcation.latitude, rmc.lcation.NS,
 80024f8:	f89d 3090 	ldrb.w	r3, [sp, #144]	@ 0x90
 80024fc:	9304      	str	r3, [sp, #16]
 80024fe:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	@ 0x88
 8002502:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002506:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	481e      	ldr	r0, [pc, #120]	@ (8002588 <readFlash+0x138>)
 800250e:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	@ 0x78
 8002512:	f007 f873 	bl	80095fc <iprintf>
		   rmc.lcation.longitude, rmc.lcation.EW);

	printf("Speed: %.2f\n", rmc.speed);
 8002516:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8002518:	f7fe f826 	bl	8000568 <__aeabi_f2d>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	481a      	ldr	r0, [pc, #104]	@ (800258c <readFlash+0x13c>)
 8002522:	f007 f86b 	bl	80095fc <iprintf>

	printf("Course: %.2f\n", rmc.course);
 8002526:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8002528:	f7fe f81e 	bl	8000568 <__aeabi_f2d>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4817      	ldr	r0, [pc, #92]	@ (8002590 <readFlash+0x140>)
 8002532:	f007 f863 	bl	80095fc <iprintf>

	printf("Validity: %s\n", rmc.isValid ? "Valid" : "Invalid");
 8002536:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <readFlash+0x144>)
 8002538:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800253a:	4a17      	ldr	r2, [pc, #92]	@ (8002598 <readFlash+0x148>)
 800253c:	4817      	ldr	r0, [pc, #92]	@ (800259c <readFlash+0x14c>)
 800253e:	2900      	cmp	r1, #0
 8002540:	bf0c      	ite	eq
 8002542:	4611      	moveq	r1, r2
 8002544:	4619      	movne	r1, r3
 8002546:	f007 f859 	bl	80095fc <iprintf>

	return rmc;
 800254a:	2258      	movs	r2, #88	@ 0x58
 800254c:	a910      	add	r1, sp, #64	@ 0x40
 800254e:	4620      	mov	r0, r4
 8002550:	f008 f8ce 	bl	800a6f0 <memcpy>
}
 8002554:	4620      	mov	r0, r4
 8002556:	b027      	add	sp, #156	@ 0x9c
 8002558:	bdf0      	pop	{r4, r5, r6, r7, pc}
		is_read_flash_valid = 1;
 800255a:	2301      	movs	r3, #1
		printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 800255c:	4810      	ldr	r0, [pc, #64]	@ (80025a0 <readFlash+0x150>)
		is_read_flash_valid = 1;
 800255e:	6013      	str	r3, [r2, #0]
		rmc.isValid = 1;
 8002560:	931c      	str	r3, [sp, #112]	@ 0x70
		printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 8002562:	e7bb      	b.n	80024dc <readFlash+0x8c>
 8002564:	2000240c 	.word	0x2000240c
 8002568:	0800e089 	.word	0x0800e089
 800256c:	200035d0 	.word	0x200035d0
 8002570:	0800e1c3 	.word	0x0800e1c3
 8002574:	20002124 	.word	0x20002124
 8002578:	20000000 	.word	0x20000000
 800257c:	0800e0ab 	.word	0x0800e0ab
 8002580:	0800e152 	.word	0x0800e152
 8002584:	0800e168 	.word	0x0800e168
 8002588:	0800e17e 	.word	0x0800e17e
 800258c:	0800e19a 	.word	0x0800e19a
 8002590:	0800e1a7 	.word	0x0800e1a7
 8002594:	0800d8c5 	.word	0x0800d8c5
 8002598:	0800d8cb 	.word	0x0800d8cb
 800259c:	0800e1b5 	.word	0x0800e1b5
 80025a0:	0800e0fb 	.word	0x0800e0fb

080025a4 <receiveRMCDataFromGPS>:


void receiveRMCDataFromGPS(void) {
 80025a4:	b530      	push	{r4, r5, lr}
	static int countRMCReceived = 0;
//	uint8_t output_buffer[70];

	// Wait until there are at least 10 messages in the queue

	osEvent evt = osMailGet(RMC_MailQFLASHId, 1000); // Wait for mail
 80025a6:	4d42      	ldr	r5, [pc, #264]	@ (80026b0 <receiveRMCDataFromGPS+0x10c>)
void receiveRMCDataFromGPS(void) {
 80025a8:	b085      	sub	sp, #20
	osEvent evt = osMailGet(RMC_MailQFLASHId, 1000); // Wait for mail
 80025aa:	6829      	ldr	r1, [r5, #0]
 80025ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025b0:	a801      	add	r0, sp, #4
 80025b2:	f003 fcbc 	bl	8005f2e <osMailGet>
 80025b6:	9901      	ldr	r1, [sp, #4]
	if(evt.status == osEventMail){
 80025b8:	2920      	cmp	r1, #32
 80025ba:	d173      	bne.n	80026a4 <receiveRMCDataFromGPS+0x100>
		printf("\nReceived  RMC Data SPI FLASH: \n");
 80025bc:	483d      	ldr	r0, [pc, #244]	@ (80026b4 <receiveRMCDataFromGPS+0x110>)
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
	//Sending DATA to GSM
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 80025be:	4c3e      	ldr	r4, [pc, #248]	@ (80026b8 <receiveRMCDataFromGPS+0x114>)
		printf("\nReceived  RMC Data SPI FLASH: \n");
 80025c0:	f007 f88c 	bl	80096dc <puts>
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
 80025c4:	9902      	ldr	r1, [sp, #8]
		rmc_flash.tim.min = receivedData->tim.min;
		rmc_flash.tim.sec = receivedData->tim.sec;
		rmc_flash.date.Yr = receivedData->date.Yr;
		rmc_flash.date.Mon = receivedData->date.Mon;
		rmc_flash.date.Day = receivedData->date.Day;
		osMailFree(RMC_MailQFLASHId, receivedData);
 80025c6:	6828      	ldr	r0, [r5, #0]
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 80025c8:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	@ 0x38
 80025cc:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_flash.lcation.longitude = receivedData->lcation.longitude;
 80025d0:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	@ 0x48
 80025d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_flash.speed = receivedData->speed;
 80025d8:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80025da:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_flash.course = receivedData->course;
 80025dc:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80025de:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_flash.lcation.NS = receivedData->lcation.NS;
 80025e0:	f891 3040 	ldrb.w	r3, [r1, #64]	@ 0x40
 80025e4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_flash.lcation.EW = receivedData->lcation.EW;
 80025e8:	f891 3050 	ldrb.w	r3, [r1, #80]	@ 0x50
 80025ec:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_flash.isValid = receivedData->isValid;
 80025f0:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80025f2:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_flash.tim.hour = receivedData->tim.hour;
 80025f4:	680b      	ldr	r3, [r1, #0]
 80025f6:	6023      	str	r3, [r4, #0]
		rmc_flash.tim.min = receivedData->tim.min;
 80025f8:	684b      	ldr	r3, [r1, #4]
 80025fa:	6063      	str	r3, [r4, #4]
		rmc_flash.tim.sec = receivedData->tim.sec;
 80025fc:	688b      	ldr	r3, [r1, #8]
 80025fe:	60a3      	str	r3, [r4, #8]
		rmc_flash.date.Yr = receivedData->date.Yr;
 8002600:	698b      	ldr	r3, [r1, #24]
 8002602:	61a3      	str	r3, [r4, #24]
		rmc_flash.date.Mon = receivedData->date.Mon;
 8002604:	694b      	ldr	r3, [r1, #20]
 8002606:	6163      	str	r3, [r4, #20]
		rmc_flash.date.Day = receivedData->date.Day;
 8002608:	690b      	ldr	r3, [r1, #16]
 800260a:	6123      	str	r3, [r4, #16]
		osMailFree(RMC_MailQFLASHId, receivedData);
 800260c:	f003 fcc8 	bl	8005fa0 <osMailFree>
		if(rmc_flash.date.Yr >= 24){
 8002610:	69a3      	ldr	r3, [r4, #24]
 8002612:	2b17      	cmp	r3, #23
 8002614:	dd44      	ble.n	80026a0 <receiveRMCDataFromGPS+0xfc>
			countRMCReceived++;
 8002616:	4d29      	ldr	r5, [pc, #164]	@ (80026bc <receiveRMCDataFromGPS+0x118>)
			printf("\n\n --------------------------------- COUNT RMC RECEIVED AT SPI FLASH is %d --------------------------\n\n", countRMCReceived);
 8002618:	4829      	ldr	r0, [pc, #164]	@ (80026c0 <receiveRMCDataFromGPS+0x11c>)
			countRMCReceived++;
 800261a:	6829      	ldr	r1, [r5, #0]
 800261c:	3101      	adds	r1, #1
 800261e:	6029      	str	r1, [r5, #0]
			printf("\n\n --------------------------------- COUNT RMC RECEIVED AT SPI FLASH is %d --------------------------\n\n", countRMCReceived);
 8002620:	f006 ffec 	bl	80095fc <iprintf>


			printf("Time Received from GPS AT SPI FLASH: %d:%d:%d\n", rmc_flash.tim.hour, rmc_flash.tim.min, rmc_flash.tim.sec);
 8002624:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002628:	6821      	ldr	r1, [r4, #0]
 800262a:	4826      	ldr	r0, [pc, #152]	@ (80026c4 <receiveRMCDataFromGPS+0x120>)
 800262c:	f006 ffe6 	bl	80095fc <iprintf>
//
//		printf("Location Received FROM GPS AT SPI FLASH: %.6f %c, %.6f %c\n", rmc_flash.lcation.latitude, rmc_flash.lcation.NS, rmc_flash.lcation.longitude, rmc_flash.lcation.EW);
//
//		printf("Speed FROM GPS AT SPI FLASH: %.2f, Course: %.2f, Valid: %d\n\n\n", rmc_flash.speed, rmc_flash.course, rmc_flash.isValid);

			format_rmc_data(&rmc_flash,(char*) rmcBufferDemo, 128);
 8002630:	4925      	ldr	r1, [pc, #148]	@ (80026c8 <receiveRMCDataFromGPS+0x124>)
 8002632:	2280      	movs	r2, #128	@ 0x80
 8002634:	4620      	mov	r0, r4
 8002636:	f7ff fcb7 	bl	8001fa8 <format_rmc_data>

			if(countRMCReceived == 28){
 800263a:	682b      	ldr	r3, [r5, #0]
 800263c:	2b1c      	cmp	r3, #28
 800263e:	d12f      	bne.n	80026a0 <receiveRMCDataFromGPS+0xfc>

				saveRMC();
 8002640:	f7ff fd08 	bl	8002054 <saveRMC>
				printf("---------------------Sending the current data----------------");
 8002644:	4821      	ldr	r0, [pc, #132]	@ (80026cc <receiveRMCDataFromGPS+0x128>)
 8002646:	f006 ffd9 	bl	80095fc <iprintf>
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 800264a:	4b21      	ldr	r3, [pc, #132]	@ (80026d0 <receiveRMCDataFromGPS+0x12c>)
				mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
				mail_gsm.rmc.speed = rmc_flash.speed;
 800264c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800264e:	629a      	str	r2, [r3, #40]	@ 0x28
				mail_gsm.rmc.course = rmc_flash.course;
 8002650:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002652:	62da      	str	r2, [r3, #44]	@ 0x2c
				mail_gsm.rmc.lcation.NS = rmc_flash.lcation.NS;
 8002654:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
				mail_gsm.rmc.lcation.EW = rmc_flash.lcation.EW;
 800265c:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 8002660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				mail_gsm.rmc.isValid = rmc_flash.isValid;
 8002664:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002666:	631a      	str	r2, [r3, #48]	@ 0x30
				mail_gsm.rmc.tim.hour = rmc_flash.tim.hour;
 8002668:	6822      	ldr	r2, [r4, #0]
 800266a:	601a      	str	r2, [r3, #0]
				mail_gsm.rmc.tim.min = rmc_flash.tim.min;
 800266c:	6862      	ldr	r2, [r4, #4]
 800266e:	605a      	str	r2, [r3, #4]
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 8002670:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
				mail_gsm.rmc.tim.sec = rmc_flash.tim.sec;
 8002674:	68a2      	ldr	r2, [r4, #8]
 8002676:	609a      	str	r2, [r3, #8]
				mail_gsm.rmc.date.Yr = rmc_flash.date.Yr;
 8002678:	69a2      	ldr	r2, [r4, #24]
 800267a:	619a      	str	r2, [r3, #24]
				mail_gsm.rmc.date.Mon = rmc_flash.date.Mon;
 800267c:	6962      	ldr	r2, [r4, #20]
 800267e:	615a      	str	r2, [r3, #20]
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 8002680:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
				mail_gsm.rmc.date.Day = rmc_flash.date.Day;
 8002684:	6922      	ldr	r2, [r4, #16]
 8002686:	611a      	str	r2, [r3, #16]
				mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
 8002688:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
				mail_gsm.address = current_addr;
 800268c:	4a11      	ldr	r2, [pc, #68]	@ (80026d4 <receiveRMCDataFromGPS+0x130>)
				mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
 800268e:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
				mail_gsm.address = current_addr;
 8002692:	6811      	ldr	r1, [r2, #0]

				printf("-------------------SENDING CURRENT ADDR DATA: %08lx----------------------", mail_gsm.address);
 8002694:	4810      	ldr	r0, [pc, #64]	@ (80026d8 <receiveRMCDataFromGPS+0x134>)
				mail_gsm.address = current_addr;
 8002696:	6599      	str	r1, [r3, #88]	@ 0x58
				printf("-------------------SENDING CURRENT ADDR DATA: %08lx----------------------", mail_gsm.address);
 8002698:	f006 ffb0 	bl	80095fc <iprintf>
//				sendRMCDataWithAddrToGSM(&mail_gsm);
				countRMCReceived = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	602b      	str	r3, [r5, #0]
		}
	}
	else{
		printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",evt.status);
	}
}
 80026a0:	b005      	add	sp, #20
 80026a2:	bd30      	pop	{r4, r5, pc}
		printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",evt.status);
 80026a4:	480d      	ldr	r0, [pc, #52]	@ (80026dc <receiveRMCDataFromGPS+0x138>)
}
 80026a6:	b005      	add	sp, #20
 80026a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",evt.status);
 80026ac:	f006 bfa6 	b.w	80095fc <iprintf>
 80026b0:	20001ef0 	.word	0x20001ef0
 80026b4:	0800e1e7 	.word	0x0800e1e7
 80026b8:	20002478 	.word	0x20002478
 80026bc:	20002408 	.word	0x20002408
 80026c0:	0800e207 	.word	0x0800e207
 80026c4:	0800e26f 	.word	0x0800e26f
 80026c8:	20003550 	.word	0x20003550
 80026cc:	0800e29e 	.word	0x0800e29e
 80026d0:	20002418 	.word	0x20002418
 80026d4:	20000004 	.word	0x20000004
 80026d8:	0800e2dc 	.word	0x0800e2dc
 80026dc:	0800e326 	.word	0x0800e326

080026e0 <StartSpiFlash>:



void StartSpiFlash(void const * argument)
{
 80026e0:	b580      	push	{r7, lr}
  /* USER CODE BEGIN StartSpiFlash */
  /* Infinite loop */
	printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 80026e2:	4847      	ldr	r0, [pc, #284]	@ (8002800 <StartSpiFlash+0x120>)
//	myMutex = osMutexNew(NULL);  // NULL means default attributes
//	if (myMutex == NULL) {
//		printf("\n\n ----------------- Failed to create mutex -----------------\n\n");
//	}
//	printf("\n\n --------------------Creating a MESSAGE QUEUE --------------------- \n\n");
	rmc_saved = readFlash(0x9000);
 80026e4:	4c47      	ldr	r4, [pc, #284]	@ (8002804 <StartSpiFlash+0x124>)
	current_addr = address_rmc;
 80026e6:	4e48      	ldr	r6, [pc, #288]	@ (8002808 <StartSpiFlash+0x128>)
{
 80026e8:	b09c      	sub	sp, #112	@ 0x70
	printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 80026ea:	f006 fff7 	bl	80096dc <puts>
	current_addr = address_rmc;
 80026ee:	4b47      	ldr	r3, [pc, #284]	@ (800280c <StartSpiFlash+0x12c>)
	rmc_saved = readFlash(0x9000);
 80026f0:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
	current_addr = address_rmc;
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6033      	str	r3, [r6, #0]
	rmc_saved = readFlash(0x9000);
 80026f8:	4668      	mov	r0, sp
 80026fa:	f7ff fea9 	bl	8002450 <readFlash>
 80026fe:	2258      	movs	r2, #88	@ 0x58
 8002700:	4669      	mov	r1, sp
 8002702:	4620      	mov	r0, r4
 8002704:	f007 fff4 	bl	800a6f0 <memcpy>
	printf("\n-------------------------- BACK UP GPS FROM FLASH ----------------------- \n");
 8002708:	4841      	ldr	r0, [pc, #260]	@ (8002810 <StartSpiFlash+0x130>)
 800270a:	f006 ffe7 	bl	80096dc <puts>
	if(rmc_saved.isValid == 0){
 800270e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8002710:	b9f5      	cbnz	r5, 8002750 <StartSpiFlash+0x70>
		printf("There is not back up GPS from FLASH");
 8002712:	4840      	ldr	r0, [pc, #256]	@ (8002814 <StartSpiFlash+0x134>)
 8002714:	f006 ff72 	bl	80095fc <iprintf>
		rmc_saved.tim.hour = 0;
		rmc_saved.tim.min = 0;
		rmc_saved.tim.sec = 0;
		rmc_saved.lcation.latitude = 20.998022;
 8002718:	a335      	add	r3, pc, #212	@ (adr r3, 80027f0 <StartSpiFlash+0x110>)
 800271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271e:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_saved.lcation.longitude = 105.794756;
 8002722:	a335      	add	r3, pc, #212	@ (adr r3, 80027f8 <StartSpiFlash+0x118>)
 8002724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002728:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_saved.speed = 22.4;
 800272c:	4b3a      	ldr	r3, [pc, #232]	@ (8002818 <StartSpiFlash+0x138>)
 800272e:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_saved.course = 30.5;
 8002730:	4b3a      	ldr	r3, [pc, #232]	@ (800281c <StartSpiFlash+0x13c>)
 8002732:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_saved.lcation.NS = 'N';
 8002734:	234e      	movs	r3, #78	@ 0x4e
 8002736:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_saved.tim.min = 0;
 800273a:	e9c4 5500 	strd	r5, r5, [r4]
		rmc_saved.lcation.EW = 'E';
 800273e:	2345      	movs	r3, #69	@ 0x45
		rmc_saved.isValid = 1;
		rmc_saved.date.Day = 0;
		rmc_saved.date.Mon = 0;
 8002740:	e9c4 5504 	strd	r5, r5, [r4, #16]
		rmc_saved.lcation.EW = 'E';
 8002744:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_saved.isValid = 1;
 8002748:	2301      	movs	r3, #1
		rmc_saved.tim.sec = 0;
 800274a:	60a5      	str	r5, [r4, #8]
		rmc_saved.isValid = 1;
 800274c:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_saved.date.Yr = 0;
 800274e:	61a5      	str	r5, [r4, #24]
	}

	for(;;){
		if (osMutexWait(myMutexHandle, osWaitForever) == osOK){
 8002750:	4d33      	ldr	r5, [pc, #204]	@ (8002820 <StartSpiFlash+0x140>)
	//		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
	//		printf("\n\n --------------Thread SPI FLASH %p stack: %04ld bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
			W25_Reset();
			W25_ReadJedecID();
			W25_Reset();
			W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8002752:	f8df 80e4 	ldr.w	r8, [pc, #228]	@ 8002838 <StartSpiFlash+0x158>
			char spi_flash_data_intro[] = "Flash DATA received: ";
			HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8002756:	4f33      	ldr	r7, [pc, #204]	@ (8002824 <StartSpiFlash+0x144>)
		if (osMutexWait(myMutexHandle, osWaitForever) == osOK){
 8002758:	6828      	ldr	r0, [r5, #0]
 800275a:	f04f 31ff 	mov.w	r1, #4294967295
 800275e:	f003 faca 	bl	8005cf6 <osMutexWait>
 8002762:	2800      	cmp	r0, #0
 8002764:	d1f8      	bne.n	8002758 <StartSpiFlash+0x78>
			osDelay(500);
 8002766:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800276a:	f003 fab5 	bl	8005cd8 <osDelay>
			printf("\n\n--------------------------- INSIDE SPI FLASH --------------------------------\n\n");
 800276e:	482e      	ldr	r0, [pc, #184]	@ (8002828 <StartSpiFlash+0x148>)
 8002770:	f006 ffb4 	bl	80096dc <puts>
			W25_Reset();
 8002774:	f7ff f9e9 	bl	8001b4a <W25_Reset>
			W25_ReadJedecID();
 8002778:	f7ff fa14 	bl	8001ba4 <W25_ReadJedecID>
			W25_Reset();
 800277c:	f7ff f9e5 	bl	8001b4a <W25_Reset>
			W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8002780:	2280      	movs	r2, #128	@ 0x80
 8002782:	6830      	ldr	r0, [r6, #0]
 8002784:	4641      	mov	r1, r8
 8002786:	f7ff fb01 	bl	8001d8c <W25_ReadData>
			char spi_flash_data_intro[] = "Flash DATA received: ";
 800278a:	4b28      	ldr	r3, [pc, #160]	@ (800282c <StartSpiFlash+0x14c>)
 800278c:	aa16      	add	r2, sp, #88	@ 0x58
 800278e:	f103 0c10 	add.w	ip, r3, #16
 8002792:	4691      	mov	r9, r2
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	4614      	mov	r4, r2
 800279a:	c403      	stmia	r4!, {r0, r1}
 800279c:	3308      	adds	r3, #8
 800279e:	4563      	cmp	r3, ip
 80027a0:	4622      	mov	r2, r4
 80027a2:	d1f7      	bne.n	8002794 <StartSpiFlash+0xb4>
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	889b      	ldrh	r3, [r3, #4]
 80027a8:	6020      	str	r0, [r4, #0]
 80027aa:	80a3      	strh	r3, [r4, #4]
			HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80027ac:	4648      	mov	r0, r9
 80027ae:	f7fd fd6f 	bl	8000290 <strlen>
 80027b2:	4649      	mov	r1, r9
 80027b4:	b282      	uxth	r2, r0
 80027b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027ba:	4638      	mov	r0, r7
 80027bc:	f003 f91c 	bl	80059f8 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 80027c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027c4:	2280      	movs	r2, #128	@ 0x80
 80027c6:	4641      	mov	r1, r8
 80027c8:	4638      	mov	r0, r7
 80027ca:	f003 f915 	bl	80059f8 <HAL_UART_Transmit>
			printf("\n------------- Current address FLASH: %08lx -------------\n", current_addr);
 80027ce:	6831      	ldr	r1, [r6, #0]
 80027d0:	4817      	ldr	r0, [pc, #92]	@ (8002830 <StartSpiFlash+0x150>)
 80027d2:	f006 ff13 	bl	80095fc <iprintf>
			//receiveTaxData();
			receiveRMCDataFromGPS();
 80027d6:	f7ff fee5 	bl	80025a4 <receiveRMCDataFromGPS>
			printf("\n\n");
 80027da:	4816      	ldr	r0, [pc, #88]	@ (8002834 <StartSpiFlash+0x154>)
 80027dc:	f006 ff7e 	bl	80096dc <puts>
			osMutexRelease(myMutexHandle);
 80027e0:	6828      	ldr	r0, [r5, #0]
 80027e2:	f003 faae 	bl	8005d42 <osMutexRelease>
			osDelay(500);
 80027e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80027ea:	f003 fa75 	bl	8005cd8 <osDelay>
 80027ee:	e7b3      	b.n	8002758 <StartSpiFlash+0x78>
 80027f0:	5eaab042 	.word	0x5eaab042
 80027f4:	4034ff7e 	.word	0x4034ff7e
 80027f8:	48451330 	.word	0x48451330
 80027fc:	405a72dd 	.word	0x405a72dd
 8002800:	0800e38d 	.word	0x0800e38d
 8002804:	20000370 	.word	0x20000370
 8002808:	20000004 	.word	0x20000004
 800280c:	20000008 	.word	0x20000008
 8002810:	0800e3e4 	.word	0x0800e3e4
 8002814:	0800e430 	.word	0x0800e430
 8002818:	41b33333 	.word	0x41b33333
 800281c:	41f40000 	.word	0x41f40000
 8002820:	20001ef8 	.word	0x20001ef8
 8002824:	20002124 	.word	0x20002124
 8002828:	0800e454 	.word	0x0800e454
 800282c:	0800e010 	.word	0x0800e010
 8002830:	0800e4a5 	.word	0x0800e4a5
 8002834:	0800dfb1 	.word	0x0800dfb1
 8002838:	200035d0 	.word	0x200035d0

0800283c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283c:	4b0d      	ldr	r3, [pc, #52]	@ (8002874 <HAL_MspInit+0x38>)
 800283e:	699a      	ldr	r2, [r3, #24]
 8002840:	f042 0201 	orr.w	r2, r2, #1
 8002844:	619a      	str	r2, [r3, #24]
 8002846:	699a      	ldr	r2, [r3, #24]
{
 8002848:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284a:	f002 0201 	and.w	r2, r2, #1
 800284e:	9200      	str	r2, [sp, #0]
 8002850:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	69da      	ldr	r2, [r3, #28]
 8002854:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002858:	61da      	str	r2, [r3, #28]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002864:	2200      	movs	r2, #0
 8002866:	210f      	movs	r1, #15
 8002868:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800286c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800286e:	f001 b8e9 	b.w	8003a44 <HAL_NVIC_SetPriority>
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000

08002878 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002878:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287a:	2214      	movs	r2, #20
{
 800287c:	b08a      	sub	sp, #40	@ 0x28
 800287e:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	2100      	movs	r1, #0
 8002882:	eb0d 0002 	add.w	r0, sp, r2
 8002886:	f007 f889 	bl	800999c <memset>
  if(hadc->Instance==ADC2)
 800288a:	682b      	ldr	r3, [r5, #0]
 800288c:	4a3d      	ldr	r2, [pc, #244]	@ (8002984 <HAL_ADC_MspInit+0x10c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d137      	bne.n	8002902 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002892:	4b3d      	ldr	r3, [pc, #244]	@ (8002988 <HAL_ADC_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8002894:	4c3d      	ldr	r4, [pc, #244]	@ (800298c <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800289c:	615a      	str	r2, [r3, #20]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80028a4:	9201      	str	r2, [sp, #4]
 80028a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80028ae:	615a      	str	r2, [r3, #20]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b6:	9302      	str	r3, [sp, #8]
 80028b8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ba:	2620      	movs	r6, #32
 80028bc:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028c2:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028c4:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c8:	f001 f9c0 	bl	8003c4c <HAL_GPIO_Init>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028d0:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 80029a0 <HAL_ADC_MspInit+0x128>
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028d4:	f04f 0e80 	mov.w	lr, #128	@ 0x80
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028d8:	2300      	movs	r3, #0
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028da:	e9c4 e203 	strd	lr, r2, [r4, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80028de:	4620      	mov	r0, r4
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028e4:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80028e8:	e9c4 2605 	strd	r2, r6, [r4, #20]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ec:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80028ee:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80028f0:	f001 f908 	bl	8003b04 <HAL_DMA_Init>
 80028f4:	b108      	cbz	r0, 80028fa <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 80028f6:	f7ff f8e0 	bl	8001aba <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80028fa:	63ac      	str	r4, [r5, #56]	@ 0x38
 80028fc:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80028fe:	b00a      	add	sp, #40	@ 0x28
 8002900:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC3)
 8002902:	4a23      	ldr	r2, [pc, #140]	@ (8002990 <HAL_ADC_MspInit+0x118>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d1fa      	bne.n	80028fe <HAL_ADC_MspInit+0x86>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002908:	4b1f      	ldr	r3, [pc, #124]	@ (8002988 <HAL_ADC_MspInit+0x110>)
    hdma_adc3.Instance = DMA2_Channel5;
 800290a:	4c22      	ldr	r4, [pc, #136]	@ (8002994 <HAL_ADC_MspInit+0x11c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 800290c:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290e:	4822      	ldr	r0, [pc, #136]	@ (8002998 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002910:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002914:	615a      	str	r2, [r3, #20]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 800291c:	9203      	str	r2, [sp, #12]
 800291e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002926:	615a      	str	r2, [r3, #20]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800292e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002930:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002932:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002934:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002936:	2303      	movs	r3, #3
 8002938:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293c:	f001 f986 	bl	8003c4c <HAL_GPIO_Init>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002940:	2080      	movs	r0, #128	@ 0x80
 8002942:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002946:	4915      	ldr	r1, [pc, #84]	@ (800299c <HAL_ADC_MspInit+0x124>)
 8002948:	2300      	movs	r3, #0
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800294a:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800294e:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 8002952:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002954:	4620      	mov	r0, r4
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002956:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800295a:	e9c4 6205 	strd	r6, r2, [r4, #20]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800295e:	60a3      	str	r3, [r4, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002960:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002962:	f001 f8cf 	bl	8003b04 <HAL_DMA_Init>
 8002966:	b108      	cbz	r0, 800296c <HAL_ADC_MspInit+0xf4>
      Error_Handler();
 8002968:	f7ff f8a7 	bl	8001aba <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800296c:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2105      	movs	r1, #5
 8002972:	202f      	movs	r0, #47	@ 0x2f
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002974:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8002976:	f001 f865 	bl	8003a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800297a:	202f      	movs	r0, #47	@ 0x2f
 800297c:	f001 f894 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
}
 8002980:	e7bd      	b.n	80028fe <HAL_ADC_MspInit+0x86>
 8002982:	bf00      	nop
 8002984:	50000100 	.word	0x50000100
 8002988:	40021000 	.word	0x40021000
 800298c:	20002324 	.word	0x20002324
 8002990:	50000400 	.word	0x50000400
 8002994:	200022e0 	.word	0x200022e0
 8002998:	48000400 	.word	0x48000400
 800299c:	40020458 	.word	0x40020458
 80029a0:	40020408 	.word	0x40020408

080029a4 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80029a4:	6802      	ldr	r2, [r0, #0]
 80029a6:	4b07      	ldr	r3, [pc, #28]	@ (80029c4 <HAL_RTC_MspInit+0x20>)
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d10a      	bne.n	80029c2 <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80029b0:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80029b4:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <HAL_RTC_MspInit+0x24>)
 80029b6:	fab2 f282 	clz	r2, r2
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80029c2:	4770      	bx	lr
 80029c4:	40002800 	.word	0x40002800
 80029c8:	10908100 	.word	0x10908100

080029cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029cc:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ce:	2214      	movs	r2, #20
{
 80029d0:	b08a      	sub	sp, #40	@ 0x28
 80029d2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	2100      	movs	r1, #0
 80029d6:	eb0d 0002 	add.w	r0, sp, r2
 80029da:	f006 ffdf 	bl	800999c <memset>
  if(hspi->Instance==SPI1)
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a5c <HAL_SPI_MspInit+0x90>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d120      	bne.n	8002a28 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a60 <HAL_SPI_MspInit+0x94>)
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80029ee:	619a      	str	r2, [r3, #24]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80029f6:	9201      	str	r2, [sp, #4]
 80029f8:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002a00:	615a      	str	r2, [r3, #20]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a08:	9302      	str	r3, [sp, #8]
 8002a0a:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002a0c:	2338      	movs	r3, #56	@ 0x38
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002a0e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a12:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a16:	2305      	movs	r3, #5
 8002a18:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1c:	4811      	ldr	r0, [pc, #68]	@ (8002a64 <HAL_SPI_MspInit+0x98>)
 8002a1e:	a905      	add	r1, sp, #20
 8002a20:	f001 f914 	bl	8003c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a24:	b00a      	add	sp, #40	@ 0x28
 8002a26:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8002a28:	4a0f      	ldr	r2, [pc, #60]	@ (8002a68 <HAL_SPI_MspInit+0x9c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d1fa      	bne.n	8002a24 <HAL_SPI_MspInit+0x58>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <HAL_SPI_MspInit+0x94>)
 8002a30:	69da      	ldr	r2, [r3, #28]
 8002a32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a36:	61da      	str	r2, [r3, #28]
 8002a38:	69da      	ldr	r2, [r3, #28]
 8002a3a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002a3e:	9203      	str	r2, [sp, #12]
 8002a40:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002a48:	615a      	str	r2, [r3, #20]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a50:	9304      	str	r3, [sp, #16]
 8002a52:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002a54:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002a58:	e7d9      	b.n	8002a0e <HAL_SPI_MspInit+0x42>
 8002a5a:	bf00      	nop
 8002a5c:	40013000 	.word	0x40013000
 8002a60:	40021000 	.word	0x40021000
 8002a64:	48000400 	.word	0x48000400
 8002a68:	40003800 	.word	0x40003800

08002a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a6c:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa8 <HAL_TIM_Base_MspInit+0x3c>)
 8002a70:	6802      	ldr	r2, [r0, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d115      	bne.n	8002aa2 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a76:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002a7a:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a7c:	69da      	ldr	r2, [r3, #28]
 8002a7e:	f042 0202 	orr.w	r2, r2, #2
 8002a82:	61da      	str	r2, [r3, #28]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a90:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002a92:	f000 ffd7 	bl	8003a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a96:	201d      	movs	r0, #29

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002a98:	b003      	add	sp, #12
 8002a9a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a9e:	f001 b803 	b.w	8003aa8 <HAL_NVIC_EnableIRQ>
}
 8002aa2:	b003      	add	sp, #12
 8002aa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002aa8:	40000400 	.word	0x40000400

08002aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aac:	b530      	push	{r4, r5, lr}
 8002aae:	4605      	mov	r5, r0
 8002ab0:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab2:	2214      	movs	r2, #20
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	a807      	add	r0, sp, #28
 8002ab8:	f006 ff70 	bl	800999c <memset>
  if(huart->Instance==USART1)
 8002abc:	682b      	ldr	r3, [r5, #0]
 8002abe:	4a59      	ldr	r2, [pc, #356]	@ (8002c24 <HAL_UART_MspInit+0x178>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d14d      	bne.n	8002b60 <HAL_UART_MspInit+0xb4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ac4:	4b58      	ldr	r3, [pc, #352]	@ (8002c28 <HAL_UART_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002ac6:	4c59      	ldr	r4, [pc, #356]	@ (8002c2c <HAL_UART_MspInit+0x180>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ace:	619a      	str	r2, [r3, #24]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002ad6:	9201      	str	r2, [sp, #4]
 8002ad8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002ae0:	615a      	str	r2, [r3, #20]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002af6:	2103      	movs	r1, #3
 8002af8:	2307      	movs	r3, #7
 8002afa:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b02:	a907      	add	r1, sp, #28
 8002b04:	f001 f8a2 	bl	8003c4c <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b08:	4849      	ldr	r0, [pc, #292]	@ (8002c30 <HAL_UART_MspInit+0x184>)
 8002b0a:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b0c:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b0e:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b12:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b16:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002b18:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b1a:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b1e:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b20:	6163      	str	r3, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b22:	f000 ffef 	bl	8003b04 <HAL_DMA_Init>
 8002b26:	b108      	cbz	r0, 8002b2c <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8002b28:	f7fe ffc7 	bl	8001aba <Error_Handler>

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b2c:	f8df e124 	ldr.w	lr, [pc, #292]	@ 8002c54 <HAL_UART_MspInit+0x1a8>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002b30:	676c      	str	r4, [r5, #116]	@ 0x74
 8002b32:	6265      	str	r5, [r4, #36]	@ 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002b34:	4c3f      	ldr	r4, [pc, #252]	@ (8002c34 <HAL_UART_MspInit+0x188>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b36:	2310      	movs	r3, #16
 8002b38:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b3c:	2280      	movs	r2, #128	@ 0x80
 8002b3e:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b40:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b42:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b46:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b4a:	e9c4 3306 	strd	r3, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b4e:	f000 ffd9 	bl	8003b04 <HAL_DMA_Init>
 8002b52:	b108      	cbz	r0, 8002b58 <HAL_UART_MspInit+0xac>
    {
      Error_Handler();
 8002b54:	f7fe ffb1 	bl	8001aba <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002b58:	672c      	str	r4, [r5, #112]	@ 0x70
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002b5a:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b5c:	b00d      	add	sp, #52	@ 0x34
 8002b5e:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 8002b60:	4a35      	ldr	r2, [pc, #212]	@ (8002c38 <HAL_UART_MspInit+0x18c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d137      	bne.n	8002bd6 <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b66:	4b30      	ldr	r3, [pc, #192]	@ (8002c28 <HAL_UART_MspInit+0x17c>)
 8002b68:	69da      	ldr	r2, [r3, #28]
 8002b6a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002b6e:	61da      	str	r2, [r3, #28]
 8002b70:	69da      	ldr	r2, [r3, #28]
 8002b72:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002b76:	9203      	str	r2, [sp, #12]
 8002b78:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002b80:	615a      	str	r2, [r3, #20]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b88:	9304      	str	r3, [sp, #16]
 8002b8a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8c:	240c      	movs	r4, #12
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b94:	f04f 0c03 	mov.w	ip, #3
 8002b98:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9a:	a907      	add	r1, sp, #28
 8002b9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ba0:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002ba4:	4c25      	ldr	r4, [pc, #148]	@ (8002c3c <HAL_UART_MspInit+0x190>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba6:	f001 f851 	bl	8003c4c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002baa:	4b25      	ldr	r3, [pc, #148]	@ (8002c40 <HAL_UART_MspInit+0x194>)
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002bac:	6023      	str	r3, [r4, #0]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bae:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bb0:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bb2:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bb6:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bba:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bc2:	e9c4 2306 	strd	r2, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f000 ff9c 	bl	8003b04 <HAL_DMA_Init>
 8002bcc:	b108      	cbz	r0, 8002bd2 <HAL_UART_MspInit+0x126>
      Error_Handler();
 8002bce:	f7fe ff74 	bl	8001aba <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002bd2:	676c      	str	r4, [r5, #116]	@ 0x74
 8002bd4:	e7c1      	b.n	8002b5a <HAL_UART_MspInit+0xae>
  else if(huart->Instance==USART3)
 8002bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c44 <HAL_UART_MspInit+0x198>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d1bf      	bne.n	8002b5c <HAL_UART_MspInit+0xb0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bdc:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <HAL_UART_MspInit+0x17c>)
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002bde:	4c1a      	ldr	r4, [pc, #104]	@ (8002c48 <HAL_UART_MspInit+0x19c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002be6:	61da      	str	r2, [r3, #28]
 8002be8:	69da      	ldr	r2, [r3, #28]
 8002bea:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8002bee:	9205      	str	r2, [sp, #20]
 8002bf0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002bf8:	615a      	str	r2, [r3, #20]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c00:	9306      	str	r3, [sp, #24]
 8002c02:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c0e:	2003      	movs	r0, #3
 8002c10:	2307      	movs	r3, #7
 8002c12:	e9cd 030a 	strd	r0, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c16:	a907      	add	r1, sp, #28
 8002c18:	480c      	ldr	r0, [pc, #48]	@ (8002c4c <HAL_UART_MspInit+0x1a0>)
 8002c1a:	f001 f817 	bl	8003c4c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c50 <HAL_UART_MspInit+0x1a4>)
 8002c20:	e7c4      	b.n	8002bac <HAL_UART_MspInit+0x100>
 8002c22:	bf00      	nop
 8002c24:	40013800 	.word	0x40013800
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	20001fd0 	.word	0x20001fd0
 8002c30:	40020058 	.word	0x40020058
 8002c34:	20001f8c 	.word	0x20001f8c
 8002c38:	40004400 	.word	0x40004400
 8002c3c:	20001f48 	.word	0x20001f48
 8002c40:	4002006c 	.word	0x4002006c
 8002c44:	40004800 	.word	0x40004800
 8002c48:	20001f04 	.word	0x20001f04
 8002c4c:	48000400 	.word	0x48000400
 8002c50:	40020030 	.word	0x40020030
 8002c54:	40020044 	.word	0x40020044

08002c58 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002c58:	4b21      	ldr	r3, [pc, #132]	@ (8002ce0 <HAL_InitTick+0x88>)
{
 8002c5a:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002c5c:	69da      	ldr	r2, [r3, #28]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	61da      	str	r2, [r3, #28]
 8002c64:	69db      	ldr	r3, [r3, #28]
{
 8002c66:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	9302      	str	r3, [sp, #8]
{
 8002c6e:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c70:	a901      	add	r1, sp, #4
 8002c72:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002c74:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c76:	f001 fc13 	bl	80044a0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c7a:	9b06      	ldr	r3, [sp, #24]
 8002c7c:	bb53      	cbnz	r3, 8002cd4 <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c7e:	f001 fbdf 	bl	8004440 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002c82:	4e18      	ldr	r6, [pc, #96]	@ (8002ce4 <HAL_InitTick+0x8c>)
 8002c84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002c88:	6033      	str	r3, [r6, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002c8a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002c8e:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c90:	4b15      	ldr	r3, [pc, #84]	@ (8002ce8 <HAL_InitTick+0x90>)
 8002c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c96:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8002c98:	6073      	str	r3, [r6, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 8002c9a:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca0:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca2:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 8002ca4:	f002 fb6c 	bl	8005380 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8002ca8:	4604      	mov	r4, r0
 8002caa:	b980      	cbnz	r0, 8002cce <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002cac:	4630      	mov	r0, r6
 8002cae:	f002 fa29 	bl	8005104 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8002cb2:	4604      	mov	r4, r0
 8002cb4:	b958      	cbnz	r0, 8002cce <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002cb6:	201c      	movs	r0, #28
 8002cb8:	f000 fef6 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cbc:	2d0f      	cmp	r5, #15
 8002cbe:	d80d      	bhi.n	8002cdc <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002cc0:	4622      	mov	r2, r4
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	201c      	movs	r0, #28
 8002cc6:	f000 febd 	bl	8003a44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cca:	4b08      	ldr	r3, [pc, #32]	@ (8002cec <HAL_InitTick+0x94>)
 8002ccc:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8002cce:	4620      	mov	r0, r4
 8002cd0:	b008      	add	sp, #32
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002cd4:	f001 fbb4 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 8002cd8:	0040      	lsls	r0, r0, #1
 8002cda:	e7d2      	b.n	8002c82 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8002cdc:	2401      	movs	r4, #1
 8002cde:	e7f6      	b.n	8002cce <HAL_InitTick+0x76>
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	20003658 	.word	0x20003658
 8002ce8:	000f4240 	.word	0x000f4240
 8002cec:	20000018 	.word	0x20000018

08002cf0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <NMI_Handler>

08002cf2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cf2:	e7fe      	b.n	8002cf2 <HardFault_Handler>

08002cf4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cf4:	e7fe      	b.n	8002cf4 <MemManage_Handler>

08002cf6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cf6:	e7fe      	b.n	8002cf6 <BusFault_Handler>

08002cf8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf8:	e7fe      	b.n	8002cf8 <UsageFault_Handler>

08002cfa <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cfa:	4770      	bx	lr

08002cfc <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002cfc:	4801      	ldr	r0, [pc, #4]	@ (8002d04 <DMA1_Channel3_IRQHandler+0x8>)
 8002cfe:	f000 bf5e 	b.w	8003bbe <HAL_DMA_IRQHandler>
 8002d02:	bf00      	nop
 8002d04:	20001f04 	.word	0x20001f04

08002d08 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002d08:	4801      	ldr	r0, [pc, #4]	@ (8002d10 <DMA1_Channel4_IRQHandler+0x8>)
 8002d0a:	f000 bf58 	b.w	8003bbe <HAL_DMA_IRQHandler>
 8002d0e:	bf00      	nop
 8002d10:	20001f8c 	.word	0x20001f8c

08002d14 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d14:	4801      	ldr	r0, [pc, #4]	@ (8002d1c <DMA1_Channel5_IRQHandler+0x8>)
 8002d16:	f000 bf52 	b.w	8003bbe <HAL_DMA_IRQHandler>
 8002d1a:	bf00      	nop
 8002d1c:	20001fd0 	.word	0x20001fd0

08002d20 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002d20:	4801      	ldr	r0, [pc, #4]	@ (8002d28 <DMA1_Channel6_IRQHandler+0x8>)
 8002d22:	f000 bf4c 	b.w	8003bbe <HAL_DMA_IRQHandler>
 8002d26:	bf00      	nop
 8002d28:	20001f48 	.word	0x20001f48

08002d2c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d2c:	4801      	ldr	r0, [pc, #4]	@ (8002d34 <TIM2_IRQHandler+0x8>)
 8002d2e:	f002 ba23 	b.w	8005178 <HAL_TIM_IRQHandler>
 8002d32:	bf00      	nop
 8002d34:	20003658 	.word	0x20003658

08002d38 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d38:	4801      	ldr	r0, [pc, #4]	@ (8002d40 <TIM3_IRQHandler+0x8>)
 8002d3a:	f002 ba1d 	b.w	8005178 <HAL_TIM_IRQHandler>
 8002d3e:	bf00      	nop
 8002d40:	200021ac 	.word	0x200021ac

08002d44 <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002d44:	4801      	ldr	r0, [pc, #4]	@ (8002d4c <ADC3_IRQHandler+0x8>)
 8002d46:	f000 ba81 	b.w	800324c <HAL_ADC_IRQHandler>
 8002d4a:	bf00      	nop
 8002d4c:	20002368 	.word	0x20002368

08002d50 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002d50:	4801      	ldr	r0, [pc, #4]	@ (8002d58 <DMA2_Channel1_IRQHandler+0x8>)
 8002d52:	f000 bf34 	b.w	8003bbe <HAL_DMA_IRQHandler>
 8002d56:	bf00      	nop
 8002d58:	20002324 	.word	0x20002324

08002d5c <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002d5c:	4801      	ldr	r0, [pc, #4]	@ (8002d64 <DMA2_Channel5_IRQHandler+0x8>)
 8002d5e:	f000 bf2e 	b.w	8003bbe <HAL_DMA_IRQHandler>
 8002d62:	bf00      	nop
 8002d64:	200022e0 	.word	0x200022e0

08002d68 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002d68:	2001      	movs	r0, #1
 8002d6a:	4770      	bx	lr

08002d6c <_kill>:

int _kill(int pid, int sig)
{
 8002d6c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d6e:	f007 fc8d 	bl	800a68c <__errno>
 8002d72:	2316      	movs	r3, #22
 8002d74:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002d76:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7a:	bd08      	pop	{r3, pc}

08002d7c <_exit>:

void _exit (int status)
{
 8002d7c:	b508      	push	{r3, lr}
  errno = EINVAL;
 8002d7e:	f007 fc85 	bl	800a68c <__errno>
 8002d82:	2316      	movs	r3, #22
 8002d84:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002d86:	e7fe      	b.n	8002d86 <_exit+0xa>

08002d88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d88:	b570      	push	{r4, r5, r6, lr}
 8002d8a:	460d      	mov	r5, r1
 8002d8c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8e:	460e      	mov	r6, r1
 8002d90:	1b73      	subs	r3, r6, r5
 8002d92:	429c      	cmp	r4, r3
 8002d94:	dc01      	bgt.n	8002d9a <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8002d96:	4620      	mov	r0, r4
 8002d98:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8002d9a:	f3af 8000 	nop.w
 8002d9e:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da2:	e7f5      	b.n	8002d90 <_read+0x8>

08002da4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	460d      	mov	r5, r1
 8002da8:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002daa:	460e      	mov	r6, r1
 8002dac:	1b73      	subs	r3, r6, r5
 8002dae:	429c      	cmp	r4, r3
 8002db0:	dc01      	bgt.n	8002db6 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8002db2:	4620      	mov	r0, r4
 8002db4:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8002db6:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002dba:	f7fe fb77 	bl	80014ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dbe:	e7f5      	b.n	8002dac <_write+0x8>

08002dc0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc4:	4770      	bx	lr

08002dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002dc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002dca:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002dcc:	2000      	movs	r0, #0
 8002dce:	4770      	bx	lr

08002dd0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	4770      	bx	lr

08002dd4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	4770      	bx	lr

08002dd8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8002e08 <_sbrk+0x30>)
 8002dda:	6811      	ldr	r1, [r2, #0]
{
 8002ddc:	b510      	push	{r4, lr}
 8002dde:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002de0:	b909      	cbnz	r1, 8002de6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8002de2:	490a      	ldr	r1, [pc, #40]	@ (8002e0c <_sbrk+0x34>)
 8002de4:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002de6:	6810      	ldr	r0, [r2, #0]
 8002de8:	4909      	ldr	r1, [pc, #36]	@ (8002e10 <_sbrk+0x38>)
 8002dea:	4c0a      	ldr	r4, [pc, #40]	@ (8002e14 <_sbrk+0x3c>)
 8002dec:	4403      	add	r3, r0
 8002dee:	1b09      	subs	r1, r1, r4
 8002df0:	428b      	cmp	r3, r1
 8002df2:	d906      	bls.n	8002e02 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002df4:	f007 fc4a 	bl	800a68c <__errno>
 8002df8:	230c      	movs	r3, #12
 8002dfa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002e00:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002e02:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002e04:	e7fc      	b.n	8002e00 <_sbrk+0x28>
 8002e06:	bf00      	nop
 8002e08:	200036a8 	.word	0x200036a8
 8002e0c:	20008f88 	.word	0x20008f88
 8002e10:	2000a000 	.word	0x2000a000
 8002e14:	00000400 	.word	0x00000400

08002e18 <Uint32ToHex>:

uint32_t current_addr_debug = DEBUG_START_ADDRESS;
uint8_t output_debug_buffer[512] = {0};


void Uint32ToHex(uint32_t value, char *output, uint8_t width) {
 8002e18:	b530      	push	{r4, r5, lr}
 8002e1a:	1e54      	subs	r4, r2, #1
 8002e1c:	1e4d      	subs	r5, r1, #1
 8002e1e:	00a4      	lsls	r4, r4, #2
    for (int i = 0; i < width; i++) {
 8002e20:	1d23      	adds	r3, r4, #4
 8002e22:	d102      	bne.n	8002e2a <Uint32ToHex+0x12>
        uint8_t nibble = (value >> (4 * (width - 1 - i))) & 0xF; // Extract each nibble
        output[i] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10); // Convert to hex char
    }
    output[width] = '\0'; // Null-terminate
 8002e24:	2300      	movs	r3, #0
 8002e26:	548b      	strb	r3, [r1, r2]
}
 8002e28:	bd30      	pop	{r4, r5, pc}
        uint8_t nibble = (value >> (4 * (width - 1 - i))) & 0xF; // Extract each nibble
 8002e2a:	fa20 f304 	lsr.w	r3, r0, r4
 8002e2e:	f003 030f 	and.w	r3, r3, #15
        output[i] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10); // Convert to hex char
 8002e32:	2b09      	cmp	r3, #9
 8002e34:	bf94      	ite	ls
 8002e36:	3330      	addls	r3, #48	@ 0x30
 8002e38:	3337      	addhi	r3, #55	@ 0x37
 8002e3a:	f805 3f01 	strb.w	r3, [r5, #1]!
    for (int i = 0; i < width; i++) {
 8002e3e:	3c04      	subs	r4, #4
 8002e40:	e7ee      	b.n	8002e20 <Uint32ToHex+0x8>
	...

08002e44 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e44:	4a03      	ldr	r2, [pc, #12]	@ (8002e54 <SystemInit+0x10>)
 8002e46:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002e4a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e4e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e90 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e5c:	f7ff fff2 	bl	8002e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e60:	480c      	ldr	r0, [pc, #48]	@ (8002e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e62:	490d      	ldr	r1, [pc, #52]	@ (8002e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e64:	4a0d      	ldr	r2, [pc, #52]	@ (8002e9c <LoopForever+0xe>)
  movs r3, #0
 8002e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e68:	e002      	b.n	8002e70 <LoopCopyDataInit>

08002e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e6e:	3304      	adds	r3, #4

08002e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e74:	d3f9      	bcc.n	8002e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e78:	4c0a      	ldr	r4, [pc, #40]	@ (8002ea4 <LoopForever+0x16>)
  movs r3, #0
 8002e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e7c:	e001      	b.n	8002e82 <LoopFillZerobss>

08002e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e80:	3204      	adds	r2, #4

08002e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e84:	d3fb      	bcc.n	8002e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e86:	f007 fc07 	bl	800a698 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e8a:	f7fe fbc1 	bl	8001610 <main>

08002e8e <LoopForever>:

LoopForever:
    b LoopForever
 8002e8e:	e7fe      	b.n	8002e8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e90:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e98:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8002e9c:	0800ea78 	.word	0x0800ea78
  ldr r2, =_sbss
 8002ea0:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8002ea4:	20008f84 	.word	0x20008f84

08002ea8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ea8:	e7fe      	b.n	8002ea8 <ADC1_2_IRQHandler>

08002eaa <__cxa_guard_abort.part.0>:

/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
 8002eaa:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8002eac:	b672      	cpsid	i
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002eae:	f7fe fe04 	bl	8001aba <Error_Handler>
 8002eb2:	e7fe      	b.n	8002eb2 <__cxa_guard_abort.part.0+0x8>

08002eb4 <stm32_lock_acquire>:
{
 8002eb4:	b508      	push	{r3, lr}
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002eb6:	7a03      	ldrb	r3, [r0, #8]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d903      	bls.n	8002ec4 <stm32_lock_acquire+0x10>
 8002ebc:	b672      	cpsid	i
 8002ebe:	f7fe fdfc 	bl	8001aba <Error_Handler>
 8002ec2:	e7fe      	b.n	8002ec2 <stm32_lock_acquire+0xe>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	7202      	strb	r2, [r0, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ec8:	f3ef 8211 	mrs	r2, BASEPRI
 8002ecc:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8002ed0:	f381 8811 	msr	BASEPRI, r1
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002ee0:	bd08      	pop	{r3, pc}

08002ee2 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002ee2:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
  lock->nesting_level--;
 8002ee4:	7a03      	ldrb	r3, [r0, #8]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b2db      	uxtb	r3, r3
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002eea:	2b01      	cmp	r3, #1
  lock->nesting_level--;
 8002eec:	7203      	strb	r3, [r0, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002eee:	d903      	bls.n	8002ef8 <stm32_lock_release+0x16>
 8002ef0:	b672      	cpsid	i
 8002ef2:	f7fe fde2 	bl	8001aba <Error_Handler>
 8002ef6:	e7fe      	b.n	8002ef6 <stm32_lock_release+0x14>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ef8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002efc:	f383 8811 	msr	BASEPRI, r3
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
}
 8002f00:	bd08      	pop	{r3, pc}

08002f02 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002f02:	b510      	push	{r4, lr}
  if (lock == NULL)
 8002f04:	4604      	mov	r4, r0
 8002f06:	b920      	cbnz	r0, 8002f12 <__retarget_lock_init_recursive+0x10>
  {
    errno = EINVAL;
 8002f08:	f007 fbc0 	bl	800a68c <__errno>
 8002f0c:	2316      	movs	r3, #22
 8002f0e:	6003      	str	r3, [r0, #0]
    return;
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
}
 8002f10:	bd10      	pop	{r4, pc}
  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002f12:	200c      	movs	r0, #12
 8002f14:	f004 fcea 	bl	80078ec <malloc>
 8002f18:	6020      	str	r0, [r4, #0]
  if (*lock != NULL)
 8002f1a:	b120      	cbz	r0, 8002f26 <__retarget_lock_init_recursive+0x24>
    lock->basepri[i] = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	e9c0 3300 	strd	r3, r3, [r0]
  lock->nesting_level = 0;
 8002f22:	7203      	strb	r3, [r0, #8]
}
 8002f24:	e7f4      	b.n	8002f10 <__retarget_lock_init_recursive+0xe>
 8002f26:	f7ff ffc0 	bl	8002eaa <__cxa_guard_abort.part.0>

08002f2a <__retarget_lock_acquire>:
/**
  * @brief Acquire lock
  * @param lock The lock
  */
void __retarget_lock_acquire(_LOCK_T lock)
{
 8002f2a:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002f2c:	b908      	cbnz	r0, 8002f32 <__retarget_lock_acquire+0x8>
 8002f2e:	f7ff ffbc 	bl	8002eaa <__cxa_guard_abort.part.0>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
}
 8002f32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002f36:	f7ff bfbd 	b.w	8002eb4 <stm32_lock_acquire>

08002f3a <__retarget_lock_acquire_recursive>:
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
 8002f3a:	f7ff bff6 	b.w	8002f2a <__retarget_lock_acquire>

08002f3e <__retarget_lock_release>:
/**
  * @brief Release lock
  * @param lock The lock
  */
void __retarget_lock_release(_LOCK_T lock)
{
 8002f3e:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002f40:	b918      	cbnz	r0, 8002f4a <__retarget_lock_release+0xc>
 8002f42:	b672      	cpsid	i
 8002f44:	f7fe fdb9 	bl	8001aba <Error_Handler>
 8002f48:	e7fe      	b.n	8002f48 <__retarget_lock_release+0xa>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
}
 8002f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002f4e:	f7ff bfc8 	b.w	8002ee2 <stm32_lock_release>

08002f52 <__retarget_lock_release_recursive>:
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) \
  __retarget_lock_try_acquire_recursive(lock)
extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
 8002f52:	f7ff bff4 	b.w	8002f3e <__retarget_lock_release>
	...

08002f58 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f58:	4a07      	ldr	r2, [pc, #28]	@ (8002f78 <HAL_Init+0x20>)
{
 8002f5a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f5c:	6813      	ldr	r3, [r2, #0]
 8002f5e:	f043 0310 	orr.w	r3, r3, #16
 8002f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f64:	2003      	movs	r0, #3
 8002f66:	f000 fd5b 	bl	8003a20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f6a:	200f      	movs	r0, #15
 8002f6c:	f7ff fe74 	bl	8002c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f70:	f7ff fc64 	bl	800283c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002f74:	2000      	movs	r0, #0
 8002f76:	bd08      	pop	{r3, pc}
 8002f78:	40022000 	.word	0x40022000

08002f7c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002f7c:	4a03      	ldr	r2, [pc, #12]	@ (8002f8c <HAL_IncTick+0x10>)
 8002f7e:	4b04      	ldr	r3, [pc, #16]	@ (8002f90 <HAL_IncTick+0x14>)
 8002f80:	6811      	ldr	r1, [r2, #0]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	440b      	add	r3, r1
 8002f86:	6013      	str	r3, [r2, #0]
}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	200036dc 	.word	0x200036dc
 8002f90:	20000014 	.word	0x20000014

08002f94 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8002f94:	4b01      	ldr	r3, [pc, #4]	@ (8002f9c <HAL_GetTick+0x8>)
 8002f96:	6818      	ldr	r0, [r3, #0]
}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	200036dc 	.word	0x200036dc

08002fa0 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_ADC_ErrorCallback>:
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8002fa4:	4770      	bx	lr

08002fa6 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002fa6:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002fa8:	6803      	ldr	r3, [r0, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	f002 0203 	and.w	r2, r2, #3
 8002fb0:	2a01      	cmp	r2, #1
{
 8002fb2:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002fb4:	d001      	beq.n	8002fba <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fb6:	2000      	movs	r0, #0
}
 8002fb8:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	07d1      	lsls	r1, r2, #31
 8002fbe:	d5fa      	bpl.n	8002fb6 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	f002 020d 	and.w	r2, r2, #13
 8002fc6:	2a01      	cmp	r2, #1
 8002fc8:	d115      	bne.n	8002ff6 <ADC_Disable+0x50>
      __HAL_ADC_DISABLE(hadc);
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	f042 0202 	orr.w	r2, r2, #2
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002fd6:	f7ff ffdd 	bl	8002f94 <HAL_GetTick>
 8002fda:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	07db      	lsls	r3, r3, #31
 8002fe2:	d5e8      	bpl.n	8002fb6 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fe4:	f7ff ffd6 	bl	8002f94 <HAL_GetTick>
 8002fe8:	1b40      	subs	r0, r0, r5
 8002fea:	2802      	cmp	r0, #2
 8002fec:	d9f6      	bls.n	8002fdc <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	07da      	lsls	r2, r3, #31
 8002ff4:	d5f2      	bpl.n	8002fdc <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002ff8:	f043 0310 	orr.w	r3, r3, #16
 8002ffc:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 8003006:	2001      	movs	r0, #1
 8003008:	e7d6      	b.n	8002fb8 <ADC_Disable+0x12>
	...

0800300c <HAL_ADC_Init>:
{
 800300c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8003012:	4604      	mov	r4, r0
 8003014:	2800      	cmp	r0, #0
 8003016:	f000 8103 	beq.w	8003220 <HAL_ADC_Init+0x214>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800301a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800301c:	06d5      	lsls	r5, r2, #27
 800301e:	d46a      	bmi.n	80030f6 <HAL_ADC_Init+0xea>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003020:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d035      	beq.n	8003092 <HAL_ADC_Init+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003026:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	00d2      	lsls	r2, r2, #3
 800302e:	d502      	bpl.n	8003036 <HAL_ADC_Init+0x2a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003030:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003032:	009d      	lsls	r5, r3, #2
 8003034:	d50a      	bpl.n	800304c <HAL_ADC_Init+0x40>
      ADC_STATE_CLR_SET(hadc->State,
 8003036:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003038:	f023 0312 	bic.w	r3, r3, #18
 800303c:	f043 0310 	orr.w	r3, r3, #16
 8003040:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003042:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6463      	str	r3, [r4, #68]	@ 0x44
      tmp_hal_status = HAL_ERROR;
 800304a:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800304c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800304e:	06d9      	lsls	r1, r3, #27
 8003050:	f100 80e0 	bmi.w	8003214 <HAL_ADC_Init+0x208>
 8003054:	2800      	cmp	r0, #0
 8003056:	f040 80dd 	bne.w	8003214 <HAL_ADC_Init+0x208>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800305e:	0752      	lsls	r2, r2, #29
 8003060:	f100 80d8 	bmi.w	8003214 <HAL_ADC_Init+0x208>
    ADC_STATE_CLR_SET(hadc->State,
 8003064:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003066:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 800306a:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800306e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8003072:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003074:	4a6b      	ldr	r2, [pc, #428]	@ (8003224 <HAL_ADC_Init+0x218>)
 8003076:	d042      	beq.n	80030fe <HAL_ADC_Init+0xf2>
 8003078:	4293      	cmp	r3, r2
 800307a:	d03e      	beq.n	80030fa <HAL_ADC_Init+0xee>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800307c:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8003080:	4293      	cmp	r3, r2
 8003082:	4969      	ldr	r1, [pc, #420]	@ (8003228 <HAL_ADC_Init+0x21c>)
 8003084:	f000 80b3 	beq.w	80031ee <HAL_ADC_Init+0x1e2>
 8003088:	428b      	cmp	r3, r1
 800308a:	bf18      	it	ne
 800308c:	2200      	movne	r2, #0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800308e:	4967      	ldr	r1, [pc, #412]	@ (800322c <HAL_ADC_Init+0x220>)
 8003090:	e036      	b.n	8003100 <HAL_ADC_Init+0xf4>
      hadc->InjectionConfig.ContextQueue = 0U;
 8003092:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8003096:	6443      	str	r3, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 8003098:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 800309c:	f7ff fbec 	bl	8002878 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	00d8      	lsls	r0, r3, #3
 80030a6:	d4be      	bmi.n	8003026 <HAL_ADC_Init+0x1a>
        tmp_hal_status = ADC_Disable(hadc);
 80030a8:	4620      	mov	r0, r4
 80030aa:	f7ff ff7c 	bl	8002fa6 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030ae:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80030b0:	06d1      	lsls	r1, r2, #27
 80030b2:	d4b9      	bmi.n	8003028 <HAL_ADC_Init+0x1c>
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d1b7      	bne.n	8003028 <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 80030b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80030ba:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 80030bc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030c0:	f023 0302 	bic.w	r3, r3, #2
 80030c4:	f043 0302 	orr.w	r3, r3, #2
 80030c8:	6423      	str	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80030ca:	6893      	ldr	r3, [r2, #8]
 80030cc:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80030d0:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80030d2:	6893      	ldr	r3, [r2, #8]
 80030d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030d8:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030da:	4b55      	ldr	r3, [pc, #340]	@ (8003230 <HAL_ADC_Init+0x224>)
 80030dc:	4a55      	ldr	r2, [pc, #340]	@ (8003234 <HAL_ADC_Init+0x228>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030e4:	220a      	movs	r2, #10
 80030e6:	4353      	muls	r3, r2
            wait_loop_index--;
 80030e8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80030ea:	9b01      	ldr	r3, [sp, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d09a      	beq.n	8003026 <HAL_ADC_Init+0x1a>
            wait_loop_index--;
 80030f0:	9b01      	ldr	r3, [sp, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	e7f8      	b.n	80030e8 <HAL_ADC_Init+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030f6:	4618      	mov	r0, r3
 80030f8:	e7a8      	b.n	800304c <HAL_ADC_Init+0x40>
 80030fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030fe:	494e      	ldr	r1, [pc, #312]	@ (8003238 <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003100:	689d      	ldr	r5, [r3, #8]
 8003102:	f005 0503 	and.w	r5, r5, #3
 8003106:	2d01      	cmp	r5, #1
 8003108:	d102      	bne.n	8003110 <HAL_ADC_Init+0x104>
 800310a:	681d      	ldr	r5, [r3, #0]
 800310c:	07ed      	lsls	r5, r5, #31
 800310e:	d40e      	bmi.n	800312e <HAL_ADC_Init+0x122>
 8003110:	b13a      	cbz	r2, 8003122 <HAL_ADC_Init+0x116>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003112:	6895      	ldr	r5, [r2, #8]
 8003114:	f005 0503 	and.w	r5, r5, #3
 8003118:	2d01      	cmp	r5, #1
 800311a:	d102      	bne.n	8003122 <HAL_ADC_Init+0x116>
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	07d2      	lsls	r2, r2, #31
 8003120:	d405      	bmi.n	800312e <HAL_ADC_Init+0x122>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003122:	688a      	ldr	r2, [r1, #8]
 8003124:	6865      	ldr	r5, [r4, #4]
 8003126:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800312a:	432a      	orrs	r2, r5
 800312c:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800312e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8003132:	430a      	orrs	r2, r1
 8003134:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003136:	7e65      	ldrb	r5, [r4, #25]
 8003138:	3901      	subs	r1, #1
 800313a:	bf18      	it	ne
 800313c:	2101      	movne	r1, #1
 800313e:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8003142:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003146:	f894 1020 	ldrb.w	r1, [r4, #32]
 800314a:	2901      	cmp	r1, #1
 800314c:	d107      	bne.n	800315e <HAL_ADC_Init+0x152>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800314e:	2d00      	cmp	r5, #0
 8003150:	d14f      	bne.n	80031f2 <HAL_ADC_Init+0x1e6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003152:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003154:	3901      	subs	r1, #1
 8003156:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 800315a:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800315e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003160:	2901      	cmp	r1, #1
 8003162:	d015      	beq.n	8003190 <HAL_ADC_Init+0x184>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003164:	4d35      	ldr	r5, [pc, #212]	@ (800323c <HAL_ADC_Init+0x230>)
 8003166:	42ab      	cmp	r3, r5
 8003168:	d003      	beq.n	8003172 <HAL_ADC_Init+0x166>
 800316a:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 800316e:	42ab      	cmp	r3, r5
 8003170:	d10a      	bne.n	8003188 <HAL_ADC_Init+0x17c>
 8003172:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 8003176:	d047      	beq.n	8003208 <HAL_ADC_Init+0x1fc>
 8003178:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800317c:	d047      	beq.n	800320e <HAL_ADC_Init+0x202>
 800317e:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 8003182:	bf08      	it	eq
 8003184:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 8003188:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800318a:	4315      	orrs	r5, r2
 800318c:	ea45 0201 	orr.w	r2, r5, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003190:	6899      	ldr	r1, [r3, #8]
 8003192:	f011 0f0c 	tst.w	r1, #12
 8003196:	d10c      	bne.n	80031b2 <HAL_ADC_Init+0x1a6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003198:	68d9      	ldr	r1, [r3, #12]
 800319a:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800319e:	f021 0102 	bic.w	r1, r1, #2
 80031a2:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80031a4:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 80031a8:	7e25      	ldrb	r5, [r4, #24]
 80031aa:	0049      	lsls	r1, r1, #1
 80031ac:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 80031b0:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 80031b2:	68dd      	ldr	r5, [r3, #12]
 80031b4:	4922      	ldr	r1, [pc, #136]	@ (8003240 <HAL_ADC_Init+0x234>)
 80031b6:	4029      	ands	r1, r5
 80031b8:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031ba:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 80031bc:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031be:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80031c0:	bf05      	ittet	eq
 80031c2:	6b19      	ldreq	r1, [r3, #48]	@ 0x30
 80031c4:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031c6:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80031c8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80031cc:	bf06      	itte	eq
 80031ce:	f021 010f 	biceq.w	r1, r1, #15
 80031d2:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031d4:	f022 020f 	bicne.w	r2, r2, #15
 80031d8:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80031da:	2300      	movs	r3, #0
 80031dc:	6463      	str	r3, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80031de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80031e0:	f023 0303 	bic.w	r3, r3, #3
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80031ea:	b003      	add	sp, #12
 80031ec:	bd30      	pop	{r4, r5, pc}
 80031ee:	460a      	mov	r2, r1
 80031f0:	e74d      	b.n	800308e <HAL_ADC_Init+0x82>
        ADC_STATE_CLR_SET(hadc->State,
 80031f2:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80031f4:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 80031f8:	f041 0120 	orr.w	r1, r1, #32
 80031fc:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031fe:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003200:	f041 0101 	orr.w	r1, r1, #1
 8003204:	6461      	str	r1, [r4, #68]	@ 0x44
 8003206:	e7aa      	b.n	800315e <HAL_ADC_Init+0x152>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003208:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 800320c:	e7bc      	b.n	8003188 <HAL_ADC_Init+0x17c>
 800320e:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8003212:	e7b9      	b.n	8003188 <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 8003214:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003216:	f023 0312 	bic.w	r3, r3, #18
 800321a:	f043 0310 	orr.w	r3, r3, #16
 800321e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 8003220:	2001      	movs	r0, #1
 8003222:	e7e2      	b.n	80031ea <HAL_ADC_Init+0x1de>
 8003224:	50000100 	.word	0x50000100
 8003228:	50000500 	.word	0x50000500
 800322c:	50000700 	.word	0x50000700
 8003230:	20000010 	.word	0x20000010
 8003234:	000f4240 	.word	0x000f4240
 8003238:	50000300 	.word	0x50000300
 800323c:	50000400 	.word	0x50000400
 8003240:	fff0c007 	.word	0xfff0c007

08003244 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8003244:	4770      	bx	lr

08003246 <HAL_ADCEx_InjectedQueueOverflowCallback>:
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
 8003246:	4770      	bx	lr

08003248 <HAL_ADCEx_LevelOutOfWindow2Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
 8003248:	4770      	bx	lr

0800324a <HAL_ADCEx_LevelOutOfWindow3Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
 800324a:	4770      	bx	lr

0800324c <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 800324c:	6803      	ldr	r3, [r0, #0]
{
 800324e:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003250:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003252:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003254:	076a      	lsls	r2, r5, #29
{
 8003256:	4604      	mov	r4, r0
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003258:	d501      	bpl.n	800325e <HAL_ADC_IRQHandler+0x12>
 800325a:	0770      	lsls	r0, r6, #29
 800325c:	d403      	bmi.n	8003266 <HAL_ADC_IRQHandler+0x1a>
 800325e:	0729      	lsls	r1, r5, #28
 8003260:	d543      	bpl.n	80032ea <HAL_ADC_IRQHandler+0x9e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003262:	0732      	lsls	r2, r6, #28
 8003264:	d541      	bpl.n	80032ea <HAL_ADC_IRQHandler+0x9e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003266:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003268:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800326a:	bf5e      	ittt	pl
 800326c:	6c22      	ldrpl	r2, [r4, #64]	@ 0x40
 800326e:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 8003272:	6422      	strpl	r2, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003274:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003278:	d003      	beq.n	8003282 <HAL_ADC_IRQHandler+0x36>
 800327a:	4a90      	ldr	r2, [pc, #576]	@ (80034bc <HAL_ADC_IRQHandler+0x270>)
 800327c:	4293      	cmp	r3, r2
 800327e:	f040 8105 	bne.w	800348c <HAL_ADC_IRQHandler+0x240>
 8003282:	4a8f      	ldr	r2, [pc, #572]	@ (80034c0 <HAL_ADC_IRQHandler+0x274>)
 8003284:	6891      	ldr	r1, [r2, #8]
 8003286:	06c9      	lsls	r1, r1, #27
 8003288:	d00c      	beq.n	80032a4 <HAL_ADC_IRQHandler+0x58>
 800328a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800328e:	d003      	beq.n	8003298 <HAL_ADC_IRQHandler+0x4c>
 8003290:	498a      	ldr	r1, [pc, #552]	@ (80034bc <HAL_ADC_IRQHandler+0x270>)
 8003292:	428b      	cmp	r3, r1
 8003294:	f040 80ff 	bne.w	8003496 <HAL_ADC_IRQHandler+0x24a>
 8003298:	6892      	ldr	r2, [r2, #8]
 800329a:	f002 021f 	and.w	r2, r2, #31
 800329e:	2a05      	cmp	r2, #5
 80032a0:	f040 8114 	bne.w	80034cc <HAL_ADC_IRQHandler+0x280>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80032a4:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80032a6:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80032a8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80032ac:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 80032b0:	4311      	orrs	r1, r2
 80032b2:	d114      	bne.n	80032de <HAL_ADC_IRQHandler+0x92>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80032b4:	0729      	lsls	r1, r5, #28
 80032b6:	d512      	bpl.n	80032de <HAL_ADC_IRQHandler+0x92>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	0752      	lsls	r2, r2, #29
 80032bc:	f100 8122 	bmi.w	8003504 <HAL_ADC_IRQHandler+0x2b8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	f022 020c 	bic.w	r2, r2, #12
 80032c6:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032ce:	6423      	str	r3, [r4, #64]	@ 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032d2:	04d8      	lsls	r0, r3, #19
 80032d4:	d403      	bmi.n	80032de <HAL_ADC_IRQHandler+0x92>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 80032de:	4620      	mov	r0, r4
 80032e0:	f7ff fe5e 	bl	8002fa0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	220c      	movs	r2, #12
 80032e8:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80032ea:	06a9      	lsls	r1, r5, #26
 80032ec:	d501      	bpl.n	80032f2 <HAL_ADC_IRQHandler+0xa6>
 80032ee:	06b2      	lsls	r2, r6, #26
 80032f0:	d403      	bmi.n	80032fa <HAL_ADC_IRQHandler+0xae>
 80032f2:	066b      	lsls	r3, r5, #25
 80032f4:	d562      	bpl.n	80033bc <HAL_ADC_IRQHandler+0x170>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80032f6:	0670      	lsls	r0, r6, #25
 80032f8:	d560      	bpl.n	80033bc <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003300:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003308:	d003      	beq.n	8003312 <HAL_ADC_IRQHandler+0xc6>
 800330a:	4a6c      	ldr	r2, [pc, #432]	@ (80034bc <HAL_ADC_IRQHandler+0x270>)
 800330c:	4293      	cmp	r3, r2
 800330e:	f040 8102 	bne.w	8003516 <HAL_ADC_IRQHandler+0x2ca>
 8003312:	4a6b      	ldr	r2, [pc, #428]	@ (80034c0 <HAL_ADC_IRQHandler+0x274>)
 8003314:	6891      	ldr	r1, [r2, #8]
 8003316:	06c9      	lsls	r1, r1, #27
 8003318:	d00c      	beq.n	8003334 <HAL_ADC_IRQHandler+0xe8>
 800331a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800331e:	d003      	beq.n	8003328 <HAL_ADC_IRQHandler+0xdc>
 8003320:	4966      	ldr	r1, [pc, #408]	@ (80034bc <HAL_ADC_IRQHandler+0x270>)
 8003322:	428b      	cmp	r3, r1
 8003324:	f040 80fc 	bne.w	8003520 <HAL_ADC_IRQHandler+0x2d4>
 8003328:	6892      	ldr	r2, [r2, #8]
 800332a:	f002 021f 	and.w	r2, r2, #31
 800332e:	2a05      	cmp	r2, #5
 8003330:	f040 8108 	bne.w	8003544 <HAL_ADC_IRQHandler+0x2f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003334:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003336:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003338:	f011 0fc0 	tst.w	r1, #192	@ 0xc0
 800333c:	d138      	bne.n	80033b0 <HAL_ADC_IRQHandler+0x164>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800333e:	0191      	lsls	r1, r2, #6
 8003340:	d506      	bpl.n	8003350 <HAL_ADC_IRQHandler+0x104>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003342:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003344:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003348:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 800334c:	4311      	orrs	r1, r2
 800334e:	d12f      	bne.n	80033b0 <HAL_ADC_IRQHandler+0x164>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8003350:	0668      	lsls	r0, r5, #25
 8003352:	d52d      	bpl.n	80033b0 <HAL_ADC_IRQHandler+0x164>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003354:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003358:	d003      	beq.n	8003362 <HAL_ADC_IRQHandler+0x116>
 800335a:	4a58      	ldr	r2, [pc, #352]	@ (80034bc <HAL_ADC_IRQHandler+0x270>)
 800335c:	4293      	cmp	r3, r2
 800335e:	f040 810d 	bne.w	800357c <HAL_ADC_IRQHandler+0x330>
 8003362:	4a57      	ldr	r2, [pc, #348]	@ (80034c0 <HAL_ADC_IRQHandler+0x274>)
 8003364:	6891      	ldr	r1, [r2, #8]
 8003366:	06c9      	lsls	r1, r1, #27
 8003368:	d00c      	beq.n	8003384 <HAL_ADC_IRQHandler+0x138>
 800336a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800336e:	d003      	beq.n	8003378 <HAL_ADC_IRQHandler+0x12c>
 8003370:	4952      	ldr	r1, [pc, #328]	@ (80034bc <HAL_ADC_IRQHandler+0x270>)
 8003372:	428b      	cmp	r3, r1
 8003374:	f040 8107 	bne.w	8003586 <HAL_ADC_IRQHandler+0x33a>
 8003378:	6892      	ldr	r2, [r2, #8]
 800337a:	f002 021f 	and.w	r2, r2, #31
 800337e:	2a06      	cmp	r2, #6
 8003380:	f040 8113 	bne.w	80035aa <HAL_ADC_IRQHandler+0x35e>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003384:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003386:	0291      	lsls	r1, r2, #10
 8003388:	d412      	bmi.n	80033b0 <HAL_ADC_IRQHandler+0x164>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	0712      	lsls	r2, r2, #28
 800338e:	f100 8128 	bmi.w	80035e2 <HAL_ADC_IRQHandler+0x396>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003398:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800339a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800339c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033a0:	6423      	str	r3, [r4, #64]	@ 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80033a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80033a4:	05d8      	lsls	r0, r3, #23
 80033a6:	d403      	bmi.n	80033b0 <HAL_ADC_IRQHandler+0x164>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033b0:	4620      	mov	r0, r4
 80033b2:	f7ff ff47 	bl	8003244 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	2260      	movs	r2, #96	@ 0x60
 80033ba:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80033bc:	0629      	lsls	r1, r5, #24
 80033be:	d50b      	bpl.n	80033d8 <HAL_ADC_IRQHandler+0x18c>
 80033c0:	0632      	lsls	r2, r6, #24
 80033c2:	d509      	bpl.n	80033d8 <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80033c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ca:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033cc:	4620      	mov	r0, r4
 80033ce:	f7ff fde8 	bl	8002fa2 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	2280      	movs	r2, #128	@ 0x80
 80033d6:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80033d8:	05eb      	lsls	r3, r5, #23
 80033da:	d50c      	bpl.n	80033f6 <HAL_ADC_IRQHandler+0x1aa>
 80033dc:	05f0      	lsls	r0, r6, #23
 80033de:	d50a      	bpl.n	80033f6 <HAL_ADC_IRQHandler+0x1aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80033e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80033e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e6:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80033e8:	4620      	mov	r0, r4
 80033ea:	f7ff ff2d 	bl	8003248 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033f4:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80033f6:	05a9      	lsls	r1, r5, #22
 80033f8:	d50c      	bpl.n	8003414 <HAL_ADC_IRQHandler+0x1c8>
 80033fa:	05b2      	lsls	r2, r6, #22
 80033fc:	d50a      	bpl.n	8003414 <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80033fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003404:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003406:	4620      	mov	r0, r4
 8003408:	f7ff ff1f 	bl	800324a <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003412:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003414:	06eb      	lsls	r3, r5, #27
 8003416:	d525      	bpl.n	8003464 <HAL_ADC_IRQHandler+0x218>
 8003418:	06f0      	lsls	r0, r6, #27
 800341a:	d523      	bpl.n	8003464 <HAL_ADC_IRQHandler+0x218>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800341c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800341e:	2b01      	cmp	r3, #1
 8003420:	d012      	beq.n	8003448 <HAL_ADC_IRQHandler+0x1fc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003422:	6822      	ldr	r2, [r4, #0]
 8003424:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8003428:	f000 80e4 	beq.w	80035f4 <HAL_ADC_IRQHandler+0x3a8>
 800342c:	4823      	ldr	r0, [pc, #140]	@ (80034bc <HAL_ADC_IRQHandler+0x270>)
 800342e:	4b25      	ldr	r3, [pc, #148]	@ (80034c4 <HAL_ADC_IRQHandler+0x278>)
 8003430:	4923      	ldr	r1, [pc, #140]	@ (80034c0 <HAL_ADC_IRQHandler+0x274>)
 8003432:	4282      	cmp	r2, r0
 8003434:	bf08      	it	eq
 8003436:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003438:	6899      	ldr	r1, [r3, #8]
 800343a:	06c9      	lsls	r1, r1, #27
 800343c:	f040 80dc 	bne.w	80035f8 <HAL_ADC_IRQHandler+0x3ac>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003440:	68d3      	ldr	r3, [r2, #12]
 8003442:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003446:	d00a      	beq.n	800345e <HAL_ADC_IRQHandler+0x212>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003448:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800344a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800344e:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003450:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003452:	f043 0302 	orr.w	r3, r3, #2
 8003456:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 8003458:	4620      	mov	r0, r4
 800345a:	f7ff fda3 	bl	8002fa4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	2210      	movs	r2, #16
 8003462:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003464:	056a      	lsls	r2, r5, #21
 8003466:	d510      	bpl.n	800348a <HAL_ADC_IRQHandler+0x23e>
 8003468:	0573      	lsls	r3, r6, #21
 800346a:	d50e      	bpl.n	800348a <HAL_ADC_IRQHandler+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800346c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800346e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003472:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003474:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003476:	f043 0308 	orr.w	r3, r3, #8
 800347a:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003482:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003484:	4620      	mov	r0, r4
 8003486:	f7ff fede 	bl	8003246 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 800348a:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800348c:	4a0d      	ldr	r2, [pc, #52]	@ (80034c4 <HAL_ADC_IRQHandler+0x278>)
 800348e:	6892      	ldr	r2, [r2, #8]
 8003490:	06d0      	lsls	r0, r2, #27
 8003492:	f43f af07 	beq.w	80032a4 <HAL_ADC_IRQHandler+0x58>
 8003496:	4a0b      	ldr	r2, [pc, #44]	@ (80034c4 <HAL_ADC_IRQHandler+0x278>)
 8003498:	6892      	ldr	r2, [r2, #8]
 800349a:	f002 021f 	and.w	r2, r2, #31
 800349e:	2a05      	cmp	r2, #5
 80034a0:	f43f af00 	beq.w	80032a4 <HAL_ADC_IRQHandler+0x58>
 80034a4:	4a07      	ldr	r2, [pc, #28]	@ (80034c4 <HAL_ADC_IRQHandler+0x278>)
 80034a6:	6892      	ldr	r2, [r2, #8]
 80034a8:	f002 021f 	and.w	r2, r2, #31
 80034ac:	2a09      	cmp	r2, #9
 80034ae:	f43f aef9 	beq.w	80032a4 <HAL_ADC_IRQHandler+0x58>
 80034b2:	4a05      	ldr	r2, [pc, #20]	@ (80034c8 <HAL_ADC_IRQHandler+0x27c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d123      	bne.n	8003500 <HAL_ADC_IRQHandler+0x2b4>
 80034b8:	e6f4      	b.n	80032a4 <HAL_ADC_IRQHandler+0x58>
 80034ba:	bf00      	nop
 80034bc:	50000100 	.word	0x50000100
 80034c0:	50000300 	.word	0x50000300
 80034c4:	50000700 	.word	0x50000700
 80034c8:	50000400 	.word	0x50000400
 80034cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034d0:	d002      	beq.n	80034d8 <HAL_ADC_IRQHandler+0x28c>
 80034d2:	4a4b      	ldr	r2, [pc, #300]	@ (8003600 <HAL_ADC_IRQHandler+0x3b4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d1e5      	bne.n	80034a4 <HAL_ADC_IRQHandler+0x258>
 80034d8:	4a4a      	ldr	r2, [pc, #296]	@ (8003604 <HAL_ADC_IRQHandler+0x3b8>)
 80034da:	6892      	ldr	r2, [r2, #8]
 80034dc:	f002 021f 	and.w	r2, r2, #31
 80034e0:	2a09      	cmp	r2, #9
 80034e2:	f43f aedf 	beq.w	80032a4 <HAL_ADC_IRQHandler+0x58>
 80034e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034ea:	f43f aedb 	beq.w	80032a4 <HAL_ADC_IRQHandler+0x58>
 80034ee:	4a46      	ldr	r2, [pc, #280]	@ (8003608 <HAL_ADC_IRQHandler+0x3bc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	f43f aed7 	beq.w	80032a4 <HAL_ADC_IRQHandler+0x58>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80034f6:	4942      	ldr	r1, [pc, #264]	@ (8003600 <HAL_ADC_IRQHandler+0x3b4>)
 80034f8:	428b      	cmp	r3, r1
 80034fa:	bf08      	it	eq
 80034fc:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8003500:	68d2      	ldr	r2, [r2, #12]
 8003502:	e6d0      	b.n	80032a6 <HAL_ADC_IRQHandler+0x5a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003504:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003506:	f043 0310 	orr.w	r3, r3, #16
 800350a:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6463      	str	r3, [r4, #68]	@ 0x44
 8003514:	e6e3      	b.n	80032de <HAL_ADC_IRQHandler+0x92>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003516:	4a3d      	ldr	r2, [pc, #244]	@ (800360c <HAL_ADC_IRQHandler+0x3c0>)
 8003518:	6892      	ldr	r2, [r2, #8]
 800351a:	06d0      	lsls	r0, r2, #27
 800351c:	f43f af0a 	beq.w	8003334 <HAL_ADC_IRQHandler+0xe8>
 8003520:	4a3a      	ldr	r2, [pc, #232]	@ (800360c <HAL_ADC_IRQHandler+0x3c0>)
 8003522:	6892      	ldr	r2, [r2, #8]
 8003524:	f002 021f 	and.w	r2, r2, #31
 8003528:	2a05      	cmp	r2, #5
 800352a:	f43f af03 	beq.w	8003334 <HAL_ADC_IRQHandler+0xe8>
 800352e:	4a37      	ldr	r2, [pc, #220]	@ (800360c <HAL_ADC_IRQHandler+0x3c0>)
 8003530:	6892      	ldr	r2, [r2, #8]
 8003532:	f002 021f 	and.w	r2, r2, #31
 8003536:	2a09      	cmp	r2, #9
 8003538:	f43f aefc 	beq.w	8003334 <HAL_ADC_IRQHandler+0xe8>
 800353c:	4a32      	ldr	r2, [pc, #200]	@ (8003608 <HAL_ADC_IRQHandler+0x3bc>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d11a      	bne.n	8003578 <HAL_ADC_IRQHandler+0x32c>
 8003542:	e6f7      	b.n	8003334 <HAL_ADC_IRQHandler+0xe8>
 8003544:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003548:	d002      	beq.n	8003550 <HAL_ADC_IRQHandler+0x304>
 800354a:	4a2d      	ldr	r2, [pc, #180]	@ (8003600 <HAL_ADC_IRQHandler+0x3b4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d1ee      	bne.n	800352e <HAL_ADC_IRQHandler+0x2e2>
 8003550:	4a2c      	ldr	r2, [pc, #176]	@ (8003604 <HAL_ADC_IRQHandler+0x3b8>)
 8003552:	6892      	ldr	r2, [r2, #8]
 8003554:	f002 021f 	and.w	r2, r2, #31
 8003558:	2a09      	cmp	r2, #9
 800355a:	f43f aeeb 	beq.w	8003334 <HAL_ADC_IRQHandler+0xe8>
 800355e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003562:	f43f aee7 	beq.w	8003334 <HAL_ADC_IRQHandler+0xe8>
 8003566:	4a28      	ldr	r2, [pc, #160]	@ (8003608 <HAL_ADC_IRQHandler+0x3bc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	f43f aee3 	beq.w	8003334 <HAL_ADC_IRQHandler+0xe8>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800356e:	4924      	ldr	r1, [pc, #144]	@ (8003600 <HAL_ADC_IRQHandler+0x3b4>)
 8003570:	428b      	cmp	r3, r1
 8003572:	bf08      	it	eq
 8003574:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8003578:	68d2      	ldr	r2, [r2, #12]
 800357a:	e6dc      	b.n	8003336 <HAL_ADC_IRQHandler+0xea>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800357c:	4a23      	ldr	r2, [pc, #140]	@ (800360c <HAL_ADC_IRQHandler+0x3c0>)
 800357e:	6892      	ldr	r2, [r2, #8]
 8003580:	06d0      	lsls	r0, r2, #27
 8003582:	f43f aeff 	beq.w	8003384 <HAL_ADC_IRQHandler+0x138>
 8003586:	4a21      	ldr	r2, [pc, #132]	@ (800360c <HAL_ADC_IRQHandler+0x3c0>)
 8003588:	6892      	ldr	r2, [r2, #8]
 800358a:	f002 021f 	and.w	r2, r2, #31
 800358e:	2a06      	cmp	r2, #6
 8003590:	f43f aef8 	beq.w	8003384 <HAL_ADC_IRQHandler+0x138>
 8003594:	4a1d      	ldr	r2, [pc, #116]	@ (800360c <HAL_ADC_IRQHandler+0x3c0>)
 8003596:	6892      	ldr	r2, [r2, #8]
 8003598:	f002 021f 	and.w	r2, r2, #31
 800359c:	2a07      	cmp	r2, #7
 800359e:	f43f aef1 	beq.w	8003384 <HAL_ADC_IRQHandler+0x138>
 80035a2:	4a19      	ldr	r2, [pc, #100]	@ (8003608 <HAL_ADC_IRQHandler+0x3bc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d11a      	bne.n	80035de <HAL_ADC_IRQHandler+0x392>
 80035a8:	e6ec      	b.n	8003384 <HAL_ADC_IRQHandler+0x138>
 80035aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035ae:	d002      	beq.n	80035b6 <HAL_ADC_IRQHandler+0x36a>
 80035b0:	4a13      	ldr	r2, [pc, #76]	@ (8003600 <HAL_ADC_IRQHandler+0x3b4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d1ee      	bne.n	8003594 <HAL_ADC_IRQHandler+0x348>
 80035b6:	4a13      	ldr	r2, [pc, #76]	@ (8003604 <HAL_ADC_IRQHandler+0x3b8>)
 80035b8:	6892      	ldr	r2, [r2, #8]
 80035ba:	f002 021f 	and.w	r2, r2, #31
 80035be:	2a07      	cmp	r2, #7
 80035c0:	f43f aee0 	beq.w	8003384 <HAL_ADC_IRQHandler+0x138>
 80035c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035c8:	f43f aedc 	beq.w	8003384 <HAL_ADC_IRQHandler+0x138>
 80035cc:	4a0e      	ldr	r2, [pc, #56]	@ (8003608 <HAL_ADC_IRQHandler+0x3bc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	f43f aed8 	beq.w	8003384 <HAL_ADC_IRQHandler+0x138>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80035d4:	490a      	ldr	r1, [pc, #40]	@ (8003600 <HAL_ADC_IRQHandler+0x3b4>)
 80035d6:	428b      	cmp	r3, r1
 80035d8:	bf08      	it	eq
 80035da:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 80035de:	68d2      	ldr	r2, [r2, #12]
 80035e0:	e6d1      	b.n	8003386 <HAL_ADC_IRQHandler+0x13a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80035e4:	f043 0310 	orr.w	r3, r3, #16
 80035e8:	6423      	str	r3, [r4, #64]	@ 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	6463      	str	r3, [r4, #68]	@ 0x44
 80035f2:	e6dd      	b.n	80033b0 <HAL_ADC_IRQHandler+0x164>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035f4:	4b03      	ldr	r3, [pc, #12]	@ (8003604 <HAL_ADC_IRQHandler+0x3b8>)
 80035f6:	e71f      	b.n	8003438 <HAL_ADC_IRQHandler+0x1ec>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 80035fe:	e722      	b.n	8003446 <HAL_ADC_IRQHandler+0x1fa>
 8003600:	50000100 	.word	0x50000100
 8003604:	50000300 	.word	0x50000300
 8003608:	50000400 	.word	0x50000400
 800360c:	50000700 	.word	0x50000700

08003610 <HAL_ADC_ConfigChannel>:
{
 8003610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003612:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003618:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800361c:	68c8      	ldr	r0, [r1, #12]
  __HAL_LOCK(hadc);
 800361e:	2b01      	cmp	r3, #1
 8003620:	f000 816a 	beq.w	80038f8 <HAL_ADC_ConfigChannel+0x2e8>
 8003624:	2301      	movs	r3, #1
 8003626:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800362a:	682b      	ldr	r3, [r5, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	0757      	lsls	r7, r2, #29
 8003630:	f100 815c 	bmi.w	80038ec <HAL_ADC_ConfigChannel+0x2dc>
    if (sConfig->Rank < 5U)
 8003634:	684e      	ldr	r6, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 8003636:	680c      	ldr	r4, [r1, #0]
 8003638:	2206      	movs	r2, #6
    if (sConfig->Rank < 5U)
 800363a:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 800363c:	fb06 f202 	mul.w	r2, r6, r2
    if (sConfig->Rank < 5U)
 8003640:	d82c      	bhi.n	800369c <HAL_ADC_ConfigChannel+0x8c>
      MODIFY_REG(hadc->Instance->SQR1,
 8003642:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8003644:	271f      	movs	r7, #31
 8003646:	4097      	lsls	r7, r2
 8003648:	ea26 0607 	bic.w	r6, r6, r7
 800364c:	fa04 f202 	lsl.w	r2, r4, r2
 8003650:	4332      	orrs	r2, r6
 8003652:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	f012 0f0c 	tst.w	r2, #12
 800365a:	d158      	bne.n	800370e <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800365c:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800365e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8003662:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003666:	f04f 0607 	mov.w	r6, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800366a:	d93c      	bls.n	80036e6 <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800366c:	699f      	ldr	r7, [r3, #24]
 800366e:	3a1e      	subs	r2, #30
 8003670:	4096      	lsls	r6, r2
 8003672:	ea27 0606 	bic.w	r6, r7, r6
 8003676:	fa0c f202 	lsl.w	r2, ip, r2
 800367a:	4332      	orrs	r2, r6
 800367c:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	694e      	ldr	r6, [r1, #20]
 8003682:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003686:	0052      	lsls	r2, r2, #1
 8003688:	4096      	lsls	r6, r2
    switch (sConfig->OffsetNumber)
 800368a:	690a      	ldr	r2, [r1, #16]
 800368c:	3a01      	subs	r2, #1
      MODIFY_REG(hadc->Instance->OFR1               ,
 800368e:	06a7      	lsls	r7, r4, #26
    switch (sConfig->OffsetNumber)
 8003690:	2a03      	cmp	r2, #3
 8003692:	d86b      	bhi.n	800376c <HAL_ADC_ConfigChannel+0x15c>
 8003694:	e8df f002 	tbb	[pc, r2]
 8003698:	5f544931 	.word	0x5f544931
    else if (sConfig->Rank < 10U)
 800369c:	2e09      	cmp	r6, #9
 800369e:	d80a      	bhi.n	80036b6 <HAL_ADC_ConfigChannel+0xa6>
      MODIFY_REG(hadc->Instance->SQR2,
 80036a0:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 80036a2:	3a1e      	subs	r2, #30
 80036a4:	271f      	movs	r7, #31
 80036a6:	4097      	lsls	r7, r2
 80036a8:	ea26 0607 	bic.w	r6, r6, r7
 80036ac:	fa04 f202 	lsl.w	r2, r4, r2
 80036b0:	4332      	orrs	r2, r6
 80036b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80036b4:	e7ce      	b.n	8003654 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 80036b6:	2e0e      	cmp	r6, #14
 80036b8:	f04f 061f 	mov.w	r6, #31
 80036bc:	d809      	bhi.n	80036d2 <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80036be:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 80036c0:	3a3c      	subs	r2, #60	@ 0x3c
 80036c2:	4096      	lsls	r6, r2
 80036c4:	ea27 0606 	bic.w	r6, r7, r6
 80036c8:	fa04 f202 	lsl.w	r2, r4, r2
 80036cc:	4332      	orrs	r2, r6
 80036ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80036d0:	e7c0      	b.n	8003654 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80036d2:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 80036d4:	3a5a      	subs	r2, #90	@ 0x5a
 80036d6:	4096      	lsls	r6, r2
 80036d8:	ea27 0606 	bic.w	r6, r7, r6
 80036dc:	fa04 f202 	lsl.w	r2, r4, r2
 80036e0:	4332      	orrs	r2, r6
 80036e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80036e4:	e7b6      	b.n	8003654 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80036e6:	695f      	ldr	r7, [r3, #20]
 80036e8:	4096      	lsls	r6, r2
 80036ea:	ea27 0606 	bic.w	r6, r7, r6
 80036ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80036f2:	ea46 060c 	orr.w	r6, r6, ip
 80036f6:	615e      	str	r6, [r3, #20]
 80036f8:	e7c1      	b.n	800367e <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80036fa:	f8d3 c060 	ldr.w	ip, [r3, #96]	@ 0x60
 80036fe:	4a7f      	ldr	r2, [pc, #508]	@ (80038fc <HAL_ADC_ConfigChannel+0x2ec>)
 8003700:	ea0c 0202 	and.w	r2, ip, r2
 8003704:	433a      	orrs	r2, r7
 8003706:	4332      	orrs	r2, r6
 8003708:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800370c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	f002 0203 	and.w	r2, r2, #3
 8003714:	2a01      	cmp	r2, #1
 8003716:	d14d      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x1a4>
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	07d6      	lsls	r6, r2, #31
 800371c:	d54a      	bpl.n	80037b4 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800371e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8003720:	2300      	movs	r3, #0
 8003722:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 8003726:	b003      	add	sp, #12
 8003728:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 800372a:	f8d3 c064 	ldr.w	ip, [r3, #100]	@ 0x64
 800372e:	4a73      	ldr	r2, [pc, #460]	@ (80038fc <HAL_ADC_ConfigChannel+0x2ec>)
 8003730:	ea0c 0202 	and.w	r2, ip, r2
 8003734:	433a      	orrs	r2, r7
 8003736:	4332      	orrs	r2, r6
 8003738:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800373c:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800373e:	e7e6      	b.n	800370e <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003740:	f8d3 c068 	ldr.w	ip, [r3, #104]	@ 0x68
 8003744:	4a6d      	ldr	r2, [pc, #436]	@ (80038fc <HAL_ADC_ConfigChannel+0x2ec>)
 8003746:	ea0c 0202 	and.w	r2, ip, r2
 800374a:	433a      	orrs	r2, r7
 800374c:	4332      	orrs	r2, r6
 800374e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003752:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8003754:	e7db      	b.n	800370e <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003756:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 800375a:	4a68      	ldr	r2, [pc, #416]	@ (80038fc <HAL_ADC_ConfigChannel+0x2ec>)
 800375c:	ea0c 0202 	and.w	r2, ip, r2
 8003760:	433a      	orrs	r2, r7
 8003762:	4332      	orrs	r2, r6
 8003764:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003768:	66da      	str	r2, [r3, #108]	@ 0x6c
 800376a:	e7d0      	b.n	800370e <HAL_ADC_ConfigChannel+0xfe>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800376c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800376e:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8003772:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003774:	bf02      	ittt	eq
 8003776:	6e1a      	ldreq	r2, [r3, #96]	@ 0x60
 8003778:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 800377c:	661a      	streq	r2, [r3, #96]	@ 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800377e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003780:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8003784:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003786:	bf02      	ittt	eq
 8003788:	6e5a      	ldreq	r2, [r3, #100]	@ 0x64
 800378a:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 800378e:	665a      	streq	r2, [r3, #100]	@ 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003790:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003792:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8003796:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003798:	bf02      	ittt	eq
 800379a:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
 800379c:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80037a0:	669a      	streq	r2, [r3, #104]	@ 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037a2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80037a4:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80037a8:	42ba      	cmp	r2, r7
 80037aa:	d1b0      	bne.n	800370e <HAL_ADC_ConfigChannel+0xfe>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80037ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80037ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80037b2:	e7d9      	b.n	8003768 <HAL_ADC_ConfigChannel+0x158>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80037b4:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80037b6:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80037b8:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80037bc:	d047      	beq.n	800384e <HAL_ADC_ConfigChannel+0x23e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80037be:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80037c2:	ea21 0202 	bic.w	r2, r1, r2
 80037c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037ce:	d164      	bne.n	800389a <HAL_ADC_ConfigChannel+0x28a>
 80037d0:	494b      	ldr	r1, [pc, #300]	@ (8003900 <HAL_ADC_ConfigChannel+0x2f0>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80037d2:	2c10      	cmp	r4, #16
 80037d4:	d166      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x294>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80037d6:	688a      	ldr	r2, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80037d8:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80037dc:	d19f      	bne.n	800371e <HAL_ADC_ConfigChannel+0x10e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80037de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037e2:	4a48      	ldr	r2, [pc, #288]	@ (8003904 <HAL_ADC_ConfigChannel+0x2f4>)
 80037e4:	d009      	beq.n	80037fa <HAL_ADC_ConfigChannel+0x1ea>
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d069      	beq.n	80038be <HAL_ADC_ConfigChannel+0x2ae>
 80037ea:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 80037ee:	4293      	cmp	r3, r2
 80037f0:	4845      	ldr	r0, [pc, #276]	@ (8003908 <HAL_ADC_ConfigChannel+0x2f8>)
 80037f2:	d067      	beq.n	80038c4 <HAL_ADC_ConfigChannel+0x2b4>
 80037f4:	4283      	cmp	r3, r0
 80037f6:	bf18      	it	ne
 80037f8:	2200      	movne	r2, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80037fa:	6898      	ldr	r0, [r3, #8]
 80037fc:	f000 0003 	and.w	r0, r0, #3
 8003800:	2801      	cmp	r0, #1
 8003802:	d102      	bne.n	800380a <HAL_ADC_ConfigChannel+0x1fa>
 8003804:	6818      	ldr	r0, [r3, #0]
 8003806:	07c0      	lsls	r0, r0, #31
 8003808:	d470      	bmi.n	80038ec <HAL_ADC_ConfigChannel+0x2dc>
 800380a:	b13a      	cbz	r2, 800381c <HAL_ADC_ConfigChannel+0x20c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800380c:	6890      	ldr	r0, [r2, #8]
 800380e:	f000 0003 	and.w	r0, r0, #3
 8003812:	2801      	cmp	r0, #1
 8003814:	d102      	bne.n	800381c <HAL_ADC_ConfigChannel+0x20c>
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	07d2      	lsls	r2, r2, #31
 800381a:	d467      	bmi.n	80038ec <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800381c:	2c10      	cmp	r4, #16
 800381e:	d153      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x2b8>
 8003820:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003824:	f47f af7b 	bne.w	800371e <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003828:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800382a:	4a38      	ldr	r2, [pc, #224]	@ (800390c <HAL_ADC_ConfigChannel+0x2fc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800382c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003830:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003832:	4b37      	ldr	r3, [pc, #220]	@ (8003910 <HAL_ADC_ConfigChannel+0x300>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	fbb3 f3f2 	udiv	r3, r3, r2
 800383a:	220a      	movs	r2, #10
 800383c:	4353      	muls	r3, r2
            wait_loop_index--;
 800383e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003840:	9b01      	ldr	r3, [sp, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f43f af6b 	beq.w	800371e <HAL_ADC_ConfigChannel+0x10e>
            wait_loop_index--;
 8003848:	9b01      	ldr	r3, [sp, #4]
 800384a:	3b01      	subs	r3, #1
 800384c:	e7f7      	b.n	800383e <HAL_ADC_ConfigChannel+0x22e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800384e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003852:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003854:	ea42 0200 	orr.w	r2, r2, r0
 8003858:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800385c:	6888      	ldr	r0, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800385e:	d90c      	bls.n	800387a <HAL_ADC_ConfigChannel+0x26a>
        MODIFY_REG(hadc->Instance->SMPR2,
 8003860:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003864:	6999      	ldr	r1, [r3, #24]
 8003866:	3a1b      	subs	r2, #27
 8003868:	2607      	movs	r6, #7
 800386a:	4096      	lsls	r6, r2
 800386c:	ea21 0106 	bic.w	r1, r1, r6
 8003870:	fa00 f202 	lsl.w	r2, r0, r2
 8003874:	430a      	orrs	r2, r1
 8003876:	619a      	str	r2, [r3, #24]
 8003878:	e7a7      	b.n	80037ca <HAL_ADC_ConfigChannel+0x1ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 800387a:	1c61      	adds	r1, r4, #1
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003882:	2607      	movs	r6, #7
 8003884:	408e      	lsls	r6, r1
 8003886:	ea22 0206 	bic.w	r2, r2, r6
 800388a:	fa00 f101 	lsl.w	r1, r0, r1
 800388e:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003890:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8003894:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003896:	f43f af42 	beq.w	800371e <HAL_ADC_ConfigChannel+0x10e>
 800389a:	4a1a      	ldr	r2, [pc, #104]	@ (8003904 <HAL_ADC_ConfigChannel+0x2f4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d097      	beq.n	80037d0 <HAL_ADC_ConfigChannel+0x1c0>
 80038a0:	491c      	ldr	r1, [pc, #112]	@ (8003914 <HAL_ADC_ConfigChannel+0x304>)
 80038a2:	e796      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x1c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80038a4:	2c11      	cmp	r4, #17
 80038a6:	d103      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80038a8:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80038aa:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 80038ae:	e795      	b.n	80037dc <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80038b0:	2c12      	cmp	r4, #18
 80038b2:	f47f af34 	bne.w	800371e <HAL_ADC_ConfigChannel+0x10e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80038b6:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80038b8:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 80038bc:	e78e      	b.n	80037dc <HAL_ADC_ConfigChannel+0x1cc>
 80038be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80038c2:	e79a      	b.n	80037fa <HAL_ADC_ConfigChannel+0x1ea>
 80038c4:	4602      	mov	r2, r0
 80038c6:	e798      	b.n	80037fa <HAL_ADC_ConfigChannel+0x1ea>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80038c8:	2c11      	cmp	r4, #17
 80038ca:	d108      	bne.n	80038de <HAL_ADC_ConfigChannel+0x2ce>
 80038cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038d0:	f47f af25 	bne.w	800371e <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80038d4:	688b      	ldr	r3, [r1, #8]
 80038d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80038da:	608b      	str	r3, [r1, #8]
 80038dc:	e71f      	b.n	800371e <HAL_ADC_ConfigChannel+0x10e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80038de:	2c12      	cmp	r4, #18
 80038e0:	f47f af1d 	bne.w	800371e <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80038e4:	688b      	ldr	r3, [r1, #8]
 80038e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038ea:	e7f6      	b.n	80038da <HAL_ADC_ConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ec:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80038ee:	f043 0320 	orr.w	r3, r3, #32
 80038f2:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 80038f4:	2001      	movs	r0, #1
 80038f6:	e713      	b.n	8003720 <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 80038f8:	2002      	movs	r0, #2
 80038fa:	e714      	b.n	8003726 <HAL_ADC_ConfigChannel+0x116>
 80038fc:	83fff000 	.word	0x83fff000
 8003900:	50000300 	.word	0x50000300
 8003904:	50000100 	.word	0x50000100
 8003908:	50000500 	.word	0x50000500
 800390c:	000f4240 	.word	0x000f4240
 8003910:	20000010 	.word	0x20000010
 8003914:	50000700 	.word	0x50000700

08003918 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8003918:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800391a:	6804      	ldr	r4, [r0, #0]
 800391c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 800391e:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
{
 8003922:	4605      	mov	r5, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003924:	d009      	beq.n	800393a <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8003926:	429c      	cmp	r4, r3
 8003928:	d047      	beq.n	80039ba <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 800392a:	4a3a      	ldr	r2, [pc, #232]	@ (8003a14 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 800392c:	4294      	cmp	r4, r2
 800392e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003932:	d002      	beq.n	800393a <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8003934:	429c      	cmp	r4, r3
 8003936:	d166      	bne.n	8003a06 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003938:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 800393a:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 800393e:	2a01      	cmp	r2, #1
 8003940:	d063      	beq.n	8003a0a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003942:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003944:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(hadc);
 8003946:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800394a:	68a2      	ldr	r2, [r4, #8]
 800394c:	0752      	lsls	r2, r2, #29
 800394e:	d454      	bmi.n	80039fa <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	0757      	lsls	r7, r2, #29
 8003954:	d451      	bmi.n	80039fa <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003956:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 800395a:	d031      	beq.n	80039c0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800395c:	4f2c      	ldr	r7, [pc, #176]	@ (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 800395e:	4a2e      	ldr	r2, [pc, #184]	@ (8003a18 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8003960:	4e2e      	ldr	r6, [pc, #184]	@ (8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8003962:	42bc      	cmp	r4, r7
 8003964:	bf08      	it	eq
 8003966:	4632      	moveq	r2, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003968:	b360      	cbz	r0, 80039c4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800396a:	6897      	ldr	r7, [r2, #8]
 800396c:	f895 c030 	ldrb.w	ip, [r5, #48]	@ 0x30
 8003970:	684e      	ldr	r6, [r1, #4]
 8003972:	f427 4760 	bic.w	r7, r7, #57344	@ 0xe000
 8003976:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 800397a:	433e      	orrs	r6, r7
 800397c:	6096      	str	r6, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800397e:	68a6      	ldr	r6, [r4, #8]
 8003980:	f006 0603 	and.w	r6, r6, #3
 8003984:	2e01      	cmp	r6, #1
 8003986:	d102      	bne.n	800398e <HAL_ADCEx_MultiModeConfigChannel+0x76>
 8003988:	6824      	ldr	r4, [r4, #0]
 800398a:	07e6      	lsls	r6, r4, #31
 800398c:	d410      	bmi.n	80039b0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800398e:	689c      	ldr	r4, [r3, #8]
 8003990:	f004 0403 	and.w	r4, r4, #3
 8003994:	2c01      	cmp	r4, #1
 8003996:	d102      	bne.n	800399e <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	07dc      	lsls	r4, r3, #31
 800399c:	d408      	bmi.n	80039b0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800399e:	6893      	ldr	r3, [r2, #8]
 80039a0:	6889      	ldr	r1, [r1, #8]
 80039a2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80039a6:	4308      	orrs	r0, r1
 80039a8:	f023 030f 	bic.w	r3, r3, #15
 80039ac:	4318      	orrs	r0, r3
 80039ae:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039b0:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80039b2:	2300      	movs	r3, #0
 80039b4:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
} 
 80039b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80039be:	e7bc      	b.n	800393a <HAL_ADCEx_MultiModeConfigChannel+0x22>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039c0:	4a16      	ldr	r2, [pc, #88]	@ (8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80039c2:	e7d1      	b.n	8003968 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039c4:	6891      	ldr	r1, [r2, #8]
 80039c6:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 80039ca:	6091      	str	r1, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80039cc:	68a1      	ldr	r1, [r4, #8]
 80039ce:	f001 0103 	and.w	r1, r1, #3
 80039d2:	2901      	cmp	r1, #1
 80039d4:	d102      	bne.n	80039dc <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 80039d6:	6821      	ldr	r1, [r4, #0]
 80039d8:	07c9      	lsls	r1, r1, #31
 80039da:	d4e9      	bmi.n	80039b0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80039dc:	6899      	ldr	r1, [r3, #8]
 80039de:	f001 0103 	and.w	r1, r1, #3
 80039e2:	2901      	cmp	r1, #1
 80039e4:	d102      	bne.n	80039ec <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	07db      	lsls	r3, r3, #31
 80039ea:	d4e1      	bmi.n	80039b0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80039ec:	6893      	ldr	r3, [r2, #8]
 80039ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80039f2:	f023 030f 	bic.w	r3, r3, #15
 80039f6:	6093      	str	r3, [r2, #8]
 80039f8:	e7da      	b.n	80039b0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039fa:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80039fc:	f043 0320 	orr.w	r3, r3, #32
 8003a00:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8003a02:	2001      	movs	r0, #1
 8003a04:	e7d5      	b.n	80039b2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    return HAL_ERROR;
 8003a06:	2001      	movs	r0, #1
 8003a08:	e7d6      	b.n	80039b8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 8003a0a:	2002      	movs	r0, #2
 8003a0c:	e7d4      	b.n	80039b8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003a0e:	bf00      	nop
 8003a10:	50000100 	.word	0x50000100
 8003a14:	50000400 	.word	0x50000400
 8003a18:	50000700 	.word	0x50000700
 8003a1c:	50000300 	.word	0x50000300

08003a20 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a20:	4907      	ldr	r1, [pc, #28]	@ (8003a40 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003a22:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a24:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a28:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a30:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003a3c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003a3e:	4770      	bx	lr
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a44:	4b16      	ldr	r3, [pc, #88]	@ (8003aa0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a46:	b530      	push	{r4, r5, lr}
 8003a48:	68dc      	ldr	r4, [r3, #12]
 8003a4a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a4e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a52:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	bf28      	it	cs
 8003a58:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a5a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a5c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a60:	bf8c      	ite	hi
 8003a62:	3c03      	subhi	r4, #3
 8003a64:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a66:	fa05 f303 	lsl.w	r3, r5, r3
 8003a6a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a6e:	40a5      	lsls	r5, r4
 8003a70:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a74:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8003a76:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a78:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7c:	bfac      	ite	ge
 8003a7e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a82:	4a08      	ldrlt	r2, [pc, #32]	@ (8003aa4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a84:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a88:	bfb8      	it	lt
 8003a8a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	bfaa      	itet	ge
 8003a92:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a96:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a98:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003a9c:	bd30      	pop	{r4, r5, pc}
 8003a9e:	bf00      	nop
 8003aa0:	e000ed00 	.word	0xe000ed00
 8003aa4:	e000ed14 	.word	0xe000ed14

08003aa8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	db07      	blt.n	8003abc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aac:	0941      	lsrs	r1, r0, #5
 8003aae:	4a04      	ldr	r2, [pc, #16]	@ (8003ac0 <HAL_NVIC_EnableIRQ+0x18>)
 8003ab0:	f000 001f 	and.w	r0, r0, #31
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	4083      	lsls	r3, r0
 8003ab8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	e000e100 	.word	0xe000e100

08003ac4 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ac4:	6802      	ldr	r2, [r0, #0]
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8003af0 <DMA_CalcBaseAndBitshift+0x2c>)
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	f04f 0114 	mov.w	r1, #20
 8003ace:	d808      	bhi.n	8003ae2 <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ad0:	4b08      	ldr	r3, [pc, #32]	@ (8003af4 <DMA_CalcBaseAndBitshift+0x30>)
 8003ad2:	4413      	add	r3, r2
 8003ad4:	4a08      	ldr	r2, [pc, #32]	@ (8003af8 <DMA_CalcBaseAndBitshift+0x34>)
 8003ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ada:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8003adc:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003ae0:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ae2:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <DMA_CalcBaseAndBitshift+0x38>)
 8003ae4:	4413      	add	r3, r2
 8003ae6:	4a06      	ldr	r2, [pc, #24]	@ (8003b00 <DMA_CalcBaseAndBitshift+0x3c>)
 8003ae8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aec:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8003aee:	e7f5      	b.n	8003adc <DMA_CalcBaseAndBitshift+0x18>
 8003af0:	40020407 	.word	0x40020407
 8003af4:	bffdfff8 	.word	0xbffdfff8
 8003af8:	40020000 	.word	0x40020000
 8003afc:	bffdfbf8 	.word	0xbffdfbf8
 8003b00:	40020400 	.word	0x40020400

08003b04 <HAL_DMA_Init>:
{
 8003b04:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 8003b06:	4604      	mov	r4, r0
 8003b08:	b1e0      	cbz	r0, 8003b44 <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 8003b0a:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 8003b0e:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b10:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8003b12:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b14:	432b      	orrs	r3, r5
 8003b16:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8003b18:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b1a:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b1c:	6945      	ldr	r5, [r0, #20]
 8003b1e:	432b      	orrs	r3, r5
 8003b20:	6985      	ldr	r5, [r0, #24]
 8003b22:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b24:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003b26:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 8003b2a:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b2e:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8003b30:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8003b32:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8003b34:	f7ff ffc6 	bl	8003ac4 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b38:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 8003b3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b3e:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8003b40:	8423      	strh	r3, [r4, #32]
}
 8003b42:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003b44:	2001      	movs	r0, #1
 8003b46:	e7fc      	b.n	8003b42 <HAL_DMA_Init+0x3e>

08003b48 <HAL_DMA_Start_IT>:
{
 8003b48:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8003b4a:	f890 4020 	ldrb.w	r4, [r0, #32]
 8003b4e:	2c01      	cmp	r4, #1
 8003b50:	d033      	beq.n	8003bba <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b52:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 8003b56:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b58:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8003b5a:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b5e:	f04f 0400 	mov.w	r4, #0
 8003b62:	d128      	bne.n	8003bb6 <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b64:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b66:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b68:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b6a:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b6e:	6826      	ldr	r6, [r4, #0]
 8003b70:	f026 0601 	bic.w	r6, r6, #1
 8003b74:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003b76:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8003b7a:	40bd      	lsls	r5, r7
 8003b7c:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8003b7e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b80:	6843      	ldr	r3, [r0, #4]
 8003b82:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8003b84:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 8003b86:	bf0b      	itete	eq
 8003b88:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8003b8a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003b8c:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8003b8e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003b90:	b14b      	cbz	r3, 8003ba6 <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003b98:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba2:	2000      	movs	r0, #0
}
 8003ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	f043 030a 	orr.w	r3, r3, #10
 8003bac:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	f023 0304 	bic.w	r3, r3, #4
 8003bb4:	e7f0      	b.n	8003b98 <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 8003bb6:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8003bba:	2002      	movs	r0, #2
 8003bbc:	e7f2      	b.n	8003ba4 <HAL_DMA_Start_IT+0x5c>

08003bbe <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bbe:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003bc0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8003bc2:	6803      	ldr	r3, [r0, #0]
{
 8003bc4:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bc6:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003bc8:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003bca:	2404      	movs	r4, #4
 8003bcc:	4094      	lsls	r4, r2
 8003bce:	4234      	tst	r4, r6
 8003bd0:	d00e      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x32>
 8003bd2:	f015 0f04 	tst.w	r5, #4
 8003bd6:	d00b      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003bdc:	bf5e      	ittt	pl
 8003bde:	681a      	ldrpl	r2, [r3, #0]
 8003be0:	f022 0204 	bicpl.w	r2, r2, #4
 8003be4:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8003be6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003be8:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8003bea:	b363      	cbz	r3, 8003c46 <HAL_DMA_IRQHandler+0x88>
}
 8003bec:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003bee:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003bf0:	2402      	movs	r4, #2
 8003bf2:	4094      	lsls	r4, r2
 8003bf4:	4234      	tst	r4, r6
 8003bf6:	d012      	beq.n	8003c1e <HAL_DMA_IRQHandler+0x60>
 8003bf8:	f015 0f02 	tst.w	r5, #2
 8003bfc:	d00f      	beq.n	8003c1e <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	0695      	lsls	r5, r2, #26
 8003c02:	d406      	bmi.n	8003c12 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	f022 020a 	bic.w	r2, r2, #10
 8003c0a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8003c12:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003c14:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003c16:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8003c1a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003c1c:	e7e5      	b.n	8003bea <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c1e:	2408      	movs	r4, #8
 8003c20:	4094      	lsls	r4, r2
 8003c22:	4234      	tst	r4, r6
 8003c24:	d00f      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x88>
 8003c26:	072c      	lsls	r4, r5, #28
 8003c28:	d50d      	bpl.n	8003c46 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c2a:	681c      	ldr	r4, [r3, #0]
 8003c2c:	f024 040e 	bic.w	r4, r4, #14
 8003c30:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c32:	2301      	movs	r3, #1
 8003c34:	fa03 f202 	lsl.w	r2, r3, r2
 8003c38:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c3a:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8003c3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c40:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8003c42:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003c44:	e7d1      	b.n	8003bea <HAL_DMA_IRQHandler+0x2c>
}
 8003c46:	bc70      	pop	{r4, r5, r6}
 8003c48:	4770      	bx	lr
	...

08003c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c50:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8003dd0 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c54:	4c5c      	ldr	r4, [pc, #368]	@ (8003dc8 <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 8003c56:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c58:	680a      	ldr	r2, [r1, #0]
 8003c5a:	fa32 f503 	lsrs.w	r5, r2, r3
 8003c5e:	d102      	bne.n	8003c66 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8003c60:	b003      	add	sp, #12
 8003c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c66:	2501      	movs	r5, #1
 8003c68:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8003c6c:	ea18 0202 	ands.w	r2, r8, r2
 8003c70:	f000 80a0 	beq.w	8003db4 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c74:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c76:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c78:	f006 0503 	and.w	r5, r6, #3
 8003c7c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c80:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c84:	1e6f      	subs	r7, r5, #1
 8003c86:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c88:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c8c:	d834      	bhi.n	8003cf8 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8003c8e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c90:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c94:	68cf      	ldr	r7, [r1, #12]
 8003c96:	fa07 f70e 	lsl.w	r7, r7, lr
 8003c9a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8003c9e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003ca0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ca2:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ca6:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8003caa:	409f      	lsls	r7, r3
 8003cac:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8003cb0:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003cb2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003cb4:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003cb8:	688f      	ldr	r7, [r1, #8]
 8003cba:	fa07 f70e 	lsl.w	r7, r7, lr
 8003cbe:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc2:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8003cc4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc6:	d119      	bne.n	8003cfc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8003cc8:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8003ccc:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cd0:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8003cd4:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cd8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8003cdc:	f04f 0b0f 	mov.w	fp, #15
 8003ce0:	fa0b fb0a 	lsl.w	fp, fp, sl
 8003ce4:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ce8:	690f      	ldr	r7, [r1, #16]
 8003cea:	fa07 f70a 	lsl.w	r7, r7, sl
 8003cee:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8003cf2:	f8c8 7020 	str.w	r7, [r8, #32]
 8003cf6:	e001      	b.n	8003cfc <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cf8:	2d03      	cmp	r5, #3
 8003cfa:	d1da      	bne.n	8003cb2 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8003cfc:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cfe:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d02:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d06:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d08:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8003d0c:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d0e:	d051      	beq.n	8003db4 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d10:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8003d14:	f045 0501 	orr.w	r5, r5, #1
 8003d18:	f8c9 5018 	str.w	r5, [r9, #24]
 8003d1c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8003d20:	f023 0703 	bic.w	r7, r3, #3
 8003d24:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8003d28:	f005 0501 	and.w	r5, r5, #1
 8003d2c:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8003d30:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d32:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d36:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003d38:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d3a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003d3e:	f04f 0e0f 	mov.w	lr, #15
 8003d42:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d46:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d4a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d4e:	d033      	beq.n	8003db8 <HAL_GPIO_Init+0x16c>
 8003d50:	4d1e      	ldr	r5, [pc, #120]	@ (8003dcc <HAL_GPIO_Init+0x180>)
 8003d52:	42a8      	cmp	r0, r5
 8003d54:	d032      	beq.n	8003dbc <HAL_GPIO_Init+0x170>
 8003d56:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003d5a:	42a8      	cmp	r0, r5
 8003d5c:	d030      	beq.n	8003dc0 <HAL_GPIO_Init+0x174>
 8003d5e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003d62:	42a8      	cmp	r0, r5
 8003d64:	d02e      	beq.n	8003dc4 <HAL_GPIO_Init+0x178>
 8003d66:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003d6a:	42a8      	cmp	r0, r5
 8003d6c:	bf14      	ite	ne
 8003d6e:	2505      	movne	r5, #5
 8003d70:	2504      	moveq	r5, #4
 8003d72:	fa05 f50c 	lsl.w	r5, r5, ip
 8003d76:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d7a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 8003d7c:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8003d7e:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d80:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8003d84:	bf0c      	ite	eq
 8003d86:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003d88:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 8003d8a:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8003d8c:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d8e:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 8003d92:	bf0c      	ite	eq
 8003d94:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003d96:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 8003d98:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 8003d9a:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d9c:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8003da0:	bf0c      	ite	eq
 8003da2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003da4:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 8003da6:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 8003da8:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003daa:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8003dac:	bf54      	ite	pl
 8003dae:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8003db0:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 8003db2:	6025      	str	r5, [r4, #0]
    position++;
 8003db4:	3301      	adds	r3, #1
 8003db6:	e74f      	b.n	8003c58 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003db8:	2500      	movs	r5, #0
 8003dba:	e7da      	b.n	8003d72 <HAL_GPIO_Init+0x126>
 8003dbc:	2501      	movs	r5, #1
 8003dbe:	e7d8      	b.n	8003d72 <HAL_GPIO_Init+0x126>
 8003dc0:	2502      	movs	r5, #2
 8003dc2:	e7d6      	b.n	8003d72 <HAL_GPIO_Init+0x126>
 8003dc4:	2503      	movs	r5, #3
 8003dc6:	e7d4      	b.n	8003d72 <HAL_GPIO_Init+0x126>
 8003dc8:	40010400 	.word	0x40010400
 8003dcc:	48000400 	.word	0x48000400
 8003dd0:	40021000 	.word	0x40021000

08003dd4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dd4:	b10a      	cbz	r2, 8003dda <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dd6:	6181      	str	r1, [r0, #24]
 8003dd8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dda:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8003ddc:	4770      	bx	lr
	...

08003de0 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8003de0:	4a02      	ldr	r2, [pc, #8]	@ (8003dec <HAL_PWR_EnableBkUpAccess+0xc>)
 8003de2:	6813      	ldr	r3, [r2, #0]
 8003de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de8:	6013      	str	r3, [r2, #0]
}
 8003dea:	4770      	bx	lr
 8003dec:	40007000 	.word	0x40007000

08003df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003df4:	4605      	mov	r5, r0
 8003df6:	2800      	cmp	r0, #0
 8003df8:	d033      	beq.n	8003e62 <HAL_RCC_OscConfig+0x72>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dfa:	6803      	ldr	r3, [r0, #0]
 8003dfc:	07da      	lsls	r2, r3, #31
 8003dfe:	d411      	bmi.n	8003e24 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e00:	682b      	ldr	r3, [r5, #0]
 8003e02:	079b      	lsls	r3, r3, #30
 8003e04:	f100 8081 	bmi.w	8003f0a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	071c      	lsls	r4, r3, #28
 8003e0c:	f100 80eb 	bmi.w	8003fe6 <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	0758      	lsls	r0, r3, #29
 8003e14:	f100 8130 	bmi.w	8004078 <HAL_RCC_OscConfig+0x288>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e18:	69eb      	ldr	r3, [r5, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f040 81b5 	bne.w	800418a <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }

  return HAL_OK;
 8003e20:	2000      	movs	r0, #0
 8003e22:	e047      	b.n	8003eb4 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e24:	4cb0      	ldr	r4, [pc, #704]	@ (80040e8 <HAL_RCC_OscConfig+0x2f8>)
 8003e26:	6863      	ldr	r3, [r4, #4]
 8003e28:	f003 030c 	and.w	r3, r3, #12
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d007      	beq.n	8003e40 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e30:	6863      	ldr	r3, [r4, #4]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d115      	bne.n	8003e66 <HAL_RCC_OscConfig+0x76>
 8003e3a:	6863      	ldr	r3, [r4, #4]
 8003e3c:	03df      	lsls	r7, r3, #15
 8003e3e:	d512      	bpl.n	8003e66 <HAL_RCC_OscConfig+0x76>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e44:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e48:	6821      	ldr	r1, [r4, #0]
 8003e4a:	fa93 f3a3 	rbit	r3, r3
 8003e4e:	2201      	movs	r2, #1
 8003e50:	fab3 f383 	clz	r3, r3
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	420b      	tst	r3, r1
 8003e5a:	d0d1      	beq.n	8003e00 <HAL_RCC_OscConfig+0x10>
 8003e5c:	686b      	ldr	r3, [r5, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1ce      	bne.n	8003e00 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8003e62:	2001      	movs	r0, #1
 8003e64:	e026      	b.n	8003eb4 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e66:	686a      	ldr	r2, [r5, #4]
 8003e68:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8003e6c:	d125      	bne.n	8003eba <HAL_RCC_OscConfig+0xca>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e74:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e76:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003e78:	68a9      	ldr	r1, [r5, #8]
 8003e7a:	f023 030f 	bic.w	r3, r3, #15
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e82:	b352      	cbz	r2, 8003eda <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 8003e84:	f7ff f886 	bl	8002f94 <HAL_GetTick>
 8003e88:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8003e8c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8e:	f04f 0801 	mov.w	r8, #1
 8003e92:	fa97 f3a7 	rbit	r3, r7
 8003e96:	6822      	ldr	r2, [r4, #0]
 8003e98:	fa97 f3a7 	rbit	r3, r7
 8003e9c:	fab3 f383 	clz	r3, r3
 8003ea0:	fa08 f303 	lsl.w	r3, r8, r3
 8003ea4:	4213      	tst	r3, r2
 8003ea6:	d1ab      	bne.n	8003e00 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7ff f874 	bl	8002f94 <HAL_GetTick>
 8003eac:	1b80      	subs	r0, r0, r6
 8003eae:	2864      	cmp	r0, #100	@ 0x64
 8003eb0:	d9ef      	bls.n	8003e92 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 8003eb2:	2003      	movs	r0, #3
}
 8003eb4:	b002      	add	sp, #8
 8003eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	b932      	cbnz	r2, 8003ecc <HAL_RCC_OscConfig+0xdc>
 8003ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ec2:	6023      	str	r3, [r4, #0]
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eca:	e7d3      	b.n	8003e74 <HAL_RCC_OscConfig+0x84>
 8003ecc:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8003ed0:	d1f5      	bne.n	8003ebe <HAL_RCC_OscConfig+0xce>
 8003ed2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ed6:	6023      	str	r3, [r4, #0]
 8003ed8:	e7c9      	b.n	8003e6e <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 8003eda:	f7ff f85b 	bl	8002f94 <HAL_GetTick>
 8003ede:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8003ee2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee4:	f04f 0801 	mov.w	r8, #1
 8003ee8:	fa97 f3a7 	rbit	r3, r7
 8003eec:	6822      	ldr	r2, [r4, #0]
 8003eee:	fa97 f3a7 	rbit	r3, r7
 8003ef2:	fab3 f383 	clz	r3, r3
 8003ef6:	fa08 f303 	lsl.w	r3, r8, r3
 8003efa:	4213      	tst	r3, r2
 8003efc:	d080      	beq.n	8003e00 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003efe:	f7ff f849 	bl	8002f94 <HAL_GetTick>
 8003f02:	1b80      	subs	r0, r0, r6
 8003f04:	2864      	cmp	r0, #100	@ 0x64
 8003f06:	d9ef      	bls.n	8003ee8 <HAL_RCC_OscConfig+0xf8>
 8003f08:	e7d3      	b.n	8003eb2 <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f0a:	4c77      	ldr	r4, [pc, #476]	@ (80040e8 <HAL_RCC_OscConfig+0x2f8>)
 8003f0c:	6863      	ldr	r3, [r4, #4]
 8003f0e:	f013 0f0c 	tst.w	r3, #12
 8003f12:	d007      	beq.n	8003f24 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f14:	6863      	ldr	r3, [r4, #4]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d11f      	bne.n	8003f5e <HAL_RCC_OscConfig+0x16e>
 8003f1e:	6863      	ldr	r3, [r4, #4]
 8003f20:	03de      	lsls	r6, r3, #15
 8003f22:	d41c      	bmi.n	8003f5e <HAL_RCC_OscConfig+0x16e>
 8003f24:	2302      	movs	r3, #2
 8003f26:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2a:	6821      	ldr	r1, [r4, #0]
 8003f2c:	fa93 f3a3 	rbit	r3, r3
 8003f30:	2201      	movs	r2, #1
 8003f32:	fab3 f383 	clz	r3, r3
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	420b      	tst	r3, r1
 8003f3c:	d002      	beq.n	8003f44 <HAL_RCC_OscConfig+0x154>
 8003f3e:	692b      	ldr	r3, [r5, #16]
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d18e      	bne.n	8003e62 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f44:	6821      	ldr	r1, [r4, #0]
 8003f46:	22f8      	movs	r2, #248	@ 0xf8
 8003f48:	fa92 f2a2 	rbit	r2, r2
 8003f4c:	696b      	ldr	r3, [r5, #20]
 8003f4e:	fab2 f282 	clz	r2, r2
 8003f52:	4093      	lsls	r3, r2
 8003f54:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	6023      	str	r3, [r4, #0]
 8003f5c:	e754      	b.n	8003e08 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f5e:	692a      	ldr	r2, [r5, #16]
 8003f60:	2601      	movs	r6, #1
 8003f62:	b1fa      	cbz	r2, 8003fa4 <HAL_RCC_OscConfig+0x1b4>
 8003f64:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8003f68:	fab3 f383 	clz	r3, r3
 8003f6c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003f70:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	f04f 0802 	mov.w	r8, #2
 8003f7a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8003f7c:	f7ff f80a 	bl	8002f94 <HAL_GetTick>
 8003f80:	4607      	mov	r7, r0
 8003f82:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f86:	6822      	ldr	r2, [r4, #0]
 8003f88:	fa98 f3a8 	rbit	r3, r8
 8003f8c:	fab3 f383 	clz	r3, r3
 8003f90:	fa06 f303 	lsl.w	r3, r6, r3
 8003f94:	4213      	tst	r3, r2
 8003f96:	d1d5      	bne.n	8003f44 <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f98:	f7fe fffc 	bl	8002f94 <HAL_GetTick>
 8003f9c:	1bc0      	subs	r0, r0, r7
 8003f9e:	2802      	cmp	r0, #2
 8003fa0:	d9ef      	bls.n	8003f82 <HAL_RCC_OscConfig+0x192>
 8003fa2:	e786      	b.n	8003eb2 <HAL_RCC_OscConfig+0xc2>
 8003fa4:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8003fa8:	fab3 f383 	clz	r3, r3
 8003fac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003fb0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	f04f 0802 	mov.w	r8, #2
 8003fba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003fbc:	f7fe ffea 	bl	8002f94 <HAL_GetTick>
 8003fc0:	4607      	mov	r7, r0
 8003fc2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fc6:	6822      	ldr	r2, [r4, #0]
 8003fc8:	fa98 f3a8 	rbit	r3, r8
 8003fcc:	fab3 f383 	clz	r3, r3
 8003fd0:	fa06 f303 	lsl.w	r3, r6, r3
 8003fd4:	4213      	tst	r3, r2
 8003fd6:	f43f af17 	beq.w	8003e08 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fda:	f7fe ffdb 	bl	8002f94 <HAL_GetTick>
 8003fde:	1bc0      	subs	r0, r0, r7
 8003fe0:	2802      	cmp	r0, #2
 8003fe2:	d9ee      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x1d2>
 8003fe4:	e765      	b.n	8003eb2 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fe6:	69aa      	ldr	r2, [r5, #24]
 8003fe8:	4e3f      	ldr	r6, [pc, #252]	@ (80040e8 <HAL_RCC_OscConfig+0x2f8>)
 8003fea:	4940      	ldr	r1, [pc, #256]	@ (80040ec <HAL_RCC_OscConfig+0x2fc>)
 8003fec:	2401      	movs	r4, #1
 8003fee:	b30a      	cbz	r2, 8004034 <HAL_RCC_OscConfig+0x244>
 8003ff0:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8003ff4:	fab3 f383 	clz	r3, r3
 8003ff8:	440b      	add	r3, r1
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	2702      	movs	r7, #2
 8003ffe:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8004000:	f7fe ffc8 	bl	8002f94 <HAL_GetTick>
 8004004:	4680      	mov	r8, r0
 8004006:	fa97 f3a7 	rbit	r3, r7
 800400a:	fa97 f3a7 	rbit	r3, r7
 800400e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004012:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8004014:	fa97 f3a7 	rbit	r3, r7
 8004018:	fab3 f383 	clz	r3, r3
 800401c:	fa04 f303 	lsl.w	r3, r4, r3
 8004020:	4213      	tst	r3, r2
 8004022:	f47f aef5 	bne.w	8003e10 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004026:	f7fe ffb5 	bl	8002f94 <HAL_GetTick>
 800402a:	eba0 0008 	sub.w	r0, r0, r8
 800402e:	2802      	cmp	r0, #2
 8004030:	d9e9      	bls.n	8004006 <HAL_RCC_OscConfig+0x216>
 8004032:	e73e      	b.n	8003eb2 <HAL_RCC_OscConfig+0xc2>
 8004034:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8004038:	fab3 f383 	clz	r3, r3
 800403c:	440b      	add	r3, r1
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	2702      	movs	r7, #2
 8004042:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004044:	f7fe ffa6 	bl	8002f94 <HAL_GetTick>
 8004048:	4680      	mov	r8, r0
 800404a:	fa97 f3a7 	rbit	r3, r7
 800404e:	fa97 f3a7 	rbit	r3, r7
 8004052:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004056:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8004058:	fa97 f3a7 	rbit	r3, r7
 800405c:	fab3 f383 	clz	r3, r3
 8004060:	fa04 f303 	lsl.w	r3, r4, r3
 8004064:	4213      	tst	r3, r2
 8004066:	f43f aed3 	beq.w	8003e10 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800406a:	f7fe ff93 	bl	8002f94 <HAL_GetTick>
 800406e:	eba0 0008 	sub.w	r0, r0, r8
 8004072:	2802      	cmp	r0, #2
 8004074:	d9e9      	bls.n	800404a <HAL_RCC_OscConfig+0x25a>
 8004076:	e71c      	b.n	8003eb2 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004078:	4c1b      	ldr	r4, [pc, #108]	@ (80040e8 <HAL_RCC_OscConfig+0x2f8>)
 800407a:	69e3      	ldr	r3, [r4, #28]
 800407c:	00d9      	lsls	r1, r3, #3
 800407e:	d431      	bmi.n	80040e4 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004080:	69e3      	ldr	r3, [r4, #28]
 8004082:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004086:	61e3      	str	r3, [r4, #28]
 8004088:	69e3      	ldr	r3, [r4, #28]
 800408a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800408e:	9301      	str	r3, [sp, #4]
 8004090:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004092:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004094:	4f16      	ldr	r7, [pc, #88]	@ (80040f0 <HAL_RCC_OscConfig+0x300>)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	05da      	lsls	r2, r3, #23
 800409a:	d52b      	bpl.n	80040f4 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800409c:	68eb      	ldr	r3, [r5, #12]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d139      	bne.n	8004116 <HAL_RCC_OscConfig+0x326>
 80040a2:	6a23      	ldr	r3, [r4, #32]
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80040aa:	f7fe ff73 	bl	8002f94 <HAL_GetTick>
 80040ae:	2702      	movs	r7, #2
 80040b0:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b2:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b6:	f241 3a88 	movw	sl, #5000	@ 0x1388
 80040ba:	fa97 f3a7 	rbit	r3, r7
 80040be:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c2:	6a22      	ldr	r2, [r4, #32]
 80040c4:	fa97 f3a7 	rbit	r3, r7
 80040c8:	fab3 f383 	clz	r3, r3
 80040cc:	fa09 f303 	lsl.w	r3, r9, r3
 80040d0:	4213      	tst	r3, r2
 80040d2:	d053      	beq.n	800417c <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 80040d4:	2e00      	cmp	r6, #0
 80040d6:	f43f ae9f 	beq.w	8003e18 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80040da:	69e3      	ldr	r3, [r4, #28]
 80040dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e0:	61e3      	str	r3, [r4, #28]
 80040e2:	e699      	b.n	8003e18 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80040e4:	2600      	movs	r6, #0
 80040e6:	e7d5      	b.n	8004094 <HAL_RCC_OscConfig+0x2a4>
 80040e8:	40021000 	.word	0x40021000
 80040ec:	10908120 	.word	0x10908120
 80040f0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040fa:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80040fc:	f7fe ff4a 	bl	8002f94 <HAL_GetTick>
 8004100:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	05db      	lsls	r3, r3, #23
 8004106:	d4c9      	bmi.n	800409c <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004108:	f7fe ff44 	bl	8002f94 <HAL_GetTick>
 800410c:	eba0 0008 	sub.w	r0, r0, r8
 8004110:	2864      	cmp	r0, #100	@ 0x64
 8004112:	d9f6      	bls.n	8004102 <HAL_RCC_OscConfig+0x312>
 8004114:	e6cd      	b.n	8003eb2 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004116:	bb1b      	cbnz	r3, 8004160 <HAL_RCC_OscConfig+0x370>
 8004118:	6a23      	ldr	r3, [r4, #32]
 800411a:	f023 0301 	bic.w	r3, r3, #1
 800411e:	6223      	str	r3, [r4, #32]
 8004120:	6a23      	ldr	r3, [r4, #32]
 8004122:	f023 0304 	bic.w	r3, r3, #4
 8004126:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004128:	f7fe ff34 	bl	8002f94 <HAL_GetTick>
 800412c:	2702      	movs	r7, #2
 800412e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004130:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004134:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8004138:	fa97 f3a7 	rbit	r3, r7
 800413c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004140:	6a22      	ldr	r2, [r4, #32]
 8004142:	fa97 f3a7 	rbit	r3, r7
 8004146:	fab3 f383 	clz	r3, r3
 800414a:	fa09 f303 	lsl.w	r3, r9, r3
 800414e:	4213      	tst	r3, r2
 8004150:	d0c0      	beq.n	80040d4 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004152:	f7fe ff1f 	bl	8002f94 <HAL_GetTick>
 8004156:	eba0 0008 	sub.w	r0, r0, r8
 800415a:	4550      	cmp	r0, sl
 800415c:	d9ec      	bls.n	8004138 <HAL_RCC_OscConfig+0x348>
 800415e:	e6a8      	b.n	8003eb2 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004160:	2b05      	cmp	r3, #5
 8004162:	6a23      	ldr	r3, [r4, #32]
 8004164:	d103      	bne.n	800416e <HAL_RCC_OscConfig+0x37e>
 8004166:	f043 0304 	orr.w	r3, r3, #4
 800416a:	6223      	str	r3, [r4, #32]
 800416c:	e799      	b.n	80040a2 <HAL_RCC_OscConfig+0x2b2>
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	6223      	str	r3, [r4, #32]
 8004174:	6a23      	ldr	r3, [r4, #32]
 8004176:	f023 0304 	bic.w	r3, r3, #4
 800417a:	e795      	b.n	80040a8 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800417c:	f7fe ff0a 	bl	8002f94 <HAL_GetTick>
 8004180:	eba0 0008 	sub.w	r0, r0, r8
 8004184:	4550      	cmp	r0, sl
 8004186:	d998      	bls.n	80040ba <HAL_RCC_OscConfig+0x2ca>
 8004188:	e693      	b.n	8003eb2 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800418a:	4c46      	ldr	r4, [pc, #280]	@ (80042a4 <HAL_RCC_OscConfig+0x4b4>)
 800418c:	6862      	ldr	r2, [r4, #4]
 800418e:	f002 020c 	and.w	r2, r2, #12
 8004192:	2a08      	cmp	r2, #8
 8004194:	d074      	beq.n	8004280 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004196:	2b02      	cmp	r3, #2
 8004198:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800419c:	d14d      	bne.n	800423a <HAL_RCC_OscConfig+0x44a>
 800419e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80041a2:	fab3 f383 	clz	r3, r3
 80041a6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80041aa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80041b4:	f7fe feee 	bl	8002f94 <HAL_GetTick>
 80041b8:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 80041bc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041be:	2601      	movs	r6, #1
 80041c0:	fa98 f3a8 	rbit	r3, r8
 80041c4:	6822      	ldr	r2, [r4, #0]
 80041c6:	fa98 f3a8 	rbit	r3, r8
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	fa06 f303 	lsl.w	r3, r6, r3
 80041d2:	4213      	tst	r3, r2
 80041d4:	d12b      	bne.n	800422e <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041d6:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 80041da:	6862      	ldr	r2, [r4, #4]
 80041dc:	430b      	orrs	r3, r1
 80041de:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 80041e2:	4313      	orrs	r3, r2
 80041e4:	6063      	str	r3, [r4, #4]
 80041e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041ea:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80041ee:	fab3 f383 	clz	r3, r3
 80041f2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80041f6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80041fa:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041fc:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 80041fe:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8004200:	f7fe fec8 	bl	8002f94 <HAL_GetTick>
 8004204:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8004208:	4605      	mov	r5, r0
 800420a:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	fa96 f3a6 	rbit	r3, r6
 8004214:	fab3 f383 	clz	r3, r3
 8004218:	fa07 f303 	lsl.w	r3, r7, r3
 800421c:	4213      	tst	r3, r2
 800421e:	f47f adff 	bne.w	8003e20 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004222:	f7fe feb7 	bl	8002f94 <HAL_GetTick>
 8004226:	1b40      	subs	r0, r0, r5
 8004228:	2802      	cmp	r0, #2
 800422a:	d9ee      	bls.n	800420a <HAL_RCC_OscConfig+0x41a>
 800422c:	e641      	b.n	8003eb2 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800422e:	f7fe feb1 	bl	8002f94 <HAL_GetTick>
 8004232:	1bc0      	subs	r0, r0, r7
 8004234:	2802      	cmp	r0, #2
 8004236:	d9c3      	bls.n	80041c0 <HAL_RCC_OscConfig+0x3d0>
 8004238:	e63b      	b.n	8003eb2 <HAL_RCC_OscConfig+0xc2>
 800423a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004246:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004250:	f7fe fea0 	bl	8002f94 <HAL_GetTick>
 8004254:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8004258:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800425a:	2701      	movs	r7, #1
 800425c:	fa96 f3a6 	rbit	r3, r6
 8004260:	6822      	ldr	r2, [r4, #0]
 8004262:	fa96 f3a6 	rbit	r3, r6
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	fa07 f303 	lsl.w	r3, r7, r3
 800426e:	4213      	tst	r3, r2
 8004270:	f43f add6 	beq.w	8003e20 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004274:	f7fe fe8e 	bl	8002f94 <HAL_GetTick>
 8004278:	1b40      	subs	r0, r0, r5
 800427a:	2802      	cmp	r0, #2
 800427c:	d9ee      	bls.n	800425c <HAL_RCC_OscConfig+0x46c>
 800427e:	e618      	b.n	8003eb2 <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004280:	2b01      	cmp	r3, #1
 8004282:	f43f adee 	beq.w	8003e62 <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 8004286:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004288:	6a2b      	ldr	r3, [r5, #32]
 800428a:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 800428e:	429a      	cmp	r2, r3
 8004290:	f47f ade7 	bne.w	8003e62 <HAL_RCC_OscConfig+0x72>
 8004294:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004296:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800429a:	1ac0      	subs	r0, r0, r3
 800429c:	bf18      	it	ne
 800429e:	2001      	movne	r0, #1
 80042a0:	e608      	b.n	8003eb4 <HAL_RCC_OscConfig+0xc4>
 80042a2:	bf00      	nop
 80042a4:	40021000 	.word	0x40021000

080042a8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80042a8:	4b0c      	ldr	r3, [pc, #48]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x34>)
 80042aa:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042ac:	f002 010c 	and.w	r1, r2, #12
 80042b0:	2908      	cmp	r1, #8
 80042b2:	d111      	bne.n	80042d8 <HAL_RCC_GetSysClockFreq+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80042b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80042b6:	480a      	ldr	r0, [pc, #40]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x38>)
 80042b8:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80042bc:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80042be:	bf44      	itt	mi
 80042c0:	f003 030f 	andmi.w	r3, r3, #15
 80042c4:	4a07      	ldrmi	r2, [pc, #28]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80042c6:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80042c8:	bf49      	itett	mi
 80042ca:	5cd2      	ldrbmi	r2, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80042cc:	4b06      	ldrpl	r3, [pc, #24]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80042ce:	4b07      	ldrmi	r3, [pc, #28]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x44>)
 80042d0:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80042d4:	4358      	muls	r0, r3
 80042d6:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80042d8:	4804      	ldr	r0, [pc, #16]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x44>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80042da:	4770      	bx	lr
 80042dc:	40021000 	.word	0x40021000
 80042e0:	0800e508 	.word	0x0800e508
 80042e4:	0800e4f8 	.word	0x0800e4f8
 80042e8:	003d0900 	.word	0x003d0900
 80042ec:	007a1200 	.word	0x007a1200

080042f0 <HAL_RCC_ClockConfig>:
{
 80042f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042f4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80042f6:	4604      	mov	r4, r0
 80042f8:	b910      	cbnz	r0, 8004300 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80042fa:	2001      	movs	r0, #1
}
 80042fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004300:	4a4a      	ldr	r2, [pc, #296]	@ (800442c <HAL_RCC_ClockConfig+0x13c>)
 8004302:	6813      	ldr	r3, [r2, #0]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	428b      	cmp	r3, r1
 800430a:	d32e      	bcc.n	800436a <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800430c:	6822      	ldr	r2, [r4, #0]
 800430e:	0791      	lsls	r1, r2, #30
 8004310:	d436      	bmi.n	8004380 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004312:	07d2      	lsls	r2, r2, #31
 8004314:	d43c      	bmi.n	8004390 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004316:	4a45      	ldr	r2, [pc, #276]	@ (800442c <HAL_RCC_ClockConfig+0x13c>)
 8004318:	6813      	ldr	r3, [r2, #0]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	42ab      	cmp	r3, r5
 8004320:	d870      	bhi.n	8004404 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004322:	6822      	ldr	r2, [r4, #0]
 8004324:	4d42      	ldr	r5, [pc, #264]	@ (8004430 <HAL_RCC_ClockConfig+0x140>)
 8004326:	f012 0f04 	tst.w	r2, #4
 800432a:	d177      	bne.n	800441c <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432c:	0713      	lsls	r3, r2, #28
 800432e:	d506      	bpl.n	800433e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004330:	686b      	ldr	r3, [r5, #4]
 8004332:	6922      	ldr	r2, [r4, #16]
 8004334:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004338:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800433c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800433e:	f7ff ffb3 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 8004342:	686b      	ldr	r3, [r5, #4]
 8004344:	22f0      	movs	r2, #240	@ 0xf0
 8004346:	fa92 f2a2 	rbit	r2, r2
 800434a:	fab2 f282 	clz	r2, r2
 800434e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004352:	40d3      	lsrs	r3, r2
 8004354:	4a37      	ldr	r2, [pc, #220]	@ (8004434 <HAL_RCC_ClockConfig+0x144>)
 8004356:	5cd3      	ldrb	r3, [r2, r3]
 8004358:	40d8      	lsrs	r0, r3
 800435a:	4b37      	ldr	r3, [pc, #220]	@ (8004438 <HAL_RCC_ClockConfig+0x148>)
 800435c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800435e:	4b37      	ldr	r3, [pc, #220]	@ (800443c <HAL_RCC_ClockConfig+0x14c>)
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	f7fe fc79 	bl	8002c58 <HAL_InitTick>
  return HAL_OK;
 8004366:	2000      	movs	r0, #0
 8004368:	e7c8      	b.n	80042fc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436a:	6813      	ldr	r3, [r2, #0]
 800436c:	f023 0307 	bic.w	r3, r3, #7
 8004370:	430b      	orrs	r3, r1
 8004372:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004374:	6813      	ldr	r3, [r2, #0]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	428b      	cmp	r3, r1
 800437c:	d1bd      	bne.n	80042fa <HAL_RCC_ClockConfig+0xa>
 800437e:	e7c5      	b.n	800430c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004380:	492b      	ldr	r1, [pc, #172]	@ (8004430 <HAL_RCC_ClockConfig+0x140>)
 8004382:	68a0      	ldr	r0, [r4, #8]
 8004384:	684b      	ldr	r3, [r1, #4]
 8004386:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800438a:	4303      	orrs	r3, r0
 800438c:	604b      	str	r3, [r1, #4]
 800438e:	e7c0      	b.n	8004312 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004390:	6862      	ldr	r2, [r4, #4]
 8004392:	4e27      	ldr	r6, [pc, #156]	@ (8004430 <HAL_RCC_ClockConfig+0x140>)
 8004394:	2a01      	cmp	r2, #1
 8004396:	d124      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xf2>
 8004398:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800439c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a0:	6831      	ldr	r1, [r6, #0]
 80043a2:	fa93 f3a3 	rbit	r3, r3
 80043a6:	fab3 f383 	clz	r3, r3
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b0:	d0a3      	beq.n	80042fa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043b2:	6873      	ldr	r3, [r6, #4]
 80043b4:	f023 0303 	bic.w	r3, r3, #3
 80043b8:	4313      	orrs	r3, r2
 80043ba:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80043bc:	f7fe fdea 	bl	8002f94 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c0:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80043c4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	6873      	ldr	r3, [r6, #4]
 80043c8:	6862      	ldr	r2, [r4, #4]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80043d2:	d0a0      	beq.n	8004316 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d4:	f7fe fdde 	bl	8002f94 <HAL_GetTick>
 80043d8:	1bc0      	subs	r0, r0, r7
 80043da:	4540      	cmp	r0, r8
 80043dc:	d9f3      	bls.n	80043c6 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80043de:	2003      	movs	r0, #3
 80043e0:	e78c      	b.n	80042fc <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043e2:	2a02      	cmp	r2, #2
 80043e4:	bf0c      	ite	eq
 80043e6:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 80043ea:	2302      	movne	r3, #2
 80043ec:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f0:	6830      	ldr	r0, [r6, #0]
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	2101      	movs	r1, #1
 80043f8:	fab3 f383 	clz	r3, r3
 80043fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004400:	4203      	tst	r3, r0
 8004402:	e7d5      	b.n	80043b0 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004404:	6813      	ldr	r3, [r2, #0]
 8004406:	f023 0307 	bic.w	r3, r3, #7
 800440a:	432b      	orrs	r3, r5
 800440c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800440e:	6813      	ldr	r3, [r2, #0]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	42ab      	cmp	r3, r5
 8004416:	f47f af70 	bne.w	80042fa <HAL_RCC_ClockConfig+0xa>
 800441a:	e782      	b.n	8004322 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800441c:	686b      	ldr	r3, [r5, #4]
 800441e:	68e1      	ldr	r1, [r4, #12]
 8004420:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004424:	430b      	orrs	r3, r1
 8004426:	606b      	str	r3, [r5, #4]
 8004428:	e780      	b.n	800432c <HAL_RCC_ClockConfig+0x3c>
 800442a:	bf00      	nop
 800442c:	40022000 	.word	0x40022000
 8004430:	40021000 	.word	0x40021000
 8004434:	0800e4e8 	.word	0x0800e4e8
 8004438:	20000010 	.word	0x20000010
 800443c:	20000018 	.word	0x20000018

08004440 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004440:	4b08      	ldr	r3, [pc, #32]	@ (8004464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004442:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	fa92 f2a2 	rbit	r2, r2
 800444c:	fab2 f282 	clz	r2, r2
 8004450:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004454:	40d3      	lsrs	r3, r2
 8004456:	4a04      	ldr	r2, [pc, #16]	@ (8004468 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004458:	5cd3      	ldrb	r3, [r2, r3]
 800445a:	4a04      	ldr	r2, [pc, #16]	@ (800446c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800445c:	6810      	ldr	r0, [r2, #0]
}    
 800445e:	40d8      	lsrs	r0, r3
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000
 8004468:	0800e4e0 	.word	0x0800e4e0
 800446c:	20000010 	.word	0x20000010

08004470 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004470:	4b08      	ldr	r3, [pc, #32]	@ (8004494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004472:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	fa92 f2a2 	rbit	r2, r2
 800447c:	fab2 f282 	clz	r2, r2
 8004480:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004484:	40d3      	lsrs	r3, r2
 8004486:	4a04      	ldr	r2, [pc, #16]	@ (8004498 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004488:	5cd3      	ldrb	r3, [r2, r3]
 800448a:	4a04      	ldr	r2, [pc, #16]	@ (800449c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800448c:	6810      	ldr	r0, [r2, #0]
} 
 800448e:	40d8      	lsrs	r0, r3
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40021000 	.word	0x40021000
 8004498:	0800e4e0 	.word	0x0800e4e0
 800449c:	20000010 	.word	0x20000010

080044a0 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044a0:	230f      	movs	r3, #15
 80044a2:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044a4:	4b0b      	ldr	r3, [pc, #44]	@ (80044d4 <HAL_RCC_GetClockConfig+0x34>)
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	f002 0203 	and.w	r2, r2, #3
 80044ac:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80044b4:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80044bc:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	08db      	lsrs	r3, r3, #3
 80044c2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044c6:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80044c8:	4b03      	ldr	r3, [pc, #12]	@ (80044d8 <HAL_RCC_GetClockConfig+0x38>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	600b      	str	r3, [r1, #0]
}
 80044d2:	4770      	bx	lr
 80044d4:	40021000 	.word	0x40021000
 80044d8:	40022000 	.word	0x40022000

080044dc <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044dc:	6803      	ldr	r3, [r0, #0]
{
 80044de:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044e2:	03dd      	lsls	r5, r3, #15
{
 80044e4:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044e6:	d524      	bpl.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x56>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e8:	4d78      	ldr	r5, [pc, #480]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80044ea:	69eb      	ldr	r3, [r5, #28]
 80044ec:	00d8      	lsls	r0, r3, #3
 80044ee:	f100 8091 	bmi.w	8004614 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f2:	69eb      	ldr	r3, [r5, #28]
 80044f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044f8:	61eb      	str	r3, [r5, #28]
 80044fa:	69eb      	ldr	r3, [r5, #28]
 80044fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004504:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004506:	4f72      	ldr	r7, [pc, #456]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	05d9      	lsls	r1, r3, #23
 800450c:	f140 8084 	bpl.w	8004618 <HAL_RCCEx_PeriphCLKConfig+0x13c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004510:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004512:	6862      	ldr	r2, [r4, #4]
 8004514:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004518:	f040 8093 	bne.w	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800451c:	6a2b      	ldr	r3, [r5, #32]
 800451e:	6862      	ldr	r2, [r4, #4]
 8004520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004524:	4313      	orrs	r3, r2
 8004526:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004528:	b11e      	cbz	r6, 8004532 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800452a:	69eb      	ldr	r3, [r5, #28]
 800452c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004530:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	07df      	lsls	r7, r3, #31
 8004536:	d506      	bpl.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004538:	4964      	ldr	r1, [pc, #400]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800453a:	68a0      	ldr	r0, [r4, #8]
 800453c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800453e:	f022 0203 	bic.w	r2, r2, #3
 8004542:	4302      	orrs	r2, r0
 8004544:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004546:	079e      	lsls	r6, r3, #30
 8004548:	d506      	bpl.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800454a:	4960      	ldr	r1, [pc, #384]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800454c:	68e0      	ldr	r0, [r4, #12]
 800454e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004550:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004554:	4302      	orrs	r2, r0
 8004556:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004558:	075d      	lsls	r5, r3, #29
 800455a:	d506      	bpl.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800455c:	495b      	ldr	r1, [pc, #364]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800455e:	6920      	ldr	r0, [r4, #16]
 8004560:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004562:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8004566:	4302      	orrs	r2, r0
 8004568:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800456a:	0698      	lsls	r0, r3, #26
 800456c:	d506      	bpl.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800456e:	4957      	ldr	r1, [pc, #348]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004570:	69e0      	ldr	r0, [r4, #28]
 8004572:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004574:	f022 0210 	bic.w	r2, r2, #16
 8004578:	4302      	orrs	r2, r0
 800457a:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800457c:	0399      	lsls	r1, r3, #14
 800457e:	d506      	bpl.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004580:	4952      	ldr	r1, [pc, #328]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004582:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004584:	684a      	ldr	r2, [r1, #4]
 8004586:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 800458a:	4302      	orrs	r2, r0
 800458c:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800458e:	065a      	lsls	r2, r3, #25
 8004590:	d506      	bpl.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004592:	494e      	ldr	r1, [pc, #312]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004594:	6a20      	ldr	r0, [r4, #32]
 8004596:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004598:	f022 0220 	bic.w	r2, r2, #32
 800459c:	4302      	orrs	r2, r0
 800459e:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045a0:	071f      	lsls	r7, r3, #28
 80045a2:	d506      	bpl.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045a4:	4949      	ldr	r1, [pc, #292]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80045a6:	6960      	ldr	r0, [r4, #20]
 80045a8:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80045aa:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80045ae:	4302      	orrs	r2, r0
 80045b0:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045b2:	06de      	lsls	r6, r3, #27
 80045b4:	d506      	bpl.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045b6:	4945      	ldr	r1, [pc, #276]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80045b8:	69a0      	ldr	r0, [r4, #24]
 80045ba:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80045bc:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80045c0:	4302      	orrs	r2, r0
 80045c2:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80045c4:	059d      	lsls	r5, r3, #22
 80045c6:	d506      	bpl.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045c8:	4940      	ldr	r1, [pc, #256]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80045ca:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80045cc:	684a      	ldr	r2, [r1, #4]
 80045ce:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 80045d2:	4302      	orrs	r2, r0
 80045d4:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045d6:	0618      	lsls	r0, r3, #24
 80045d8:	d506      	bpl.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045da:	493c      	ldr	r1, [pc, #240]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80045dc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80045de:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80045e0:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 80045e4:	4302      	orrs	r2, r0
 80045e6:	62ca      	str	r2, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80045e8:	05d9      	lsls	r1, r3, #23
 80045ea:	d506      	bpl.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80045ec:	4937      	ldr	r1, [pc, #220]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80045ee:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80045f0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80045f2:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 80045f6:	4302      	orrs	r2, r0
 80045f8:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80045fa:	04da      	lsls	r2, r3, #19
 80045fc:	d506      	bpl.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80045fe:	4933      	ldr	r1, [pc, #204]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004600:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004602:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004604:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004608:	4302      	orrs	r2, r0
 800460a:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800460c:	049b      	lsls	r3, r3, #18
 800460e:	d454      	bmi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004610:	2000      	movs	r0, #0
 8004612:	e013      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 8004614:	2600      	movs	r6, #0
 8004616:	e776      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800461e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004620:	f7fe fcb8 	bl	8002f94 <HAL_GetTick>
 8004624:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	05da      	lsls	r2, r3, #23
 800462a:	f53f af71 	bmi.w	8004510 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462e:	f7fe fcb1 	bl	8002f94 <HAL_GetTick>
 8004632:	eba0 0008 	sub.w	r0, r0, r8
 8004636:	2864      	cmp	r0, #100	@ 0x64
 8004638:	d9f5      	bls.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 800463a:	2003      	movs	r0, #3
}
 800463c:	b002      	add	sp, #8
 800463e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004642:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8004646:	429a      	cmp	r2, r3
 8004648:	f43f af68 	beq.w	800451c <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800464c:	6a29      	ldr	r1, [r5, #32]
 800464e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004652:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 8004656:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800465a:	f8df c078 	ldr.w	ip, [pc, #120]	@ 80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800465e:	fab2 f282 	clz	r2, r2
 8004662:	4462      	add	r2, ip
 8004664:	0092      	lsls	r2, r2, #2
 8004666:	2701      	movs	r7, #1
 8004668:	6017      	str	r7, [r2, #0]
 800466a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800466e:	fab3 f383 	clz	r3, r3
 8004672:	4463      	add	r3, ip
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800467a:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 800467c:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800467e:	f57f af4d 	bpl.w	800451c <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 8004682:	f7fe fc87 	bl	8002f94 <HAL_GetTick>
 8004686:	f04f 0802 	mov.w	r8, #2
 800468a:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468c:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8004690:	fa98 f3a8 	rbit	r3, r8
 8004694:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004698:	6a2a      	ldr	r2, [r5, #32]
 800469a:	fa98 f3a8 	rbit	r3, r8
 800469e:	fab3 f383 	clz	r3, r3
 80046a2:	fa07 f303 	lsl.w	r3, r7, r3
 80046a6:	4213      	tst	r3, r2
 80046a8:	f47f af38 	bne.w	800451c <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ac:	f7fe fc72 	bl	8002f94 <HAL_GetTick>
 80046b0:	eba0 0009 	sub.w	r0, r0, r9
 80046b4:	4550      	cmp	r0, sl
 80046b6:	d9eb      	bls.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80046b8:	e7bf      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80046ba:	4a04      	ldr	r2, [pc, #16]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80046bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046be:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80046c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046c4:	430b      	orrs	r3, r1
 80046c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80046c8:	e7a2      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80046ca:	bf00      	nop
 80046cc:	40021000 	.word	0x40021000
 80046d0:	40007000 	.word	0x40007000
 80046d4:	10908100 	.word	0x10908100

080046d8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80046d8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80046da:	6803      	ldr	r3, [r0, #0]
 80046dc:	4a09      	ldr	r2, [pc, #36]	@ (8004704 <HAL_RTC_WaitForSynchro+0x2c>)
 80046de:	60da      	str	r2, [r3, #12]
{
 80046e0:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 80046e2:	f7fe fc57 	bl	8002f94 <HAL_GetTick>
 80046e6:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	069b      	lsls	r3, r3, #26
 80046ee:	d501      	bpl.n	80046f4 <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80046f0:	2000      	movs	r0, #0
}
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046f4:	f7fe fc4e 	bl	8002f94 <HAL_GetTick>
 80046f8:	1b40      	subs	r0, r0, r5
 80046fa:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80046fe:	d9f3      	bls.n	80046e8 <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 8004700:	2003      	movs	r0, #3
 8004702:	e7f6      	b.n	80046f2 <HAL_RTC_WaitForSynchro+0x1a>
 8004704:	0001ff5f 	.word	0x0001ff5f

08004708 <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004708:	6803      	ldr	r3, [r0, #0]
{
 800470a:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800470c:	68dc      	ldr	r4, [r3, #12]
 800470e:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 8004712:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004714:	d117      	bne.n	8004746 <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800471c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800471e:	f7fe fc39 	bl	8002f94 <HAL_GetTick>
 8004722:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	065b      	lsls	r3, r3, #25
 800472a:	d400      	bmi.n	800472e <RTC_EnterInitMode+0x26>
 800472c:	b10c      	cbz	r4, 8004732 <RTC_EnterInitMode+0x2a>
      }
    }
  }

  return status;
}
 800472e:	4620      	mov	r0, r4
 8004730:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004732:	f7fe fc2f 	bl	8002f94 <HAL_GetTick>
 8004736:	1b80      	subs	r0, r0, r6
 8004738:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 800473c:	bf82      	ittt	hi
 800473e:	2304      	movhi	r3, #4
 8004740:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 8004742:	2401      	movhi	r4, #1
 8004744:	e7ee      	b.n	8004724 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8004746:	2400      	movs	r4, #0
 8004748:	e7f1      	b.n	800472e <RTC_EnterInitMode+0x26>

0800474a <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800474a:	6803      	ldr	r3, [r0, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 8004752:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004754:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	069b      	lsls	r3, r3, #26
{
 800475a:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800475c:	d501      	bpl.n	8004762 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800475e:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8004760:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004762:	f7ff ffb9 	bl	80046d8 <HAL_RTC_WaitForSynchro>
 8004766:	2800      	cmp	r0, #0
 8004768:	d0f9      	beq.n	800475e <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800476a:	2304      	movs	r3, #4
 800476c:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 800476e:	2001      	movs	r0, #1
 8004770:	e7f6      	b.n	8004760 <RTC_ExitInitMode+0x16>

08004772 <HAL_RTC_Init>:
{
 8004772:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8004774:	4604      	mov	r4, r0
 8004776:	2800      	cmp	r0, #0
 8004778:	d041      	beq.n	80047fe <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800477a:	7f43      	ldrb	r3, [r0, #29]
 800477c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004780:	b913      	cbnz	r3, 8004788 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 8004782:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8004784:	f7fe f90e 	bl	80029a4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004788:	2302      	movs	r3, #2
 800478a:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	06d2      	lsls	r2, r2, #27
 8004792:	d503      	bpl.n	800479c <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 8004794:	2301      	movs	r3, #1
 8004796:	7763      	strb	r3, [r4, #29]
 8004798:	2000      	movs	r0, #0
}
 800479a:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800479c:	22ca      	movs	r2, #202	@ 0xca
 800479e:	625a      	str	r2, [r3, #36]	@ 0x24
 80047a0:	2253      	movs	r2, #83	@ 0x53
 80047a2:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 80047a4:	4620      	mov	r0, r4
 80047a6:	f7ff ffaf 	bl	8004708 <RTC_EnterInitMode>
    if (status == HAL_OK)
 80047aa:	bb10      	cbnz	r0, 80047f2 <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80047ac:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80047ae:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 80047b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047ba:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80047bc:	6862      	ldr	r2, [r4, #4]
 80047be:	6899      	ldr	r1, [r3, #8]
 80047c0:	4302      	orrs	r2, r0
 80047c2:	6960      	ldr	r0, [r4, #20]
 80047c4:	4302      	orrs	r2, r0
 80047c6:	430a      	orrs	r2, r1
 80047c8:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80047ca:	68e2      	ldr	r2, [r4, #12]
 80047cc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	68a1      	ldr	r1, [r4, #8]
 80047d2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80047d6:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 80047d8:	4620      	mov	r0, r4
 80047da:	f7ff ffb6 	bl	800474a <RTC_ExitInitMode>
    if (status == HAL_OK)
 80047de:	b940      	cbnz	r0, 80047f2 <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80047e0:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80047e2:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80047e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047e6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80047ea:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80047ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047ee:	430a      	orrs	r2, r1
 80047f0:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	22ff      	movs	r2, #255	@ 0xff
 80047f6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d0cb      	beq.n	8004794 <HAL_RTC_Init+0x22>
 80047fc:	e7cd      	b.n	800479a <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 80047fe:	2001      	movs	r0, #1
 8004800:	e7cb      	b.n	800479a <HAL_RTC_Init+0x28>

08004802 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004802:	0903      	lsrs	r3, r0, #4
 8004804:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004808:	f000 000f 	and.w	r0, r0, #15
 800480c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8004810:	b2c0      	uxtb	r0, r0
 8004812:	4770      	bx	lr

08004814 <HAL_RTC_GetTime>:
{
 8004814:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004816:	6803      	ldr	r3, [r0, #0]
 8004818:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800481a:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800481c:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800481e:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004820:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004824:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004828:	f003 047f 	and.w	r4, r3, #127	@ 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800482c:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800482e:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004832:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004836:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004838:	704d      	strb	r5, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800483a:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800483c:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 800483e:	b952      	cbnz	r2, 8004856 <HAL_RTC_GetTime+0x42>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004840:	f7ff ffdf 	bl	8004802 <RTC_Bcd2ToByte>
 8004844:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004846:	4628      	mov	r0, r5
 8004848:	f7ff ffdb 	bl	8004802 <RTC_Bcd2ToByte>
 800484c:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800484e:	4620      	mov	r0, r4
 8004850:	f7ff ffd7 	bl	8004802 <RTC_Bcd2ToByte>
 8004854:	7088      	strb	r0, [r1, #2]
}
 8004856:	2000      	movs	r0, #0
 8004858:	bd38      	pop	{r3, r4, r5, pc}

0800485a <HAL_RTC_GetDate>:
{
 800485a:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800485c:	6803      	ldr	r3, [r0, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004860:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004864:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004868:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800486c:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004870:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004872:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004874:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004876:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8004878:	b952      	cbnz	r2, 8004890 <HAL_RTC_GetDate+0x36>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800487a:	f7ff ffc2 	bl	8004802 <RTC_Bcd2ToByte>
 800487e:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004880:	4628      	mov	r0, r5
 8004882:	f7ff ffbe 	bl	8004802 <RTC_Bcd2ToByte>
 8004886:	7048      	strb	r0, [r1, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004888:	4620      	mov	r0, r4
 800488a:	f7ff ffba 	bl	8004802 <RTC_Bcd2ToByte>
 800488e:	7088      	strb	r0, [r1, #2]
}
 8004890:	2000      	movs	r0, #0
 8004892:	bd38      	pop	{r3, r4, r5, pc}

08004894 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8004894:	6803      	ldr	r3, [r0, #0]
 8004896:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004898:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800489c:	4770      	bx	lr

0800489e <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800489e:	6803      	ldr	r3, [r0, #0]
 80048a0:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80048a2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 80048a6:	4770      	bx	lr

080048a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80048a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048aa:	460e      	mov	r6, r1
 80048ac:	4614      	mov	r4, r2
 80048ae:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048b0:	f7fe fb70 	bl	8002f94 <HAL_GetTick>
 80048b4:	4434      	add	r4, r6
 80048b6:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80048b8:	f7fe fb6c 	bl	8002f94 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048bc:	4b22      	ldr	r3, [pc, #136]	@ (8004948 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80048c4:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 80048c6:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048c8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048ca:	682a      	ldr	r2, [r5, #0]
 80048cc:	6890      	ldr	r0, [r2, #8]
 80048ce:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 80048d2:	d02d      	beq.n	8004930 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048d4:	1c73      	adds	r3, r6, #1
 80048d6:	d0f9      	beq.n	80048cc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048d8:	f7fe fb5c 	bl	8002f94 <HAL_GetTick>
 80048dc:	1bc0      	subs	r0, r0, r7
 80048de:	42a0      	cmp	r0, r4
 80048e0:	d328      	bcc.n	8004934 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048e2:	682b      	ldr	r3, [r5, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80048ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ec:	686a      	ldr	r2, [r5, #4]
 80048ee:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80048f2:	d10a      	bne.n	800490a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 80048f4:	68aa      	ldr	r2, [r5, #8]
 80048f6:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80048fa:	d002      	beq.n	8004902 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048fc:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004900:	d103      	bne.n	800490a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004908:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800490a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800490c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004910:	d107      	bne.n	8004922 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004920:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004922:	2301      	movs	r3, #1
 8004924:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004928:	2300      	movs	r3, #0
 800492a:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800492e:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8004930:	b003      	add	sp, #12
 8004932:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8004934:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004936:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8004938:	2a00      	cmp	r2, #0
      count--;
 800493a:	f103 33ff 	add.w	r3, r3, #4294967295
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	bf08      	it	eq
 8004942:	4614      	moveq	r4, r2
 8004944:	e7c1      	b.n	80048ca <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 8004946:	bf00      	nop
 8004948:	20000010 	.word	0x20000010

0800494c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800494c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004950:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004952:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004954:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8004956:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800495a:	4605      	mov	r5, r0
 800495c:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800495e:	f7fe fb19 	bl	8002f94 <HAL_GetTick>
 8004962:	443c      	add	r4, r7
 8004964:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8004966:	f7fe fb15 	bl	8002f94 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800496a:	4b29      	ldr	r3, [pc, #164]	@ (8004a10 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800496c:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2223      	movs	r2, #35	@ 0x23
 8004974:	4353      	muls	r3, r2
 8004976:	0d1b      	lsrs	r3, r3, #20
 8004978:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 800497a:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800497c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800497e:	682a      	ldr	r2, [r5, #0]
 8004980:	6890      	ldr	r0, [r2, #8]
 8004982:	4030      	ands	r0, r6
 8004984:	d038      	beq.n	80049f8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004986:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800498a:	bf01      	itttt	eq
 800498c:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8004990:	b2db      	uxtbeq	r3, r3
 8004992:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004996:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 800499a:	1c7b      	adds	r3, r7, #1
 800499c:	d0f0      	beq.n	8004980 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800499e:	f7fe faf9 	bl	8002f94 <HAL_GetTick>
 80049a2:	eba0 0008 	sub.w	r0, r0, r8
 80049a6:	42a0      	cmp	r0, r4
 80049a8:	d329      	bcc.n	80049fe <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049aa:	682b      	ldr	r3, [r5, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049b4:	686a      	ldr	r2, [r5, #4]
 80049b6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80049ba:	d10a      	bne.n	80049d2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 80049bc:	68aa      	ldr	r2, [r5, #8]
 80049be:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80049c2:	d002      	beq.n	80049ca <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049c4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80049c8:	d103      	bne.n	80049d2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049d2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80049d4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80049d8:	d107      	bne.n	80049ea <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049f0:	2300      	movs	r3, #0
 80049f2:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80049f6:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 80049f8:	b003      	add	sp, #12
 80049fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 80049fe:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004a00:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8004a02:	2a00      	cmp	r2, #0
      count--;
 8004a04:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a08:	9301      	str	r3, [sp, #4]
 8004a0a:	bf08      	it	eq
 8004a0c:	4614      	moveq	r4, r2
 8004a0e:	e7b6      	b.n	800497e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8004a10:	20000010 	.word	0x20000010

08004a14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a16:	6843      	ldr	r3, [r0, #4]
 8004a18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	460e      	mov	r6, r1
 8004a20:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a22:	d10b      	bne.n	8004a3c <SPI_EndRxTransaction+0x28>
 8004a24:	6883      	ldr	r3, [r0, #8]
 8004a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a2a:	d002      	beq.n	8004a32 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a30:	d104      	bne.n	8004a3c <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	6813      	ldr	r3, [r2, #0]
 8004a36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a3a:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a3c:	463a      	mov	r2, r7
 8004a3e:	4631      	mov	r1, r6
 8004a40:	4620      	mov	r0, r4
 8004a42:	f7ff ff31 	bl	80048a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004a46:	4605      	mov	r5, r0
 8004a48:	b128      	cbz	r0, 8004a56 <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a4a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004a4c:	f043 0320 	orr.w	r3, r3, #32
 8004a50:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a52:	2503      	movs	r5, #3
 8004a54:	e013      	b.n	8004a7e <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a56:	6863      	ldr	r3, [r4, #4]
 8004a58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a5c:	d10f      	bne.n	8004a7e <SPI_EndRxTransaction+0x6a>
 8004a5e:	68a3      	ldr	r3, [r4, #8]
 8004a60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a64:	d002      	beq.n	8004a6c <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a6a:	d108      	bne.n	8004a7e <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a6c:	463b      	mov	r3, r7
 8004a6e:	4632      	mov	r2, r6
 8004a70:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004a74:	4620      	mov	r0, r4
 8004a76:	f7ff ff69 	bl	800494c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	d1e5      	bne.n	8004a4a <SPI_EndRxTransaction+0x36>
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8004a7e:	4628      	mov	r0, r5
 8004a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004a82 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a82:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a84:	4613      	mov	r3, r2
{
 8004a86:	460d      	mov	r5, r1
 8004a88:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a8a:	460a      	mov	r2, r1
 8004a8c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 8004a90:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a92:	f7ff ff5b 	bl	800494c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8004a96:	b128      	cbz	r0, 8004aa4 <SPI_EndRxTxTransaction+0x22>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a98:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004a9a:	f043 0320 	orr.w	r3, r3, #32
 8004a9e:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004aa0:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8004aa2:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa4:	4632      	mov	r2, r6
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f7ff fefd 	bl	80048a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	d1f2      	bne.n	8004a98 <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ab2:	4633      	mov	r3, r6
 8004ab4:	462a      	mov	r2, r5
 8004ab6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004aba:	4620      	mov	r0, r4
 8004abc:	f7ff ff46 	bl	800494c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	d0ee      	beq.n	8004aa2 <SPI_EndRxTxTransaction+0x20>
 8004ac4:	e7e8      	b.n	8004a98 <SPI_EndRxTxTransaction+0x16>

08004ac6 <HAL_SPI_Init>:
{
 8004ac6:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8004ac8:	4604      	mov	r4, r0
 8004aca:	2800      	cmp	r0, #0
 8004acc:	d067      	beq.n	8004b9e <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ace:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d15d      	bne.n	8004b90 <HAL_SPI_Init+0xca>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ad4:	6842      	ldr	r2, [r0, #4]
 8004ad6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8004ada:	d000      	beq.n	8004ade <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004adc:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ae2:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8004ae6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004aea:	b923      	cbnz	r3, 8004af6 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8004aec:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8004af0:	4620      	mov	r0, r4
 8004af2:	f7fd ff6b 	bl	80029cc <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8004af6:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004af8:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004afa:	2302      	movs	r3, #2
 8004afc:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004b00:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b02:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8004b06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b0a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	d942      	bls.n	8004b98 <HAL_SPI_Init+0xd2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b12:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b14:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b18:	bf18      	it	ne
 8004b1a:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b1c:	68a6      	ldr	r6, [r4, #8]
 8004b1e:	6863      	ldr	r3, [r4, #4]
 8004b20:	69a1      	ldr	r1, [r4, #24]
 8004b22:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 8004b26:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8004b2a:	4333      	orrs	r3, r6
 8004b2c:	6926      	ldr	r6, [r4, #16]
 8004b2e:	f006 0602 	and.w	r6, r6, #2
 8004b32:	4333      	orrs	r3, r6
 8004b34:	6966      	ldr	r6, [r4, #20]
 8004b36:	f006 0601 	and.w	r6, r6, #1
 8004b3a:	4333      	orrs	r3, r6
 8004b3c:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 8004b40:	4333      	orrs	r3, r6
 8004b42:	69e6      	ldr	r6, [r4, #28]
 8004b44:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8004b48:	4333      	orrs	r3, r6
 8004b4a:	6a26      	ldr	r6, [r4, #32]
 8004b4c:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 8004b50:	4333      	orrs	r3, r6
 8004b52:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004b54:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 8004b58:	4333      	orrs	r3, r6
 8004b5a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b5c:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8004b5e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004b60:	f006 0608 	and.w	r6, r6, #8
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 8004b6c:	4333      	orrs	r3, r6
 8004b6e:	0c09      	lsrs	r1, r1, #16
 8004b70:	4303      	orrs	r3, r0
 8004b72:	f001 0104 	and.w	r1, r1, #4
 8004b76:	430b      	orrs	r3, r1
 8004b78:	432b      	orrs	r3, r5
 8004b7a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b7c:	69d3      	ldr	r3, [r2, #28]
 8004b7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b82:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b84:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004b86:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b88:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b8a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8004b8e:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b90:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b96:	e7a2      	b.n	8004ade <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b98:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8004b9c:	e7bc      	b.n	8004b18 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	e7f5      	b.n	8004b8e <HAL_SPI_Init+0xc8>

08004ba2 <HAL_SPI_Transmit>:
{
 8004ba2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba6:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8004ba8:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8004bac:	2b01      	cmp	r3, #1
{
 8004bae:	4604      	mov	r4, r0
 8004bb0:	460d      	mov	r5, r1
 8004bb2:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8004bb4:	f000 80bc 	beq.w	8004d30 <HAL_SPI_Transmit+0x18e>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8004bbe:	f7fe f9e9 	bl	8002f94 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004bc2:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8004bc6:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004bc8:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004bca:	fa5f f983 	uxtb.w	r9, r3
 8004bce:	f040 80ac 	bne.w	8004d2a <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 8004bd2:	2d00      	cmp	r5, #0
 8004bd4:	d069      	beq.n	8004caa <HAL_SPI_Transmit+0x108>
 8004bd6:	f1b8 0f00 	cmp.w	r8, #0
 8004bda:	d066      	beq.n	8004caa <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004be2:	2300      	movs	r3, #0
 8004be4:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8004be6:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 8004bea:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bee:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004bf0:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004bf4:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bf8:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8004bfa:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bfc:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 8004c02:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c06:	d107      	bne.n	8004c18 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 8004c08:	6833      	ldr	r3, [r6, #0]
 8004c0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c0e:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8004c10:	6833      	ldr	r3, [r6, #0]
 8004c12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c16:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c18:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c1a:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c1c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004c1e:	bf5e      	ittt	pl
 8004c20:	6833      	ldrpl	r3, [r6, #0]
 8004c22:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8004c26:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c28:	68e3      	ldr	r3, [r4, #12]
 8004c2a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c2e:	d943      	bls.n	8004cb8 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c30:	b112      	cbz	r2, 8004c38 <HAL_SPI_Transmit+0x96>
 8004c32:	f1b8 0f01 	cmp.w	r8, #1
 8004c36:	d107      	bne.n	8004c48 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c38:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004c3c:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c3e:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004c40:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8004c48:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	b9b3      	cbnz	r3, 8004c7c <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c4e:	4652      	mov	r2, sl
 8004c50:	4639      	mov	r1, r7
 8004c52:	4620      	mov	r0, r4
 8004c54:	f7ff ff15 	bl	8004a82 <SPI_EndRxTxTransaction>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d163      	bne.n	8004d24 <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c5c:	68a3      	ldr	r3, [r4, #8]
 8004c5e:	b933      	cbnz	r3, 8004c6e <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c60:	9301      	str	r3, [sp, #4]
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	9201      	str	r2, [sp, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	9301      	str	r3, [sp, #4]
 8004c6c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c6e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004c70:	b9db      	cbnz	r3, 8004caa <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 8004c72:	2201      	movs	r2, #1
 8004c74:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c78:	4699      	mov	r9, r3
 8004c7a:	e016      	b.n	8004caa <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c7c:	6822      	ldr	r2, [r4, #0]
 8004c7e:	6893      	ldr	r3, [r2, #8]
 8004c80:	079d      	lsls	r5, r3, #30
 8004c82:	d505      	bpl.n	8004c90 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c84:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004c86:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004c8a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c8c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004c8e:	e7d7      	b.n	8004c40 <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c90:	f7fe f980 	bl	8002f94 <HAL_GetTick>
 8004c94:	eba0 000a 	sub.w	r0, r0, sl
 8004c98:	42b8      	cmp	r0, r7
 8004c9a:	d3d5      	bcc.n	8004c48 <HAL_SPI_Transmit+0xa6>
 8004c9c:	1c78      	adds	r0, r7, #1
 8004c9e:	d0d3      	beq.n	8004c48 <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8004ca6:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 8004caa:	2300      	movs	r3, #0
 8004cac:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8004cb0:	4648      	mov	r0, r9
 8004cb2:	b002      	add	sp, #8
 8004cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cb8:	b112      	cbz	r2, 8004cc0 <HAL_SPI_Transmit+0x11e>
 8004cba:	f1b8 0f01 	cmp.w	r8, #1
 8004cbe:	d113      	bne.n	8004ce8 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 8004cc0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d906      	bls.n	8004cd6 <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cc8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004ccc:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cce:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004cd0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004cd2:	3b02      	subs	r3, #2
 8004cd4:	e006      	b.n	8004ce4 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cd6:	782b      	ldrb	r3, [r5, #0]
 8004cd8:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 8004cda:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004cdc:	3301      	adds	r3, #1
 8004cde:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ce0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8004ce8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0ae      	beq.n	8004c4e <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cf0:	6822      	ldr	r2, [r4, #0]
 8004cf2:	6893      	ldr	r3, [r2, #8]
 8004cf4:	0799      	lsls	r1, r3, #30
 8004cf6:	d50c      	bpl.n	8004d12 <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 8004cf8:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cfa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8004cfc:	b289      	uxth	r1, r1
 8004cfe:	2901      	cmp	r1, #1
 8004d00:	d904      	bls.n	8004d0c <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d02:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004d06:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d08:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004d0a:	e7e1      	b.n	8004cd0 <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8004d10:	e7e3      	b.n	8004cda <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d12:	f7fe f93f 	bl	8002f94 <HAL_GetTick>
 8004d16:	eba0 000a 	sub.w	r0, r0, sl
 8004d1a:	42b8      	cmp	r0, r7
 8004d1c:	d3e4      	bcc.n	8004ce8 <HAL_SPI_Transmit+0x146>
 8004d1e:	1c7b      	adds	r3, r7, #1
 8004d20:	d0e2      	beq.n	8004ce8 <HAL_SPI_Transmit+0x146>
 8004d22:	e7bd      	b.n	8004ca0 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d24:	2320      	movs	r3, #32
 8004d26:	6623      	str	r3, [r4, #96]	@ 0x60
 8004d28:	e798      	b.n	8004c5c <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 8004d2a:	f04f 0902 	mov.w	r9, #2
 8004d2e:	e7bc      	b.n	8004caa <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 8004d30:	f04f 0902 	mov.w	r9, #2
 8004d34:	e7bc      	b.n	8004cb0 <HAL_SPI_Transmit+0x10e>

08004d36 <HAL_SPI_TransmitReceive>:
{
 8004d36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d3a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004d3c:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
{
 8004d40:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8004d42:	2b01      	cmp	r3, #1
{
 8004d44:	4604      	mov	r4, r0
 8004d46:	460d      	mov	r5, r1
 8004d48:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8004d4a:	f000 8122 	beq.w	8004f92 <HAL_SPI_TransmitReceive+0x25c>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8004d54:	f7fe f91e 	bl	8002f94 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004d58:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8004d5c:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d5e:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8004d60:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8004d62:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d64:	d00a      	beq.n	8004d7c <HAL_SPI_TransmitReceive+0x46>
 8004d66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d6a:	f040 8110 	bne.w	8004f8e <HAL_SPI_TransmitReceive+0x258>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d6e:	68a2      	ldr	r2, [r4, #8]
 8004d70:	2a00      	cmp	r2, #0
 8004d72:	f040 810c 	bne.w	8004f8e <HAL_SPI_TransmitReceive+0x258>
 8004d76:	2904      	cmp	r1, #4
 8004d78:	f040 8109 	bne.w	8004f8e <HAL_SPI_TransmitReceive+0x258>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d7c:	b92d      	cbnz	r5, 8004d8a <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 8004d7e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8004d80:	2300      	movs	r3, #0
 8004d82:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8004d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d8a:	f1b9 0f00 	cmp.w	r9, #0
 8004d8e:	d0f6      	beq.n	8004d7e <HAL_SPI_TransmitReceive+0x48>
 8004d90:	2e00      	cmp	r6, #0
 8004d92:	d0f4      	beq.n	8004d7e <HAL_SPI_TransmitReceive+0x48>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d94:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004d98:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d9a:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d9c:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004da0:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004da2:	bf1c      	itt	ne
 8004da4:	2205      	movne	r2, #5
 8004da6:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004daa:	2200      	movs	r2, #0
 8004dac:	6622      	str	r2, [r4, #96]	@ 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004dae:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  hspi->RxXferCount = Size;
 8004db2:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->TxXferCount = Size;
 8004db6:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004db8:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferSize  = Size;
 8004dbc:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dc0:	684a      	ldr	r2, [r1, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004dc2:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004dc4:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004dc6:	d801      	bhi.n	8004dcc <HAL_SPI_TransmitReceive+0x96>
 8004dc8:	2e01      	cmp	r6, #1
 8004dca:	d02e      	beq.n	8004e2a <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dcc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dd0:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dd2:	680a      	ldr	r2, [r1, #0]
 8004dd4:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8004dd6:	bf5e      	ittt	pl
 8004dd8:	680a      	ldrpl	r2, [r1, #0]
 8004dda:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8004dde:	600a      	strpl	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004de0:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 8004de4:	d957      	bls.n	8004e96 <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004de6:	b10b      	cbz	r3, 8004dec <HAL_SPI_TransmitReceive+0xb6>
 8004de8:	2e01      	cmp	r6, #1
 8004dea:	d107      	bne.n	8004dfc <HAL_SPI_TransmitReceive+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dec:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004df0:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 8004df2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df4:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8004dfc:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dfe:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	b9ab      	cbnz	r3, 8004e30 <HAL_SPI_TransmitReceive+0xfa>
 8004e04:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	b98b      	cbnz	r3, 8004e30 <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	4639      	mov	r1, r7
 8004e10:	4620      	mov	r0, r4
 8004e12:	f7ff fe36 	bl	8004a82 <SPI_EndRxTxTransaction>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	f040 80b5 	bne.w	8004f86 <HAL_SPI_TransmitReceive+0x250>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e1c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1ad      	bne.n	8004d7e <HAL_SPI_TransmitReceive+0x48>
    hspi->State = HAL_SPI_STATE_READY;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8004e28:	e7aa      	b.n	8004d80 <HAL_SPI_TransmitReceive+0x4a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e2a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e2e:	e7cf      	b.n	8004dd0 <HAL_SPI_TransmitReceive+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e30:	6821      	ldr	r1, [r4, #0]
 8004e32:	688b      	ldr	r3, [r1, #8]
 8004e34:	079e      	lsls	r6, r3, #30
 8004e36:	d50d      	bpl.n	8004e54 <HAL_SPI_TransmitReceive+0x11e>
 8004e38:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	b153      	cbz	r3, 8004e54 <HAL_SPI_TransmitReceive+0x11e>
 8004e3e:	b145      	cbz	r5, 8004e52 <HAL_SPI_TransmitReceive+0x11c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e40:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004e42:	f833 2b02 	ldrh.w	r2, [r3], #2
 8004e46:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e48:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004e4a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8004e52:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e54:	688a      	ldr	r2, [r1, #8]
 8004e56:	f012 0201 	ands.w	r2, r2, #1
 8004e5a:	d00f      	beq.n	8004e7c <HAL_SPI_TransmitReceive+0x146>
 8004e5c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	b15b      	cbz	r3, 8004e7c <HAL_SPI_TransmitReceive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e66:	68c9      	ldr	r1, [r1, #12]
 8004e68:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e6c:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8004e6e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8004e7a:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e7c:	f7fe f88a 	bl	8002f94 <HAL_GetTick>
 8004e80:	eba0 0008 	sub.w	r0, r0, r8
 8004e84:	42b8      	cmp	r0, r7
 8004e86:	d3ba      	bcc.n	8004dfe <HAL_SPI_TransmitReceive+0xc8>
 8004e88:	1c78      	adds	r0, r7, #1
 8004e8a:	d0b8      	beq.n	8004dfe <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        errorcode = HAL_TIMEOUT;
 8004e92:	2003      	movs	r0, #3
 8004e94:	e774      	b.n	8004d80 <HAL_SPI_TransmitReceive+0x4a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e96:	b10b      	cbz	r3, 8004e9c <HAL_SPI_TransmitReceive+0x166>
 8004e98:	2e01      	cmp	r6, #1
 8004e9a:	d10b      	bne.n	8004eb4 <HAL_SPI_TransmitReceive+0x17e>
      if (hspi->TxXferCount > 1U)
 8004e9c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d909      	bls.n	8004eb8 <HAL_SPI_TransmitReceive+0x182>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ea4:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004ea8:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount -= 2U;
 8004eaa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eac:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004eae:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8004eb4:	2501      	movs	r5, #1
 8004eb6:	e048      	b.n	8004f4a <HAL_SPI_TransmitReceive+0x214>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004eb8:	782b      	ldrb	r3, [r5, #0]
 8004eba:	730b      	strb	r3, [r1, #12]
        hspi->pTxBuffPtr++;
 8004ebc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ec2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	e7f3      	b.n	8004eb0 <HAL_SPI_TransmitReceive+0x17a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ec8:	6822      	ldr	r2, [r4, #0]
 8004eca:	6893      	ldr	r3, [r2, #8]
 8004ecc:	0799      	lsls	r1, r3, #30
 8004ece:	d511      	bpl.n	8004ef4 <HAL_SPI_TransmitReceive+0x1be>
 8004ed0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	b173      	cbz	r3, 8004ef4 <HAL_SPI_TransmitReceive+0x1be>
 8004ed6:	b165      	cbz	r5, 8004ef2 <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 8004ed8:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eda:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8004edc:	b289      	uxth	r1, r1
 8004ede:	2901      	cmp	r1, #1
 8004ee0:	d93d      	bls.n	8004f5e <HAL_SPI_TransmitReceive+0x228>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ee2:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004ee6:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee8:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004eea:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004eec:	3b02      	subs	r3, #2
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8004ef2:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ef4:	6822      	ldr	r2, [r4, #0]
 8004ef6:	6891      	ldr	r1, [r2, #8]
 8004ef8:	f011 0101 	ands.w	r1, r1, #1
 8004efc:	d01d      	beq.n	8004f3a <HAL_SPI_TransmitReceive+0x204>
 8004efe:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	b1cb      	cbz	r3, 8004f3a <HAL_SPI_TransmitReceive+0x204>
        if (hspi->RxXferCount > 1U)
 8004f06:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8004f0c:	b280      	uxth	r0, r0
 8004f0e:	2801      	cmp	r0, #1
 8004f10:	d92d      	bls.n	8004f6e <HAL_SPI_TransmitReceive+0x238>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f12:	68d0      	ldr	r0, [r2, #12]
 8004f14:	f823 0b02 	strh.w	r0, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f18:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004f1a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004f1e:	3b02      	subs	r3, #2
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004f26:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b01      	cmp	r3, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f2e:	bf9e      	ittt	ls
 8004f30:	6853      	ldrls	r3, [r2, #4]
 8004f32:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
 8004f36:	6053      	strls	r3, [r2, #4]
        txallowed = 1U;
 8004f38:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f3a:	f7fe f82b 	bl	8002f94 <HAL_GetTick>
 8004f3e:	eba0 0008 	sub.w	r0, r0, r8
 8004f42:	42b8      	cmp	r0, r7
 8004f44:	d301      	bcc.n	8004f4a <HAL_SPI_TransmitReceive+0x214>
 8004f46:	1c7b      	adds	r3, r7, #1
 8004f48:	d1a0      	bne.n	8004e8c <HAL_SPI_TransmitReceive+0x156>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f4a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1ba      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x192>
 8004f52:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1b5      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x192>
 8004f5c:	e756      	b.n	8004e0c <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8004f62:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004f64:	3301      	adds	r3, #1
 8004f66:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8004f68:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	e7bf      	b.n	8004eee <HAL_SPI_TransmitReceive+0x1b8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f6e:	7b12      	ldrb	r2, [r2, #12]
 8004f70:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004f72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f74:	3301      	adds	r3, #1
 8004f76:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8004f78:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8004f84:	e7d8      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f86:	2320      	movs	r3, #32
 8004f88:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	e746      	b.n	8004e1c <HAL_SPI_TransmitReceive+0xe6>
    errorcode = HAL_BUSY;
 8004f8e:	2002      	movs	r0, #2
 8004f90:	e6f6      	b.n	8004d80 <HAL_SPI_TransmitReceive+0x4a>
  __HAL_LOCK(hspi);
 8004f92:	2002      	movs	r0, #2
 8004f94:	e6f7      	b.n	8004d86 <HAL_SPI_TransmitReceive+0x50>

08004f96 <HAL_SPI_Receive>:
{
 8004f96:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f9a:	461f      	mov	r7, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8004f9c:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8004fa0:	2b01      	cmp	r3, #1
{
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	468a      	mov	sl, r1
 8004fa6:	4690      	mov	r8, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8004fa8:	b2de      	uxtb	r6, r3
 8004faa:	f040 80a7 	bne.w	80050fc <HAL_SPI_Receive+0x166>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004fae:	6843      	ldr	r3, [r0, #4]
 8004fb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fb4:	d10e      	bne.n	8004fd4 <HAL_SPI_Receive+0x3e>
 8004fb6:	6883      	ldr	r3, [r0, #8]
 8004fb8:	b963      	cbnz	r3, 8004fd4 <HAL_SPI_Receive+0x3e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004fba:	2304      	movs	r3, #4
 8004fbc:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	9700      	str	r7, [sp, #0]
 8004fc4:	460a      	mov	r2, r1
 8004fc6:	f7ff feb6 	bl	8004d36 <HAL_SPI_TransmitReceive>
 8004fca:	4606      	mov	r6, r0
}
 8004fcc:	4630      	mov	r0, r6
 8004fce:	b002      	add	sp, #8
 8004fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 8004fd4:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	f000 8091 	beq.w	8005100 <HAL_SPI_Receive+0x16a>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8004fe4:	f7fd ffd6 	bl	8002f94 <HAL_GetTick>
 8004fe8:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 8004fea:	f1ba 0f00 	cmp.w	sl, #0
 8004fee:	d075      	beq.n	80050dc <HAL_SPI_Receive+0x146>
 8004ff0:	f1b8 0f00 	cmp.w	r8, #0
 8004ff4:	d072      	beq.n	80050dc <HAL_SPI_Receive+0x146>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ff6:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->TxISR       = NULL;
 8004ffe:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005002:	6625      	str	r5, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005004:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005006:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->TxXferSize  = 0U;
 800500a:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800500c:	87e5      	strh	r5, [r4, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800500e:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005010:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005012:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005014:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005018:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800501c:	bf8c      	ite	hi
 800501e:	f423 5380 	bichi.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005022:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
  hspi->RxXferSize  = Size;
 8005026:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800502a:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800502c:	68a3      	ldr	r3, [r4, #8]
 800502e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005032:	d107      	bne.n	8005044 <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800503a:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005042:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8005048:	bf5e      	ittt	pl
 800504a:	682b      	ldrpl	r3, [r5, #0]
 800504c:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8005050:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005052:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 8005056:	d923      	bls.n	80050a0 <HAL_SPI_Receive+0x10a>
    while (hspi->RxXferCount > 0U)
 8005058:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800505c:	b29b      	uxth	r3, r3
 800505e:	b323      	cbz	r3, 80050aa <HAL_SPI_Receive+0x114>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	07d2      	lsls	r2, r2, #31
 8005066:	d53d      	bpl.n	80050e4 <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800506c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005070:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8005072:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005076:	3b01      	subs	r3, #1
 8005078:	b29b      	uxth	r3, r3
 800507a:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 800507e:	e7eb      	b.n	8005058 <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	07d0      	lsls	r0, r2, #31
 8005086:	d51d      	bpl.n	80050c4 <HAL_SPI_Receive+0x12e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005088:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800508a:	7b1b      	ldrb	r3, [r3, #12]
 800508c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800508e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005090:	3301      	adds	r3, #1
 8005092:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8005094:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005098:	3b01      	subs	r3, #1
 800509a:	b29b      	uxth	r3, r3
 800509c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 80050a0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1ea      	bne.n	8005080 <HAL_SPI_Receive+0xea>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050aa:	464a      	mov	r2, r9
 80050ac:	4639      	mov	r1, r7
 80050ae:	4620      	mov	r0, r4
 80050b0:	f7ff fcb0 	bl	8004a14 <SPI_EndRxTransaction>
 80050b4:	b9f8      	cbnz	r0, 80050f6 <HAL_SPI_Receive+0x160>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050b6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80050b8:	b983      	cbnz	r3, 80050dc <HAL_SPI_Receive+0x146>
    hspi->State = HAL_SPI_STATE_READY;
 80050ba:	2201      	movs	r2, #1
 80050bc:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050c0:	461e      	mov	r6, r3
 80050c2:	e00b      	b.n	80050dc <HAL_SPI_Receive+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050c4:	f7fd ff66 	bl	8002f94 <HAL_GetTick>
 80050c8:	eba0 0009 	sub.w	r0, r0, r9
 80050cc:	42b8      	cmp	r0, r7
 80050ce:	d3e7      	bcc.n	80050a0 <HAL_SPI_Receive+0x10a>
 80050d0:	1c79      	adds	r1, r7, #1
 80050d2:	d0e5      	beq.n	80050a0 <HAL_SPI_Receive+0x10a>
          hspi->State = HAL_SPI_STATE_READY;
 80050d4:	2301      	movs	r3, #1
 80050d6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 80050da:	2603      	movs	r6, #3
  __HAL_UNLOCK(hspi);
 80050dc:	2300      	movs	r3, #0
 80050de:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  return errorcode;
 80050e2:	e773      	b.n	8004fcc <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050e4:	f7fd ff56 	bl	8002f94 <HAL_GetTick>
 80050e8:	eba0 0009 	sub.w	r0, r0, r9
 80050ec:	42b8      	cmp	r0, r7
 80050ee:	d3b3      	bcc.n	8005058 <HAL_SPI_Receive+0xc2>
 80050f0:	1c7b      	adds	r3, r7, #1
 80050f2:	d0b1      	beq.n	8005058 <HAL_SPI_Receive+0xc2>
 80050f4:	e7ee      	b.n	80050d4 <HAL_SPI_Receive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050f6:	2320      	movs	r3, #32
 80050f8:	6623      	str	r3, [r4, #96]	@ 0x60
 80050fa:	e7dc      	b.n	80050b6 <HAL_SPI_Receive+0x120>
    errorcode = HAL_BUSY;
 80050fc:	2602      	movs	r6, #2
 80050fe:	e7ed      	b.n	80050dc <HAL_SPI_Receive+0x146>
  __HAL_LOCK(hspi);
 8005100:	2602      	movs	r6, #2
 8005102:	e763      	b.n	8004fcc <HAL_SPI_Receive+0x36>

08005104 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005104:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005108:	2b01      	cmp	r3, #1
 800510a:	d12b      	bne.n	8005164 <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	2302      	movs	r3, #2
 800510e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005112:	6803      	ldr	r3, [r0, #0]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800511c:	4a12      	ldr	r2, [pc, #72]	@ (8005168 <HAL_TIM_Base_Start_IT+0x64>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d012      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x44>
 8005122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005126:	d00f      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x44>
 8005128:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800512c:	4293      	cmp	r3, r2
 800512e:	d00b      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x44>
 8005130:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x44>
 8005138:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x44>
 8005140:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8005144:	4293      	cmp	r3, r2
 8005146:	d107      	bne.n	8005158 <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005148:	6899      	ldr	r1, [r3, #8]
 800514a:	4a08      	ldr	r2, [pc, #32]	@ (800516c <HAL_TIM_Base_Start_IT+0x68>)
 800514c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514e:	2a06      	cmp	r2, #6
 8005150:	d006      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x5c>
 8005152:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005156:	d003      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8005160:	2000      	movs	r0, #0
 8005162:	4770      	bx	lr
    return HAL_ERROR;
 8005164:	2001      	movs	r0, #1
}
 8005166:	4770      	bx	lr
 8005168:	40012c00 	.word	0x40012c00
 800516c:	00010007 	.word	0x00010007

08005170 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8005170:	4770      	bx	lr

08005172 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8005172:	4770      	bx	lr

08005174 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005174:	4770      	bx	lr

08005176 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8005176:	4770      	bx	lr

08005178 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8005178:	6803      	ldr	r3, [r0, #0]
{
 800517a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800517c:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800517e:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005180:	07b2      	lsls	r2, r6, #30
{
 8005182:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005184:	d50d      	bpl.n	80051a2 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005186:	07a9      	lsls	r1, r5, #30
 8005188:	d50b      	bpl.n	80051a2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800518a:	f06f 0202 	mvn.w	r2, #2
 800518e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005190:	2201      	movs	r2, #1
 8005192:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	079a      	lsls	r2, r3, #30
 8005198:	d074      	beq.n	8005284 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800519a:	f7ff ffea 	bl	8005172 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519e:	2300      	movs	r3, #0
 80051a0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051a2:	0773      	lsls	r3, r6, #29
 80051a4:	d510      	bpl.n	80051c8 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051a6:	0768      	lsls	r0, r5, #29
 80051a8:	d50e      	bpl.n	80051c8 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	f06f 0204 	mvn.w	r2, #4
 80051b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051b2:	2202      	movs	r2, #2
 80051b4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80051bc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051be:	d067      	beq.n	8005290 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80051c0:	f7ff ffd7 	bl	8005172 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c4:	2300      	movs	r3, #0
 80051c6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051c8:	0731      	lsls	r1, r6, #28
 80051ca:	d50f      	bpl.n	80051ec <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051cc:	072a      	lsls	r2, r5, #28
 80051ce:	d50d      	bpl.n	80051ec <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	f06f 0208 	mvn.w	r2, #8
 80051d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051d8:	2204      	movs	r2, #4
 80051da:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80051e0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051e2:	d05b      	beq.n	800529c <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 80051e4:	f7ff ffc5 	bl	8005172 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e8:	2300      	movs	r3, #0
 80051ea:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051ec:	06f0      	lsls	r0, r6, #27
 80051ee:	d510      	bpl.n	8005212 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051f0:	06e9      	lsls	r1, r5, #27
 80051f2:	d50e      	bpl.n	8005212 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	f06f 0210 	mvn.w	r2, #16
 80051fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051fc:	2208      	movs	r2, #8
 80051fe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005206:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005208:	d04e      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 800520a:	f7ff ffb2 	bl	8005172 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	2300      	movs	r3, #0
 8005210:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005212:	07f2      	lsls	r2, r6, #31
 8005214:	d508      	bpl.n	8005228 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005216:	07eb      	lsls	r3, r5, #31
 8005218:	d506      	bpl.n	8005228 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	f06f 0201 	mvn.w	r2, #1
 8005220:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005222:	4620      	mov	r0, r4
 8005224:	f7fc fc42 	bl	8001aac <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005228:	0630      	lsls	r0, r6, #24
 800522a:	d508      	bpl.n	800523e <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800522c:	0629      	lsls	r1, r5, #24
 800522e:	d506      	bpl.n	800523e <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005236:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005238:	4620      	mov	r0, r4
 800523a:	f000 f9b8 	bl	80055ae <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800523e:	05f2      	lsls	r2, r6, #23
 8005240:	d508      	bpl.n	8005254 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005242:	062b      	lsls	r3, r5, #24
 8005244:	d506      	bpl.n	8005254 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800524c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800524e:	4620      	mov	r0, r4
 8005250:	f000 f9ae 	bl	80055b0 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005254:	0670      	lsls	r0, r6, #25
 8005256:	d508      	bpl.n	800526a <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005258:	0669      	lsls	r1, r5, #25
 800525a:	d506      	bpl.n	800526a <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005262:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005264:	4620      	mov	r0, r4
 8005266:	f7ff ff86 	bl	8005176 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800526a:	06b2      	lsls	r2, r6, #26
 800526c:	d522      	bpl.n	80052b4 <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800526e:	06ab      	lsls	r3, r5, #26
 8005270:	d520      	bpl.n	80052b4 <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005278:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800527a:	611a      	str	r2, [r3, #16]
}
 800527c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005280:	f000 b994 	b.w	80055ac <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005284:	f7ff ff74 	bl	8005170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005288:	4620      	mov	r0, r4
 800528a:	f7ff ff73 	bl	8005174 <HAL_TIM_PWM_PulseFinishedCallback>
 800528e:	e786      	b.n	800519e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005290:	f7ff ff6e 	bl	8005170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005294:	4620      	mov	r0, r4
 8005296:	f7ff ff6d 	bl	8005174 <HAL_TIM_PWM_PulseFinishedCallback>
 800529a:	e793      	b.n	80051c4 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529c:	f7ff ff68 	bl	8005170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a0:	4620      	mov	r0, r4
 80052a2:	f7ff ff67 	bl	8005174 <HAL_TIM_PWM_PulseFinishedCallback>
 80052a6:	e79f      	b.n	80051e8 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a8:	f7ff ff62 	bl	8005170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ac:	4620      	mov	r0, r4
 80052ae:	f7ff ff61 	bl	8005174 <HAL_TIM_PWM_PulseFinishedCallback>
 80052b2:	e7ac      	b.n	800520e <HAL_TIM_IRQHandler+0x96>
}
 80052b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080052b8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b8:	4a2f      	ldr	r2, [pc, #188]	@ (8005378 <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 80052ba:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052bc:	4290      	cmp	r0, r2
 80052be:	d00e      	beq.n	80052de <TIM_Base_SetConfig+0x26>
 80052c0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80052c4:	d00b      	beq.n	80052de <TIM_Base_SetConfig+0x26>
 80052c6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80052ca:	4290      	cmp	r0, r2
 80052cc:	d007      	beq.n	80052de <TIM_Base_SetConfig+0x26>
 80052ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80052d2:	4290      	cmp	r0, r2
 80052d4:	d003      	beq.n	80052de <TIM_Base_SetConfig+0x26>
 80052d6:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80052da:	4290      	cmp	r0, r2
 80052dc:	d115      	bne.n	800530a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80052de:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80052e4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052e6:	4a24      	ldr	r2, [pc, #144]	@ (8005378 <TIM_Base_SetConfig+0xc0>)
 80052e8:	4290      	cmp	r0, r2
 80052ea:	d019      	beq.n	8005320 <TIM_Base_SetConfig+0x68>
 80052ec:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80052f0:	d016      	beq.n	8005320 <TIM_Base_SetConfig+0x68>
 80052f2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80052f6:	4290      	cmp	r0, r2
 80052f8:	d012      	beq.n	8005320 <TIM_Base_SetConfig+0x68>
 80052fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80052fe:	4290      	cmp	r0, r2
 8005300:	d00e      	beq.n	8005320 <TIM_Base_SetConfig+0x68>
 8005302:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8005306:	4290      	cmp	r0, r2
 8005308:	d00a      	beq.n	8005320 <TIM_Base_SetConfig+0x68>
 800530a:	4a1c      	ldr	r2, [pc, #112]	@ (800537c <TIM_Base_SetConfig+0xc4>)
 800530c:	4290      	cmp	r0, r2
 800530e:	d007      	beq.n	8005320 <TIM_Base_SetConfig+0x68>
 8005310:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005314:	4290      	cmp	r0, r2
 8005316:	d003      	beq.n	8005320 <TIM_Base_SetConfig+0x68>
 8005318:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800531c:	4290      	cmp	r0, r2
 800531e:	d103      	bne.n	8005328 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005320:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005326:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005328:	694a      	ldr	r2, [r1, #20]
 800532a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800532e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005330:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005332:	688b      	ldr	r3, [r1, #8]
 8005334:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005336:	680b      	ldr	r3, [r1, #0]
 8005338:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800533a:	4b0f      	ldr	r3, [pc, #60]	@ (8005378 <TIM_Base_SetConfig+0xc0>)
 800533c:	4298      	cmp	r0, r3
 800533e:	d00f      	beq.n	8005360 <TIM_Base_SetConfig+0xa8>
 8005340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005344:	4298      	cmp	r0, r3
 8005346:	d00b      	beq.n	8005360 <TIM_Base_SetConfig+0xa8>
 8005348:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 800534c:	4298      	cmp	r0, r3
 800534e:	d007      	beq.n	8005360 <TIM_Base_SetConfig+0xa8>
 8005350:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005354:	4298      	cmp	r0, r3
 8005356:	d003      	beq.n	8005360 <TIM_Base_SetConfig+0xa8>
 8005358:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800535c:	4298      	cmp	r0, r3
 800535e:	d101      	bne.n	8005364 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005360:	690b      	ldr	r3, [r1, #16]
 8005362:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005364:	2301      	movs	r3, #1
 8005366:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005368:	6903      	ldr	r3, [r0, #16]
 800536a:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800536c:	bf42      	ittt	mi
 800536e:	6903      	ldrmi	r3, [r0, #16]
 8005370:	f023 0301 	bicmi.w	r3, r3, #1
 8005374:	6103      	strmi	r3, [r0, #16]
  }
}
 8005376:	4770      	bx	lr
 8005378:	40012c00 	.word	0x40012c00
 800537c:	40014000 	.word	0x40014000

08005380 <HAL_TIM_Base_Init>:
{
 8005380:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005382:	4604      	mov	r4, r0
 8005384:	b350      	cbz	r0, 80053dc <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005386:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800538a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800538e:	b91b      	cbnz	r3, 8005398 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005390:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005394:	f7fd fb6a 	bl	8002a6c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800539a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a0:	1d21      	adds	r1, r4, #4
 80053a2:	f7ff ff89 	bl	80052b8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a6:	2301      	movs	r3, #1
 80053a8:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 80053ac:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ae:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80053b2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80053b6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80053ba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80053be:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80053ca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80053ce:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80053d2:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80053d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80053da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80053dc:	2001      	movs	r0, #1
 80053de:	e7fc      	b.n	80053da <HAL_TIM_Base_Init+0x5a>

080053e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053e0:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053e2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053e4:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e6:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053ea:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80053ee:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053f0:	6082      	str	r2, [r0, #8]
}
 80053f2:	bd10      	pop	{r4, pc}

080053f4 <HAL_TIM_ConfigClockSource>:
{
 80053f4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80053f6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80053fa:	2b01      	cmp	r3, #1
{
 80053fc:	4604      	mov	r4, r0
 80053fe:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005402:	f000 808c 	beq.w	800551e <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005406:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 800540a:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 800540c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800540e:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005412:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005414:	4b43      	ldr	r3, [pc, #268]	@ (8005524 <HAL_TIM_ConfigClockSource+0x130>)
 8005416:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8005418:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800541a:	680b      	ldr	r3, [r1, #0]
 800541c:	2b60      	cmp	r3, #96	@ 0x60
 800541e:	d04f      	beq.n	80054c0 <HAL_TIM_ConfigClockSource+0xcc>
 8005420:	d832      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x94>
 8005422:	2b40      	cmp	r3, #64	@ 0x40
 8005424:	d064      	beq.n	80054f0 <HAL_TIM_ConfigClockSource+0xfc>
 8005426:	d816      	bhi.n	8005456 <HAL_TIM_ConfigClockSource+0x62>
 8005428:	2b20      	cmp	r3, #32
 800542a:	d00d      	beq.n	8005448 <HAL_TIM_ConfigClockSource+0x54>
 800542c:	d80a      	bhi.n	8005444 <HAL_TIM_ConfigClockSource+0x50>
 800542e:	f033 0110 	bics.w	r1, r3, #16
 8005432:	d009      	beq.n	8005448 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8005434:	2301      	movs	r3, #1
 8005436:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800543a:	2300      	movs	r3, #0
 800543c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005440:	4610      	mov	r0, r2
 8005442:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8005444:	2b30      	cmp	r3, #48	@ 0x30
 8005446:	d1f5      	bne.n	8005434 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8005448:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800544a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800544e:	4313      	orrs	r3, r2
 8005450:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8005454:	e028      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8005456:	2b50      	cmp	r3, #80	@ 0x50
 8005458:	d1ec      	bne.n	8005434 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 800545a:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800545c:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800545e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005460:	6a03      	ldr	r3, [r0, #32]
 8005462:	f023 0301 	bic.w	r3, r3, #1
 8005466:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005468:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800546a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800546e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005472:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005476:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005478:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800547a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800547c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800547e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005482:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8005486:	e00f      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8005488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800548c:	d00d      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0xb6>
 800548e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005492:	d00c      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0xba>
 8005494:	2b70      	cmp	r3, #112	@ 0x70
 8005496:	d1cd      	bne.n	8005434 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8005498:	68cb      	ldr	r3, [r1, #12]
 800549a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800549e:	f7ff ff9f 	bl	80053e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054a2:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80054a8:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80054aa:	2200      	movs	r2, #0
 80054ac:	e7c2      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80054ae:	68cb      	ldr	r3, [r1, #12]
 80054b0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80054b4:	f7ff ff94 	bl	80053e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054b8:	6883      	ldr	r3, [r0, #8]
 80054ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054be:	e7f3      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 80054c0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054c2:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80054c4:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80054c6:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054c8:	f022 0210 	bic.w	r2, r2, #16
 80054cc:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ce:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054d4:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80054d8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054dc:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80054e0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80054e2:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80054e4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80054e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ea:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80054ee:	e7db      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 80054f0:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80054f2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80054f4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054f6:	6a03      	ldr	r3, [r0, #32]
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054fe:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005500:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005504:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005508:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 800550c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800550e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005510:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005512:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005514:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005518:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800551c:	e7c4      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 800551e:	4602      	mov	r2, r0
 8005520:	e78e      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x4c>
 8005522:	bf00      	nop
 8005524:	fffe0088 	.word	0xfffe0088

08005528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005528:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800552a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800552e:	2b01      	cmp	r3, #1
{
 8005530:	4604      	mov	r4, r0
 8005532:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005536:	d032      	beq.n	800559e <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005538:	6823      	ldr	r3, [r4, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800553a:	4d19      	ldr	r5, [pc, #100]	@ (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005540:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8005542:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005544:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005546:	d002      	beq.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8005548:	4e16      	ldr	r6, [pc, #88]	@ (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 800554a:	42b3      	cmp	r3, r6
 800554c:	d103      	bne.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800554e:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005550:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005554:	4332      	orrs	r2, r6
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005556:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005558:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800555c:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555e:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8005560:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005562:	d011      	beq.n	8005588 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005568:	d00e      	beq.n	8005588 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800556a:	4a0f      	ldr	r2, [pc, #60]	@ (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00b      	beq.n	8005588 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005570:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005574:	4293      	cmp	r3, r2
 8005576:	d007      	beq.n	8005588 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005578:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005580:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8005584:	4293      	cmp	r3, r2
 8005586:	d104      	bne.n	8005592 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005588:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800558a:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800558e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005590:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005592:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8005594:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005596:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800559a:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	40012c00 	.word	0x40012c00
 80055a4:	40013400 	.word	0x40013400
 80055a8:	40000400 	.word	0x40000400

080055ac <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80055ac:	4770      	bx	lr

080055ae <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80055b0:	4770      	bx	lr

080055b2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055b2:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	e852 3f00 	ldrex	r3, [r2]
 80055b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80055c0:	6802      	ldr	r2, [r0, #0]
 80055c2:	2900      	cmp	r1, #0
 80055c4:	d1f5      	bne.n	80055b2 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	f102 0308 	add.w	r3, r2, #8
 80055ca:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ce:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	f102 0c08 	add.w	ip, r2, #8
 80055d6:	e84c 3100 	strex	r1, r3, [ip]
 80055da:	2900      	cmp	r1, #0
 80055dc:	d1f3      	bne.n	80055c6 <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055de:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d107      	bne.n	80055f4 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	e842 3100 	strex	r1, r3, [r2]
 80055f0:	2900      	cmp	r1, #0
 80055f2:	d1f7      	bne.n	80055e4 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055f4:	2320      	movs	r3, #32
 80055f6:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fa:	2300      	movs	r3, #0
 80055fc:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055fe:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8005600:	4770      	bx	lr

08005602 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8005602:	4770      	bx	lr

08005604 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8005604:	4770      	bx	lr

08005606 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8005606:	4770      	bx	lr

08005608 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005608:	6a40      	ldr	r0, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800560a:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800560c:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800560e:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 8005612:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005614:	689c      	ldr	r4, [r3, #8]
 8005616:	0624      	lsls	r4, r4, #24
 8005618:	d50e      	bpl.n	8005638 <UART_DMAError+0x30>
 800561a:	2a21      	cmp	r2, #33	@ 0x21
 800561c:	d10c      	bne.n	8005638 <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800561e:	2200      	movs	r2, #0
 8005620:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005628:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	e843 2400 	strex	r4, r2, [r3]
 8005630:	2c00      	cmp	r4, #0
 8005632:	d1f7      	bne.n	8005624 <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 8005634:	2220      	movs	r2, #32
 8005636:	67c2      	str	r2, [r0, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	065b      	lsls	r3, r3, #25
 800563c:	d506      	bpl.n	800564c <UART_DMAError+0x44>
 800563e:	2922      	cmp	r1, #34	@ 0x22
 8005640:	d104      	bne.n	800564c <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005648:	f7ff ffb3 	bl	80055b2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800564c:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8005650:	f043 0310 	orr.w	r3, r3, #16
 8005654:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005658:	f7ff ffd5 	bl	8005606 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800565c:	bd10      	pop	{r4, pc}

0800565e <HAL_UARTEx_RxEventCallback>:
}
 800565e:	4770      	bx	lr

08005660 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005660:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8005662:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005664:	2301      	movs	r3, #1
 8005666:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005668:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800566a:	2b01      	cmp	r3, #1
 800566c:	d105      	bne.n	800567a <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800566e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8005672:	0849      	lsrs	r1, r1, #1
 8005674:	f7ff fff3 	bl	800565e <HAL_UARTEx_RxEventCallback>
}
 8005678:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800567a:	f7ff ffc3 	bl	8005604 <HAL_UART_RxHalfCpltCallback>
}
 800567e:	e7fb      	b.n	8005678 <UART_DMARxHalfCplt+0x18>

08005680 <UART_DMAReceiveCplt>:
{
 8005680:	b508      	push	{r3, lr}
 8005682:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005684:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	2b20      	cmp	r3, #32
 800568a:	d032      	beq.n	80056f2 <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005692:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	e852 3f00 	ldrex	r3, [r2]
 8005698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80056a0:	6803      	ldr	r3, [r0, #0]
 80056a2:	2900      	cmp	r1, #0
 80056a4:	d1f5      	bne.n	8005692 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	f103 0208 	add.w	r2, r3, #8
 80056aa:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ae:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	f103 0c08 	add.w	ip, r3, #8
 80056b6:	e84c 2100 	strex	r1, r2, [ip]
 80056ba:	2900      	cmp	r1, #0
 80056bc:	d1f3      	bne.n	80056a6 <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	f103 0208 	add.w	r2, r3, #8
 80056c2:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	f103 0c08 	add.w	ip, r3, #8
 80056ce:	e84c 2100 	strex	r1, r2, [ip]
 80056d2:	2900      	cmp	r1, #0
 80056d4:	d1f3      	bne.n	80056be <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 80056d6:	2220      	movs	r2, #32
 80056d8:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056dc:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80056de:	2a01      	cmp	r2, #1
 80056e0:	d107      	bne.n	80056f2 <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	e843 2100 	strex	r1, r2, [r3]
 80056ee:	2900      	cmp	r1, #0
 80056f0:	d1f7      	bne.n	80056e2 <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056f2:	2300      	movs	r3, #0
 80056f4:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d104      	bne.n	8005706 <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056fc:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8005700:	f7ff ffad 	bl	800565e <HAL_UARTEx_RxEventCallback>
}
 8005704:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8005706:	f7ff ff7c 	bl	8005602 <HAL_UART_RxCpltCallback>
}
 800570a:	e7fb      	b.n	8005704 <UART_DMAReceiveCplt+0x84>

0800570c <UART_SetConfig>:
{
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005710:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005712:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005714:	6925      	ldr	r5, [r4, #16]
 8005716:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005718:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800571a:	432a      	orrs	r2, r5
 800571c:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800571e:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005722:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005724:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005728:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800572a:	430a      	orrs	r2, r1
 800572c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8005732:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005734:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005738:	430a      	orrs	r2, r1
 800573a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800573c:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800573e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005740:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8005744:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005746:	430a      	orrs	r2, r1
 8005748:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800574a:	4a56      	ldr	r2, [pc, #344]	@ (80058a4 <UART_SetConfig+0x198>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d112      	bne.n	8005776 <UART_SetConfig+0x6a>
 8005750:	4b55      	ldr	r3, [pc, #340]	@ (80058a8 <UART_SetConfig+0x19c>)
 8005752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	2b02      	cmp	r3, #2
 800575a:	f000 8091 	beq.w	8005880 <UART_SetConfig+0x174>
 800575e:	2b03      	cmp	r3, #3
 8005760:	d022      	beq.n	80057a8 <UART_SetConfig+0x9c>
 8005762:	2b01      	cmp	r3, #1
 8005764:	f040 8092 	bne.w	800588c <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005768:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800576c:	f040 8085 	bne.w	800587a <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 8005770:	f7fe fd9a 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
        break;
 8005774:	e06b      	b.n	800584e <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005776:	4a4d      	ldr	r2, [pc, #308]	@ (80058ac <UART_SetConfig+0x1a0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d12e      	bne.n	80057da <UART_SetConfig+0xce>
 800577c:	4b4a      	ldr	r3, [pc, #296]	@ (80058a8 <UART_SetConfig+0x19c>)
 800577e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005780:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005784:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005788:	d07a      	beq.n	8005880 <UART_SetConfig+0x174>
 800578a:	d80a      	bhi.n	80057a2 <UART_SetConfig+0x96>
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8083 	beq.w	8005898 <UART_SetConfig+0x18c>
 8005792:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005796:	d0e7      	beq.n	8005768 <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 8005798:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800579a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800579c:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 80057a0:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80057a6:	d1f7      	bne.n	8005798 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057a8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80057ac:	4840      	ldr	r0, [pc, #256]	@ (80058b0 <UART_SetConfig+0x1a4>)
 80057ae:	d156      	bne.n	800585e <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057b0:	6862      	ldr	r2, [r4, #4]
 80057b2:	0853      	lsrs	r3, r2, #1
 80057b4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80057b8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057bc:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80057c0:	f1a3 0110 	sub.w	r1, r3, #16
 80057c4:	4291      	cmp	r1, r2
 80057c6:	d8e7      	bhi.n	8005798 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057c8:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80057cc:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057ce:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057d0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60cb      	str	r3, [r1, #12]
 80057d8:	e03b      	b.n	8005852 <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057da:	4a36      	ldr	r2, [pc, #216]	@ (80058b4 <UART_SetConfig+0x1a8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d10f      	bne.n	8005800 <UART_SetConfig+0xf4>
 80057e0:	4b31      	ldr	r3, [pc, #196]	@ (80058a8 <UART_SetConfig+0x19c>)
 80057e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80057e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80057ec:	d048      	beq.n	8005880 <UART_SetConfig+0x174>
 80057ee:	d804      	bhi.n	80057fa <UART_SetConfig+0xee>
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d051      	beq.n	8005898 <UART_SetConfig+0x18c>
 80057f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057f8:	e7cd      	b.n	8005796 <UART_SetConfig+0x8a>
 80057fa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80057fe:	e7d2      	b.n	80057a6 <UART_SetConfig+0x9a>
 8005800:	4a2d      	ldr	r2, [pc, #180]	@ (80058b8 <UART_SetConfig+0x1ac>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d10f      	bne.n	8005826 <UART_SetConfig+0x11a>
 8005806:	4b28      	ldr	r3, [pc, #160]	@ (80058a8 <UART_SetConfig+0x19c>)
 8005808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800580e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005812:	d035      	beq.n	8005880 <UART_SetConfig+0x174>
 8005814:	d804      	bhi.n	8005820 <UART_SetConfig+0x114>
 8005816:	2b00      	cmp	r3, #0
 8005818:	d03e      	beq.n	8005898 <UART_SetConfig+0x18c>
 800581a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800581e:	e7ba      	b.n	8005796 <UART_SetConfig+0x8a>
 8005820:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005824:	e7bf      	b.n	80057a6 <UART_SetConfig+0x9a>
 8005826:	4a25      	ldr	r2, [pc, #148]	@ (80058bc <UART_SetConfig+0x1b0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d1b5      	bne.n	8005798 <UART_SetConfig+0x8c>
 800582c:	4b1e      	ldr	r3, [pc, #120]	@ (80058a8 <UART_SetConfig+0x19c>)
 800582e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005830:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005834:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005838:	d022      	beq.n	8005880 <UART_SetConfig+0x174>
 800583a:	d803      	bhi.n	8005844 <UART_SetConfig+0x138>
 800583c:	b363      	cbz	r3, 8005898 <UART_SetConfig+0x18c>
 800583e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005842:	e7a8      	b.n	8005796 <UART_SetConfig+0x8a>
 8005844:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005848:	e7ad      	b.n	80057a6 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800584a:	f7fe fe11 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800584e:	2800      	cmp	r0, #0
 8005850:	d1ae      	bne.n	80057b0 <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 8005852:	2000      	movs	r0, #0
 8005854:	e7a1      	b.n	800579a <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005856:	f7fe fdf3 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800585a:	2800      	cmp	r0, #0
 800585c:	d0f9      	beq.n	8005852 <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800585e:	6862      	ldr	r2, [r4, #4]
 8005860:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005864:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005868:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800586c:	f1a3 0110 	sub.w	r1, r3, #16
 8005870:	4291      	cmp	r1, r2
 8005872:	d891      	bhi.n	8005798 <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005874:	6822      	ldr	r2, [r4, #0]
 8005876:	60d3      	str	r3, [r2, #12]
 8005878:	e7eb      	b.n	8005852 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 800587a:	f7fe fd15 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
        break;
 800587e:	e7ec      	b.n	800585a <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005880:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005884:	d094      	beq.n	80057b0 <UART_SetConfig+0xa4>
 8005886:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800588a:	e7e8      	b.n	800585e <UART_SetConfig+0x152>
 800588c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005890:	d0db      	beq.n	800584a <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005892:	f7fe fded 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
        break;
 8005896:	e7e0      	b.n	800585a <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005898:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800589c:	d1db      	bne.n	8005856 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800589e:	f7fe fdcf 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
        break;
 80058a2:	e7d4      	b.n	800584e <UART_SetConfig+0x142>
 80058a4:	40013800 	.word	0x40013800
 80058a8:	40021000 	.word	0x40021000
 80058ac:	40004400 	.word	0x40004400
 80058b0:	007a1200 	.word	0x007a1200
 80058b4:	40004800 	.word	0x40004800
 80058b8:	40004c00 	.word	0x40004c00
 80058bc:	40005000 	.word	0x40005000

080058c0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058c0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80058c2:	071a      	lsls	r2, r3, #28
{
 80058c4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058c6:	d506      	bpl.n	80058d6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058c8:	6801      	ldr	r1, [r0, #0]
 80058ca:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80058cc:	684a      	ldr	r2, [r1, #4]
 80058ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058d2:	4322      	orrs	r2, r4
 80058d4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058d6:	07dc      	lsls	r4, r3, #31
 80058d8:	d506      	bpl.n	80058e8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058da:	6801      	ldr	r1, [r0, #0]
 80058dc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80058de:	684a      	ldr	r2, [r1, #4]
 80058e0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80058e4:	4322      	orrs	r2, r4
 80058e6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058e8:	0799      	lsls	r1, r3, #30
 80058ea:	d506      	bpl.n	80058fa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058ec:	6801      	ldr	r1, [r0, #0]
 80058ee:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80058f0:	684a      	ldr	r2, [r1, #4]
 80058f2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80058f6:	4322      	orrs	r2, r4
 80058f8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058fa:	075a      	lsls	r2, r3, #29
 80058fc:	d506      	bpl.n	800590c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058fe:	6801      	ldr	r1, [r0, #0]
 8005900:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005902:	684a      	ldr	r2, [r1, #4]
 8005904:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005908:	4322      	orrs	r2, r4
 800590a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800590c:	06dc      	lsls	r4, r3, #27
 800590e:	d506      	bpl.n	800591e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005910:	6801      	ldr	r1, [r0, #0]
 8005912:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005914:	688a      	ldr	r2, [r1, #8]
 8005916:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800591a:	4322      	orrs	r2, r4
 800591c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800591e:	0699      	lsls	r1, r3, #26
 8005920:	d506      	bpl.n	8005930 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005922:	6801      	ldr	r1, [r0, #0]
 8005924:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005926:	688a      	ldr	r2, [r1, #8]
 8005928:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800592c:	4322      	orrs	r2, r4
 800592e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005930:	065a      	lsls	r2, r3, #25
 8005932:	d50f      	bpl.n	8005954 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005934:	6801      	ldr	r1, [r0, #0]
 8005936:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8005938:	684a      	ldr	r2, [r1, #4]
 800593a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800593e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005940:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005944:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005946:	d105      	bne.n	8005954 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005948:	684a      	ldr	r2, [r1, #4]
 800594a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800594c:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8005950:	4322      	orrs	r2, r4
 8005952:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005954:	061b      	lsls	r3, r3, #24
 8005956:	d506      	bpl.n	8005966 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005958:	6802      	ldr	r2, [r0, #0]
 800595a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800595c:	6853      	ldr	r3, [r2, #4]
 800595e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005962:	430b      	orrs	r3, r1
 8005964:	6053      	str	r3, [r2, #4]
}
 8005966:	bd10      	pop	{r4, pc}

08005968 <UART_WaitOnFlagUntilTimeout>:
{
 8005968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800596c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005970:	4604      	mov	r4, r0
 8005972:	460d      	mov	r5, r1
 8005974:	4617      	mov	r7, r2
 8005976:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005978:	6822      	ldr	r2, [r4, #0]
 800597a:	69d3      	ldr	r3, [r2, #28]
 800597c:	ea35 0303 	bics.w	r3, r5, r3
 8005980:	bf0c      	ite	eq
 8005982:	2301      	moveq	r3, #1
 8005984:	2300      	movne	r3, #0
 8005986:	42bb      	cmp	r3, r7
 8005988:	d001      	beq.n	800598e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800598a:	2000      	movs	r0, #0
 800598c:	e022      	b.n	80059d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800598e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005992:	d0f2      	beq.n	800597a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005994:	f7fd fafe 	bl	8002f94 <HAL_GetTick>
 8005998:	eba0 0008 	sub.w	r0, r0, r8
 800599c:	4548      	cmp	r0, r9
 800599e:	d829      	bhi.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x8c>
 80059a0:	f1b9 0f00 	cmp.w	r9, #0
 80059a4:	d026      	beq.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059a6:	6821      	ldr	r1, [r4, #0]
 80059a8:	680b      	ldr	r3, [r1, #0]
 80059aa:	075a      	lsls	r2, r3, #29
 80059ac:	d5e4      	bpl.n	8005978 <UART_WaitOnFlagUntilTimeout+0x10>
 80059ae:	2d80      	cmp	r5, #128	@ 0x80
 80059b0:	d0e2      	beq.n	8005978 <UART_WaitOnFlagUntilTimeout+0x10>
 80059b2:	2d40      	cmp	r5, #64	@ 0x40
 80059b4:	d0e0      	beq.n	8005978 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059b6:	69ce      	ldr	r6, [r1, #28]
 80059b8:	f016 0608 	ands.w	r6, r6, #8
 80059bc:	d00c      	beq.n	80059d8 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059be:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 80059c0:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059c2:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 80059c4:	f7ff fdf5 	bl	80055b2 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 80059c8:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059ca:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80059ce:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 80059d2:	2001      	movs	r0, #1
}
 80059d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059d8:	69cb      	ldr	r3, [r1, #28]
 80059da:	051b      	lsls	r3, r3, #20
 80059dc:	d5cc      	bpl.n	8005978 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80059e2:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 80059e4:	4620      	mov	r0, r4
 80059e6:	f7ff fde4 	bl	80055b2 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059ea:	2320      	movs	r3, #32
 80059ec:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80059f0:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 80059f4:	2003      	movs	r0, #3
 80059f6:	e7ed      	b.n	80059d4 <UART_WaitOnFlagUntilTimeout+0x6c>

080059f8 <HAL_UART_Transmit>:
{
 80059f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80059fc:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80059fe:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8005a00:	2b20      	cmp	r3, #32
{
 8005a02:	4604      	mov	r4, r0
 8005a04:	460e      	mov	r6, r1
 8005a06:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005a08:	d143      	bne.n	8005a92 <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 8005a0a:	2900      	cmp	r1, #0
 8005a0c:	d043      	beq.n	8005a96 <HAL_UART_Transmit+0x9e>
 8005a0e:	2a00      	cmp	r2, #0
 8005a10:	d041      	beq.n	8005a96 <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a12:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a14:	2500      	movs	r5, #0
 8005a16:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a1a:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8005a1c:	f7fd faba 	bl	8002f94 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a20:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8005a22:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8005a2a:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8005a2c:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a30:	d103      	bne.n	8005a3a <HAL_UART_Transmit+0x42>
 8005a32:	6923      	ldr	r3, [r4, #16]
 8005a34:	b90b      	cbnz	r3, 8005a3a <HAL_UART_Transmit+0x42>
 8005a36:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005a38:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8005a3a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a3e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8005a42:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a44:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 8005a46:	b93a      	cbnz	r2, 8005a58 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a48:	2140      	movs	r1, #64	@ 0x40
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f7ff ff8c 	bl	8005968 <UART_WaitOnFlagUntilTimeout>
 8005a50:	2320      	movs	r3, #32
 8005a52:	b940      	cbnz	r0, 8005a66 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8005a54:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8005a56:	e008      	b.n	8005a6a <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	2180      	movs	r1, #128	@ 0x80
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f7ff ff83 	bl	8005968 <UART_WaitOnFlagUntilTimeout>
 8005a62:	b128      	cbz	r0, 8005a70 <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 8005a64:	2320      	movs	r3, #32
 8005a66:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8005a68:	2003      	movs	r0, #3
}
 8005a6a:	b003      	add	sp, #12
 8005a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a70:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8005a72:	b95e      	cbnz	r6, 8005a8c <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a74:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a7c:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8005a7e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8005a82:	3a01      	subs	r2, #1
 8005a84:	b292      	uxth	r2, r2
 8005a86:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 8005a8a:	e7d6      	b.n	8005a3a <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a8c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005a90:	e7f4      	b.n	8005a7c <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8005a92:	2002      	movs	r0, #2
 8005a94:	e7e9      	b.n	8005a6a <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8005a96:	2001      	movs	r0, #1
 8005a98:	e7e7      	b.n	8005a6a <HAL_UART_Transmit+0x72>

08005a9a <UART_CheckIdleState>:
{
 8005a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a9c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9e:	2600      	movs	r6, #0
 8005aa0:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8005aa4:	f7fd fa76 	bl	8002f94 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8005aae:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ab0:	d51b      	bpl.n	8005aea <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ab2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	4632      	mov	r2, r6
 8005aba:	4603      	mov	r3, r0
 8005abc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f7ff ff51 	bl	8005968 <UART_WaitOnFlagUntilTimeout>
 8005ac6:	b180      	cbz	r0, 8005aea <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ac8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aca:	e852 3f00 	ldrex	r3, [r2]
 8005ace:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	e842 3100 	strex	r1, r3, [r2]
 8005ad6:	2900      	cmp	r1, #0
 8005ad8:	d1f6      	bne.n	8005ac8 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8005ada:	2320      	movs	r3, #32
 8005adc:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8005ade:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8005ae6:	b002      	add	sp, #8
 8005ae8:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	075b      	lsls	r3, r3, #29
 8005af0:	d524      	bpl.n	8005b3c <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005af2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	2200      	movs	r2, #0
 8005afa:	462b      	mov	r3, r5
 8005afc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b00:	4620      	mov	r0, r4
 8005b02:	f7ff ff31 	bl	8005968 <UART_WaitOnFlagUntilTimeout>
 8005b06:	b1c8      	cbz	r0, 8005b3c <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b08:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0a:	e852 3f00 	ldrex	r3, [r2]
 8005b0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005b16:	6822      	ldr	r2, [r4, #0]
 8005b18:	2900      	cmp	r1, #0
 8005b1a:	d1f5      	bne.n	8005b08 <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	f102 0308 	add.w	r3, r2, #8
 8005b20:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b24:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	f102 0008 	add.w	r0, r2, #8
 8005b2c:	e840 3100 	strex	r1, r3, [r0]
 8005b30:	2900      	cmp	r1, #0
 8005b32:	d1f3      	bne.n	8005b1c <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 8005b34:	2320      	movs	r3, #32
 8005b36:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8005b3a:	e7d0      	b.n	8005ade <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 8005b3c:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005b40:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b42:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b46:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b48:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8005b4a:	e7c9      	b.n	8005ae0 <UART_CheckIdleState+0x46>

08005b4c <HAL_UART_Init>:
{
 8005b4c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005b4e:	4604      	mov	r4, r0
 8005b50:	b340      	cbz	r0, 8005ba4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005b52:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8005b54:	b91b      	cbnz	r3, 8005b5e <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8005b56:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8005b5a:	f7fc ffa7 	bl	8002aac <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005b5e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005b60:	2324      	movs	r3, #36	@ 0x24
 8005b62:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8005b64:	6813      	ldr	r3, [r2, #0]
 8005b66:	f023 0301 	bic.w	r3, r3, #1
 8005b6a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b6c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005b6e:	b113      	cbz	r3, 8005b76 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8005b70:	4620      	mov	r0, r4
 8005b72:	f7ff fea5 	bl	80058c0 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b76:	4620      	mov	r0, r4
 8005b78:	f7ff fdc8 	bl	800570c <UART_SetConfig>
 8005b7c:	2801      	cmp	r0, #1
 8005b7e:	d011      	beq.n	8005ba4 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b90:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005b98:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005b9a:	601a      	str	r2, [r3, #0]
}
 8005b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005ba0:	f7ff bf7b 	b.w	8005a9a <UART_CheckIdleState>
}
 8005ba4:	2001      	movs	r0, #1
 8005ba6:	bd10      	pop	{r4, pc}

08005ba8 <UART_Start_Receive_DMA>:
{
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	4613      	mov	r3, r2
 8005bac:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 8005bae:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb2:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 8005bb4:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb6:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bba:	2022      	movs	r0, #34	@ 0x22
 8005bbc:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 8005bc0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005bc2:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 8005bc4:	b1a0      	cbz	r0, 8005bf0 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bc6:	4e1c      	ldr	r6, [pc, #112]	@ (8005c38 <UART_Start_Receive_DMA+0x90>)
 8005bc8:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bca:	4e1c      	ldr	r6, [pc, #112]	@ (8005c3c <UART_Start_Receive_DMA+0x94>)
 8005bcc:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005bce:	4e1c      	ldr	r6, [pc, #112]	@ (8005c40 <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 8005bd0:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005bd4:	460a      	mov	r2, r1
 8005bd6:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 8005bda:	f7fd ffb5 	bl	8003b48 <HAL_DMA_Start_IT>
 8005bde:	b138      	cbz	r0, 8005bf0 <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005be0:	2310      	movs	r3, #16
 8005be2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8005be6:	2320      	movs	r3, #32
 8005be8:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 8005bec:	2001      	movs	r0, #1
}
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005bf0:	6922      	ldr	r2, [r4, #16]
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	b13a      	cbz	r2, 8005c06 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	e843 2100 	strex	r1, r2, [r3]
 8005c02:	2900      	cmp	r1, #0
 8005c04:	d1f7      	bne.n	8005bf6 <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	f103 0208 	add.w	r2, r3, #8
 8005c0a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	f103 0008 	add.w	r0, r3, #8
 8005c16:	e840 2100 	strex	r1, r2, [r0]
 8005c1a:	2900      	cmp	r1, #0
 8005c1c:	d1f3      	bne.n	8005c06 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1e:	f103 0208 	add.w	r2, r3, #8
 8005c22:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	f103 0108 	add.w	r1, r3, #8
 8005c2e:	e841 2000 	strex	r0, r2, [r1]
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d1f3      	bne.n	8005c1e <UART_Start_Receive_DMA+0x76>
 8005c36:	e7da      	b.n	8005bee <UART_Start_Receive_DMA+0x46>
 8005c38:	08005681 	.word	0x08005681
 8005c3c:	08005661 	.word	0x08005661
 8005c40:	08005609 	.word	0x08005609

08005c44 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c44:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8005c48:	2b20      	cmp	r3, #32
{
 8005c4a:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c4c:	d112      	bne.n	8005c74 <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 8005c4e:	b1a1      	cbz	r1, 8005c7a <HAL_UART_Receive_DMA+0x36>
 8005c50:	b19a      	cbz	r2, 8005c7a <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c52:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c54:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c56:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c58:	6863      	ldr	r3, [r4, #4]
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	d507      	bpl.n	8005c6e <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5e:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	e844 3500 	strex	r5, r3, [r4]
 8005c6a:	2d00      	cmp	r5, #0
 8005c6c:	d1f7      	bne.n	8005c5e <HAL_UART_Receive_DMA+0x1a>
}
 8005c6e:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005c70:	f7ff bf9a 	b.w	8005ba8 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8005c74:	2002      	movs	r0, #2
}
 8005c76:	bc30      	pop	{r4, r5}
 8005c78:	4770      	bx	lr
      return HAL_ERROR;
 8005c7a:	2001      	movs	r0, #1
 8005c7c:	e7fb      	b.n	8005c76 <HAL_UART_Receive_DMA+0x32>

08005c7e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005c7e:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005c80:	f001 f81a 	bl	8006cb8 <vTaskStartScheduler>
  
  return osOK;
}
 8005c84:	2000      	movs	r0, #0
 8005c86:	bd08      	pop	{r3, pc}

08005c88 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005c88:	b570      	push	{r4, r5, r6, lr}
 8005c8a:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005c8c:	6946      	ldr	r6, [r0, #20]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c8e:	692a      	ldr	r2, [r5, #16]
 8005c90:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8005c94:	460b      	mov	r3, r1
 8005c96:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c98:	e9d0 1000 	ldrd	r1, r0, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005c9c:	b176      	cbz	r6, 8005cbc <osThreadCreate+0x34>
 8005c9e:	69ad      	ldr	r5, [r5, #24]
 8005ca0:	b165      	cbz	r5, 8005cbc <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8005ca2:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8005ca4:	bf14      	ite	ne
 8005ca6:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005ca8:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005caa:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8005cae:	9400      	str	r4, [sp, #0]
 8005cb0:	f000 ff9c 	bl	8006bec <xTaskCreateStatic>
 8005cb4:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005cb6:	9805      	ldr	r0, [sp, #20]
}
 8005cb8:	b006      	add	sp, #24
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8005cbc:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8005cbe:	bf14      	ite	ne
 8005cc0:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005cc2:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cc4:	ad05      	add	r5, sp, #20
 8005cc6:	e9cd 4500 	strd	r4, r5, [sp]
 8005cca:	b292      	uxth	r2, r2
 8005ccc:	f000 ffc5 	bl	8006c5a <xTaskCreate>
 8005cd0:	2801      	cmp	r0, #1
 8005cd2:	d0f0      	beq.n	8005cb6 <osThreadCreate+0x2e>
      return NULL;
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	e7ef      	b.n	8005cb8 <osThreadCreate+0x30>

08005cd8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005cd8:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005cda:	2801      	cmp	r0, #1
 8005cdc:	bf38      	it	cc
 8005cde:	2001      	movcc	r0, #1
 8005ce0:	f001 f942 	bl	8006f68 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	bd08      	pop	{r3, pc}

08005ce8 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005ce8:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005cea:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8005cec:	b109      	cbz	r1, 8005cf2 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005cee:	f000 bb87 	b.w	8006400 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005cf2:	f000 bb9a 	b.w	800642a <xQueueCreateMutex>

08005cf6 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005cf6:	b507      	push	{r0, r1, r2, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8005cfc:	b1f8      	cbz	r0, 8005d3e <osMutexWait+0x48>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cfe:	f3ef 8205 	mrs	r2, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8005d02:	b1ba      	cbz	r2, 8005d34 <osMutexWait+0x3e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005d04:	aa01      	add	r2, sp, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	f000 fdb1 	bl	800686e <xQueueReceiveFromISR>
 8005d0c:	2801      	cmp	r0, #1
 8005d0e:	d003      	beq.n	8005d18 <osMutexWait+0x22>
      return osErrorOS;
 8005d10:	20ff      	movs	r0, #255	@ 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8005d12:	b003      	add	sp, #12
 8005d14:	f85d fb04 	ldr.w	pc, [sp], #4
	portEND_SWITCHING_ISR(taskWoken);
 8005d18:	9b01      	ldr	r3, [sp, #4]
 8005d1a:	b14b      	cbz	r3, 8005d30 <osMutexWait+0x3a>
 8005d1c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005d20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d24:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	f3bf 8f6f 	isb	sy
  return osOK;
 8005d30:	2000      	movs	r0, #0
 8005d32:	e7ee      	b.n	8005d12 <osMutexWait+0x1c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005d34:	f000 fcde 	bl	80066f4 <xQueueSemaphoreTake>
 8005d38:	2801      	cmp	r0, #1
 8005d3a:	d0f9      	beq.n	8005d30 <osMutexWait+0x3a>
 8005d3c:	e7e8      	b.n	8005d10 <osMutexWait+0x1a>
    return osErrorParameter;
 8005d3e:	2080      	movs	r0, #128	@ 0x80
 8005d40:	e7e7      	b.n	8005d12 <osMutexWait+0x1c>

08005d42 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005d42:	b507      	push	{r0, r1, r2, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8005d44:	2300      	movs	r3, #0
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8005d4c:	b1b3      	cbz	r3, 8005d7c <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005d4e:	a901      	add	r1, sp, #4
 8005d50:	f000 fbe1 	bl	8006516 <xQueueGiveFromISR>
 8005d54:	2801      	cmp	r0, #1
 8005d56:	d003      	beq.n	8005d60 <osMutexRelease+0x1e>
      return osErrorOS;
 8005d58:	20ff      	movs	r0, #255	@ 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8005d5a:	b003      	add	sp, #12
 8005d5c:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 8005d60:	9b01      	ldr	r3, [sp, #4]
 8005d62:	b14b      	cbz	r3, 8005d78 <osMutexRelease+0x36>
 8005d64:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005d68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d6c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8005d78:	2000      	movs	r0, #0
 8005d7a:	e7ee      	b.n	8005d5a <osMutexRelease+0x18>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4619      	mov	r1, r3
 8005d80:	f000 fa8c 	bl	800629c <xQueueGenericSend>
 8005d84:	2801      	cmp	r0, #1
 8005d86:	d1e7      	bne.n	8005d58 <osMutexRelease+0x16>
 8005d88:	e7f6      	b.n	8005d78 <osMutexRelease+0x36>

08005d8a <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8005d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8005d8c:	6847      	ldr	r7, [r0, #4]
{
 8005d8e:	4606      	mov	r6, r0
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8005d90:	2014      	movs	r0, #20
 8005d92:	f001 fcdd 	bl	8007750 <pvPortMalloc>

  
  if (thePool) {
 8005d96:	4604      	mov	r4, r0
 8005d98:	b1b8      	cbz	r0, 8005dca <osPoolCreate+0x40>
    thePool->pool_sz = pool_def->pool_sz;
 8005d9a:	6830      	ldr	r0, [r6, #0]
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8005d9c:	3703      	adds	r7, #3
 8005d9e:	f027 0703 	bic.w	r7, r7, #3
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 8005da2:	2500      	movs	r5, #0
    thePool->item_sz = itemSize;
 8005da4:	e9c4 0702 	strd	r0, r7, [r4, #8]
    thePool->currentIndex = 0;
 8005da8:	6125      	str	r5, [r4, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8005daa:	f001 fcd1 	bl	8007750 <pvPortMalloc>
 8005dae:	6060      	str	r0, [r4, #4]
   
    if (thePool->markers) {
 8005db0:	b140      	cbz	r0, 8005dc4 <osPoolCreate+0x3a>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8005db2:	6830      	ldr	r0, [r6, #0]
 8005db4:	4378      	muls	r0, r7
 8005db6:	f001 fccb 	bl	8007750 <pvPortMalloc>
 8005dba:	6020      	str	r0, [r4, #0]
      
      if (thePool->pool) {
 8005dbc:	b978      	cbnz	r0, 8005dde <osPoolCreate+0x54>
        for (i = 0; i < pool_def->pool_sz; i++) {
          thePool->markers[i] = 0;
        }
      }
      else {
        vPortFree(thePool->markers);
 8005dbe:	6860      	ldr	r0, [r4, #4]
 8005dc0:	f001 fd58 	bl	8007874 <vPortFree>
        vPortFree(thePool);
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f001 fd55 	bl	8007874 <vPortFree>
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8005dca:	2400      	movs	r4, #0
 8005dcc:	e005      	b.n	8005dda <osPoolCreate+0x50>
          thePool->markers[i] = 0;
 8005dce:	6862      	ldr	r2, [r4, #4]
 8005dd0:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	6832      	ldr	r2, [r6, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d8f9      	bhi.n	8005dce <osPoolCreate+0x44>
  return thePool;
 
#else
  return NULL;
#endif
}
 8005dda:	4620      	mov	r0, r4
 8005ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0; i < pool_def->pool_sz; i++) {
 8005dde:	462b      	mov	r3, r5
          thePool->markers[i] = 0;
 8005de0:	4629      	mov	r1, r5
 8005de2:	e7f7      	b.n	8005dd4 <osPoolCreate+0x4a>

08005de4 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8005de4:	b570      	push	{r4, r5, r6, lr}
 8005de6:	4604      	mov	r4, r0
 8005de8:	f3ef 8605 	mrs	r6, IPSR
  int dummy = 0;
  void *p = NULL;
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8005dec:	b186      	cbz	r6, 8005e10 <osPoolAlloc+0x2c>
	__asm volatile
 8005dee:	f3ef 8511 	mrs	r5, BASEPRI
 8005df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e02:	462e      	mov	r6, r5
  }
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8005e04:	68a1      	ldr	r1, [r4, #8]
 8005e06:	2200      	movs	r2, #0
 8005e08:	4291      	cmp	r1, r2
 8005e0a:	d104      	bne.n	8005e16 <osPoolAlloc+0x32>
  void *p = NULL;
 8005e0c:	2500      	movs	r5, #0
 8005e0e:	e012      	b.n	8005e36 <osPoolAlloc+0x52>
    vPortEnterCritical();
 8005e10:	f001 fb38 	bl	8007484 <vPortEnterCritical>
 8005e14:	e7f6      	b.n	8005e04 <osPoolAlloc+0x20>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8005e16:	6923      	ldr	r3, [r4, #16]
 8005e18:	4413      	add	r3, r2
 8005e1a:	fbb3 f0f1 	udiv	r0, r3, r1
 8005e1e:	fb01 3310 	mls	r3, r1, r0, r3
    
    if (pool_id->markers[index] == 0) {
 8005e22:	6860      	ldr	r0, [r4, #4]
 8005e24:	5cc5      	ldrb	r5, [r0, r3]
 8005e26:	b96d      	cbnz	r5, 8005e44 <osPoolAlloc+0x60>
      pool_id->markers[index] = 1;
 8005e28:	2201      	movs	r2, #1
 8005e2a:	54c2      	strb	r2, [r0, r3]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8005e2c:	68e2      	ldr	r2, [r4, #12]
 8005e2e:	6825      	ldr	r5, [r4, #0]
      pool_id->currentIndex = index;
 8005e30:	6123      	str	r3, [r4, #16]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8005e32:	fb02 5503 	mla	r5, r2, r3, r5
 8005e36:	f3ef 8305 	mrs	r3, IPSR
      break;
    }
  }
  
  if (inHandlerMode()) {
 8005e3a:	b12b      	cbz	r3, 8005e48 <osPoolAlloc+0x64>
	__asm volatile
 8005e3c:	f386 8811 	msr	BASEPRI, r6
  else {
    vPortExitCritical();
  }
  
  return p;
}
 8005e40:	4628      	mov	r0, r5
 8005e42:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0; i < pool_id->pool_sz; i++) {
 8005e44:	3201      	adds	r2, #1
 8005e46:	e7df      	b.n	8005e08 <osPoolAlloc+0x24>
    vPortExitCritical();
 8005e48:	f001 fb3c 	bl	80074c4 <vPortExitCritical>
  return p;
 8005e4c:	e7f8      	b.n	8005e40 <osPoolAlloc+0x5c>

08005e4e <osPoolFree>:
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
 8005e4e:	4603      	mov	r3, r0
 8005e50:	b180      	cbz	r0, 8005e74 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block == NULL) {
 8005e52:	b179      	cbz	r1, 8005e74 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block < pool_id->pool) {
 8005e54:	6802      	ldr	r2, [r0, #0]
 8005e56:	428a      	cmp	r2, r1
 8005e58:	d80c      	bhi.n	8005e74 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
  if (index % pool_id->item_sz) {
 8005e5a:	68c0      	ldr	r0, [r0, #12]
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8005e5c:	1a89      	subs	r1, r1, r2
  if (index % pool_id->item_sz) {
 8005e5e:	fbb1 f2f0 	udiv	r2, r1, r0
 8005e62:	fb00 1012 	mls	r0, r0, r2, r1
 8005e66:	b928      	cbnz	r0, 8005e74 <osPoolFree+0x26>
    return osErrorParameter;
  }
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
 8005e68:	6899      	ldr	r1, [r3, #8]
 8005e6a:	4291      	cmp	r1, r2
 8005e6c:	d902      	bls.n	8005e74 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	5498      	strb	r0, [r3, r2]
  
  return osOK;
 8005e72:	4770      	bx	lr
    return osErrorParameter;
 8005e74:	2080      	movs	r0, #128	@ 0x80
}
 8005e76:	4770      	bx	lr

08005e78 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8005e78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8005e7a:	6803      	ldr	r3, [r0, #0]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8005e7c:	6885      	ldr	r5, [r0, #8]
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8005e7e:	9301      	str	r3, [sp, #4]
{
 8005e80:	4604      	mov	r4, r0
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8005e82:	6843      	ldr	r3, [r0, #4]
 8005e84:	9302      	str	r3, [sp, #8]
 8005e86:	2600      	movs	r6, #0
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8005e88:	200c      	movs	r0, #12
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8005e8a:	9603      	str	r6, [sp, #12]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8005e8c:	f001 fc60 	bl	8007750 <pvPortMalloc>

  if (*(queue_def->cb) == NULL) {
 8005e90:	68a3      	ldr	r3, [r4, #8]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8005e92:	6028      	str	r0, [r5, #0]
  if (*(queue_def->cb) == NULL) {
 8005e94:	681d      	ldr	r5, [r3, #0]
 8005e96:	b16d      	cbz	r5, 8005eb4 <osMailCreate+0x3c>
    return NULL;
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8005e98:	602c      	str	r4, [r5, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8005e9a:	6820      	ldr	r0, [r4, #0]
 8005e9c:	4632      	mov	r2, r6
 8005e9e:	2104      	movs	r1, #4
 8005ea0:	f000 f9d8 	bl	8006254 <xQueueGenericCreate>


  if ((*(queue_def->cb))->handle == NULL) {
 8005ea4:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8005ea6:	6068      	str	r0, [r5, #4]
  if ((*(queue_def->cb))->handle == NULL) {
 8005ea8:	681d      	ldr	r5, [r3, #0]
 8005eaa:	686b      	ldr	r3, [r5, #4]
 8005eac:	b92b      	cbnz	r3, 8005eba <osMailCreate+0x42>
    vPortFree(*(queue_def->cb));
 8005eae:	4628      	mov	r0, r5
 8005eb0:	f001 fce0 	bl	8007874 <vPortFree>
    return NULL;
 8005eb4:	2000      	movs	r0, #0
  
  return *(queue_def->cb);
#else
  return NULL;
#endif
}
 8005eb6:	b004      	add	sp, #16
 8005eb8:	bd70      	pop	{r4, r5, r6, pc}
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8005eba:	a801      	add	r0, sp, #4
 8005ebc:	f7ff ff65 	bl	8005d8a <osPoolCreate>
  if ((*(queue_def->cb))->pool == NULL) {
 8005ec0:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8005ec2:	60a8      	str	r0, [r5, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	6883      	ldr	r3, [r0, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1f4      	bne.n	8005eb6 <osMailCreate+0x3e>
 8005ecc:	e7f0      	b.n	8005eb0 <osMailCreate+0x38>

08005ece <osMailAlloc>:
{
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8005ece:	b110      	cbz	r0, 8005ed6 <osMailAlloc+0x8>
    return NULL;
  }
  
  p = osPoolAlloc(queue_id->pool);
 8005ed0:	6880      	ldr	r0, [r0, #8]
 8005ed2:	f7ff bf87 	b.w	8005de4 <osPoolAlloc>
  
  return p;
}
 8005ed6:	4770      	bx	lr

08005ed8 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8005ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005eda:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8005edc:	b328      	cbz	r0, 8005f2a <osMailPut+0x52>
    return osErrorParameter;
  }
  
  taskWoken = pdFALSE;
 8005ede:	2200      	movs	r2, #0
 8005ee0:	9203      	str	r2, [sp, #12]
 8005ee2:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8005ee6:	6840      	ldr	r0, [r0, #4]
  if (inHandlerMode()) {
 8005ee8:	b1c3      	cbz	r3, 8005f1c <osMailPut+0x44>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8005eea:	4613      	mov	r3, r2
 8005eec:	a901      	add	r1, sp, #4
 8005eee:	aa03      	add	r2, sp, #12
 8005ef0:	f000 fab5 	bl	800645e <xQueueGenericSendFromISR>
 8005ef4:	2801      	cmp	r0, #1
 8005ef6:	d003      	beq.n	8005f00 <osMailPut+0x28>
      return osErrorOS;
 8005ef8:	20ff      	movs	r0, #255	@ 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8005efa:	b005      	add	sp, #20
 8005efc:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 8005f00:	9b03      	ldr	r3, [sp, #12]
 8005f02:	b14b      	cbz	r3, 8005f18 <osMailPut+0x40>
 8005f04:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f0c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	f3bf 8f6f 	isb	sy
  return osOK;
 8005f18:	2000      	movs	r0, #0
 8005f1a:	e7ee      	b.n	8005efa <osMailPut+0x22>
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	a901      	add	r1, sp, #4
 8005f20:	f000 f9bc 	bl	800629c <xQueueGenericSend>
 8005f24:	2801      	cmp	r0, #1
 8005f26:	d0f7      	beq.n	8005f18 <osMailPut+0x40>
 8005f28:	e7e6      	b.n	8005ef8 <osMailPut+0x20>
    return osErrorParameter;
 8005f2a:	2080      	movs	r0, #128	@ 0x80
 8005f2c:	e7e5      	b.n	8005efa <osMailPut+0x22>

08005f2e <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8005f2e:	b530      	push	{r4, r5, lr}
 8005f30:	b085      	sub	sp, #20
 8005f32:	4605      	mov	r5, r0
 8005f34:	4614      	mov	r4, r2
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8005f36:	9103      	str	r1, [sp, #12]
  
  if (queue_id == NULL) {
 8005f38:	b911      	cbnz	r1, 8005f40 <osMailGet+0x12>
    event.status = osErrorParameter;
 8005f3a:	2380      	movs	r3, #128	@ 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMail;
 8005f3c:	9301      	str	r3, [sp, #4]
 8005f3e:	e01a      	b.n	8005f76 <osMailGet+0x48>
  taskWoken = pdFALSE;
 8005f40:	2300      	movs	r3, #0
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	f3ef 8305 	mrs	r3, IPSR
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8005f48:	6848      	ldr	r0, [r1, #4]
  if (inHandlerMode()) {
 8005f4a:	b1e3      	cbz	r3, 8005f86 <osMailGet+0x58>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8005f4c:	466a      	mov	r2, sp
 8005f4e:	a902      	add	r1, sp, #8
 8005f50:	f000 fc8d 	bl	800686e <xQueueReceiveFromISR>
 8005f54:	1e43      	subs	r3, r0, #1
 8005f56:	4258      	negs	r0, r3
 8005f58:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 8005f5a:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8005f5c:	0140      	lsls	r0, r0, #5
 8005f5e:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8005f60:	b14b      	cbz	r3, 8005f76 <osMailGet+0x48>
 8005f62:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	f3bf 8f6f 	isb	sy
    return event;
 8005f76:	ab04      	add	r3, sp, #16
 8005f78:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8005f7c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 8005f80:	4628      	mov	r0, r5
 8005f82:	b005      	add	sp, #20
 8005f84:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8005f86:	a902      	add	r1, sp, #8
 8005f88:	f000 fb16 	bl	80065b8 <xQueueReceive>
 8005f8c:	2801      	cmp	r0, #1
 8005f8e:	d101      	bne.n	8005f94 <osMailGet+0x66>
      event.status = osEventMail;
 8005f90:	2320      	movs	r3, #32
 8005f92:	e7d3      	b.n	8005f3c <osMailGet+0xe>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005f94:	3c00      	subs	r4, #0
 8005f96:	bf18      	it	ne
 8005f98:	2401      	movne	r4, #1
 8005f9a:	01a4      	lsls	r4, r4, #6
 8005f9c:	9401      	str	r4, [sp, #4]
  return event;
 8005f9e:	e7ea      	b.n	8005f76 <osMailGet+0x48>

08005fa0 <osMailFree>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
  if (queue_id == NULL) {
 8005fa0:	b110      	cbz	r0, 8005fa8 <osMailFree+0x8>
    return osErrorParameter;
  }
  
  return osPoolFree(queue_id->pool, mail);
 8005fa2:	6880      	ldr	r0, [r0, #8]
 8005fa4:	f7ff bf53 	b.w	8005e4e <osPoolFree>
}
 8005fa8:	2080      	movs	r0, #128	@ 0x80
 8005faa:	4770      	bx	lr

08005fac <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fac:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fb4:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fb8:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fba:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fc0:	4770      	bx	lr

08005fc2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fc6:	4770      	bx	lr

08005fc8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fc8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fca:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fd0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fd2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005fd4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005fd6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005fd8:	3301      	adds	r3, #1
 8005fda:	6003      	str	r3, [r0, #0]
}
 8005fdc:	4770      	bx	lr

08005fde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fde:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fe0:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fe2:	1c63      	adds	r3, r4, #1
 8005fe4:	d10a      	bne.n	8005ffc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fe6:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fec:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fee:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ff0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005ff2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005ff4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	6003      	str	r3, [r0, #0]
}
 8005ffa:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ffc:	f100 0208 	add.w	r2, r0, #8
 8006000:	4613      	mov	r3, r2
 8006002:	6852      	ldr	r2, [r2, #4]
 8006004:	6815      	ldr	r5, [r2, #0]
 8006006:	42a5      	cmp	r5, r4
 8006008:	d9fa      	bls.n	8006000 <vListInsert+0x22>
 800600a:	e7ed      	b.n	8005fe8 <vListInsert+0xa>

0800600c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800600c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006010:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006012:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006014:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006016:	6859      	ldr	r1, [r3, #4]
 8006018:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800601a:	bf08      	it	eq
 800601c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800601e:	2200      	movs	r2, #0
 8006020:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	3a01      	subs	r2, #1
 8006026:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006028:	6818      	ldr	r0, [r3, #0]
}
 800602a:	4770      	bx	lr

0800602c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800602c:	b510      	push	{r4, lr}
 800602e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006030:	f001 fa28 	bl	8007484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006034:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006036:	f001 fa45 	bl	80074c4 <vPortExitCritical>

	return xReturn;
}
 800603a:	fab4 f084 	clz	r0, r4
 800603e:	0940      	lsrs	r0, r0, #5
 8006040:	bd10      	pop	{r4, pc}

08006042 <prvCopyDataToQueue>:
{
 8006042:	b570      	push	{r4, r5, r6, lr}
 8006044:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006046:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006048:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 800604a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800604c:	b942      	cbnz	r2, 8006060 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800604e:	6806      	ldr	r6, [r0, #0]
 8006050:	b99e      	cbnz	r6, 800607a <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006052:	6840      	ldr	r0, [r0, #4]
 8006054:	f001 f8f6 	bl	8007244 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8006058:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800605a:	3501      	adds	r5, #1
 800605c:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800605e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8006060:	b96e      	cbnz	r6, 800607e <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006062:	6880      	ldr	r0, [r0, #8]
 8006064:	f004 fb44 	bl	800a6f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006068:	68a3      	ldr	r3, [r4, #8]
 800606a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800606c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800606e:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006070:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006072:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006074:	bf24      	itt	cs
 8006076:	6823      	ldrcs	r3, [r4, #0]
 8006078:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800607a:	2000      	movs	r0, #0
 800607c:	e7ed      	b.n	800605a <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800607e:	68c0      	ldr	r0, [r0, #12]
 8006080:	f004 fb36 	bl	800a6f0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006084:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006086:	68e3      	ldr	r3, [r4, #12]
 8006088:	4251      	negs	r1, r2
 800608a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800608c:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800608e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006090:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006092:	bf3e      	ittt	cc
 8006094:	6863      	ldrcc	r3, [r4, #4]
 8006096:	185b      	addcc	r3, r3, r1
 8006098:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800609a:	2e02      	cmp	r6, #2
 800609c:	d1ed      	bne.n	800607a <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800609e:	b10d      	cbz	r5, 80060a4 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80060a0:	3d01      	subs	r5, #1
 80060a2:	e7ea      	b.n	800607a <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80060a4:	4628      	mov	r0, r5
 80060a6:	e7d8      	b.n	800605a <prvCopyDataToQueue+0x18>

080060a8 <prvCopyDataFromQueue>:
{
 80060a8:	4603      	mov	r3, r0
 80060aa:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80060ae:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060b0:	b16a      	cbz	r2, 80060ce <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80060b2:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060b4:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80060b6:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060b8:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80060ba:	bf28      	it	cs
 80060bc:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80060be:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80060c0:	bf28      	it	cs
 80060c2:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80060c4:	68d9      	ldr	r1, [r3, #12]
}
 80060c6:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80060ca:	f004 bb11 	b.w	800a6f0 <memcpy>
}
 80060ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <prvUnlockQueue>:
{
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80060d8:	f001 f9d4 	bl	8007484 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80060dc:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060e0:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80060e4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060e6:	2d00      	cmp	r5, #0
 80060e8:	dc14      	bgt.n	8006114 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80060ea:	23ff      	movs	r3, #255	@ 0xff
 80060ec:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80060f0:	f001 f9e8 	bl	80074c4 <vPortExitCritical>
	taskENTER_CRITICAL();
 80060f4:	f001 f9c6 	bl	8007484 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80060f8:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060fc:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8006100:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006102:	2d00      	cmp	r5, #0
 8006104:	dc12      	bgt.n	800612c <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8006106:	23ff      	movs	r3, #255	@ 0xff
 8006108:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800610c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006110:	f001 b9d8 	b.w	80074c4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006114:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0e7      	beq.n	80060ea <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800611a:	4630      	mov	r0, r6
 800611c:	f000 ffa2 	bl	8007064 <xTaskRemoveFromEventList>
 8006120:	b108      	cbz	r0, 8006126 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8006122:	f001 f829 	bl	8007178 <vTaskMissedYield>
			--cTxLock;
 8006126:	3d01      	subs	r5, #1
 8006128:	b26d      	sxtb	r5, r5
 800612a:	e7dc      	b.n	80060e6 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800612c:	6923      	ldr	r3, [r4, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0e9      	beq.n	8006106 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006132:	4630      	mov	r0, r6
 8006134:	f000 ff96 	bl	8007064 <xTaskRemoveFromEventList>
 8006138:	b108      	cbz	r0, 800613e <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800613a:	f001 f81d 	bl	8007178 <vTaskMissedYield>
				--cRxLock;
 800613e:	3d01      	subs	r5, #1
 8006140:	b26d      	sxtb	r5, r5
 8006142:	e7de      	b.n	8006102 <prvUnlockQueue+0x2e>

08006144 <xQueueGenericReset>:
{
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006148:	4604      	mov	r4, r0
 800614a:	b940      	cbnz	r0, 800615e <xQueueGenericReset+0x1a>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	e7fe      	b.n	800615c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800615e:	f001 f991 	bl	8007484 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006162:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8006166:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006168:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800616a:	434b      	muls	r3, r1
 800616c:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800616e:	1a5b      	subs	r3, r3, r1
 8006170:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006172:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8006174:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006176:	2000      	movs	r0, #0
 8006178:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800617a:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800617c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006180:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8006184:	b9a5      	cbnz	r5, 80061b0 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006186:	6923      	ldr	r3, [r4, #16]
 8006188:	b173      	cbz	r3, 80061a8 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800618a:	f104 0010 	add.w	r0, r4, #16
 800618e:	f000 ff69 	bl	8007064 <xTaskRemoveFromEventList>
 8006192:	b148      	cbz	r0, 80061a8 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8006194:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800619c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80061a8:	f001 f98c 	bl	80074c4 <vPortExitCritical>
}
 80061ac:	2001      	movs	r0, #1
 80061ae:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061b0:	f104 0010 	add.w	r0, r4, #16
 80061b4:	f7ff fefa 	bl	8005fac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061b8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80061bc:	f7ff fef6 	bl	8005fac <vListInitialise>
 80061c0:	e7f2      	b.n	80061a8 <xQueueGenericReset+0x64>

080061c2 <xQueueGenericCreateStatic>:
	{
 80061c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061c4:	460d      	mov	r5, r1
 80061c6:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061c8:	b940      	cbnz	r0, 80061dc <xQueueGenericCreateStatic+0x1a>
 80061ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	e7fe      	b.n	80061da <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 80061dc:	b943      	cbnz	r3, 80061f0 <xQueueGenericCreateStatic+0x2e>
 80061de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	e7fe      	b.n	80061ee <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80061f0:	b14a      	cbz	r2, 8006206 <xQueueGenericCreateStatic+0x44>
 80061f2:	b991      	cbnz	r1, 800621a <xQueueGenericCreateStatic+0x58>
 80061f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	e7fe      	b.n	8006204 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006206:	b141      	cbz	r1, 800621a <xQueueGenericCreateStatic+0x58>
 8006208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	e7fe      	b.n	8006218 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800621a:	2348      	movs	r3, #72	@ 0x48
 800621c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800621e:	9b01      	ldr	r3, [sp, #4]
 8006220:	2b48      	cmp	r3, #72	@ 0x48
 8006222:	d008      	beq.n	8006236 <xQueueGenericCreateStatic+0x74>
 8006224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	e7fe      	b.n	8006234 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006236:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006238:	2d00      	cmp	r5, #0
 800623a:	bf08      	it	eq
 800623c:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 800623e:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006242:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006246:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006248:	4620      	mov	r0, r4
 800624a:	f7ff ff7b 	bl	8006144 <xQueueGenericReset>
	}
 800624e:	4620      	mov	r0, r4
 8006250:	b003      	add	sp, #12
 8006252:	bd30      	pop	{r4, r5, pc}

08006254 <xQueueGenericCreate>:
	{
 8006254:	b570      	push	{r4, r5, r6, lr}
 8006256:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006258:	4606      	mov	r6, r0
 800625a:	b940      	cbnz	r0, 800626e <xQueueGenericCreate+0x1a>
 800625c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	e7fe      	b.n	800626c <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800626e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006270:	3048      	adds	r0, #72	@ 0x48
 8006272:	f001 fa6d 	bl	8007750 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006276:	4604      	mov	r4, r0
 8006278:	b160      	cbz	r0, 8006294 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800627a:	2300      	movs	r3, #0
 800627c:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006280:	b155      	cbz	r5, 8006298 <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006282:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	pxNewQueue->uxItemSize = uxItemSize;
 8006286:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 800628a:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800628c:	2101      	movs	r1, #1
 800628e:	4620      	mov	r0, r4
 8006290:	f7ff ff58 	bl	8006144 <xQueueGenericReset>
	}
 8006294:	4620      	mov	r0, r4
 8006296:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006298:	4603      	mov	r3, r0
 800629a:	e7f4      	b.n	8006286 <xQueueGenericCreate+0x32>

0800629c <xQueueGenericSend>:
{
 800629c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80062a0:	460f      	mov	r7, r1
 80062a2:	9201      	str	r2, [sp, #4]
 80062a4:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80062a6:	4604      	mov	r4, r0
 80062a8:	b940      	cbnz	r0, 80062bc <xQueueGenericSend+0x20>
 80062aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	e7fe      	b.n	80062ba <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062bc:	b951      	cbnz	r1, 80062d4 <xQueueGenericSend+0x38>
 80062be:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80062c0:	b143      	cbz	r3, 80062d4 <xQueueGenericSend+0x38>
 80062c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	e7fe      	b.n	80062d2 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062d4:	2e02      	cmp	r6, #2
 80062d6:	d10b      	bne.n	80062f0 <xQueueGenericSend+0x54>
 80062d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d008      	beq.n	80062f0 <xQueueGenericSend+0x54>
 80062de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	e7fe      	b.n	80062ee <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062f0:	f000 ff48 	bl	8007184 <xTaskGetSchedulerState>
 80062f4:	4605      	mov	r5, r0
 80062f6:	b330      	cbz	r0, 8006346 <xQueueGenericSend+0xaa>
 80062f8:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80062fa:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80062fe:	f001 f8c1 	bl	8007484 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006302:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006304:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006306:	429a      	cmp	r2, r3
 8006308:	d301      	bcc.n	800630e <xQueueGenericSend+0x72>
 800630a:	2e02      	cmp	r6, #2
 800630c:	d127      	bne.n	800635e <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800630e:	4632      	mov	r2, r6
 8006310:	4639      	mov	r1, r7
 8006312:	4620      	mov	r0, r4
 8006314:	f7ff fe95 	bl	8006042 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006318:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800631a:	b11b      	cbz	r3, 8006324 <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800631c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006320:	f000 fea0 	bl	8007064 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8006324:	b148      	cbz	r0, 800633a <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8006326:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800632a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800632e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800633a:	f001 f8c3 	bl	80074c4 <vPortExitCritical>
				return pdPASS;
 800633e:	2001      	movs	r0, #1
}
 8006340:	b004      	add	sp, #16
 8006342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006346:	9b01      	ldr	r3, [sp, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0d6      	beq.n	80062fa <xQueueGenericSend+0x5e>
 800634c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	e7fe      	b.n	800635c <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800635e:	9b01      	ldr	r3, [sp, #4]
 8006360:	b91b      	cbnz	r3, 800636a <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8006362:	f001 f8af 	bl	80074c4 <vPortExitCritical>
					return errQUEUE_FULL;
 8006366:	2000      	movs	r0, #0
 8006368:	e7ea      	b.n	8006340 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800636a:	b915      	cbnz	r5, 8006372 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800636c:	a802      	add	r0, sp, #8
 800636e:	f000 febb 	bl	80070e8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006372:	f001 f8a7 	bl	80074c4 <vPortExitCritical>
		vTaskSuspendAll();
 8006376:	f000 fce1 	bl	8006d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800637a:	f001 f883 	bl	8007484 <vPortEnterCritical>
 800637e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006382:	2bff      	cmp	r3, #255	@ 0xff
 8006384:	bf08      	it	eq
 8006386:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 800638a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800638e:	2bff      	cmp	r3, #255	@ 0xff
 8006390:	bf08      	it	eq
 8006392:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8006396:	f001 f895 	bl	80074c4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800639a:	a901      	add	r1, sp, #4
 800639c:	a802      	add	r0, sp, #8
 800639e:	f000 feaf 	bl	8007100 <xTaskCheckForTimeOut>
 80063a2:	bb38      	cbnz	r0, 80063f4 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063a4:	f001 f86e 	bl	8007484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063a8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80063aa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d10e      	bne.n	80063ce <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80063b0:	f001 f888 	bl	80074c4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063b4:	9901      	ldr	r1, [sp, #4]
 80063b6:	f104 0010 	add.w	r0, r4, #16
 80063ba:	f000 fe39 	bl	8007030 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063be:	4620      	mov	r0, r4
 80063c0:	f7ff fe88 	bl	80060d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063c4:	f000 fd5a 	bl	8006e7c <xTaskResumeAll>
 80063c8:	b148      	cbz	r0, 80063de <xQueueGenericSend+0x142>
 80063ca:	2501      	movs	r5, #1
 80063cc:	e797      	b.n	80062fe <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 80063ce:	f001 f879 	bl	80074c4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80063d2:	4620      	mov	r0, r4
 80063d4:	f7ff fe7e 	bl	80060d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063d8:	f000 fd50 	bl	8006e7c <xTaskResumeAll>
 80063dc:	e7f5      	b.n	80063ca <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 80063de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80063e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	e7ea      	b.n	80063ca <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 80063f4:	4620      	mov	r0, r4
 80063f6:	f7ff fe6d 	bl	80060d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063fa:	f000 fd3f 	bl	8006e7c <xTaskResumeAll>
			return errQUEUE_FULL;
 80063fe:	e7b2      	b.n	8006366 <xQueueGenericSend+0xca>

08006400 <xQueueCreateMutexStatic>:
	{
 8006400:	b513      	push	{r0, r1, r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006402:	2200      	movs	r2, #0
	{
 8006404:	460b      	mov	r3, r1
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006406:	9000      	str	r0, [sp, #0]
 8006408:	4611      	mov	r1, r2
 800640a:	2001      	movs	r0, #1
 800640c:	f7ff fed9 	bl	80061c2 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8006410:	4604      	mov	r4, r0
 8006412:	b138      	cbz	r0, 8006424 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->pxMutexHolder = NULL;
 8006414:	2300      	movs	r3, #0
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006416:	e9c0 3300 	strd	r3, r3, [r0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800641a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800641c:	461a      	mov	r2, r3
 800641e:	4619      	mov	r1, r3
 8006420:	f7ff ff3c 	bl	800629c <xQueueGenericSend>
	}
 8006424:	4620      	mov	r0, r4
 8006426:	b002      	add	sp, #8
 8006428:	bd10      	pop	{r4, pc}

0800642a <xQueueCreateMutex>:
	{
 800642a:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800642c:	2048      	movs	r0, #72	@ 0x48
 800642e:	f001 f98f 	bl	8007750 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006432:	4604      	mov	r4, r0
 8006434:	b188      	cbz	r0, 800645a <xQueueCreateMutex+0x30>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006436:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8006438:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 800643a:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800643e:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006442:	6000      	str	r0, [r0, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006444:	f7ff fe7e 	bl	8006144 <xQueueGenericReset>
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006448:	e9c4 5500 	strd	r5, r5, [r4]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800644c:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800644e:	462b      	mov	r3, r5
 8006450:	462a      	mov	r2, r5
 8006452:	4629      	mov	r1, r5
 8006454:	4620      	mov	r0, r4
 8006456:	f7ff ff21 	bl	800629c <xQueueGenericSend>
	}
 800645a:	4620      	mov	r0, r4
 800645c:	bd38      	pop	{r3, r4, r5, pc}

0800645e <xQueueGenericSendFromISR>:
{
 800645e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006462:	4689      	mov	r9, r1
 8006464:	4617      	mov	r7, r2
 8006466:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8006468:	4604      	mov	r4, r0
 800646a:	b940      	cbnz	r0, 800647e <xQueueGenericSendFromISR+0x20>
 800646c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	e7fe      	b.n	800647c <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800647e:	b951      	cbnz	r1, 8006496 <xQueueGenericSendFromISR+0x38>
 8006480:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006482:	b143      	cbz	r3, 8006496 <xQueueGenericSendFromISR+0x38>
 8006484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	e7fe      	b.n	8006494 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006496:	2e02      	cmp	r6, #2
 8006498:	d10b      	bne.n	80064b2 <xQueueGenericSendFromISR+0x54>
 800649a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800649c:	2b01      	cmp	r3, #1
 800649e:	d008      	beq.n	80064b2 <xQueueGenericSendFromISR+0x54>
 80064a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	e7fe      	b.n	80064b0 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064b2:	f001 f8f9 	bl	80076a8 <vPortValidateInterruptPriority>
	__asm volatile
 80064b6:	f3ef 8811 	mrs	r8, BASEPRI
 80064ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064ca:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80064cc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d301      	bcc.n	80064d6 <xQueueGenericSendFromISR+0x78>
 80064d2:	2e02      	cmp	r6, #2
 80064d4:	d11d      	bne.n	8006512 <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80064d6:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064da:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 80064dc:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064de:	4649      	mov	r1, r9
 80064e0:	4620      	mov	r0, r4
 80064e2:	f7ff fdae 	bl	8006042 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80064e6:	1c6b      	adds	r3, r5, #1
 80064e8:	d10e      	bne.n	8006508 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80064ec:	b13b      	cbz	r3, 80064fe <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064ee:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80064f2:	f000 fdb7 	bl	8007064 <xTaskRemoveFromEventList>
 80064f6:	b110      	cbz	r0, 80064fe <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 80064f8:	b10f      	cbz	r7, 80064fe <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064fa:	2301      	movs	r3, #1
 80064fc:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 80064fe:	2001      	movs	r0, #1
	__asm volatile
 8006500:	f388 8811 	msr	BASEPRI, r8
}
 8006504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006508:	3501      	adds	r5, #1
 800650a:	b26d      	sxtb	r5, r5
 800650c:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8006510:	e7f5      	b.n	80064fe <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8006512:	2000      	movs	r0, #0
 8006514:	e7f4      	b.n	8006500 <xQueueGenericSendFromISR+0xa2>

08006516 <xQueueGiveFromISR>:
{
 8006516:	b570      	push	{r4, r5, r6, lr}
 8006518:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800651a:	4604      	mov	r4, r0
 800651c:	b940      	cbnz	r0, 8006530 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	e7fe      	b.n	800652e <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006530:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006532:	b143      	cbz	r3, 8006546 <xQueueGiveFromISR+0x30>
 8006534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	e7fe      	b.n	8006544 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006546:	6803      	ldr	r3, [r0, #0]
 8006548:	b953      	cbnz	r3, 8006560 <xQueueGiveFromISR+0x4a>
 800654a:	6843      	ldr	r3, [r0, #4]
 800654c:	b143      	cbz	r3, 8006560 <xQueueGiveFromISR+0x4a>
 800654e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	e7fe      	b.n	800655e <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006560:	f001 f8a2 	bl	80076a8 <vPortValidateInterruptPriority>
	__asm volatile
 8006564:	f3ef 8611 	mrs	r6, BASEPRI
 8006568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006578:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800657a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800657c:	4293      	cmp	r3, r2
 800657e:	d919      	bls.n	80065b4 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006580:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006584:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8006586:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8006588:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800658a:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800658c:	d10d      	bne.n	80065aa <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800658e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006590:	b13b      	cbz	r3, 80065a2 <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006592:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006596:	f000 fd65 	bl	8007064 <xTaskRemoveFromEventList>
 800659a:	b110      	cbz	r0, 80065a2 <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800659c:	b10d      	cbz	r5, 80065a2 <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800659e:	2301      	movs	r3, #1
 80065a0:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 80065a2:	2001      	movs	r0, #1
	__asm volatile
 80065a4:	f386 8811 	msr	BASEPRI, r6
}
 80065a8:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80065aa:	3301      	adds	r3, #1
 80065ac:	b25b      	sxtb	r3, r3
 80065ae:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80065b2:	e7f6      	b.n	80065a2 <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 80065b4:	2000      	movs	r0, #0
 80065b6:	e7f5      	b.n	80065a4 <xQueueGiveFromISR+0x8e>

080065b8 <xQueueReceive>:
{
 80065b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80065bc:	460e      	mov	r6, r1
 80065be:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80065c0:	4604      	mov	r4, r0
 80065c2:	b940      	cbnz	r0, 80065d6 <xQueueReceive+0x1e>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	e7fe      	b.n	80065d4 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065d6:	b951      	cbnz	r1, 80065ee <xQueueReceive+0x36>
 80065d8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80065da:	b143      	cbz	r3, 80065ee <xQueueReceive+0x36>
 80065dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	e7fe      	b.n	80065ec <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065ee:	f000 fdc9 	bl	8007184 <xTaskGetSchedulerState>
 80065f2:	4605      	mov	r5, r0
 80065f4:	b318      	cbz	r0, 800663e <xQueueReceive+0x86>
 80065f6:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80065f8:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80065fc:	f000 ff42 	bl	8007484 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006600:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006602:	b347      	cbz	r7, 8006656 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006604:	4631      	mov	r1, r6
 8006606:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006608:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800660a:	f7ff fd4d 	bl	80060a8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800660e:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006610:	6923      	ldr	r3, [r4, #16]
 8006612:	b173      	cbz	r3, 8006632 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006614:	f104 0010 	add.w	r0, r4, #16
 8006618:	f000 fd24 	bl	8007064 <xTaskRemoveFromEventList>
 800661c:	b148      	cbz	r0, 8006632 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800661e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006626:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006632:	f000 ff47 	bl	80074c4 <vPortExitCritical>
				return pdPASS;
 8006636:	2001      	movs	r0, #1
}
 8006638:	b004      	add	sp, #16
 800663a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800663e:	9b01      	ldr	r3, [sp, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0d9      	beq.n	80065f8 <xQueueReceive+0x40>
 8006644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	e7fe      	b.n	8006654 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006656:	9b01      	ldr	r3, [sp, #4]
 8006658:	b91b      	cbnz	r3, 8006662 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800665a:	f000 ff33 	bl	80074c4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800665e:	2000      	movs	r0, #0
 8006660:	e7ea      	b.n	8006638 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8006662:	b915      	cbnz	r5, 800666a <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006664:	a802      	add	r0, sp, #8
 8006666:	f000 fd3f 	bl	80070e8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800666a:	f000 ff2b 	bl	80074c4 <vPortExitCritical>
		vTaskSuspendAll();
 800666e:	f000 fb65 	bl	8006d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006672:	f000 ff07 	bl	8007484 <vPortEnterCritical>
 8006676:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800667a:	2bff      	cmp	r3, #255	@ 0xff
 800667c:	bf08      	it	eq
 800667e:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8006682:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006686:	2bff      	cmp	r3, #255	@ 0xff
 8006688:	bf08      	it	eq
 800668a:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 800668e:	f000 ff19 	bl	80074c4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006692:	a901      	add	r1, sp, #4
 8006694:	a802      	add	r0, sp, #8
 8006696:	f000 fd33 	bl	8007100 <xTaskCheckForTimeOut>
 800669a:	bb00      	cbnz	r0, 80066de <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800669c:	4620      	mov	r0, r4
 800669e:	f7ff fcc5 	bl	800602c <prvIsQueueEmpty>
 80066a2:	b1b0      	cbz	r0, 80066d2 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066a4:	9901      	ldr	r1, [sp, #4]
 80066a6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80066aa:	f000 fcc1 	bl	8007030 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066ae:	4620      	mov	r0, r4
 80066b0:	f7ff fd10 	bl	80060d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066b4:	f000 fbe2 	bl	8006e7c <xTaskResumeAll>
 80066b8:	b948      	cbnz	r0, 80066ce <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 80066ba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80066be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	2501      	movs	r5, #1
 80066d0:	e794      	b.n	80065fc <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 80066d2:	4620      	mov	r0, r4
 80066d4:	f7ff fcfe 	bl	80060d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066d8:	f000 fbd0 	bl	8006e7c <xTaskResumeAll>
 80066dc:	e7f7      	b.n	80066ce <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 80066de:	4620      	mov	r0, r4
 80066e0:	f7ff fcf8 	bl	80060d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066e4:	f000 fbca 	bl	8006e7c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066e8:	4620      	mov	r0, r4
 80066ea:	f7ff fc9f 	bl	800602c <prvIsQueueEmpty>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d0ed      	beq.n	80066ce <xQueueReceive+0x116>
 80066f2:	e7b4      	b.n	800665e <xQueueReceive+0xa6>

080066f4 <xQueueSemaphoreTake>:
{
 80066f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066f6:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 80066f8:	4604      	mov	r4, r0
{
 80066fa:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80066fc:	b940      	cbnz	r0, 8006710 <xQueueSemaphoreTake+0x1c>
 80066fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	e7fe      	b.n	800670e <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006710:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8006712:	b145      	cbz	r5, 8006726 <xQueueSemaphoreTake+0x32>
 8006714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	e7fe      	b.n	8006724 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006726:	f000 fd2d 	bl	8007184 <xTaskGetSchedulerState>
 800672a:	4606      	mov	r6, r0
 800672c:	b320      	cbz	r0, 8006778 <xQueueSemaphoreTake+0x84>
 800672e:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8006730:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8006732:	f000 fea7 	bl	8007484 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006736:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006738:	b353      	cbz	r3, 8006790 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800673a:	3b01      	subs	r3, #1
 800673c:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	b913      	cbnz	r3, 8006748 <xQueueSemaphoreTake+0x54>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006742:	f000 fe29 	bl	8007398 <pvTaskIncrementMutexHeldCount>
 8006746:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006748:	6923      	ldr	r3, [r4, #16]
 800674a:	b173      	cbz	r3, 800676a <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800674c:	f104 0010 	add.w	r0, r4, #16
 8006750:	f000 fc88 	bl	8007064 <xTaskRemoveFromEventList>
 8006754:	b148      	cbz	r0, 800676a <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 8006756:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800675a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800675e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800676a:	f000 feab 	bl	80074c4 <vPortExitCritical>
				return pdPASS;
 800676e:	2001      	movs	r0, #1
}
 8006770:	b005      	add	sp, #20
 8006772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006774:	4635      	mov	r5, r6
 8006776:	e7db      	b.n	8006730 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006778:	9b01      	ldr	r3, [sp, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0fa      	beq.n	8006774 <xQueueSemaphoreTake+0x80>
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	e7fe      	b.n	800678e <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006790:	9b01      	ldr	r3, [sp, #4]
 8006792:	b953      	cbnz	r3, 80067aa <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006794:	2d00      	cmp	r5, #0
 8006796:	d066      	beq.n	8006866 <xQueueSemaphoreTake+0x172>
 8006798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	e7fe      	b.n	80067a8 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 80067aa:	b916      	cbnz	r6, 80067b2 <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067ac:	a802      	add	r0, sp, #8
 80067ae:	f000 fc9b 	bl	80070e8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80067b2:	f000 fe87 	bl	80074c4 <vPortExitCritical>
		vTaskSuspendAll();
 80067b6:	f000 fac1 	bl	8006d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067ba:	f000 fe63 	bl	8007484 <vPortEnterCritical>
 80067be:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80067c2:	2bff      	cmp	r3, #255	@ 0xff
 80067c4:	bf08      	it	eq
 80067c6:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 80067ca:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80067ce:	2bff      	cmp	r3, #255	@ 0xff
 80067d0:	bf08      	it	eq
 80067d2:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 80067d6:	f000 fe75 	bl	80074c4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067da:	a901      	add	r1, sp, #4
 80067dc:	a802      	add	r0, sp, #8
 80067de:	f000 fc8f 	bl	8007100 <xTaskCheckForTimeOut>
 80067e2:	bb50      	cbnz	r0, 800683a <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067e4:	4620      	mov	r0, r4
 80067e6:	f7ff fc21 	bl	800602c <prvIsQueueEmpty>
 80067ea:	b300      	cbz	r0, 800682e <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	b93b      	cbnz	r3, 8006800 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 80067f0:	f000 fe48 	bl	8007484 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80067f4:	6860      	ldr	r0, [r4, #4]
 80067f6:	f000 fcd5 	bl	80071a4 <xTaskPriorityInherit>
 80067fa:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80067fc:	f000 fe62 	bl	80074c4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006800:	9901      	ldr	r1, [sp, #4]
 8006802:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006806:	f000 fc13 	bl	8007030 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800680a:	4620      	mov	r0, r4
 800680c:	f7ff fc62 	bl	80060d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006810:	f000 fb34 	bl	8006e7c <xTaskResumeAll>
 8006814:	b948      	cbnz	r0, 800682a <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 8006816:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800681a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800681e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	2601      	movs	r6, #1
 800682c:	e781      	b.n	8006732 <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800682e:	4620      	mov	r0, r4
 8006830:	f7ff fc50 	bl	80060d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006834:	f000 fb22 	bl	8006e7c <xTaskResumeAll>
 8006838:	e7f7      	b.n	800682a <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800683a:	4620      	mov	r0, r4
 800683c:	f7ff fc4a 	bl	80060d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006840:	f000 fb1c 	bl	8006e7c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006844:	4620      	mov	r0, r4
 8006846:	f7ff fbf1 	bl	800602c <prvIsQueueEmpty>
 800684a:	2800      	cmp	r0, #0
 800684c:	d0ed      	beq.n	800682a <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800684e:	b165      	cbz	r5, 800686a <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 8006850:	f000 fe18 	bl	8007484 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006854:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006856:	b119      	cbz	r1, 8006860 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006858:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800685a:	6819      	ldr	r1, [r3, #0]
 800685c:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006860:	6860      	ldr	r0, [r4, #4]
 8006862:	f000 fd3f 	bl	80072e4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8006866:	f000 fe2d 	bl	80074c4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800686a:	2000      	movs	r0, #0
 800686c:	e780      	b.n	8006770 <xQueueSemaphoreTake+0x7c>

0800686e <xQueueReceiveFromISR>:
{
 800686e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006872:	4689      	mov	r9, r1
 8006874:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8006876:	4604      	mov	r4, r0
 8006878:	b940      	cbnz	r0, 800688c <xQueueReceiveFromISR+0x1e>
 800687a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	e7fe      	b.n	800688a <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800688c:	b951      	cbnz	r1, 80068a4 <xQueueReceiveFromISR+0x36>
 800688e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006890:	b143      	cbz	r3, 80068a4 <xQueueReceiveFromISR+0x36>
 8006892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	e7fe      	b.n	80068a2 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068a4:	f000 ff00 	bl	80076a8 <vPortValidateInterruptPriority>
	__asm volatile
 80068a8:	f3ef 8711 	mrs	r7, BASEPRI
 80068ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068bc:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068be:	b30d      	cbz	r5, 8006904 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 80068c0:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068c4:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 80068c6:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068c8:	4620      	mov	r0, r4
 80068ca:	f7ff fbed 	bl	80060a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068ce:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 80068d0:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068d2:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 80068d4:	d111      	bne.n	80068fa <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068d6:	6923      	ldr	r3, [r4, #16]
 80068d8:	b153      	cbz	r3, 80068f0 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068da:	f104 0010 	add.w	r0, r4, #16
 80068de:	f000 fbc1 	bl	8007064 <xTaskRemoveFromEventList>
 80068e2:	b128      	cbz	r0, 80068f0 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 80068e4:	f1b8 0f00 	cmp.w	r8, #0
 80068e8:	d002      	beq.n	80068f0 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80068ea:	2301      	movs	r3, #1
 80068ec:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 80068f0:	2001      	movs	r0, #1
	__asm volatile
 80068f2:	f387 8811 	msr	BASEPRI, r7
}
 80068f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80068fa:	3601      	adds	r6, #1
 80068fc:	b276      	sxtb	r6, r6
 80068fe:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8006902:	e7f5      	b.n	80068f0 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8006904:	4628      	mov	r0, r5
 8006906:	e7f4      	b.n	80068f2 <xQueueReceiveFromISR+0x84>

08006908 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800690c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800690e:	f000 fdb9 	bl	8007484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006912:	4b2f      	ldr	r3, [pc, #188]	@ (80069d0 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8006914:	4e2f      	ldr	r6, [pc, #188]	@ (80069d4 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	4f2f      	ldr	r7, [pc, #188]	@ (80069d8 <prvAddNewTaskToReadyList+0xd0>)
 800691a:	3201      	adds	r2, #1
 800691c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800691e:	6835      	ldr	r5, [r6, #0]
 8006920:	2d00      	cmp	r5, #0
 8006922:	d14a      	bne.n	80069ba <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006924:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d11f      	bne.n	800696c <prvAddNewTaskToReadyList+0x64>
 800692c:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800692e:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006930:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006932:	f7ff fb3b 	bl	8005fac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006936:	2d07      	cmp	r5, #7
 8006938:	f108 0814 	add.w	r8, r8, #20
 800693c:	d1f7      	bne.n	800692e <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800693e:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8006a00 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8006942:	4d26      	ldr	r5, [pc, #152]	@ (80069dc <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8006944:	4640      	mov	r0, r8
 8006946:	f7ff fb31 	bl	8005fac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800694a:	4628      	mov	r0, r5
 800694c:	f7ff fb2e 	bl	8005fac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006950:	4823      	ldr	r0, [pc, #140]	@ (80069e0 <prvAddNewTaskToReadyList+0xd8>)
 8006952:	f7ff fb2b 	bl	8005fac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006956:	4823      	ldr	r0, [pc, #140]	@ (80069e4 <prvAddNewTaskToReadyList+0xdc>)
 8006958:	f7ff fb28 	bl	8005fac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800695c:	4822      	ldr	r0, [pc, #136]	@ (80069e8 <prvAddNewTaskToReadyList+0xe0>)
 800695e:	f7ff fb25 	bl	8005fac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006962:	4b22      	ldr	r3, [pc, #136]	@ (80069ec <prvAddNewTaskToReadyList+0xe4>)
 8006964:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006968:	4b21      	ldr	r3, [pc, #132]	@ (80069f0 <prvAddNewTaskToReadyList+0xe8>)
 800696a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800696c:	4a21      	ldr	r2, [pc, #132]	@ (80069f4 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 800696e:	4922      	ldr	r1, [pc, #136]	@ (80069f8 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8006970:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006972:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8006974:	3301      	adds	r3, #1
 8006976:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006978:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800697a:	2301      	movs	r3, #1
 800697c:	4093      	lsls	r3, r2
 800697e:	4303      	orrs	r3, r0
 8006980:	2014      	movs	r0, #20
 8006982:	600b      	str	r3, [r1, #0]
 8006984:	fb00 7002 	mla	r0, r0, r2, r7
 8006988:	1d21      	adds	r1, r4, #4
 800698a:	f7ff fb1d 	bl	8005fc8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800698e:	f000 fd99 	bl	80074c4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006992:	4b1a      	ldr	r3, [pc, #104]	@ (80069fc <prvAddNewTaskToReadyList+0xf4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	b173      	cbz	r3, 80069b6 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006998:	6833      	ldr	r3, [r6, #0]
 800699a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800699c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800699e:	429a      	cmp	r2, r3
 80069a0:	d209      	bcs.n	80069b6 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 80069a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80069a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	f3bf 8f6f 	isb	sy
}
 80069b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80069ba:	4b10      	ldr	r3, [pc, #64]	@ (80069fc <prvAddNewTaskToReadyList+0xf4>)
 80069bc:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069be:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 80069c0:	2a00      	cmp	r2, #0
 80069c2:	d1d3      	bne.n	800696c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069c4:	6832      	ldr	r2, [r6, #0]
 80069c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80069c8:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80069ca:	bf98      	it	ls
 80069cc:	6034      	strls	r4, [r6, #0]
 80069ce:	e7cd      	b.n	800696c <prvAddNewTaskToReadyList+0x64>
 80069d0:	20003704 	.word	0x20003704
 80069d4:	20003804 	.word	0x20003804
 80069d8:	20003778 	.word	0x20003778
 80069dc:	20003750 	.word	0x20003750
 80069e0:	20003734 	.word	0x20003734
 80069e4:	20003720 	.word	0x20003720
 80069e8:	20003708 	.word	0x20003708
 80069ec:	2000374c 	.word	0x2000374c
 80069f0:	20003748 	.word	0x20003748
 80069f4:	200036e8 	.word	0x200036e8
 80069f8:	200036fc 	.word	0x200036fc
 80069fc:	200036f8 	.word	0x200036f8
 8006a00:	20003764 	.word	0x20003764

08006a04 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a06:	4b1a      	ldr	r3, [pc, #104]	@ (8006a70 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a08:	4d1a      	ldr	r5, [pc, #104]	@ (8006a74 <prvAddCurrentTaskToDelayedList+0x70>)
const TickType_t xConstTickCount = xTickCount;
 8006a0a:	681c      	ldr	r4, [r3, #0]
{
 8006a0c:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a0e:	6828      	ldr	r0, [r5, #0]
 8006a10:	3004      	adds	r0, #4
{
 8006a12:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a14:	f7ff fafa 	bl	800600c <uxListRemove>
 8006a18:	b940      	cbnz	r0, 8006a2c <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006a1a:	682a      	ldr	r2, [r5, #0]
 8006a1c:	4916      	ldr	r1, [pc, #88]	@ (8006a78 <prvAddCurrentTaskToDelayedList+0x74>)
 8006a1e:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8006a20:	680b      	ldr	r3, [r1, #0]
 8006a22:	2201      	movs	r2, #1
 8006a24:	4082      	lsls	r2, r0
 8006a26:	ea23 0302 	bic.w	r3, r3, r2
 8006a2a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a2c:	1c73      	adds	r3, r6, #1
 8006a2e:	d107      	bne.n	8006a40 <prvAddCurrentTaskToDelayedList+0x3c>
 8006a30:	b137      	cbz	r7, 8006a40 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a32:	6829      	ldr	r1, [r5, #0]
 8006a34:	4811      	ldr	r0, [pc, #68]	@ (8006a7c <prvAddCurrentTaskToDelayedList+0x78>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a3a:	3104      	adds	r1, #4
 8006a3c:	f7ff bac4 	b.w	8005fc8 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	19a4      	adds	r4, r4, r6
 8006a44:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a46:	d307      	bcc.n	8006a58 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a48:	4b0d      	ldr	r3, [pc, #52]	@ (8006a80 <prvAddCurrentTaskToDelayedList+0x7c>)
 8006a4a:	6818      	ldr	r0, [r3, #0]
 8006a4c:	6829      	ldr	r1, [r5, #0]
}
 8006a4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a52:	3104      	adds	r1, #4
 8006a54:	f7ff bac3 	b.w	8005fde <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a58:	4b0a      	ldr	r3, [pc, #40]	@ (8006a84 <prvAddCurrentTaskToDelayedList+0x80>)
 8006a5a:	6818      	ldr	r0, [r3, #0]
 8006a5c:	6829      	ldr	r1, [r5, #0]
 8006a5e:	3104      	adds	r1, #4
 8006a60:	f7ff fabd 	bl	8005fde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a64:	4b08      	ldr	r3, [pc, #32]	@ (8006a88 <prvAddCurrentTaskToDelayedList+0x84>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006a6a:	bf88      	it	hi
 8006a6c:	601c      	strhi	r4, [r3, #0]
}
 8006a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a70:	20003700 	.word	0x20003700
 8006a74:	20003804 	.word	0x20003804
 8006a78:	200036fc 	.word	0x200036fc
 8006a7c:	20003708 	.word	0x20003708
 8006a80:	20003748 	.word	0x20003748
 8006a84:	2000374c 	.word	0x2000374c
 8006a88:	200036e4 	.word	0x200036e4

08006a8c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a8c:	4a06      	ldr	r2, [pc, #24]	@ (8006aa8 <prvResetNextTaskUnblockTime+0x1c>)
 8006a8e:	6813      	ldr	r3, [r2, #0]
 8006a90:	6819      	ldr	r1, [r3, #0]
 8006a92:	4b06      	ldr	r3, [pc, #24]	@ (8006aac <prvResetNextTaskUnblockTime+0x20>)
 8006a94:	b919      	cbnz	r1, 8006a9e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a96:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a9a:	601a      	str	r2, [r3, #0]
}
 8006a9c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a9e:	6812      	ldr	r2, [r2, #0]
 8006aa0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006aa2:	68d2      	ldr	r2, [r2, #12]
 8006aa4:	6852      	ldr	r2, [r2, #4]
 8006aa6:	e7f8      	b.n	8006a9a <prvResetNextTaskUnblockTime+0xe>
 8006aa8:	2000374c 	.word	0x2000374c
 8006aac:	200036e4 	.word	0x200036e4

08006ab0 <prvDeleteTCB>:
	{
 8006ab0:	b510      	push	{r4, lr}
 8006ab2:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ab4:	304c      	adds	r0, #76	@ 0x4c
 8006ab6:	f003 fd4d 	bl	800a554 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006aba:	f894 309d 	ldrb.w	r3, [r4, #157]	@ 0x9d
 8006abe:	b93b      	cbnz	r3, 8006ad0 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8006ac0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8006ac2:	f000 fed7 	bl	8007874 <vPortFree>
				vPortFree( pxTCB );
 8006ac6:	4620      	mov	r0, r4
	}
 8006ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8006acc:	f000 bed2 	b.w	8007874 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d0f8      	beq.n	8006ac6 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d008      	beq.n	8006aea <prvDeleteTCB+0x3a>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	e7fe      	b.n	8006ae8 <prvDeleteTCB+0x38>
	}
 8006aea:	bd10      	pop	{r4, pc}

08006aec <prvIdleTask>:
{
 8006aec:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006aee:	4c13      	ldr	r4, [pc, #76]	@ (8006b3c <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006af0:	4f13      	ldr	r7, [pc, #76]	@ (8006b40 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8006af2:	4d14      	ldr	r5, [pc, #80]	@ (8006b44 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	b973      	cbnz	r3, 8006b16 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006af8:	4b13      	ldr	r3, [pc, #76]	@ (8006b48 <prvIdleTask+0x5c>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d9f8      	bls.n	8006af2 <prvIdleTask+0x6>
				taskYIELD();
 8006b00:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006b04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b08:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	e7ed      	b.n	8006af2 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8006b16:	f000 fcb5 	bl	8007484 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b1e:	1d30      	adds	r0, r6, #4
 8006b20:	f7ff fa74 	bl	800600c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b24:	682b      	ldr	r3, [r5, #0]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8006b30:	f000 fcc8 	bl	80074c4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006b34:	4630      	mov	r0, r6
 8006b36:	f7ff ffbb 	bl	8006ab0 <prvDeleteTCB>
 8006b3a:	e7db      	b.n	8006af4 <prvIdleTask+0x8>
 8006b3c:	2000371c 	.word	0x2000371c
 8006b40:	20003720 	.word	0x20003720
 8006b44:	20003704 	.word	0x20003704
 8006b48:	20003778 	.word	0x20003778

08006b4c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b50:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006b54:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8006b58:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8006b5a:	3a01      	subs	r2, #1
 8006b5c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006b60:	4698      	mov	r8, r3
 8006b62:	4607      	mov	r7, r0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006b64:	1e4b      	subs	r3, r1, #1
 8006b66:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b6a:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8006b6e:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b70:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8006b74:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8006b78:	b108      	cbz	r0, 8006b7e <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b7a:	428b      	cmp	r3, r1
 8006b7c:	d1f8      	bne.n	8006b70 <prvInitialiseNewTask.constprop.0+0x24>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b7e:	9d08      	ldr	r5, [sp, #32]
 8006b80:	2d06      	cmp	r5, #6
 8006b82:	bf28      	it	cs
 8006b84:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b86:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 8006b8a:	e9c4 5a11 	strd	r5, sl, [r4, #68]	@ 0x44
	pxNewTCB->uxPriority = uxPriority;
 8006b8e:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b90:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b92:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b96:	f7ff fa14 	bl	8005fc2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b9a:	f104 0018 	add.w	r0, r4, #24
 8006b9e:	f7ff fa10 	bl	8005fc2 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba2:	f1c5 0507 	rsb	r5, r5, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ba6:	224c      	movs	r2, #76	@ 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 8006ba8:	f8c4 a098 	str.w	sl, [r4, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bac:	4651      	mov	r1, sl
 8006bae:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bb0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bb2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bb4:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bb6:	f884 a09c 	strb.w	sl, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bba:	f002 feef 	bl	800999c <memset>
 8006bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8006be8 <prvInitialiseNewTask.constprop.0+0x9c>)
 8006bc0:	6523      	str	r3, [r4, #80]	@ 0x50
 8006bc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bc6:	33d0      	adds	r3, #208	@ 0xd0
 8006bc8:	6562      	str	r2, [r4, #84]	@ 0x54
 8006bca:	65a3      	str	r3, [r4, #88]	@ 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bcc:	4642      	mov	r2, r8
 8006bce:	4639      	mov	r1, r7
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f000 fc2b 	bl	800742c <pxPortInitialiseStack>
 8006bd6:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006bd8:	f1b9 0f00 	cmp.w	r9, #0
 8006bdc:	d001      	beq.n	8006be2 <prvInitialiseNewTask.constprop.0+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bde:	f8c9 4000 	str.w	r4, [r9]
}
 8006be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be6:	bf00      	nop
 8006be8:	20008e20 	.word	0x20008e20

08006bec <xTaskCreateStatic>:
	{
 8006bec:	b570      	push	{r4, r5, r6, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006bf4:	b945      	cbnz	r5, 8006c08 <xTaskCreateStatic+0x1c>
 8006bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	e7fe      	b.n	8006c06 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8006c08:	b944      	cbnz	r4, 8006c1c <xTaskCreateStatic+0x30>
 8006c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	e7fe      	b.n	8006c1a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c1c:	26a0      	movs	r6, #160	@ 0xa0
 8006c1e:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c20:	9e05      	ldr	r6, [sp, #20]
 8006c22:	2ea0      	cmp	r6, #160	@ 0xa0
 8006c24:	d008      	beq.n	8006c38 <xTaskCreateStatic+0x4c>
 8006c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	e7fe      	b.n	8006c36 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c38:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c3a:	2502      	movs	r5, #2
 8006c3c:	f884 509d 	strb.w	r5, [r4, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c40:	ad04      	add	r5, sp, #16
 8006c42:	9501      	str	r5, [sp, #4]
 8006c44:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8006c46:	9402      	str	r4, [sp, #8]
 8006c48:	9500      	str	r5, [sp, #0]
 8006c4a:	f7ff ff7f 	bl	8006b4c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f7ff fe5a 	bl	8006908 <prvAddNewTaskToReadyList>
	}
 8006c54:	9804      	ldr	r0, [sp, #16]
 8006c56:	b006      	add	sp, #24
 8006c58:	bd70      	pop	{r4, r5, r6, pc}

08006c5a <xTaskCreate>:
	{
 8006c5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c5e:	4607      	mov	r7, r0
 8006c60:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c62:	0090      	lsls	r0, r2, #2
	{
 8006c64:	4688      	mov	r8, r1
 8006c66:	4616      	mov	r6, r2
 8006c68:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c6a:	f000 fd71 	bl	8007750 <pvPortMalloc>
			if( pxStack != NULL )
 8006c6e:	4605      	mov	r5, r0
 8006c70:	b920      	cbnz	r0, 8006c7c <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c72:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006c76:	b005      	add	sp, #20
 8006c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006c7c:	20a0      	movs	r0, #160	@ 0xa0
 8006c7e:	f000 fd67 	bl	8007750 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006c82:	4604      	mov	r4, r0
 8006c84:	b198      	cbz	r0, 8006cae <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c86:	2300      	movs	r3, #0
 8006c88:	f880 309d 	strb.w	r3, [r0, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8006c8e:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c90:	9301      	str	r3, [sp, #4]
 8006c92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c94:	9002      	str	r0, [sp, #8]
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	4632      	mov	r2, r6
 8006c9a:	464b      	mov	r3, r9
 8006c9c:	4641      	mov	r1, r8
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	f7ff ff54 	bl	8006b4c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f7ff fe2f 	bl	8006908 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006caa:	2001      	movs	r0, #1
 8006cac:	e7e3      	b.n	8006c76 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f000 fde0 	bl	8007874 <vPortFree>
		if( pxNewTCB != NULL )
 8006cb4:	e7dd      	b.n	8006c72 <xTaskCreate+0x18>
	...

08006cb8 <vTaskStartScheduler>:
{
 8006cb8:	b510      	push	{r4, lr}
 8006cba:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006cbc:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cbe:	aa07      	add	r2, sp, #28
 8006cc0:	a906      	add	r1, sp, #24
 8006cc2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cc4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cc8:	f7fa fbe4 	bl	8001494 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ccc:	9b05      	ldr	r3, [sp, #20]
 8006cce:	9302      	str	r3, [sp, #8]
 8006cd0:	9b06      	ldr	r3, [sp, #24]
 8006cd2:	9a07      	ldr	r2, [sp, #28]
 8006cd4:	4912      	ldr	r1, [pc, #72]	@ (8006d20 <vTaskStartScheduler+0x68>)
 8006cd6:	4813      	ldr	r0, [pc, #76]	@ (8006d24 <vTaskStartScheduler+0x6c>)
 8006cd8:	e9cd 4300 	strd	r4, r3, [sp]
 8006cdc:	4623      	mov	r3, r4
 8006cde:	f7ff ff85 	bl	8006bec <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006ce2:	b1d0      	cbz	r0, 8006d1a <vTaskStartScheduler+0x62>
 8006ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8006d28 <vTaskStartScheduler+0x70>)
 8006cf6:	4a0d      	ldr	r2, [pc, #52]	@ (8006d2c <vTaskStartScheduler+0x74>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	334c      	adds	r3, #76	@ 0x4c
 8006cfc:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8006d30 <vTaskStartScheduler+0x78>)
 8006d00:	f04f 32ff 	mov.w	r2, #4294967295
 8006d04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d06:	4b0b      	ldr	r3, [pc, #44]	@ (8006d34 <vTaskStartScheduler+0x7c>)
 8006d08:	2201      	movs	r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d38 <vTaskStartScheduler+0x80>)
 8006d0e:	601c      	str	r4, [r3, #0]
}
 8006d10:	b008      	add	sp, #32
 8006d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006d16:	f000 bc45 	b.w	80075a4 <xPortStartScheduler>
}
 8006d1a:	b008      	add	sp, #32
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	bf00      	nop
 8006d20:	0800e518 	.word	0x0800e518
 8006d24:	08006aed 	.word	0x08006aed
 8006d28:	20003804 	.word	0x20003804
 8006d2c:	200001a0 	.word	0x200001a0
 8006d30:	200036e4 	.word	0x200036e4
 8006d34:	200036f8 	.word	0x200036f8
 8006d38:	20003700 	.word	0x20003700

08006d3c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006d3c:	4a02      	ldr	r2, [pc, #8]	@ (8006d48 <vTaskSuspendAll+0xc>)
 8006d3e:	6813      	ldr	r3, [r2, #0]
 8006d40:	3301      	adds	r3, #1
 8006d42:	6013      	str	r3, [r2, #0]
}
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	200036e0 	.word	0x200036e0

08006d4c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d4c:	4b40      	ldr	r3, [pc, #256]	@ (8006e50 <xTaskIncrementTick+0x104>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
{
 8006d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d174      	bne.n	8006e42 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d58:	4b3e      	ldr	r3, [pc, #248]	@ (8006e54 <xTaskIncrementTick+0x108>)
 8006d5a:	681c      	ldr	r4, [r3, #0]
 8006d5c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8006d5e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d60:	b9bc      	cbnz	r4, 8006d92 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8006d62:	4b3d      	ldr	r3, [pc, #244]	@ (8006e58 <xTaskIncrementTick+0x10c>)
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	6812      	ldr	r2, [r2, #0]
 8006d68:	b142      	cbz	r2, 8006d7c <xTaskIncrementTick+0x30>
 8006d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	e7fe      	b.n	8006d7a <xTaskIncrementTick+0x2e>
 8006d7c:	4a37      	ldr	r2, [pc, #220]	@ (8006e5c <xTaskIncrementTick+0x110>)
 8006d7e:	6819      	ldr	r1, [r3, #0]
 8006d80:	6810      	ldr	r0, [r2, #0]
 8006d82:	6018      	str	r0, [r3, #0]
 8006d84:	6011      	str	r1, [r2, #0]
 8006d86:	4a36      	ldr	r2, [pc, #216]	@ (8006e60 <xTaskIncrementTick+0x114>)
 8006d88:	6813      	ldr	r3, [r2, #0]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	f7ff fe7d 	bl	8006a8c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d92:	4d34      	ldr	r5, [pc, #208]	@ (8006e64 <xTaskIncrementTick+0x118>)
 8006d94:	4e34      	ldr	r6, [pc, #208]	@ (8006e68 <xTaskIncrementTick+0x11c>)
 8006d96:	682b      	ldr	r3, [r5, #0]
 8006d98:	4f34      	ldr	r7, [pc, #208]	@ (8006e6c <xTaskIncrementTick+0x120>)
 8006d9a:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 8006d9c:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006da0:	d911      	bls.n	8006dc6 <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006da6:	2114      	movs	r1, #20
 8006da8:	434a      	muls	r2, r1
 8006daa:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8006dac:	2a02      	cmp	r2, #2
 8006dae:	bf28      	it	cs
 8006db0:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8006db4:	4a2e      	ldr	r2, [pc, #184]	@ (8006e70 <xTaskIncrementTick+0x124>)
 8006db6:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8006db8:	2a00      	cmp	r2, #0
}
 8006dba:	bf0c      	ite	eq
 8006dbc:	4658      	moveq	r0, fp
 8006dbe:	2001      	movne	r0, #1
 8006dc0:	b003      	add	sp, #12
 8006dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dc6:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8006e58 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8006dca:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8006e78 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dce:	f8da 2000 	ldr.w	r2, [sl]
 8006dd2:	6812      	ldr	r2, [r2, #0]
 8006dd4:	b91a      	cbnz	r2, 8006dde <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dda:	602a      	str	r2, [r5, #0]
					break;
 8006ddc:	e7e1      	b.n	8006da2 <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006dde:	f8da 2000 	ldr.w	r2, [sl]
 8006de2:	68d2      	ldr	r2, [r2, #12]
 8006de4:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006de8:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8006dec:	428c      	cmp	r4, r1
 8006dee:	d201      	bcs.n	8006df4 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8006df0:	6029      	str	r1, [r5, #0]
						break;
 8006df2:	e7d6      	b.n	8006da2 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006df4:	f108 0304 	add.w	r3, r8, #4
 8006df8:	4618      	mov	r0, r3
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	f7ff f906 	bl	800600c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e00:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8006e04:	b119      	cbz	r1, 8006e0e <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e06:	f108 0018 	add.w	r0, r8, #24
 8006e0a:	f7ff f8ff 	bl	800600c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e0e:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8006e12:	f8d9 3000 	ldr.w	r3, [r9]
 8006e16:	2201      	movs	r2, #1
 8006e18:	fa02 f100 	lsl.w	r1, r2, r0
 8006e1c:	4319      	orrs	r1, r3
 8006e1e:	f04f 0c14 	mov.w	ip, #20
 8006e22:	f8c9 1000 	str.w	r1, [r9]
 8006e26:	fb0c 6000 	mla	r0, ip, r0, r6
 8006e2a:	9901      	ldr	r1, [sp, #4]
 8006e2c:	f7ff f8cc 	bl	8005fc8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e30:	6838      	ldr	r0, [r7, #0]
 8006e32:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8006e36:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8006e38:	4291      	cmp	r1, r2
 8006e3a:	bf28      	it	cs
 8006e3c:	f04f 0b01 	movcs.w	fp, #1
 8006e40:	e7c5      	b.n	8006dce <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 8006e42:	4a0c      	ldr	r2, [pc, #48]	@ (8006e74 <xTaskIncrementTick+0x128>)
 8006e44:	6813      	ldr	r3, [r2, #0]
 8006e46:	3301      	adds	r3, #1
 8006e48:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006e4a:	f04f 0b00 	mov.w	fp, #0
 8006e4e:	e7b1      	b.n	8006db4 <xTaskIncrementTick+0x68>
 8006e50:	200036e0 	.word	0x200036e0
 8006e54:	20003700 	.word	0x20003700
 8006e58:	2000374c 	.word	0x2000374c
 8006e5c:	20003748 	.word	0x20003748
 8006e60:	200036ec 	.word	0x200036ec
 8006e64:	200036e4 	.word	0x200036e4
 8006e68:	20003778 	.word	0x20003778
 8006e6c:	20003804 	.word	0x20003804
 8006e70:	200036f0 	.word	0x200036f0
 8006e74:	200036f4 	.word	0x200036f4
 8006e78:	200036fc 	.word	0x200036fc

08006e7c <xTaskResumeAll>:
{
 8006e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8006e80:	4c31      	ldr	r4, [pc, #196]	@ (8006f48 <xTaskResumeAll+0xcc>)
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	b943      	cbnz	r3, 8006e98 <xTaskResumeAll+0x1c>
 8006e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	e7fe      	b.n	8006e96 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8006e98:	f000 faf4 	bl	8007484 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ea2:	6824      	ldr	r4, [r4, #0]
 8006ea4:	b12c      	cbz	r4, 8006eb2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8006ea6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006ea8:	f000 fb0c 	bl	80074c4 <vPortExitCritical>
}
 8006eac:	4620      	mov	r0, r4
 8006eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006eb2:	4b26      	ldr	r3, [pc, #152]	@ (8006f4c <xTaskResumeAll+0xd0>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0f5      	beq.n	8006ea6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eba:	4d25      	ldr	r5, [pc, #148]	@ (8006f50 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8006ebc:	4e25      	ldr	r6, [pc, #148]	@ (8006f54 <xTaskResumeAll+0xd8>)
 8006ebe:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8006f64 <xTaskResumeAll+0xe8>
 8006ec2:	e01f      	b.n	8006f04 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006ec4:	68eb      	ldr	r3, [r5, #12]
 8006ec6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ec8:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ecc:	f104 0018 	add.w	r0, r4, #24
 8006ed0:	f7ff f89c 	bl	800600c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ed4:	4648      	mov	r0, r9
 8006ed6:	f7ff f899 	bl	800600c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006eda:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006edc:	6831      	ldr	r1, [r6, #0]
 8006ede:	2701      	movs	r7, #1
 8006ee0:	fa07 f302 	lsl.w	r3, r7, r2
 8006ee4:	2014      	movs	r0, #20
 8006ee6:	430b      	orrs	r3, r1
 8006ee8:	fb00 8002 	mla	r0, r0, r2, r8
 8006eec:	4649      	mov	r1, r9
 8006eee:	6033      	str	r3, [r6, #0]
 8006ef0:	f7ff f86a 	bl	8005fc8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ef4:	4b18      	ldr	r3, [pc, #96]	@ (8006f58 <xTaskResumeAll+0xdc>)
 8006ef6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d301      	bcc.n	8006f04 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8006f00:	4b16      	ldr	r3, [pc, #88]	@ (8006f5c <xTaskResumeAll+0xe0>)
 8006f02:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f04:	682b      	ldr	r3, [r5, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1dc      	bne.n	8006ec4 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8006f0a:	b10c      	cbz	r4, 8006f10 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8006f0c:	f7ff fdbe 	bl	8006a8c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f10:	4d13      	ldr	r5, [pc, #76]	@ (8006f60 <xTaskResumeAll+0xe4>)
 8006f12:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f14:	b144      	cbz	r4, 8006f28 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8006f16:	4e11      	ldr	r6, [pc, #68]	@ (8006f5c <xTaskResumeAll+0xe0>)
 8006f18:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006f1a:	f7ff ff17 	bl	8006d4c <xTaskIncrementTick>
 8006f1e:	b100      	cbz	r0, 8006f22 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8006f20:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f22:	3c01      	subs	r4, #1
 8006f24:	d1f9      	bne.n	8006f1a <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8006f26:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8006f28:	4b0c      	ldr	r3, [pc, #48]	@ (8006f5c <xTaskResumeAll+0xe0>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d0ba      	beq.n	8006ea6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8006f30:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006f34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f38:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006f44:	2401      	movs	r4, #1
 8006f46:	e7af      	b.n	8006ea8 <xTaskResumeAll+0x2c>
 8006f48:	200036e0 	.word	0x200036e0
 8006f4c:	20003704 	.word	0x20003704
 8006f50:	20003734 	.word	0x20003734
 8006f54:	200036fc 	.word	0x200036fc
 8006f58:	20003804 	.word	0x20003804
 8006f5c:	200036f0 	.word	0x200036f0
 8006f60:	200036f4 	.word	0x200036f4
 8006f64:	20003778 	.word	0x20003778

08006f68 <vTaskDelay>:
	{
 8006f68:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f6a:	b950      	cbnz	r0, 8006f82 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8006f6c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006f70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f74:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	f3bf 8f6f 	isb	sy
	}
 8006f80:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8006f82:	4b0a      	ldr	r3, [pc, #40]	@ (8006fac <vTaskDelay+0x44>)
 8006f84:	6819      	ldr	r1, [r3, #0]
 8006f86:	b141      	cbz	r1, 8006f9a <vTaskDelay+0x32>
 8006f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	e7fe      	b.n	8006f98 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8006f9a:	f7ff fecf 	bl	8006d3c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f9e:	f7ff fd31 	bl	8006a04 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006fa2:	f7ff ff6b 	bl	8006e7c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d0e0      	beq.n	8006f6c <vTaskDelay+0x4>
 8006faa:	e7e9      	b.n	8006f80 <vTaskDelay+0x18>
 8006fac:	200036e0 	.word	0x200036e0

08006fb0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fb0:	4b19      	ldr	r3, [pc, #100]	@ (8007018 <vTaskSwitchContext+0x68>)
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	4b19      	ldr	r3, [pc, #100]	@ (800701c <vTaskSwitchContext+0x6c>)
{
 8006fb6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fb8:	b112      	cbz	r2, 8006fc0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8006fba:	2201      	movs	r2, #1
 8006fbc:	601a      	str	r2, [r3, #0]
}
 8006fbe:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8006fc0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006fc2:	4b17      	ldr	r3, [pc, #92]	@ (8007020 <vTaskSwitchContext+0x70>)
 8006fc4:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006fc6:	fab2 f282 	clz	r2, r2
 8006fca:	b2d2      	uxtb	r2, r2
 8006fcc:	f1c2 021f 	rsb	r2, r2, #31
 8006fd0:	2314      	movs	r3, #20
 8006fd2:	4914      	ldr	r1, [pc, #80]	@ (8007024 <vTaskSwitchContext+0x74>)
 8006fd4:	4353      	muls	r3, r2
 8006fd6:	18c8      	adds	r0, r1, r3
 8006fd8:	58cc      	ldr	r4, [r1, r3]
 8006fda:	b944      	cbnz	r4, 8006fee <vTaskSwitchContext+0x3e>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	e7fe      	b.n	8006fec <vTaskSwitchContext+0x3c>
 8006fee:	6844      	ldr	r4, [r0, #4]
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	6864      	ldr	r4, [r4, #4]
 8006ff4:	6044      	str	r4, [r0, #4]
 8006ff6:	440b      	add	r3, r1
 8006ff8:	429c      	cmp	r4, r3
 8006ffa:	bf04      	itt	eq
 8006ffc:	6863      	ldreq	r3, [r4, #4]
 8006ffe:	6043      	streq	r3, [r0, #4]
 8007000:	2314      	movs	r3, #20
 8007002:	fb03 1102 	mla	r1, r3, r2, r1
 8007006:	684b      	ldr	r3, [r1, #4]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	4b07      	ldr	r3, [pc, #28]	@ (8007028 <vTaskSwitchContext+0x78>)
 800700c:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a06      	ldr	r2, [pc, #24]	@ (800702c <vTaskSwitchContext+0x7c>)
 8007012:	334c      	adds	r3, #76	@ 0x4c
 8007014:	6013      	str	r3, [r2, #0]
}
 8007016:	e7d2      	b.n	8006fbe <vTaskSwitchContext+0xe>
 8007018:	200036e0 	.word	0x200036e0
 800701c:	200036f0 	.word	0x200036f0
 8007020:	200036fc 	.word	0x200036fc
 8007024:	20003778 	.word	0x20003778
 8007028:	20003804 	.word	0x20003804
 800702c:	200001a0 	.word	0x200001a0

08007030 <vTaskPlaceOnEventList>:
{
 8007030:	b510      	push	{r4, lr}
 8007032:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8007034:	b940      	cbnz	r0, 8007048 <vTaskPlaceOnEventList+0x18>
 8007036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	e7fe      	b.n	8007046 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007048:	4b05      	ldr	r3, [pc, #20]	@ (8007060 <vTaskPlaceOnEventList+0x30>)
 800704a:	6819      	ldr	r1, [r3, #0]
 800704c:	3118      	adds	r1, #24
 800704e:	f7fe ffc6 	bl	8005fde <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007052:	4620      	mov	r0, r4
 8007054:	2101      	movs	r1, #1
}
 8007056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800705a:	f7ff bcd3 	b.w	8006a04 <prvAddCurrentTaskToDelayedList>
 800705e:	bf00      	nop
 8007060:	20003804 	.word	0x20003804

08007064 <xTaskRemoveFromEventList>:
{
 8007064:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007066:	68c3      	ldr	r3, [r0, #12]
 8007068:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800706a:	b944      	cbnz	r4, 800707e <xTaskRemoveFromEventList+0x1a>
 800706c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	e7fe      	b.n	800707c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800707e:	f104 0518 	add.w	r5, r4, #24
 8007082:	4628      	mov	r0, r5
 8007084:	f7fe ffc2 	bl	800600c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007088:	4b11      	ldr	r3, [pc, #68]	@ (80070d0 <xTaskRemoveFromEventList+0x6c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	b9e3      	cbnz	r3, 80070c8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800708e:	1d25      	adds	r5, r4, #4
 8007090:	4628      	mov	r0, r5
 8007092:	f7fe ffbb 	bl	800600c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007096:	490f      	ldr	r1, [pc, #60]	@ (80070d4 <xTaskRemoveFromEventList+0x70>)
 8007098:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800709a:	6808      	ldr	r0, [r1, #0]
 800709c:	2301      	movs	r3, #1
 800709e:	4093      	lsls	r3, r2
 80070a0:	4303      	orrs	r3, r0
 80070a2:	600b      	str	r3, [r1, #0]
 80070a4:	4b0c      	ldr	r3, [pc, #48]	@ (80070d8 <xTaskRemoveFromEventList+0x74>)
 80070a6:	2014      	movs	r0, #20
 80070a8:	4629      	mov	r1, r5
 80070aa:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070ae:	f7fe ff8b 	bl	8005fc8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070b2:	4b0a      	ldr	r3, [pc, #40]	@ (80070dc <xTaskRemoveFromEventList+0x78>)
 80070b4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ba:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80070bc:	bf83      	ittte	hi
 80070be:	4b08      	ldrhi	r3, [pc, #32]	@ (80070e0 <xTaskRemoveFromEventList+0x7c>)
 80070c0:	2001      	movhi	r0, #1
 80070c2:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80070c4:	2000      	movls	r0, #0
}
 80070c6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070c8:	4806      	ldr	r0, [pc, #24]	@ (80070e4 <xTaskRemoveFromEventList+0x80>)
 80070ca:	4629      	mov	r1, r5
 80070cc:	e7ef      	b.n	80070ae <xTaskRemoveFromEventList+0x4a>
 80070ce:	bf00      	nop
 80070d0:	200036e0 	.word	0x200036e0
 80070d4:	200036fc 	.word	0x200036fc
 80070d8:	20003778 	.word	0x20003778
 80070dc:	20003804 	.word	0x20003804
 80070e0:	200036f0 	.word	0x200036f0
 80070e4:	20003734 	.word	0x20003734

080070e8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070e8:	4b03      	ldr	r3, [pc, #12]	@ (80070f8 <vTaskInternalSetTimeOutState+0x10>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070ee:	4b03      	ldr	r3, [pc, #12]	@ (80070fc <vTaskInternalSetTimeOutState+0x14>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	6043      	str	r3, [r0, #4]
}
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	200036ec 	.word	0x200036ec
 80070fc:	20003700 	.word	0x20003700

08007100 <xTaskCheckForTimeOut>:
{
 8007100:	b570      	push	{r4, r5, r6, lr}
 8007102:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8007104:	4605      	mov	r5, r0
 8007106:	b940      	cbnz	r0, 800711a <xTaskCheckForTimeOut+0x1a>
 8007108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710c:	f383 8811 	msr	BASEPRI, r3
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	e7fe      	b.n	8007118 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800711a:	b941      	cbnz	r1, 800712e <xTaskCheckForTimeOut+0x2e>
 800711c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	e7fe      	b.n	800712c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800712e:	f000 f9a9 	bl	8007484 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007132:	4b0f      	ldr	r3, [pc, #60]	@ (8007170 <xTaskCheckForTimeOut+0x70>)
 8007134:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	d010      	beq.n	800715e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800713c:	480d      	ldr	r0, [pc, #52]	@ (8007174 <xTaskCheckForTimeOut+0x74>)
 800713e:	682e      	ldr	r6, [r5, #0]
 8007140:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007142:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007144:	4286      	cmp	r6, r0
 8007146:	d001      	beq.n	800714c <xTaskCheckForTimeOut+0x4c>
 8007148:	428a      	cmp	r2, r1
 800714a:	d90f      	bls.n	800716c <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800714c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800714e:	4283      	cmp	r3, r0
 8007150:	d90a      	bls.n	8007168 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8007152:	1a5b      	subs	r3, r3, r1
 8007154:	4413      	add	r3, r2
 8007156:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007158:	4628      	mov	r0, r5
 800715a:	f7ff ffc5 	bl	80070e8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800715e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007160:	f000 f9b0 	bl	80074c4 <vPortExitCritical>
}
 8007164:	4620      	mov	r0, r4
 8007166:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8007168:	2300      	movs	r3, #0
 800716a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800716c:	2401      	movs	r4, #1
 800716e:	e7f7      	b.n	8007160 <xTaskCheckForTimeOut+0x60>
 8007170:	20003700 	.word	0x20003700
 8007174:	200036ec 	.word	0x200036ec

08007178 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007178:	4b01      	ldr	r3, [pc, #4]	@ (8007180 <vTaskMissedYield+0x8>)
 800717a:	2201      	movs	r2, #1
 800717c:	601a      	str	r2, [r3, #0]
}
 800717e:	4770      	bx	lr
 8007180:	200036f0 	.word	0x200036f0

08007184 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007184:	4b05      	ldr	r3, [pc, #20]	@ (800719c <xTaskGetSchedulerState+0x18>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	b133      	cbz	r3, 8007198 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800718a:	4b05      	ldr	r3, [pc, #20]	@ (80071a0 <xTaskGetSchedulerState+0x1c>)
 800718c:	6818      	ldr	r0, [r3, #0]
 800718e:	fab0 f080 	clz	r0, r0
 8007192:	0940      	lsrs	r0, r0, #5
 8007194:	0040      	lsls	r0, r0, #1
 8007196:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007198:	2001      	movs	r0, #1
	}
 800719a:	4770      	bx	lr
 800719c:	200036f8 	.word	0x200036f8
 80071a0:	200036e0 	.word	0x200036e0

080071a4 <xTaskPriorityInherit>:
	{
 80071a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80071a8:	4604      	mov	r4, r0
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d02e      	beq.n	800720c <xTaskPriorityInherit+0x68>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80071ae:	4d22      	ldr	r5, [pc, #136]	@ (8007238 <xTaskPriorityInherit+0x94>)
 80071b0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80071b2:	682a      	ldr	r2, [r5, #0]
 80071b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d236      	bcs.n	8007228 <xTaskPriorityInherit+0x84>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80071ba:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80071bc:	4f1f      	ldr	r7, [pc, #124]	@ (800723c <xTaskPriorityInherit+0x98>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80071be:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c0:	bfa1      	itttt	ge
 80071c2:	682a      	ldrge	r2, [r5, #0]
 80071c4:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 80071c6:	f1c2 0207 	rsbge	r2, r2, #7
 80071ca:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80071cc:	2614      	movs	r6, #20
 80071ce:	6942      	ldr	r2, [r0, #20]
 80071d0:	fb06 7303 	mla	r3, r6, r3, r7
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d115      	bne.n	8007204 <xTaskPriorityInherit+0x60>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071d8:	f100 0804 	add.w	r8, r0, #4
 80071dc:	4640      	mov	r0, r8
 80071de:	f7fe ff15 	bl	800600c <uxListRemove>
 80071e2:	4a17      	ldr	r2, [pc, #92]	@ (8007240 <xTaskPriorityInherit+0x9c>)
 80071e4:	b1a0      	cbz	r0, 8007210 <xTaskPriorityInherit+0x6c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071e6:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80071e8:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071ea:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80071ec:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80071ee:	2301      	movs	r3, #1
 80071f0:	4083      	lsls	r3, r0
 80071f2:	430b      	orrs	r3, r1
 80071f4:	6013      	str	r3, [r2, #0]
 80071f6:	2314      	movs	r3, #20
 80071f8:	4641      	mov	r1, r8
 80071fa:	fb03 7000 	mla	r0, r3, r0, r7
 80071fe:	f7fe fee3 	bl	8005fc8 <vListInsertEnd>
 8007202:	e002      	b.n	800720a <xTaskPriorityInherit+0x66>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007208:	62c3      	str	r3, [r0, #44]	@ 0x2c
				xReturn = pdTRUE;
 800720a:	2001      	movs	r0, #1
	}
 800720c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007210:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8007212:	4346      	muls	r6, r0
 8007214:	59bb      	ldr	r3, [r7, r6]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e5      	bne.n	80071e6 <xTaskPriorityInherit+0x42>
 800721a:	6813      	ldr	r3, [r2, #0]
 800721c:	2101      	movs	r1, #1
 800721e:	4081      	lsls	r1, r0
 8007220:	ea23 0301 	bic.w	r3, r3, r1
 8007224:	6013      	str	r3, [r2, #0]
 8007226:	e7de      	b.n	80071e6 <xTaskPriorityInherit+0x42>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800722c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722e:	4298      	cmp	r0, r3
 8007230:	bf2c      	ite	cs
 8007232:	2000      	movcs	r0, #0
 8007234:	2001      	movcc	r0, #1
 8007236:	e7e9      	b.n	800720c <xTaskPriorityInherit+0x68>
 8007238:	20003804 	.word	0x20003804
 800723c:	20003778 	.word	0x20003778
 8007240:	200036fc 	.word	0x200036fc

08007244 <xTaskPriorityDisinherit>:
	{
 8007244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8007246:	4604      	mov	r4, r0
 8007248:	b908      	cbnz	r0, 800724e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800724a:	2000      	movs	r0, #0
	}
 800724c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800724e:	4b22      	ldr	r3, [pc, #136]	@ (80072d8 <xTaskPriorityDisinherit+0x94>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4283      	cmp	r3, r0
 8007254:	d008      	beq.n	8007268 <xTaskPriorityDisinherit+0x24>
 8007256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	e7fe      	b.n	8007266 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8007268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800726a:	b943      	cbnz	r3, 800727e <xTaskPriorityDisinherit+0x3a>
 800726c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007270:	f383 8811 	msr	BASEPRI, r3
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	e7fe      	b.n	800727c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800727e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007280:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 8007282:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007284:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8007286:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007288:	d0df      	beq.n	800724a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1dd      	bne.n	800724a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800728e:	1d06      	adds	r6, r0, #4
 8007290:	4630      	mov	r0, r6
 8007292:	f7fe febb 	bl	800600c <uxListRemove>
 8007296:	4f11      	ldr	r7, [pc, #68]	@ (80072dc <xTaskPriorityDisinherit+0x98>)
 8007298:	4a11      	ldr	r2, [pc, #68]	@ (80072e0 <xTaskPriorityDisinherit+0x9c>)
 800729a:	b950      	cbnz	r0, 80072b2 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800729c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800729e:	2314      	movs	r3, #20
 80072a0:	434b      	muls	r3, r1
 80072a2:	58fb      	ldr	r3, [r7, r3]
 80072a4:	b92b      	cbnz	r3, 80072b2 <xTaskPriorityDisinherit+0x6e>
 80072a6:	6813      	ldr	r3, [r2, #0]
 80072a8:	2501      	movs	r5, #1
 80072aa:	408d      	lsls	r5, r1
 80072ac:	ea23 0305 	bic.w	r3, r3, r5
 80072b0:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072b2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80072b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b6:	f1c3 0107 	rsb	r1, r3, #7
 80072ba:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80072bc:	6811      	ldr	r1, [r2, #0]
 80072be:	2401      	movs	r4, #1
 80072c0:	fa04 f503 	lsl.w	r5, r4, r3
 80072c4:	2014      	movs	r0, #20
 80072c6:	430d      	orrs	r5, r1
 80072c8:	fb00 7003 	mla	r0, r0, r3, r7
 80072cc:	4631      	mov	r1, r6
 80072ce:	6015      	str	r5, [r2, #0]
 80072d0:	f7fe fe7a 	bl	8005fc8 <vListInsertEnd>
					xReturn = pdTRUE;
 80072d4:	4620      	mov	r0, r4
		return xReturn;
 80072d6:	e7b9      	b.n	800724c <xTaskPriorityDisinherit+0x8>
 80072d8:	20003804 	.word	0x20003804
 80072dc:	20003778 	.word	0x20003778
 80072e0:	200036fc 	.word	0x200036fc

080072e4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80072e6:	4604      	mov	r4, r0
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d04d      	beq.n	8007388 <vTaskPriorityDisinheritAfterTimeout+0xa4>
			configASSERT( pxTCB->uxMutexesHeld );
 80072ec:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80072ee:	b942      	cbnz	r2, 8007302 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80072f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	e7fe      	b.n	8007300 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007302:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007304:	4299      	cmp	r1, r3
 8007306:	bf38      	it	cc
 8007308:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800730a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800730c:	428b      	cmp	r3, r1
 800730e:	d03b      	beq.n	8007388 <vTaskPriorityDisinheritAfterTimeout+0xa4>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007310:	2a01      	cmp	r2, #1
 8007312:	d139      	bne.n	8007388 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					configASSERT( pxTCB != pxCurrentTCB );
 8007314:	4a1d      	ldr	r2, [pc, #116]	@ (800738c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8007316:	6812      	ldr	r2, [r2, #0]
 8007318:	4282      	cmp	r2, r0
 800731a:	d108      	bne.n	800732e <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800731c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	e7fe      	b.n	800732c <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800732e:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007330:	4e17      	ldr	r6, [pc, #92]	@ (8007390 <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 8007332:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007334:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007336:	f04f 0514 	mov.w	r5, #20
 800733a:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800733c:	bfa8      	it	ge
 800733e:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007342:	fb05 6303 	mla	r3, r5, r3, r6
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007346:	bfa8      	it	ge
 8007348:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800734a:	429a      	cmp	r2, r3
 800734c:	d11c      	bne.n	8007388 <vTaskPriorityDisinheritAfterTimeout+0xa4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800734e:	1d07      	adds	r7, r0, #4
 8007350:	4638      	mov	r0, r7
 8007352:	f7fe fe5b 	bl	800600c <uxListRemove>
 8007356:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007358:	4c0e      	ldr	r4, [pc, #56]	@ (8007394 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 800735a:	b940      	cbnz	r0, 800736e <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800735c:	4355      	muls	r5, r2
 800735e:	5973      	ldr	r3, [r6, r5]
 8007360:	b92b      	cbnz	r3, 800736e <vTaskPriorityDisinheritAfterTimeout+0x8a>
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	2101      	movs	r1, #1
 8007366:	4091      	lsls	r1, r2
 8007368:	ea23 0301 	bic.w	r3, r3, r1
 800736c:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 800736e:	6821      	ldr	r1, [r4, #0]
 8007370:	2301      	movs	r3, #1
 8007372:	4093      	lsls	r3, r2
 8007374:	430b      	orrs	r3, r1
 8007376:	2014      	movs	r0, #20
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	4639      	mov	r1, r7
 800737c:	fb00 6002 	mla	r0, r0, r2, r6
	}
 8007380:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8007384:	f7fe be20 	b.w	8005fc8 <vListInsertEnd>
	}
 8007388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738a:	bf00      	nop
 800738c:	20003804 	.word	0x20003804
 8007390:	20003778 	.word	0x20003778
 8007394:	200036fc 	.word	0x200036fc

08007398 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007398:	4b04      	ldr	r3, [pc, #16]	@ (80073ac <pvTaskIncrementMutexHeldCount+0x14>)
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	b11a      	cbz	r2, 80073a6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800739e:	6819      	ldr	r1, [r3, #0]
 80073a0:	6c8a      	ldr	r2, [r1, #72]	@ 0x48
 80073a2:	3201      	adds	r2, #1
 80073a4:	648a      	str	r2, [r1, #72]	@ 0x48
		return pxCurrentTCB;
 80073a6:	6818      	ldr	r0, [r3, #0]
	}
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	20003804 	.word	0x20003804

080073b0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073b0:	4808      	ldr	r0, [pc, #32]	@ (80073d4 <prvPortStartFirstTask+0x24>)
 80073b2:	6800      	ldr	r0, [r0, #0]
 80073b4:	6800      	ldr	r0, [r0, #0]
 80073b6:	f380 8808 	msr	MSP, r0
 80073ba:	f04f 0000 	mov.w	r0, #0
 80073be:	f380 8814 	msr	CONTROL, r0
 80073c2:	b662      	cpsie	i
 80073c4:	b661      	cpsie	f
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	df00      	svc	0
 80073d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073d2:	0000      	.short	0x0000
 80073d4:	e000ed08 	.word	0xe000ed08

080073d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073d8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80073e8 <vPortEnableVFP+0x10>
 80073dc:	6801      	ldr	r1, [r0, #0]
 80073de:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80073e2:	6001      	str	r1, [r0, #0]
 80073e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073e6:	0000      	.short	0x0000
 80073e8:	e000ed88 	.word	0xe000ed88

080073ec <prvTaskExitError>:
{
 80073ec:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80073f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007428 <prvTaskExitError+0x3c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3301      	adds	r3, #1
 80073f8:	d008      	beq.n	800740c <prvTaskExitError+0x20>
 80073fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	e7fe      	b.n	800740a <prvTaskExitError+0x1e>
 800740c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800741c:	9b01      	ldr	r3, [sp, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0fc      	beq.n	800741c <prvTaskExitError+0x30>
}
 8007422:	b002      	add	sp, #8
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	2000001c 	.word	0x2000001c

0800742c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800742c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007430:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007434:	4b07      	ldr	r3, [pc, #28]	@ (8007454 <pxPortInitialiseStack+0x28>)
 8007436:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800743a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800743e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007442:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007446:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800744a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800744e:	3844      	subs	r0, #68	@ 0x44
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	080073ed 	.word	0x080073ed
	...

08007460 <SVC_Handler>:
	__asm volatile (
 8007460:	4b07      	ldr	r3, [pc, #28]	@ (8007480 <pxCurrentTCBConst2>)
 8007462:	6819      	ldr	r1, [r3, #0]
 8007464:	6808      	ldr	r0, [r1, #0]
 8007466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746a:	f380 8809 	msr	PSP, r0
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f04f 0000 	mov.w	r0, #0
 8007476:	f380 8811 	msr	BASEPRI, r0
 800747a:	4770      	bx	lr
 800747c:	f3af 8000 	nop.w

08007480 <pxCurrentTCBConst2>:
 8007480:	20003804 	.word	0x20003804

08007484 <vPortEnterCritical>:
 8007484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007494:	4a0a      	ldr	r2, [pc, #40]	@ (80074c0 <vPortEnterCritical+0x3c>)
 8007496:	6813      	ldr	r3, [r2, #0]
 8007498:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800749a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800749c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800749e:	d10e      	bne.n	80074be <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074a0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80074a4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	b143      	cbz	r3, 80074be <vPortEnterCritical+0x3a>
 80074ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	e7fe      	b.n	80074bc <vPortEnterCritical+0x38>
}
 80074be:	4770      	bx	lr
 80074c0:	2000001c 	.word	0x2000001c

080074c4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80074c4:	4a08      	ldr	r2, [pc, #32]	@ (80074e8 <vPortExitCritical+0x24>)
 80074c6:	6813      	ldr	r3, [r2, #0]
 80074c8:	b943      	cbnz	r3, 80074dc <vPortExitCritical+0x18>
 80074ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	e7fe      	b.n	80074da <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80074dc:	3b01      	subs	r3, #1
 80074de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074e0:	b90b      	cbnz	r3, 80074e6 <vPortExitCritical+0x22>
	__asm volatile
 80074e2:	f383 8811 	msr	BASEPRI, r3
}
 80074e6:	4770      	bx	lr
 80074e8:	2000001c 	.word	0x2000001c
 80074ec:	00000000 	.word	0x00000000

080074f0 <PendSV_Handler>:
	__asm volatile
 80074f0:	f3ef 8009 	mrs	r0, PSP
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	4b15      	ldr	r3, [pc, #84]	@ (8007550 <pxCurrentTCBConst>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	f01e 0f10 	tst.w	lr, #16
 8007500:	bf08      	it	eq
 8007502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750a:	6010      	str	r0, [r2, #0]
 800750c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007510:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007514:	f380 8811 	msr	BASEPRI, r0
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f7ff fd46 	bl	8006fb0 <vTaskSwitchContext>
 8007524:	f04f 0000 	mov.w	r0, #0
 8007528:	f380 8811 	msr	BASEPRI, r0
 800752c:	bc09      	pop	{r0, r3}
 800752e:	6819      	ldr	r1, [r3, #0]
 8007530:	6808      	ldr	r0, [r1, #0]
 8007532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007536:	f01e 0f10 	tst.w	lr, #16
 800753a:	bf08      	it	eq
 800753c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007540:	f380 8809 	msr	PSP, r0
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	f3af 8000 	nop.w

08007550 <pxCurrentTCBConst>:
 8007550:	20003804 	.word	0x20003804

08007554 <SysTick_Handler>:
{
 8007554:	b508      	push	{r3, lr}
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007566:	f7ff fbf1 	bl	8006d4c <xTaskIncrementTick>
 800756a:	b128      	cbz	r0, 8007578 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800756c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007570:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007574:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8007578:	2300      	movs	r3, #0
 800757a:	f383 8811 	msr	BASEPRI, r3
}
 800757e:	bd08      	pop	{r3, pc}

08007580 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007580:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8007584:	2300      	movs	r3, #0
 8007586:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007588:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800758a:	4b05      	ldr	r3, [pc, #20]	@ (80075a0 <vPortSetupTimerInterrupt+0x20>)
 800758c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	fbb3 f3f1 	udiv	r3, r3, r1
 8007596:	3b01      	subs	r3, #1
 8007598:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800759a:	2307      	movs	r3, #7
 800759c:	6113      	str	r3, [r2, #16]
}
 800759e:	4770      	bx	lr
 80075a0:	20000010 	.word	0x20000010

080075a4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 80075a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075aa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 80075ae:	4a38      	ldr	r2, [pc, #224]	@ (8007690 <xPortStartScheduler+0xec>)
 80075b0:	4291      	cmp	r1, r2
 80075b2:	d108      	bne.n	80075c6 <xPortStartScheduler+0x22>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	e7fe      	b.n	80075c4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075c6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80075ca:	4b32      	ldr	r3, [pc, #200]	@ (8007694 <xPortStartScheduler+0xf0>)
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d108      	bne.n	80075e2 <xPortStartScheduler+0x3e>
 80075d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	e7fe      	b.n	80075e0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075e2:	4b2d      	ldr	r3, [pc, #180]	@ (8007698 <xPortStartScheduler+0xf4>)
 80075e4:	781a      	ldrb	r2, [r3, #0]
 80075e6:	b2d2      	uxtb	r2, r2
 80075e8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075ea:	22ff      	movs	r2, #255	@ 0xff
 80075ec:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075ee:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075f0:	4a2a      	ldr	r2, [pc, #168]	@ (800769c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80075fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007600:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007602:	4a27      	ldr	r2, [pc, #156]	@ (80076a0 <xPortStartScheduler+0xfc>)
 8007604:	2307      	movs	r3, #7
 8007606:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007608:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800760c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800760e:	0609      	lsls	r1, r1, #24
 8007610:	d40a      	bmi.n	8007628 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007612:	2b03      	cmp	r3, #3
 8007614:	d011      	beq.n	800763a <xPortStartScheduler+0x96>
 8007616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	e7fe      	b.n	8007626 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8007628:	3b01      	subs	r3, #1
 800762a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800762c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	b2db      	uxtb	r3, r3
 8007634:	f88d 3003 	strb.w	r3, [sp, #3]
 8007638:	e7e6      	b.n	8007608 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800763a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800763e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007640:	9b01      	ldr	r3, [sp, #4]
 8007642:	4a15      	ldr	r2, [pc, #84]	@ (8007698 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007644:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007648:	b2db      	uxtb	r3, r3
 800764a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800764c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8007650:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007654:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007658:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800765c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007660:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8007664:	f7ff ff8c 	bl	8007580 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007668:	4b0e      	ldr	r3, [pc, #56]	@ (80076a4 <xPortStartScheduler+0x100>)
 800766a:	2500      	movs	r5, #0
 800766c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800766e:	f7ff feb3 	bl	80073d8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007672:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8007676:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800767a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800767e:	f7ff fe97 	bl	80073b0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007682:	f7ff fc95 	bl	8006fb0 <vTaskSwitchContext>
	prvTaskExitError();
 8007686:	f7ff feb1 	bl	80073ec <prvTaskExitError>
}
 800768a:	4628      	mov	r0, r5
 800768c:	b003      	add	sp, #12
 800768e:	bd30      	pop	{r4, r5, pc}
 8007690:	410fc271 	.word	0x410fc271
 8007694:	410fc270 	.word	0x410fc270
 8007698:	e000e400 	.word	0xe000e400
 800769c:	2000380c 	.word	0x2000380c
 80076a0:	20003808 	.word	0x20003808
 80076a4:	2000001c 	.word	0x2000001c

080076a8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076a8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076ac:	2b0f      	cmp	r3, #15
 80076ae:	d90e      	bls.n	80076ce <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076b0:	4a11      	ldr	r2, [pc, #68]	@ (80076f8 <vPortValidateInterruptPriority+0x50>)
 80076b2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076b4:	4a11      	ldr	r2, [pc, #68]	@ (80076fc <vPortValidateInterruptPriority+0x54>)
 80076b6:	7812      	ldrb	r2, [r2, #0]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d908      	bls.n	80076ce <vPortValidateInterruptPriority+0x26>
 80076bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	e7fe      	b.n	80076cc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80076d2:	4a0b      	ldr	r2, [pc, #44]	@ (8007700 <vPortValidateInterruptPriority+0x58>)
 80076d4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80076d8:	6812      	ldr	r2, [r2, #0]
 80076da:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80076de:	4293      	cmp	r3, r2
 80076e0:	d908      	bls.n	80076f4 <vPortValidateInterruptPriority+0x4c>
 80076e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	e7fe      	b.n	80076f2 <vPortValidateInterruptPriority+0x4a>
	}
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	e000e3f0 	.word	0xe000e3f0
 80076fc:	2000380c 	.word	0x2000380c
 8007700:	20003808 	.word	0x20003808

08007704 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007704:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007706:	4b10      	ldr	r3, [pc, #64]	@ (8007748 <prvInsertBlockIntoFreeList+0x44>)
 8007708:	461a      	mov	r2, r3
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4283      	cmp	r3, r0
 800770e:	d3fb      	bcc.n	8007708 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007710:	6854      	ldr	r4, [r2, #4]
 8007712:	1911      	adds	r1, r2, r4
 8007714:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007716:	bf01      	itttt	eq
 8007718:	6841      	ldreq	r1, [r0, #4]
 800771a:	4610      	moveq	r0, r2
 800771c:	1909      	addeq	r1, r1, r4
 800771e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007720:	6844      	ldr	r4, [r0, #4]
 8007722:	1901      	adds	r1, r0, r4
 8007724:	428b      	cmp	r3, r1
 8007726:	d10c      	bne.n	8007742 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007728:	4908      	ldr	r1, [pc, #32]	@ (800774c <prvInsertBlockIntoFreeList+0x48>)
 800772a:	6809      	ldr	r1, [r1, #0]
 800772c:	428b      	cmp	r3, r1
 800772e:	d003      	beq.n	8007738 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007730:	6859      	ldr	r1, [r3, #4]
 8007732:	4421      	add	r1, r4
 8007734:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007736:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007738:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800773a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800773c:	bf18      	it	ne
 800773e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007740:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007742:	4619      	mov	r1, r3
 8007744:	e7f8      	b.n	8007738 <prvInsertBlockIntoFreeList+0x34>
 8007746:	bf00      	nop
 8007748:	20003820 	.word	0x20003820
 800774c:	2000381c 	.word	0x2000381c

08007750 <pvPortMalloc>:
{
 8007750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007754:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007756:	f7ff faf1 	bl	8006d3c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800775a:	493f      	ldr	r1, [pc, #252]	@ (8007858 <pvPortMalloc+0x108>)
 800775c:	4d3f      	ldr	r5, [pc, #252]	@ (800785c <pvPortMalloc+0x10c>)
 800775e:	680b      	ldr	r3, [r1, #0]
 8007760:	b9fb      	cbnz	r3, 80077a2 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8007762:	4a3f      	ldr	r2, [pc, #252]	@ (8007860 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007764:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007766:	bf1c      	itt	ne
 8007768:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800776a:	4b3e      	ldrne	r3, [pc, #248]	@ (8007864 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800776c:	4e3e      	ldr	r6, [pc, #248]	@ (8007868 <pvPortMalloc+0x118>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800776e:	bf1a      	itte	ne
 8007770:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007774:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007776:	f245 53f0 	movweq	r3, #22000	@ 0x55f0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800777a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800777c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800777e:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8007782:	2000      	movs	r0, #0
 8007784:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007786:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8007788:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800778c:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800778e:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8007792:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007794:	4b35      	ldr	r3, [pc, #212]	@ (800786c <pvPortMalloc+0x11c>)
 8007796:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007798:	4b35      	ldr	r3, [pc, #212]	@ (8007870 <pvPortMalloc+0x120>)
 800779a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800779c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80077a0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077a2:	682e      	ldr	r6, [r5, #0]
 80077a4:	4226      	tst	r6, r4
 80077a6:	d152      	bne.n	800784e <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 80077a8:	2c00      	cmp	r4, #0
 80077aa:	d043      	beq.n	8007834 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80077ac:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077b0:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077b2:	bf1c      	itt	ne
 80077b4:	f023 0307 	bicne.w	r3, r3, #7
 80077b8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d047      	beq.n	800784e <pvPortMalloc+0xfe>
 80077be:	4f2c      	ldr	r7, [pc, #176]	@ (8007870 <pvPortMalloc+0x120>)
 80077c0:	683c      	ldr	r4, [r7, #0]
 80077c2:	429c      	cmp	r4, r3
 80077c4:	d343      	bcc.n	800784e <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 80077c6:	4a28      	ldr	r2, [pc, #160]	@ (8007868 <pvPortMalloc+0x118>)
 80077c8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077ca:	6868      	ldr	r0, [r5, #4]
 80077cc:	4298      	cmp	r0, r3
 80077ce:	d204      	bcs.n	80077da <pvPortMalloc+0x8a>
 80077d0:	f8d5 c000 	ldr.w	ip, [r5]
 80077d4:	f1bc 0f00 	cmp.w	ip, #0
 80077d8:	d115      	bne.n	8007806 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 80077da:	6809      	ldr	r1, [r1, #0]
 80077dc:	42a9      	cmp	r1, r5
 80077de:	d036      	beq.n	800784e <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077e0:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077e2:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077e6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077e8:	1ac2      	subs	r2, r0, r3
 80077ea:	2a10      	cmp	r2, #16
 80077ec:	d912      	bls.n	8007814 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077ee:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077f0:	0741      	lsls	r1, r0, #29
 80077f2:	d00b      	beq.n	800780c <pvPortMalloc+0xbc>
 80077f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	e7fe      	b.n	8007804 <pvPortMalloc+0xb4>
 8007806:	462a      	mov	r2, r5
 8007808:	4665      	mov	r5, ip
 800780a:	e7de      	b.n	80077ca <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800780c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800780e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007810:	f7ff ff78 	bl	8007704 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007814:	4915      	ldr	r1, [pc, #84]	@ (800786c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007816:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007818:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800781a:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800781c:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800781e:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8007822:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007826:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007828:	bf38      	it	cc
 800782a:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800782c:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800782e:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8007832:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8007834:	f7ff fb22 	bl	8006e7c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007838:	0763      	lsls	r3, r4, #29
 800783a:	d00a      	beq.n	8007852 <pvPortMalloc+0x102>
 800783c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	e7fe      	b.n	800784c <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 800784e:	2400      	movs	r4, #0
 8007850:	e7f0      	b.n	8007834 <pvPortMalloc+0xe4>
}
 8007852:	4620      	mov	r0, r4
 8007854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007858:	2000381c 	.word	0x2000381c
 800785c:	20003810 	.word	0x20003810
 8007860:	20003828 	.word	0x20003828
 8007864:	20008e18 	.word	0x20008e18
 8007868:	20003820 	.word	0x20003820
 800786c:	20003814 	.word	0x20003814
 8007870:	20003818 	.word	0x20003818

08007874 <vPortFree>:
{
 8007874:	b510      	push	{r4, lr}
	if( pv != NULL )
 8007876:	4604      	mov	r4, r0
 8007878:	b370      	cbz	r0, 80078d8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800787a:	4a18      	ldr	r2, [pc, #96]	@ (80078dc <vPortFree+0x68>)
 800787c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007880:	6812      	ldr	r2, [r2, #0]
 8007882:	4213      	tst	r3, r2
 8007884:	d108      	bne.n	8007898 <vPortFree+0x24>
 8007886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	e7fe      	b.n	8007896 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007898:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800789c:	b141      	cbz	r1, 80078b0 <vPortFree+0x3c>
 800789e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	e7fe      	b.n	80078ae <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078b0:	ea23 0302 	bic.w	r3, r3, r2
 80078b4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80078b8:	f7ff fa40 	bl	8006d3c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078bc:	4a08      	ldr	r2, [pc, #32]	@ (80078e0 <vPortFree+0x6c>)
 80078be:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80078c2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078c4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078c8:	440b      	add	r3, r1
 80078ca:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078cc:	f7ff ff1a 	bl	8007704 <prvInsertBlockIntoFreeList>
}
 80078d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80078d4:	f7ff bad2 	b.w	8006e7c <xTaskResumeAll>
}
 80078d8:	bd10      	pop	{r4, pc}
 80078da:	bf00      	nop
 80078dc:	20003810 	.word	0x20003810
 80078e0:	20003818 	.word	0x20003818

080078e4 <atof>:
 80078e4:	2100      	movs	r1, #0
 80078e6:	f000 bec9 	b.w	800867c <strtod>
	...

080078ec <malloc>:
 80078ec:	4b02      	ldr	r3, [pc, #8]	@ (80078f8 <malloc+0xc>)
 80078ee:	4601      	mov	r1, r0
 80078f0:	6818      	ldr	r0, [r3, #0]
 80078f2:	f000 b82d 	b.w	8007950 <_malloc_r>
 80078f6:	bf00      	nop
 80078f8:	200001a0 	.word	0x200001a0

080078fc <free>:
 80078fc:	4b02      	ldr	r3, [pc, #8]	@ (8007908 <free+0xc>)
 80078fe:	4601      	mov	r1, r0
 8007900:	6818      	ldr	r0, [r3, #0]
 8007902:	f003 bd69 	b.w	800b3d8 <_free_r>
 8007906:	bf00      	nop
 8007908:	200001a0 	.word	0x200001a0

0800790c <sbrk_aligned>:
 800790c:	b570      	push	{r4, r5, r6, lr}
 800790e:	4e0f      	ldr	r6, [pc, #60]	@ (800794c <sbrk_aligned+0x40>)
 8007910:	460c      	mov	r4, r1
 8007912:	6831      	ldr	r1, [r6, #0]
 8007914:	4605      	mov	r5, r0
 8007916:	b911      	cbnz	r1, 800791e <sbrk_aligned+0x12>
 8007918:	f002 fe96 	bl	800a648 <_sbrk_r>
 800791c:	6030      	str	r0, [r6, #0]
 800791e:	4621      	mov	r1, r4
 8007920:	4628      	mov	r0, r5
 8007922:	f002 fe91 	bl	800a648 <_sbrk_r>
 8007926:	1c43      	adds	r3, r0, #1
 8007928:	d103      	bne.n	8007932 <sbrk_aligned+0x26>
 800792a:	f04f 34ff 	mov.w	r4, #4294967295
 800792e:	4620      	mov	r0, r4
 8007930:	bd70      	pop	{r4, r5, r6, pc}
 8007932:	1cc4      	adds	r4, r0, #3
 8007934:	f024 0403 	bic.w	r4, r4, #3
 8007938:	42a0      	cmp	r0, r4
 800793a:	d0f8      	beq.n	800792e <sbrk_aligned+0x22>
 800793c:	1a21      	subs	r1, r4, r0
 800793e:	4628      	mov	r0, r5
 8007940:	f002 fe82 	bl	800a648 <_sbrk_r>
 8007944:	3001      	adds	r0, #1
 8007946:	d1f2      	bne.n	800792e <sbrk_aligned+0x22>
 8007948:	e7ef      	b.n	800792a <sbrk_aligned+0x1e>
 800794a:	bf00      	nop
 800794c:	20008e18 	.word	0x20008e18

08007950 <_malloc_r>:
 8007950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007954:	1ccd      	adds	r5, r1, #3
 8007956:	f025 0503 	bic.w	r5, r5, #3
 800795a:	3508      	adds	r5, #8
 800795c:	2d0c      	cmp	r5, #12
 800795e:	bf38      	it	cc
 8007960:	250c      	movcc	r5, #12
 8007962:	2d00      	cmp	r5, #0
 8007964:	4606      	mov	r6, r0
 8007966:	db01      	blt.n	800796c <_malloc_r+0x1c>
 8007968:	42a9      	cmp	r1, r5
 800796a:	d904      	bls.n	8007976 <_malloc_r+0x26>
 800796c:	230c      	movs	r3, #12
 800796e:	6033      	str	r3, [r6, #0]
 8007970:	2000      	movs	r0, #0
 8007972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007976:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a4c <_malloc_r+0xfc>
 800797a:	f000 f869 	bl	8007a50 <__malloc_lock>
 800797e:	f8d8 3000 	ldr.w	r3, [r8]
 8007982:	461c      	mov	r4, r3
 8007984:	bb44      	cbnz	r4, 80079d8 <_malloc_r+0x88>
 8007986:	4629      	mov	r1, r5
 8007988:	4630      	mov	r0, r6
 800798a:	f7ff ffbf 	bl	800790c <sbrk_aligned>
 800798e:	1c43      	adds	r3, r0, #1
 8007990:	4604      	mov	r4, r0
 8007992:	d158      	bne.n	8007a46 <_malloc_r+0xf6>
 8007994:	f8d8 4000 	ldr.w	r4, [r8]
 8007998:	4627      	mov	r7, r4
 800799a:	2f00      	cmp	r7, #0
 800799c:	d143      	bne.n	8007a26 <_malloc_r+0xd6>
 800799e:	2c00      	cmp	r4, #0
 80079a0:	d04b      	beq.n	8007a3a <_malloc_r+0xea>
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	4639      	mov	r1, r7
 80079a6:	4630      	mov	r0, r6
 80079a8:	eb04 0903 	add.w	r9, r4, r3
 80079ac:	f002 fe4c 	bl	800a648 <_sbrk_r>
 80079b0:	4581      	cmp	r9, r0
 80079b2:	d142      	bne.n	8007a3a <_malloc_r+0xea>
 80079b4:	6821      	ldr	r1, [r4, #0]
 80079b6:	1a6d      	subs	r5, r5, r1
 80079b8:	4629      	mov	r1, r5
 80079ba:	4630      	mov	r0, r6
 80079bc:	f7ff ffa6 	bl	800790c <sbrk_aligned>
 80079c0:	3001      	adds	r0, #1
 80079c2:	d03a      	beq.n	8007a3a <_malloc_r+0xea>
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	442b      	add	r3, r5
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	f8d8 3000 	ldr.w	r3, [r8]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	bb62      	cbnz	r2, 8007a2c <_malloc_r+0xdc>
 80079d2:	f8c8 7000 	str.w	r7, [r8]
 80079d6:	e00f      	b.n	80079f8 <_malloc_r+0xa8>
 80079d8:	6822      	ldr	r2, [r4, #0]
 80079da:	1b52      	subs	r2, r2, r5
 80079dc:	d420      	bmi.n	8007a20 <_malloc_r+0xd0>
 80079de:	2a0b      	cmp	r2, #11
 80079e0:	d917      	bls.n	8007a12 <_malloc_r+0xc2>
 80079e2:	1961      	adds	r1, r4, r5
 80079e4:	42a3      	cmp	r3, r4
 80079e6:	6025      	str	r5, [r4, #0]
 80079e8:	bf18      	it	ne
 80079ea:	6059      	strne	r1, [r3, #4]
 80079ec:	6863      	ldr	r3, [r4, #4]
 80079ee:	bf08      	it	eq
 80079f0:	f8c8 1000 	streq.w	r1, [r8]
 80079f4:	5162      	str	r2, [r4, r5]
 80079f6:	604b      	str	r3, [r1, #4]
 80079f8:	4630      	mov	r0, r6
 80079fa:	f000 f82f 	bl	8007a5c <__malloc_unlock>
 80079fe:	f104 000b 	add.w	r0, r4, #11
 8007a02:	1d23      	adds	r3, r4, #4
 8007a04:	f020 0007 	bic.w	r0, r0, #7
 8007a08:	1ac2      	subs	r2, r0, r3
 8007a0a:	bf1c      	itt	ne
 8007a0c:	1a1b      	subne	r3, r3, r0
 8007a0e:	50a3      	strne	r3, [r4, r2]
 8007a10:	e7af      	b.n	8007972 <_malloc_r+0x22>
 8007a12:	6862      	ldr	r2, [r4, #4]
 8007a14:	42a3      	cmp	r3, r4
 8007a16:	bf0c      	ite	eq
 8007a18:	f8c8 2000 	streq.w	r2, [r8]
 8007a1c:	605a      	strne	r2, [r3, #4]
 8007a1e:	e7eb      	b.n	80079f8 <_malloc_r+0xa8>
 8007a20:	4623      	mov	r3, r4
 8007a22:	6864      	ldr	r4, [r4, #4]
 8007a24:	e7ae      	b.n	8007984 <_malloc_r+0x34>
 8007a26:	463c      	mov	r4, r7
 8007a28:	687f      	ldr	r7, [r7, #4]
 8007a2a:	e7b6      	b.n	800799a <_malloc_r+0x4a>
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	42a3      	cmp	r3, r4
 8007a32:	d1fb      	bne.n	8007a2c <_malloc_r+0xdc>
 8007a34:	2300      	movs	r3, #0
 8007a36:	6053      	str	r3, [r2, #4]
 8007a38:	e7de      	b.n	80079f8 <_malloc_r+0xa8>
 8007a3a:	230c      	movs	r3, #12
 8007a3c:	6033      	str	r3, [r6, #0]
 8007a3e:	4630      	mov	r0, r6
 8007a40:	f000 f80c 	bl	8007a5c <__malloc_unlock>
 8007a44:	e794      	b.n	8007970 <_malloc_r+0x20>
 8007a46:	6005      	str	r5, [r0, #0]
 8007a48:	e7d6      	b.n	80079f8 <_malloc_r+0xa8>
 8007a4a:	bf00      	nop
 8007a4c:	20008e1c 	.word	0x20008e1c

08007a50 <__malloc_lock>:
 8007a50:	4801      	ldr	r0, [pc, #4]	@ (8007a58 <__malloc_lock+0x8>)
 8007a52:	f7fb ba72 	b.w	8002f3a <__retarget_lock_acquire_recursive>
 8007a56:	bf00      	nop
 8007a58:	200036c4 	.word	0x200036c4

08007a5c <__malloc_unlock>:
 8007a5c:	4801      	ldr	r0, [pc, #4]	@ (8007a64 <__malloc_unlock+0x8>)
 8007a5e:	f7fb ba78 	b.w	8002f52 <__retarget_lock_release_recursive>
 8007a62:	bf00      	nop
 8007a64:	200036c4 	.word	0x200036c4

08007a68 <sulp>:
 8007a68:	b570      	push	{r4, r5, r6, lr}
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	460d      	mov	r5, r1
 8007a6e:	ec45 4b10 	vmov	d0, r4, r5
 8007a72:	4616      	mov	r6, r2
 8007a74:	f004 fbfe 	bl	800c274 <__ulp>
 8007a78:	ec51 0b10 	vmov	r0, r1, d0
 8007a7c:	b17e      	cbz	r6, 8007a9e <sulp+0x36>
 8007a7e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007a82:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	dd09      	ble.n	8007a9e <sulp+0x36>
 8007a8a:	051b      	lsls	r3, r3, #20
 8007a8c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007a90:	2400      	movs	r4, #0
 8007a92:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007a96:	4622      	mov	r2, r4
 8007a98:	462b      	mov	r3, r5
 8007a9a:	f7f8 fdbd 	bl	8000618 <__aeabi_dmul>
 8007a9e:	ec41 0b10 	vmov	d0, r0, r1
 8007aa2:	bd70      	pop	{r4, r5, r6, pc}
 8007aa4:	0000      	movs	r0, r0
	...

08007aa8 <_strtod_l>:
 8007aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aac:	b09f      	sub	sp, #124	@ 0x7c
 8007aae:	460c      	mov	r4, r1
 8007ab0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	921a      	str	r2, [sp, #104]	@ 0x68
 8007ab6:	9005      	str	r0, [sp, #20]
 8007ab8:	f04f 0a00 	mov.w	sl, #0
 8007abc:	f04f 0b00 	mov.w	fp, #0
 8007ac0:	460a      	mov	r2, r1
 8007ac2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ac4:	7811      	ldrb	r1, [r2, #0]
 8007ac6:	292b      	cmp	r1, #43	@ 0x2b
 8007ac8:	d04a      	beq.n	8007b60 <_strtod_l+0xb8>
 8007aca:	d838      	bhi.n	8007b3e <_strtod_l+0x96>
 8007acc:	290d      	cmp	r1, #13
 8007ace:	d832      	bhi.n	8007b36 <_strtod_l+0x8e>
 8007ad0:	2908      	cmp	r1, #8
 8007ad2:	d832      	bhi.n	8007b3a <_strtod_l+0x92>
 8007ad4:	2900      	cmp	r1, #0
 8007ad6:	d03b      	beq.n	8007b50 <_strtod_l+0xa8>
 8007ad8:	2200      	movs	r2, #0
 8007ada:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007adc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007ade:	782a      	ldrb	r2, [r5, #0]
 8007ae0:	2a30      	cmp	r2, #48	@ 0x30
 8007ae2:	f040 80b3 	bne.w	8007c4c <_strtod_l+0x1a4>
 8007ae6:	786a      	ldrb	r2, [r5, #1]
 8007ae8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007aec:	2a58      	cmp	r2, #88	@ 0x58
 8007aee:	d16e      	bne.n	8007bce <_strtod_l+0x126>
 8007af0:	9302      	str	r3, [sp, #8]
 8007af2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	ab1a      	add	r3, sp, #104	@ 0x68
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	4a8e      	ldr	r2, [pc, #568]	@ (8007d34 <_strtod_l+0x28c>)
 8007afc:	9805      	ldr	r0, [sp, #20]
 8007afe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007b00:	a919      	add	r1, sp, #100	@ 0x64
 8007b02:	f003 fd1b 	bl	800b53c <__gethex>
 8007b06:	f010 060f 	ands.w	r6, r0, #15
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	d005      	beq.n	8007b1a <_strtod_l+0x72>
 8007b0e:	2e06      	cmp	r6, #6
 8007b10:	d128      	bne.n	8007b64 <_strtod_l+0xbc>
 8007b12:	3501      	adds	r5, #1
 8007b14:	2300      	movs	r3, #0
 8007b16:	9519      	str	r5, [sp, #100]	@ 0x64
 8007b18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f040 858e 	bne.w	800863e <_strtod_l+0xb96>
 8007b22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b24:	b1cb      	cbz	r3, 8007b5a <_strtod_l+0xb2>
 8007b26:	4652      	mov	r2, sl
 8007b28:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007b2c:	ec43 2b10 	vmov	d0, r2, r3
 8007b30:	b01f      	add	sp, #124	@ 0x7c
 8007b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b36:	2920      	cmp	r1, #32
 8007b38:	d1ce      	bne.n	8007ad8 <_strtod_l+0x30>
 8007b3a:	3201      	adds	r2, #1
 8007b3c:	e7c1      	b.n	8007ac2 <_strtod_l+0x1a>
 8007b3e:	292d      	cmp	r1, #45	@ 0x2d
 8007b40:	d1ca      	bne.n	8007ad8 <_strtod_l+0x30>
 8007b42:	2101      	movs	r1, #1
 8007b44:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007b46:	1c51      	adds	r1, r2, #1
 8007b48:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b4a:	7852      	ldrb	r2, [r2, #1]
 8007b4c:	2a00      	cmp	r2, #0
 8007b4e:	d1c5      	bne.n	8007adc <_strtod_l+0x34>
 8007b50:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b52:	9419      	str	r4, [sp, #100]	@ 0x64
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f040 8570 	bne.w	800863a <_strtod_l+0xb92>
 8007b5a:	4652      	mov	r2, sl
 8007b5c:	465b      	mov	r3, fp
 8007b5e:	e7e5      	b.n	8007b2c <_strtod_l+0x84>
 8007b60:	2100      	movs	r1, #0
 8007b62:	e7ef      	b.n	8007b44 <_strtod_l+0x9c>
 8007b64:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007b66:	b13a      	cbz	r2, 8007b78 <_strtod_l+0xd0>
 8007b68:	2135      	movs	r1, #53	@ 0x35
 8007b6a:	a81c      	add	r0, sp, #112	@ 0x70
 8007b6c:	f004 fc7c 	bl	800c468 <__copybits>
 8007b70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b72:	9805      	ldr	r0, [sp, #20]
 8007b74:	f004 f84a 	bl	800bc0c <_Bfree>
 8007b78:	3e01      	subs	r6, #1
 8007b7a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007b7c:	2e04      	cmp	r6, #4
 8007b7e:	d806      	bhi.n	8007b8e <_strtod_l+0xe6>
 8007b80:	e8df f006 	tbb	[pc, r6]
 8007b84:	201d0314 	.word	0x201d0314
 8007b88:	14          	.byte	0x14
 8007b89:	00          	.byte	0x00
 8007b8a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007b8e:	05e1      	lsls	r1, r4, #23
 8007b90:	bf48      	it	mi
 8007b92:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007b96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b9a:	0d1b      	lsrs	r3, r3, #20
 8007b9c:	051b      	lsls	r3, r3, #20
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1bb      	bne.n	8007b1a <_strtod_l+0x72>
 8007ba2:	f002 fd73 	bl	800a68c <__errno>
 8007ba6:	2322      	movs	r3, #34	@ 0x22
 8007ba8:	6003      	str	r3, [r0, #0]
 8007baa:	e7b6      	b.n	8007b1a <_strtod_l+0x72>
 8007bac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007bb0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007bb4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007bb8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007bbc:	e7e7      	b.n	8007b8e <_strtod_l+0xe6>
 8007bbe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007d3c <_strtod_l+0x294>
 8007bc2:	e7e4      	b.n	8007b8e <_strtod_l+0xe6>
 8007bc4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007bc8:	f04f 3aff 	mov.w	sl, #4294967295
 8007bcc:	e7df      	b.n	8007b8e <_strtod_l+0xe6>
 8007bce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bd0:	1c5a      	adds	r2, r3, #1
 8007bd2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007bd4:	785b      	ldrb	r3, [r3, #1]
 8007bd6:	2b30      	cmp	r3, #48	@ 0x30
 8007bd8:	d0f9      	beq.n	8007bce <_strtod_l+0x126>
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d09d      	beq.n	8007b1a <_strtod_l+0x72>
 8007bde:	2301      	movs	r3, #1
 8007be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007be2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007be4:	930c      	str	r3, [sp, #48]	@ 0x30
 8007be6:	2300      	movs	r3, #0
 8007be8:	9308      	str	r3, [sp, #32]
 8007bea:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bec:	461f      	mov	r7, r3
 8007bee:	220a      	movs	r2, #10
 8007bf0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007bf2:	7805      	ldrb	r5, [r0, #0]
 8007bf4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007bf8:	b2d9      	uxtb	r1, r3
 8007bfa:	2909      	cmp	r1, #9
 8007bfc:	d928      	bls.n	8007c50 <_strtod_l+0x1a8>
 8007bfe:	494e      	ldr	r1, [pc, #312]	@ (8007d38 <_strtod_l+0x290>)
 8007c00:	2201      	movs	r2, #1
 8007c02:	f001 fee0 	bl	80099c6 <strncmp>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	d032      	beq.n	8007c70 <_strtod_l+0x1c8>
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	462a      	mov	r2, r5
 8007c0e:	4681      	mov	r9, r0
 8007c10:	463d      	mov	r5, r7
 8007c12:	4603      	mov	r3, r0
 8007c14:	2a65      	cmp	r2, #101	@ 0x65
 8007c16:	d001      	beq.n	8007c1c <_strtod_l+0x174>
 8007c18:	2a45      	cmp	r2, #69	@ 0x45
 8007c1a:	d114      	bne.n	8007c46 <_strtod_l+0x19e>
 8007c1c:	b91d      	cbnz	r5, 8007c26 <_strtod_l+0x17e>
 8007c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c20:	4302      	orrs	r2, r0
 8007c22:	d095      	beq.n	8007b50 <_strtod_l+0xa8>
 8007c24:	2500      	movs	r5, #0
 8007c26:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007c28:	1c62      	adds	r2, r4, #1
 8007c2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c2c:	7862      	ldrb	r2, [r4, #1]
 8007c2e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007c30:	d077      	beq.n	8007d22 <_strtod_l+0x27a>
 8007c32:	2a2d      	cmp	r2, #45	@ 0x2d
 8007c34:	d07b      	beq.n	8007d2e <_strtod_l+0x286>
 8007c36:	f04f 0c00 	mov.w	ip, #0
 8007c3a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007c3e:	2909      	cmp	r1, #9
 8007c40:	f240 8082 	bls.w	8007d48 <_strtod_l+0x2a0>
 8007c44:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c46:	f04f 0800 	mov.w	r8, #0
 8007c4a:	e0a2      	b.n	8007d92 <_strtod_l+0x2ea>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e7c7      	b.n	8007be0 <_strtod_l+0x138>
 8007c50:	2f08      	cmp	r7, #8
 8007c52:	bfd5      	itete	le
 8007c54:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007c56:	9908      	ldrgt	r1, [sp, #32]
 8007c58:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c5c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007c60:	f100 0001 	add.w	r0, r0, #1
 8007c64:	bfd4      	ite	le
 8007c66:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007c68:	9308      	strgt	r3, [sp, #32]
 8007c6a:	3701      	adds	r7, #1
 8007c6c:	9019      	str	r0, [sp, #100]	@ 0x64
 8007c6e:	e7bf      	b.n	8007bf0 <_strtod_l+0x148>
 8007c70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c76:	785a      	ldrb	r2, [r3, #1]
 8007c78:	b37f      	cbz	r7, 8007cda <_strtod_l+0x232>
 8007c7a:	4681      	mov	r9, r0
 8007c7c:	463d      	mov	r5, r7
 8007c7e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007c82:	2b09      	cmp	r3, #9
 8007c84:	d912      	bls.n	8007cac <_strtod_l+0x204>
 8007c86:	2301      	movs	r3, #1
 8007c88:	e7c4      	b.n	8007c14 <_strtod_l+0x16c>
 8007c8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c8c:	1c5a      	adds	r2, r3, #1
 8007c8e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c90:	785a      	ldrb	r2, [r3, #1]
 8007c92:	3001      	adds	r0, #1
 8007c94:	2a30      	cmp	r2, #48	@ 0x30
 8007c96:	d0f8      	beq.n	8007c8a <_strtod_l+0x1e2>
 8007c98:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007c9c:	2b08      	cmp	r3, #8
 8007c9e:	f200 84d3 	bhi.w	8008648 <_strtod_l+0xba0>
 8007ca2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ca4:	930c      	str	r3, [sp, #48]	@ 0x30
 8007ca6:	4681      	mov	r9, r0
 8007ca8:	2000      	movs	r0, #0
 8007caa:	4605      	mov	r5, r0
 8007cac:	3a30      	subs	r2, #48	@ 0x30
 8007cae:	f100 0301 	add.w	r3, r0, #1
 8007cb2:	d02a      	beq.n	8007d0a <_strtod_l+0x262>
 8007cb4:	4499      	add	r9, r3
 8007cb6:	eb00 0c05 	add.w	ip, r0, r5
 8007cba:	462b      	mov	r3, r5
 8007cbc:	210a      	movs	r1, #10
 8007cbe:	4563      	cmp	r3, ip
 8007cc0:	d10d      	bne.n	8007cde <_strtod_l+0x236>
 8007cc2:	1c69      	adds	r1, r5, #1
 8007cc4:	4401      	add	r1, r0
 8007cc6:	4428      	add	r0, r5
 8007cc8:	2808      	cmp	r0, #8
 8007cca:	dc16      	bgt.n	8007cfa <_strtod_l+0x252>
 8007ccc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007cce:	230a      	movs	r3, #10
 8007cd0:	fb03 2300 	mla	r3, r3, r0, r2
 8007cd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	e018      	b.n	8007d0c <_strtod_l+0x264>
 8007cda:	4638      	mov	r0, r7
 8007cdc:	e7da      	b.n	8007c94 <_strtod_l+0x1ec>
 8007cde:	2b08      	cmp	r3, #8
 8007ce0:	f103 0301 	add.w	r3, r3, #1
 8007ce4:	dc03      	bgt.n	8007cee <_strtod_l+0x246>
 8007ce6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007ce8:	434e      	muls	r6, r1
 8007cea:	960a      	str	r6, [sp, #40]	@ 0x28
 8007cec:	e7e7      	b.n	8007cbe <_strtod_l+0x216>
 8007cee:	2b10      	cmp	r3, #16
 8007cf0:	bfde      	ittt	le
 8007cf2:	9e08      	ldrle	r6, [sp, #32]
 8007cf4:	434e      	mulle	r6, r1
 8007cf6:	9608      	strle	r6, [sp, #32]
 8007cf8:	e7e1      	b.n	8007cbe <_strtod_l+0x216>
 8007cfa:	280f      	cmp	r0, #15
 8007cfc:	dceb      	bgt.n	8007cd6 <_strtod_l+0x22e>
 8007cfe:	9808      	ldr	r0, [sp, #32]
 8007d00:	230a      	movs	r3, #10
 8007d02:	fb03 2300 	mla	r3, r3, r0, r2
 8007d06:	9308      	str	r3, [sp, #32]
 8007d08:	e7e5      	b.n	8007cd6 <_strtod_l+0x22e>
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d0e:	1c50      	adds	r0, r2, #1
 8007d10:	9019      	str	r0, [sp, #100]	@ 0x64
 8007d12:	7852      	ldrb	r2, [r2, #1]
 8007d14:	4618      	mov	r0, r3
 8007d16:	460d      	mov	r5, r1
 8007d18:	e7b1      	b.n	8007c7e <_strtod_l+0x1d6>
 8007d1a:	f04f 0900 	mov.w	r9, #0
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e77d      	b.n	8007c1e <_strtod_l+0x176>
 8007d22:	f04f 0c00 	mov.w	ip, #0
 8007d26:	1ca2      	adds	r2, r4, #2
 8007d28:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d2a:	78a2      	ldrb	r2, [r4, #2]
 8007d2c:	e785      	b.n	8007c3a <_strtod_l+0x192>
 8007d2e:	f04f 0c01 	mov.w	ip, #1
 8007d32:	e7f8      	b.n	8007d26 <_strtod_l+0x27e>
 8007d34:	0800e534 	.word	0x0800e534
 8007d38:	0800dc20 	.word	0x0800dc20
 8007d3c:	7ff00000 	.word	0x7ff00000
 8007d40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d42:	1c51      	adds	r1, r2, #1
 8007d44:	9119      	str	r1, [sp, #100]	@ 0x64
 8007d46:	7852      	ldrb	r2, [r2, #1]
 8007d48:	2a30      	cmp	r2, #48	@ 0x30
 8007d4a:	d0f9      	beq.n	8007d40 <_strtod_l+0x298>
 8007d4c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007d50:	2908      	cmp	r1, #8
 8007d52:	f63f af78 	bhi.w	8007c46 <_strtod_l+0x19e>
 8007d56:	3a30      	subs	r2, #48	@ 0x30
 8007d58:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007d5e:	f04f 080a 	mov.w	r8, #10
 8007d62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d64:	1c56      	adds	r6, r2, #1
 8007d66:	9619      	str	r6, [sp, #100]	@ 0x64
 8007d68:	7852      	ldrb	r2, [r2, #1]
 8007d6a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007d6e:	f1be 0f09 	cmp.w	lr, #9
 8007d72:	d939      	bls.n	8007de8 <_strtod_l+0x340>
 8007d74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007d76:	1a76      	subs	r6, r6, r1
 8007d78:	2e08      	cmp	r6, #8
 8007d7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007d7e:	dc03      	bgt.n	8007d88 <_strtod_l+0x2e0>
 8007d80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007d82:	4588      	cmp	r8, r1
 8007d84:	bfa8      	it	ge
 8007d86:	4688      	movge	r8, r1
 8007d88:	f1bc 0f00 	cmp.w	ip, #0
 8007d8c:	d001      	beq.n	8007d92 <_strtod_l+0x2ea>
 8007d8e:	f1c8 0800 	rsb	r8, r8, #0
 8007d92:	2d00      	cmp	r5, #0
 8007d94:	d14e      	bne.n	8007e34 <_strtod_l+0x38c>
 8007d96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d98:	4308      	orrs	r0, r1
 8007d9a:	f47f aebe 	bne.w	8007b1a <_strtod_l+0x72>
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f47f aed6 	bne.w	8007b50 <_strtod_l+0xa8>
 8007da4:	2a69      	cmp	r2, #105	@ 0x69
 8007da6:	d028      	beq.n	8007dfa <_strtod_l+0x352>
 8007da8:	dc25      	bgt.n	8007df6 <_strtod_l+0x34e>
 8007daa:	2a49      	cmp	r2, #73	@ 0x49
 8007dac:	d025      	beq.n	8007dfa <_strtod_l+0x352>
 8007dae:	2a4e      	cmp	r2, #78	@ 0x4e
 8007db0:	f47f aece 	bne.w	8007b50 <_strtod_l+0xa8>
 8007db4:	499b      	ldr	r1, [pc, #620]	@ (8008024 <_strtod_l+0x57c>)
 8007db6:	a819      	add	r0, sp, #100	@ 0x64
 8007db8:	f003 fde2 	bl	800b980 <__match>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	f43f aec7 	beq.w	8007b50 <_strtod_l+0xa8>
 8007dc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b28      	cmp	r3, #40	@ 0x28
 8007dc8:	d12e      	bne.n	8007e28 <_strtod_l+0x380>
 8007dca:	4997      	ldr	r1, [pc, #604]	@ (8008028 <_strtod_l+0x580>)
 8007dcc:	aa1c      	add	r2, sp, #112	@ 0x70
 8007dce:	a819      	add	r0, sp, #100	@ 0x64
 8007dd0:	f003 fdea 	bl	800b9a8 <__hexnan>
 8007dd4:	2805      	cmp	r0, #5
 8007dd6:	d127      	bne.n	8007e28 <_strtod_l+0x380>
 8007dd8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007dda:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007dde:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007de2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007de6:	e698      	b.n	8007b1a <_strtod_l+0x72>
 8007de8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007dea:	fb08 2101 	mla	r1, r8, r1, r2
 8007dee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007df2:	920e      	str	r2, [sp, #56]	@ 0x38
 8007df4:	e7b5      	b.n	8007d62 <_strtod_l+0x2ba>
 8007df6:	2a6e      	cmp	r2, #110	@ 0x6e
 8007df8:	e7da      	b.n	8007db0 <_strtod_l+0x308>
 8007dfa:	498c      	ldr	r1, [pc, #560]	@ (800802c <_strtod_l+0x584>)
 8007dfc:	a819      	add	r0, sp, #100	@ 0x64
 8007dfe:	f003 fdbf 	bl	800b980 <__match>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	f43f aea4 	beq.w	8007b50 <_strtod_l+0xa8>
 8007e08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e0a:	4989      	ldr	r1, [pc, #548]	@ (8008030 <_strtod_l+0x588>)
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	a819      	add	r0, sp, #100	@ 0x64
 8007e10:	9319      	str	r3, [sp, #100]	@ 0x64
 8007e12:	f003 fdb5 	bl	800b980 <__match>
 8007e16:	b910      	cbnz	r0, 8007e1e <_strtod_l+0x376>
 8007e18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007e1e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008040 <_strtod_l+0x598>
 8007e22:	f04f 0a00 	mov.w	sl, #0
 8007e26:	e678      	b.n	8007b1a <_strtod_l+0x72>
 8007e28:	4882      	ldr	r0, [pc, #520]	@ (8008034 <_strtod_l+0x58c>)
 8007e2a:	f002 fc71 	bl	800a710 <nan>
 8007e2e:	ec5b ab10 	vmov	sl, fp, d0
 8007e32:	e672      	b.n	8007b1a <_strtod_l+0x72>
 8007e34:	eba8 0309 	sub.w	r3, r8, r9
 8007e38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e3c:	2f00      	cmp	r7, #0
 8007e3e:	bf08      	it	eq
 8007e40:	462f      	moveq	r7, r5
 8007e42:	2d10      	cmp	r5, #16
 8007e44:	462c      	mov	r4, r5
 8007e46:	bfa8      	it	ge
 8007e48:	2410      	movge	r4, #16
 8007e4a:	f7f8 fb6b 	bl	8000524 <__aeabi_ui2d>
 8007e4e:	2d09      	cmp	r5, #9
 8007e50:	4682      	mov	sl, r0
 8007e52:	468b      	mov	fp, r1
 8007e54:	dc13      	bgt.n	8007e7e <_strtod_l+0x3d6>
 8007e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f43f ae5e 	beq.w	8007b1a <_strtod_l+0x72>
 8007e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e60:	dd78      	ble.n	8007f54 <_strtod_l+0x4ac>
 8007e62:	2b16      	cmp	r3, #22
 8007e64:	dc5f      	bgt.n	8007f26 <_strtod_l+0x47e>
 8007e66:	4974      	ldr	r1, [pc, #464]	@ (8008038 <_strtod_l+0x590>)
 8007e68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e70:	4652      	mov	r2, sl
 8007e72:	465b      	mov	r3, fp
 8007e74:	f7f8 fbd0 	bl	8000618 <__aeabi_dmul>
 8007e78:	4682      	mov	sl, r0
 8007e7a:	468b      	mov	fp, r1
 8007e7c:	e64d      	b.n	8007b1a <_strtod_l+0x72>
 8007e7e:	4b6e      	ldr	r3, [pc, #440]	@ (8008038 <_strtod_l+0x590>)
 8007e80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007e88:	f7f8 fbc6 	bl	8000618 <__aeabi_dmul>
 8007e8c:	4682      	mov	sl, r0
 8007e8e:	9808      	ldr	r0, [sp, #32]
 8007e90:	468b      	mov	fp, r1
 8007e92:	f7f8 fb47 	bl	8000524 <__aeabi_ui2d>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4650      	mov	r0, sl
 8007e9c:	4659      	mov	r1, fp
 8007e9e:	f7f8 fa05 	bl	80002ac <__adddf3>
 8007ea2:	2d0f      	cmp	r5, #15
 8007ea4:	4682      	mov	sl, r0
 8007ea6:	468b      	mov	fp, r1
 8007ea8:	ddd5      	ble.n	8007e56 <_strtod_l+0x3ae>
 8007eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eac:	1b2c      	subs	r4, r5, r4
 8007eae:	441c      	add	r4, r3
 8007eb0:	2c00      	cmp	r4, #0
 8007eb2:	f340 8096 	ble.w	8007fe2 <_strtod_l+0x53a>
 8007eb6:	f014 030f 	ands.w	r3, r4, #15
 8007eba:	d00a      	beq.n	8007ed2 <_strtod_l+0x42a>
 8007ebc:	495e      	ldr	r1, [pc, #376]	@ (8008038 <_strtod_l+0x590>)
 8007ebe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ec2:	4652      	mov	r2, sl
 8007ec4:	465b      	mov	r3, fp
 8007ec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eca:	f7f8 fba5 	bl	8000618 <__aeabi_dmul>
 8007ece:	4682      	mov	sl, r0
 8007ed0:	468b      	mov	fp, r1
 8007ed2:	f034 040f 	bics.w	r4, r4, #15
 8007ed6:	d073      	beq.n	8007fc0 <_strtod_l+0x518>
 8007ed8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007edc:	dd48      	ble.n	8007f70 <_strtod_l+0x4c8>
 8007ede:	2400      	movs	r4, #0
 8007ee0:	46a0      	mov	r8, r4
 8007ee2:	940a      	str	r4, [sp, #40]	@ 0x28
 8007ee4:	46a1      	mov	r9, r4
 8007ee6:	9a05      	ldr	r2, [sp, #20]
 8007ee8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008040 <_strtod_l+0x598>
 8007eec:	2322      	movs	r3, #34	@ 0x22
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	f04f 0a00 	mov.w	sl, #0
 8007ef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f43f ae0f 	beq.w	8007b1a <_strtod_l+0x72>
 8007efc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007efe:	9805      	ldr	r0, [sp, #20]
 8007f00:	f003 fe84 	bl	800bc0c <_Bfree>
 8007f04:	9805      	ldr	r0, [sp, #20]
 8007f06:	4649      	mov	r1, r9
 8007f08:	f003 fe80 	bl	800bc0c <_Bfree>
 8007f0c:	9805      	ldr	r0, [sp, #20]
 8007f0e:	4641      	mov	r1, r8
 8007f10:	f003 fe7c 	bl	800bc0c <_Bfree>
 8007f14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f16:	9805      	ldr	r0, [sp, #20]
 8007f18:	f003 fe78 	bl	800bc0c <_Bfree>
 8007f1c:	9805      	ldr	r0, [sp, #20]
 8007f1e:	4621      	mov	r1, r4
 8007f20:	f003 fe74 	bl	800bc0c <_Bfree>
 8007f24:	e5f9      	b.n	8007b1a <_strtod_l+0x72>
 8007f26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	dbbc      	blt.n	8007eaa <_strtod_l+0x402>
 8007f30:	4c41      	ldr	r4, [pc, #260]	@ (8008038 <_strtod_l+0x590>)
 8007f32:	f1c5 050f 	rsb	r5, r5, #15
 8007f36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007f3a:	4652      	mov	r2, sl
 8007f3c:	465b      	mov	r3, fp
 8007f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f42:	f7f8 fb69 	bl	8000618 <__aeabi_dmul>
 8007f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f48:	1b5d      	subs	r5, r3, r5
 8007f4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007f4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f52:	e78f      	b.n	8007e74 <_strtod_l+0x3cc>
 8007f54:	3316      	adds	r3, #22
 8007f56:	dba8      	blt.n	8007eaa <_strtod_l+0x402>
 8007f58:	4b37      	ldr	r3, [pc, #220]	@ (8008038 <_strtod_l+0x590>)
 8007f5a:	eba9 0808 	sub.w	r8, r9, r8
 8007f5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007f62:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007f66:	4650      	mov	r0, sl
 8007f68:	4659      	mov	r1, fp
 8007f6a:	f7f8 fc7f 	bl	800086c <__aeabi_ddiv>
 8007f6e:	e783      	b.n	8007e78 <_strtod_l+0x3d0>
 8007f70:	4b32      	ldr	r3, [pc, #200]	@ (800803c <_strtod_l+0x594>)
 8007f72:	9308      	str	r3, [sp, #32]
 8007f74:	2300      	movs	r3, #0
 8007f76:	1124      	asrs	r4, r4, #4
 8007f78:	4650      	mov	r0, sl
 8007f7a:	4659      	mov	r1, fp
 8007f7c:	461e      	mov	r6, r3
 8007f7e:	2c01      	cmp	r4, #1
 8007f80:	dc21      	bgt.n	8007fc6 <_strtod_l+0x51e>
 8007f82:	b10b      	cbz	r3, 8007f88 <_strtod_l+0x4e0>
 8007f84:	4682      	mov	sl, r0
 8007f86:	468b      	mov	fp, r1
 8007f88:	492c      	ldr	r1, [pc, #176]	@ (800803c <_strtod_l+0x594>)
 8007f8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007f8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007f92:	4652      	mov	r2, sl
 8007f94:	465b      	mov	r3, fp
 8007f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f9a:	f7f8 fb3d 	bl	8000618 <__aeabi_dmul>
 8007f9e:	4b28      	ldr	r3, [pc, #160]	@ (8008040 <_strtod_l+0x598>)
 8007fa0:	460a      	mov	r2, r1
 8007fa2:	400b      	ands	r3, r1
 8007fa4:	4927      	ldr	r1, [pc, #156]	@ (8008044 <_strtod_l+0x59c>)
 8007fa6:	428b      	cmp	r3, r1
 8007fa8:	4682      	mov	sl, r0
 8007faa:	d898      	bhi.n	8007ede <_strtod_l+0x436>
 8007fac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007fb0:	428b      	cmp	r3, r1
 8007fb2:	bf86      	itte	hi
 8007fb4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008048 <_strtod_l+0x5a0>
 8007fb8:	f04f 3aff 	movhi.w	sl, #4294967295
 8007fbc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	9308      	str	r3, [sp, #32]
 8007fc4:	e07a      	b.n	80080bc <_strtod_l+0x614>
 8007fc6:	07e2      	lsls	r2, r4, #31
 8007fc8:	d505      	bpl.n	8007fd6 <_strtod_l+0x52e>
 8007fca:	9b08      	ldr	r3, [sp, #32]
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f7f8 fb22 	bl	8000618 <__aeabi_dmul>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	9a08      	ldr	r2, [sp, #32]
 8007fd8:	3208      	adds	r2, #8
 8007fda:	3601      	adds	r6, #1
 8007fdc:	1064      	asrs	r4, r4, #1
 8007fde:	9208      	str	r2, [sp, #32]
 8007fe0:	e7cd      	b.n	8007f7e <_strtod_l+0x4d6>
 8007fe2:	d0ed      	beq.n	8007fc0 <_strtod_l+0x518>
 8007fe4:	4264      	negs	r4, r4
 8007fe6:	f014 020f 	ands.w	r2, r4, #15
 8007fea:	d00a      	beq.n	8008002 <_strtod_l+0x55a>
 8007fec:	4b12      	ldr	r3, [pc, #72]	@ (8008038 <_strtod_l+0x590>)
 8007fee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ff2:	4650      	mov	r0, sl
 8007ff4:	4659      	mov	r1, fp
 8007ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffa:	f7f8 fc37 	bl	800086c <__aeabi_ddiv>
 8007ffe:	4682      	mov	sl, r0
 8008000:	468b      	mov	fp, r1
 8008002:	1124      	asrs	r4, r4, #4
 8008004:	d0dc      	beq.n	8007fc0 <_strtod_l+0x518>
 8008006:	2c1f      	cmp	r4, #31
 8008008:	dd20      	ble.n	800804c <_strtod_l+0x5a4>
 800800a:	2400      	movs	r4, #0
 800800c:	46a0      	mov	r8, r4
 800800e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008010:	46a1      	mov	r9, r4
 8008012:	9a05      	ldr	r2, [sp, #20]
 8008014:	2322      	movs	r3, #34	@ 0x22
 8008016:	f04f 0a00 	mov.w	sl, #0
 800801a:	f04f 0b00 	mov.w	fp, #0
 800801e:	6013      	str	r3, [r2, #0]
 8008020:	e768      	b.n	8007ef4 <_strtod_l+0x44c>
 8008022:	bf00      	nop
 8008024:	0800e67e 	.word	0x0800e67e
 8008028:	0800e520 	.word	0x0800e520
 800802c:	0800e676 	.word	0x0800e676
 8008030:	0800e75f 	.word	0x0800e75f
 8008034:	0800dfb2 	.word	0x0800dfb2
 8008038:	0800e8d8 	.word	0x0800e8d8
 800803c:	0800e8b0 	.word	0x0800e8b0
 8008040:	7ff00000 	.word	0x7ff00000
 8008044:	7ca00000 	.word	0x7ca00000
 8008048:	7fefffff 	.word	0x7fefffff
 800804c:	f014 0310 	ands.w	r3, r4, #16
 8008050:	bf18      	it	ne
 8008052:	236a      	movne	r3, #106	@ 0x6a
 8008054:	4ea9      	ldr	r6, [pc, #676]	@ (80082fc <_strtod_l+0x854>)
 8008056:	9308      	str	r3, [sp, #32]
 8008058:	4650      	mov	r0, sl
 800805a:	4659      	mov	r1, fp
 800805c:	2300      	movs	r3, #0
 800805e:	07e2      	lsls	r2, r4, #31
 8008060:	d504      	bpl.n	800806c <_strtod_l+0x5c4>
 8008062:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008066:	f7f8 fad7 	bl	8000618 <__aeabi_dmul>
 800806a:	2301      	movs	r3, #1
 800806c:	1064      	asrs	r4, r4, #1
 800806e:	f106 0608 	add.w	r6, r6, #8
 8008072:	d1f4      	bne.n	800805e <_strtod_l+0x5b6>
 8008074:	b10b      	cbz	r3, 800807a <_strtod_l+0x5d2>
 8008076:	4682      	mov	sl, r0
 8008078:	468b      	mov	fp, r1
 800807a:	9b08      	ldr	r3, [sp, #32]
 800807c:	b1b3      	cbz	r3, 80080ac <_strtod_l+0x604>
 800807e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008082:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008086:	2b00      	cmp	r3, #0
 8008088:	4659      	mov	r1, fp
 800808a:	dd0f      	ble.n	80080ac <_strtod_l+0x604>
 800808c:	2b1f      	cmp	r3, #31
 800808e:	dd55      	ble.n	800813c <_strtod_l+0x694>
 8008090:	2b34      	cmp	r3, #52	@ 0x34
 8008092:	bfde      	ittt	le
 8008094:	f04f 33ff 	movle.w	r3, #4294967295
 8008098:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800809c:	4093      	lslle	r3, r2
 800809e:	f04f 0a00 	mov.w	sl, #0
 80080a2:	bfcc      	ite	gt
 80080a4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80080a8:	ea03 0b01 	andle.w	fp, r3, r1
 80080ac:	2200      	movs	r2, #0
 80080ae:	2300      	movs	r3, #0
 80080b0:	4650      	mov	r0, sl
 80080b2:	4659      	mov	r1, fp
 80080b4:	f7f8 fd18 	bl	8000ae8 <__aeabi_dcmpeq>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d1a6      	bne.n	800800a <_strtod_l+0x562>
 80080bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80080c2:	9805      	ldr	r0, [sp, #20]
 80080c4:	462b      	mov	r3, r5
 80080c6:	463a      	mov	r2, r7
 80080c8:	f003 fe08 	bl	800bcdc <__s2b>
 80080cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f43f af05 	beq.w	8007ede <_strtod_l+0x436>
 80080d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080d6:	2a00      	cmp	r2, #0
 80080d8:	eba9 0308 	sub.w	r3, r9, r8
 80080dc:	bfa8      	it	ge
 80080de:	2300      	movge	r3, #0
 80080e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80080e2:	2400      	movs	r4, #0
 80080e4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80080e8:	9316      	str	r3, [sp, #88]	@ 0x58
 80080ea:	46a0      	mov	r8, r4
 80080ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080ee:	9805      	ldr	r0, [sp, #20]
 80080f0:	6859      	ldr	r1, [r3, #4]
 80080f2:	f003 fd4b 	bl	800bb8c <_Balloc>
 80080f6:	4681      	mov	r9, r0
 80080f8:	2800      	cmp	r0, #0
 80080fa:	f43f aef4 	beq.w	8007ee6 <_strtod_l+0x43e>
 80080fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008100:	691a      	ldr	r2, [r3, #16]
 8008102:	3202      	adds	r2, #2
 8008104:	f103 010c 	add.w	r1, r3, #12
 8008108:	0092      	lsls	r2, r2, #2
 800810a:	300c      	adds	r0, #12
 800810c:	f002 faf0 	bl	800a6f0 <memcpy>
 8008110:	ec4b ab10 	vmov	d0, sl, fp
 8008114:	9805      	ldr	r0, [sp, #20]
 8008116:	aa1c      	add	r2, sp, #112	@ 0x70
 8008118:	a91b      	add	r1, sp, #108	@ 0x6c
 800811a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800811e:	f004 f919 	bl	800c354 <__d2b>
 8008122:	901a      	str	r0, [sp, #104]	@ 0x68
 8008124:	2800      	cmp	r0, #0
 8008126:	f43f aede 	beq.w	8007ee6 <_strtod_l+0x43e>
 800812a:	9805      	ldr	r0, [sp, #20]
 800812c:	2101      	movs	r1, #1
 800812e:	f003 fe6b 	bl	800be08 <__i2b>
 8008132:	4680      	mov	r8, r0
 8008134:	b948      	cbnz	r0, 800814a <_strtod_l+0x6a2>
 8008136:	f04f 0800 	mov.w	r8, #0
 800813a:	e6d4      	b.n	8007ee6 <_strtod_l+0x43e>
 800813c:	f04f 32ff 	mov.w	r2, #4294967295
 8008140:	fa02 f303 	lsl.w	r3, r2, r3
 8008144:	ea03 0a0a 	and.w	sl, r3, sl
 8008148:	e7b0      	b.n	80080ac <_strtod_l+0x604>
 800814a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800814c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800814e:	2d00      	cmp	r5, #0
 8008150:	bfab      	itete	ge
 8008152:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008154:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008156:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008158:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800815a:	bfac      	ite	ge
 800815c:	18ef      	addge	r7, r5, r3
 800815e:	1b5e      	sublt	r6, r3, r5
 8008160:	9b08      	ldr	r3, [sp, #32]
 8008162:	1aed      	subs	r5, r5, r3
 8008164:	4415      	add	r5, r2
 8008166:	4b66      	ldr	r3, [pc, #408]	@ (8008300 <_strtod_l+0x858>)
 8008168:	3d01      	subs	r5, #1
 800816a:	429d      	cmp	r5, r3
 800816c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008170:	da50      	bge.n	8008214 <_strtod_l+0x76c>
 8008172:	1b5b      	subs	r3, r3, r5
 8008174:	2b1f      	cmp	r3, #31
 8008176:	eba2 0203 	sub.w	r2, r2, r3
 800817a:	f04f 0101 	mov.w	r1, #1
 800817e:	dc3d      	bgt.n	80081fc <_strtod_l+0x754>
 8008180:	fa01 f303 	lsl.w	r3, r1, r3
 8008184:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008186:	2300      	movs	r3, #0
 8008188:	9310      	str	r3, [sp, #64]	@ 0x40
 800818a:	18bd      	adds	r5, r7, r2
 800818c:	9b08      	ldr	r3, [sp, #32]
 800818e:	42af      	cmp	r7, r5
 8008190:	4416      	add	r6, r2
 8008192:	441e      	add	r6, r3
 8008194:	463b      	mov	r3, r7
 8008196:	bfa8      	it	ge
 8008198:	462b      	movge	r3, r5
 800819a:	42b3      	cmp	r3, r6
 800819c:	bfa8      	it	ge
 800819e:	4633      	movge	r3, r6
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	bfc2      	ittt	gt
 80081a4:	1aed      	subgt	r5, r5, r3
 80081a6:	1af6      	subgt	r6, r6, r3
 80081a8:	1aff      	subgt	r7, r7, r3
 80081aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	dd16      	ble.n	80081de <_strtod_l+0x736>
 80081b0:	4641      	mov	r1, r8
 80081b2:	9805      	ldr	r0, [sp, #20]
 80081b4:	461a      	mov	r2, r3
 80081b6:	f003 fee7 	bl	800bf88 <__pow5mult>
 80081ba:	4680      	mov	r8, r0
 80081bc:	2800      	cmp	r0, #0
 80081be:	d0ba      	beq.n	8008136 <_strtod_l+0x68e>
 80081c0:	4601      	mov	r1, r0
 80081c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80081c4:	9805      	ldr	r0, [sp, #20]
 80081c6:	f003 fe35 	bl	800be34 <__multiply>
 80081ca:	900e      	str	r0, [sp, #56]	@ 0x38
 80081cc:	2800      	cmp	r0, #0
 80081ce:	f43f ae8a 	beq.w	8007ee6 <_strtod_l+0x43e>
 80081d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081d4:	9805      	ldr	r0, [sp, #20]
 80081d6:	f003 fd19 	bl	800bc0c <_Bfree>
 80081da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80081de:	2d00      	cmp	r5, #0
 80081e0:	dc1d      	bgt.n	800821e <_strtod_l+0x776>
 80081e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	dd23      	ble.n	8008230 <_strtod_l+0x788>
 80081e8:	4649      	mov	r1, r9
 80081ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80081ec:	9805      	ldr	r0, [sp, #20]
 80081ee:	f003 fecb 	bl	800bf88 <__pow5mult>
 80081f2:	4681      	mov	r9, r0
 80081f4:	b9e0      	cbnz	r0, 8008230 <_strtod_l+0x788>
 80081f6:	f04f 0900 	mov.w	r9, #0
 80081fa:	e674      	b.n	8007ee6 <_strtod_l+0x43e>
 80081fc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008200:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008204:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008208:	35e2      	adds	r5, #226	@ 0xe2
 800820a:	fa01 f305 	lsl.w	r3, r1, r5
 800820e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008210:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008212:	e7ba      	b.n	800818a <_strtod_l+0x6e2>
 8008214:	2300      	movs	r3, #0
 8008216:	9310      	str	r3, [sp, #64]	@ 0x40
 8008218:	2301      	movs	r3, #1
 800821a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800821c:	e7b5      	b.n	800818a <_strtod_l+0x6e2>
 800821e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008220:	9805      	ldr	r0, [sp, #20]
 8008222:	462a      	mov	r2, r5
 8008224:	f003 ff0a 	bl	800c03c <__lshift>
 8008228:	901a      	str	r0, [sp, #104]	@ 0x68
 800822a:	2800      	cmp	r0, #0
 800822c:	d1d9      	bne.n	80081e2 <_strtod_l+0x73a>
 800822e:	e65a      	b.n	8007ee6 <_strtod_l+0x43e>
 8008230:	2e00      	cmp	r6, #0
 8008232:	dd07      	ble.n	8008244 <_strtod_l+0x79c>
 8008234:	4649      	mov	r1, r9
 8008236:	9805      	ldr	r0, [sp, #20]
 8008238:	4632      	mov	r2, r6
 800823a:	f003 feff 	bl	800c03c <__lshift>
 800823e:	4681      	mov	r9, r0
 8008240:	2800      	cmp	r0, #0
 8008242:	d0d8      	beq.n	80081f6 <_strtod_l+0x74e>
 8008244:	2f00      	cmp	r7, #0
 8008246:	dd08      	ble.n	800825a <_strtod_l+0x7b2>
 8008248:	4641      	mov	r1, r8
 800824a:	9805      	ldr	r0, [sp, #20]
 800824c:	463a      	mov	r2, r7
 800824e:	f003 fef5 	bl	800c03c <__lshift>
 8008252:	4680      	mov	r8, r0
 8008254:	2800      	cmp	r0, #0
 8008256:	f43f ae46 	beq.w	8007ee6 <_strtod_l+0x43e>
 800825a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800825c:	9805      	ldr	r0, [sp, #20]
 800825e:	464a      	mov	r2, r9
 8008260:	f003 ff74 	bl	800c14c <__mdiff>
 8008264:	4604      	mov	r4, r0
 8008266:	2800      	cmp	r0, #0
 8008268:	f43f ae3d 	beq.w	8007ee6 <_strtod_l+0x43e>
 800826c:	68c3      	ldr	r3, [r0, #12]
 800826e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008270:	2300      	movs	r3, #0
 8008272:	60c3      	str	r3, [r0, #12]
 8008274:	4641      	mov	r1, r8
 8008276:	f003 ff4d 	bl	800c114 <__mcmp>
 800827a:	2800      	cmp	r0, #0
 800827c:	da46      	bge.n	800830c <_strtod_l+0x864>
 800827e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008280:	ea53 030a 	orrs.w	r3, r3, sl
 8008284:	d16c      	bne.n	8008360 <_strtod_l+0x8b8>
 8008286:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800828a:	2b00      	cmp	r3, #0
 800828c:	d168      	bne.n	8008360 <_strtod_l+0x8b8>
 800828e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008292:	0d1b      	lsrs	r3, r3, #20
 8008294:	051b      	lsls	r3, r3, #20
 8008296:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800829a:	d961      	bls.n	8008360 <_strtod_l+0x8b8>
 800829c:	6963      	ldr	r3, [r4, #20]
 800829e:	b913      	cbnz	r3, 80082a6 <_strtod_l+0x7fe>
 80082a0:	6923      	ldr	r3, [r4, #16]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	dd5c      	ble.n	8008360 <_strtod_l+0x8b8>
 80082a6:	4621      	mov	r1, r4
 80082a8:	2201      	movs	r2, #1
 80082aa:	9805      	ldr	r0, [sp, #20]
 80082ac:	f003 fec6 	bl	800c03c <__lshift>
 80082b0:	4641      	mov	r1, r8
 80082b2:	4604      	mov	r4, r0
 80082b4:	f003 ff2e 	bl	800c114 <__mcmp>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	dd51      	ble.n	8008360 <_strtod_l+0x8b8>
 80082bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082c0:	9a08      	ldr	r2, [sp, #32]
 80082c2:	0d1b      	lsrs	r3, r3, #20
 80082c4:	051b      	lsls	r3, r3, #20
 80082c6:	2a00      	cmp	r2, #0
 80082c8:	d06b      	beq.n	80083a2 <_strtod_l+0x8fa>
 80082ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80082ce:	d868      	bhi.n	80083a2 <_strtod_l+0x8fa>
 80082d0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80082d4:	f67f ae9d 	bls.w	8008012 <_strtod_l+0x56a>
 80082d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008304 <_strtod_l+0x85c>)
 80082da:	4650      	mov	r0, sl
 80082dc:	4659      	mov	r1, fp
 80082de:	2200      	movs	r2, #0
 80082e0:	f7f8 f99a 	bl	8000618 <__aeabi_dmul>
 80082e4:	4b08      	ldr	r3, [pc, #32]	@ (8008308 <_strtod_l+0x860>)
 80082e6:	400b      	ands	r3, r1
 80082e8:	4682      	mov	sl, r0
 80082ea:	468b      	mov	fp, r1
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f47f ae05 	bne.w	8007efc <_strtod_l+0x454>
 80082f2:	9a05      	ldr	r2, [sp, #20]
 80082f4:	2322      	movs	r3, #34	@ 0x22
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	e600      	b.n	8007efc <_strtod_l+0x454>
 80082fa:	bf00      	nop
 80082fc:	0800e548 	.word	0x0800e548
 8008300:	fffffc02 	.word	0xfffffc02
 8008304:	39500000 	.word	0x39500000
 8008308:	7ff00000 	.word	0x7ff00000
 800830c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008310:	d165      	bne.n	80083de <_strtod_l+0x936>
 8008312:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008314:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008318:	b35a      	cbz	r2, 8008372 <_strtod_l+0x8ca>
 800831a:	4a9f      	ldr	r2, [pc, #636]	@ (8008598 <_strtod_l+0xaf0>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d12b      	bne.n	8008378 <_strtod_l+0x8d0>
 8008320:	9b08      	ldr	r3, [sp, #32]
 8008322:	4651      	mov	r1, sl
 8008324:	b303      	cbz	r3, 8008368 <_strtod_l+0x8c0>
 8008326:	4b9d      	ldr	r3, [pc, #628]	@ (800859c <_strtod_l+0xaf4>)
 8008328:	465a      	mov	r2, fp
 800832a:	4013      	ands	r3, r2
 800832c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008330:	f04f 32ff 	mov.w	r2, #4294967295
 8008334:	d81b      	bhi.n	800836e <_strtod_l+0x8c6>
 8008336:	0d1b      	lsrs	r3, r3, #20
 8008338:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800833c:	fa02 f303 	lsl.w	r3, r2, r3
 8008340:	4299      	cmp	r1, r3
 8008342:	d119      	bne.n	8008378 <_strtod_l+0x8d0>
 8008344:	4b96      	ldr	r3, [pc, #600]	@ (80085a0 <_strtod_l+0xaf8>)
 8008346:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008348:	429a      	cmp	r2, r3
 800834a:	d102      	bne.n	8008352 <_strtod_l+0x8aa>
 800834c:	3101      	adds	r1, #1
 800834e:	f43f adca 	beq.w	8007ee6 <_strtod_l+0x43e>
 8008352:	4b92      	ldr	r3, [pc, #584]	@ (800859c <_strtod_l+0xaf4>)
 8008354:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008356:	401a      	ands	r2, r3
 8008358:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800835c:	f04f 0a00 	mov.w	sl, #0
 8008360:	9b08      	ldr	r3, [sp, #32]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1b8      	bne.n	80082d8 <_strtod_l+0x830>
 8008366:	e5c9      	b.n	8007efc <_strtod_l+0x454>
 8008368:	f04f 33ff 	mov.w	r3, #4294967295
 800836c:	e7e8      	b.n	8008340 <_strtod_l+0x898>
 800836e:	4613      	mov	r3, r2
 8008370:	e7e6      	b.n	8008340 <_strtod_l+0x898>
 8008372:	ea53 030a 	orrs.w	r3, r3, sl
 8008376:	d0a1      	beq.n	80082bc <_strtod_l+0x814>
 8008378:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800837a:	b1db      	cbz	r3, 80083b4 <_strtod_l+0x90c>
 800837c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800837e:	4213      	tst	r3, r2
 8008380:	d0ee      	beq.n	8008360 <_strtod_l+0x8b8>
 8008382:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008384:	9a08      	ldr	r2, [sp, #32]
 8008386:	4650      	mov	r0, sl
 8008388:	4659      	mov	r1, fp
 800838a:	b1bb      	cbz	r3, 80083bc <_strtod_l+0x914>
 800838c:	f7ff fb6c 	bl	8007a68 <sulp>
 8008390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008394:	ec53 2b10 	vmov	r2, r3, d0
 8008398:	f7f7 ff88 	bl	80002ac <__adddf3>
 800839c:	4682      	mov	sl, r0
 800839e:	468b      	mov	fp, r1
 80083a0:	e7de      	b.n	8008360 <_strtod_l+0x8b8>
 80083a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80083a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80083aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80083ae:	f04f 3aff 	mov.w	sl, #4294967295
 80083b2:	e7d5      	b.n	8008360 <_strtod_l+0x8b8>
 80083b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083b6:	ea13 0f0a 	tst.w	r3, sl
 80083ba:	e7e1      	b.n	8008380 <_strtod_l+0x8d8>
 80083bc:	f7ff fb54 	bl	8007a68 <sulp>
 80083c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083c4:	ec53 2b10 	vmov	r2, r3, d0
 80083c8:	f7f7 ff6e 	bl	80002a8 <__aeabi_dsub>
 80083cc:	2200      	movs	r2, #0
 80083ce:	2300      	movs	r3, #0
 80083d0:	4682      	mov	sl, r0
 80083d2:	468b      	mov	fp, r1
 80083d4:	f7f8 fb88 	bl	8000ae8 <__aeabi_dcmpeq>
 80083d8:	2800      	cmp	r0, #0
 80083da:	d0c1      	beq.n	8008360 <_strtod_l+0x8b8>
 80083dc:	e619      	b.n	8008012 <_strtod_l+0x56a>
 80083de:	4641      	mov	r1, r8
 80083e0:	4620      	mov	r0, r4
 80083e2:	f004 f80f 	bl	800c404 <__ratio>
 80083e6:	ec57 6b10 	vmov	r6, r7, d0
 80083ea:	2200      	movs	r2, #0
 80083ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80083f0:	4630      	mov	r0, r6
 80083f2:	4639      	mov	r1, r7
 80083f4:	f7f8 fb8c 	bl	8000b10 <__aeabi_dcmple>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	d06f      	beq.n	80084dc <_strtod_l+0xa34>
 80083fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d17a      	bne.n	80084f8 <_strtod_l+0xa50>
 8008402:	f1ba 0f00 	cmp.w	sl, #0
 8008406:	d158      	bne.n	80084ba <_strtod_l+0xa12>
 8008408:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800840a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800840e:	2b00      	cmp	r3, #0
 8008410:	d15a      	bne.n	80084c8 <_strtod_l+0xa20>
 8008412:	4b64      	ldr	r3, [pc, #400]	@ (80085a4 <_strtod_l+0xafc>)
 8008414:	2200      	movs	r2, #0
 8008416:	4630      	mov	r0, r6
 8008418:	4639      	mov	r1, r7
 800841a:	f7f8 fb6f 	bl	8000afc <__aeabi_dcmplt>
 800841e:	2800      	cmp	r0, #0
 8008420:	d159      	bne.n	80084d6 <_strtod_l+0xa2e>
 8008422:	4630      	mov	r0, r6
 8008424:	4639      	mov	r1, r7
 8008426:	4b60      	ldr	r3, [pc, #384]	@ (80085a8 <_strtod_l+0xb00>)
 8008428:	2200      	movs	r2, #0
 800842a:	f7f8 f8f5 	bl	8000618 <__aeabi_dmul>
 800842e:	4606      	mov	r6, r0
 8008430:	460f      	mov	r7, r1
 8008432:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008436:	9606      	str	r6, [sp, #24]
 8008438:	9307      	str	r3, [sp, #28]
 800843a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800843e:	4d57      	ldr	r5, [pc, #348]	@ (800859c <_strtod_l+0xaf4>)
 8008440:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008444:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008446:	401d      	ands	r5, r3
 8008448:	4b58      	ldr	r3, [pc, #352]	@ (80085ac <_strtod_l+0xb04>)
 800844a:	429d      	cmp	r5, r3
 800844c:	f040 80b2 	bne.w	80085b4 <_strtod_l+0xb0c>
 8008450:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008452:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008456:	ec4b ab10 	vmov	d0, sl, fp
 800845a:	f003 ff0b 	bl	800c274 <__ulp>
 800845e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008462:	ec51 0b10 	vmov	r0, r1, d0
 8008466:	f7f8 f8d7 	bl	8000618 <__aeabi_dmul>
 800846a:	4652      	mov	r2, sl
 800846c:	465b      	mov	r3, fp
 800846e:	f7f7 ff1d 	bl	80002ac <__adddf3>
 8008472:	460b      	mov	r3, r1
 8008474:	4949      	ldr	r1, [pc, #292]	@ (800859c <_strtod_l+0xaf4>)
 8008476:	4a4e      	ldr	r2, [pc, #312]	@ (80085b0 <_strtod_l+0xb08>)
 8008478:	4019      	ands	r1, r3
 800847a:	4291      	cmp	r1, r2
 800847c:	4682      	mov	sl, r0
 800847e:	d942      	bls.n	8008506 <_strtod_l+0xa5e>
 8008480:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008482:	4b47      	ldr	r3, [pc, #284]	@ (80085a0 <_strtod_l+0xaf8>)
 8008484:	429a      	cmp	r2, r3
 8008486:	d103      	bne.n	8008490 <_strtod_l+0x9e8>
 8008488:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800848a:	3301      	adds	r3, #1
 800848c:	f43f ad2b 	beq.w	8007ee6 <_strtod_l+0x43e>
 8008490:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80085a0 <_strtod_l+0xaf8>
 8008494:	f04f 3aff 	mov.w	sl, #4294967295
 8008498:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800849a:	9805      	ldr	r0, [sp, #20]
 800849c:	f003 fbb6 	bl	800bc0c <_Bfree>
 80084a0:	9805      	ldr	r0, [sp, #20]
 80084a2:	4649      	mov	r1, r9
 80084a4:	f003 fbb2 	bl	800bc0c <_Bfree>
 80084a8:	9805      	ldr	r0, [sp, #20]
 80084aa:	4641      	mov	r1, r8
 80084ac:	f003 fbae 	bl	800bc0c <_Bfree>
 80084b0:	9805      	ldr	r0, [sp, #20]
 80084b2:	4621      	mov	r1, r4
 80084b4:	f003 fbaa 	bl	800bc0c <_Bfree>
 80084b8:	e618      	b.n	80080ec <_strtod_l+0x644>
 80084ba:	f1ba 0f01 	cmp.w	sl, #1
 80084be:	d103      	bne.n	80084c8 <_strtod_l+0xa20>
 80084c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f43f ada5 	beq.w	8008012 <_strtod_l+0x56a>
 80084c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008578 <_strtod_l+0xad0>
 80084cc:	4f35      	ldr	r7, [pc, #212]	@ (80085a4 <_strtod_l+0xafc>)
 80084ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80084d2:	2600      	movs	r6, #0
 80084d4:	e7b1      	b.n	800843a <_strtod_l+0x992>
 80084d6:	4f34      	ldr	r7, [pc, #208]	@ (80085a8 <_strtod_l+0xb00>)
 80084d8:	2600      	movs	r6, #0
 80084da:	e7aa      	b.n	8008432 <_strtod_l+0x98a>
 80084dc:	4b32      	ldr	r3, [pc, #200]	@ (80085a8 <_strtod_l+0xb00>)
 80084de:	4630      	mov	r0, r6
 80084e0:	4639      	mov	r1, r7
 80084e2:	2200      	movs	r2, #0
 80084e4:	f7f8 f898 	bl	8000618 <__aeabi_dmul>
 80084e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084ea:	4606      	mov	r6, r0
 80084ec:	460f      	mov	r7, r1
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d09f      	beq.n	8008432 <_strtod_l+0x98a>
 80084f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80084f6:	e7a0      	b.n	800843a <_strtod_l+0x992>
 80084f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008580 <_strtod_l+0xad8>
 80084fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008500:	ec57 6b17 	vmov	r6, r7, d7
 8008504:	e799      	b.n	800843a <_strtod_l+0x992>
 8008506:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800850a:	9b08      	ldr	r3, [sp, #32]
 800850c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1c1      	bne.n	8008498 <_strtod_l+0x9f0>
 8008514:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008518:	0d1b      	lsrs	r3, r3, #20
 800851a:	051b      	lsls	r3, r3, #20
 800851c:	429d      	cmp	r5, r3
 800851e:	d1bb      	bne.n	8008498 <_strtod_l+0x9f0>
 8008520:	4630      	mov	r0, r6
 8008522:	4639      	mov	r1, r7
 8008524:	f7f8 fbc0 	bl	8000ca8 <__aeabi_d2lz>
 8008528:	f7f8 f848 	bl	80005bc <__aeabi_l2d>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4630      	mov	r0, r6
 8008532:	4639      	mov	r1, r7
 8008534:	f7f7 feb8 	bl	80002a8 <__aeabi_dsub>
 8008538:	460b      	mov	r3, r1
 800853a:	4602      	mov	r2, r0
 800853c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008540:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008546:	ea46 060a 	orr.w	r6, r6, sl
 800854a:	431e      	orrs	r6, r3
 800854c:	d06f      	beq.n	800862e <_strtod_l+0xb86>
 800854e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008588 <_strtod_l+0xae0>)
 8008550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008554:	f7f8 fad2 	bl	8000afc <__aeabi_dcmplt>
 8008558:	2800      	cmp	r0, #0
 800855a:	f47f accf 	bne.w	8007efc <_strtod_l+0x454>
 800855e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008590 <_strtod_l+0xae8>)
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008568:	f7f8 fae6 	bl	8000b38 <__aeabi_dcmpgt>
 800856c:	2800      	cmp	r0, #0
 800856e:	d093      	beq.n	8008498 <_strtod_l+0x9f0>
 8008570:	e4c4      	b.n	8007efc <_strtod_l+0x454>
 8008572:	bf00      	nop
 8008574:	f3af 8000 	nop.w
 8008578:	00000000 	.word	0x00000000
 800857c:	bff00000 	.word	0xbff00000
 8008580:	00000000 	.word	0x00000000
 8008584:	3ff00000 	.word	0x3ff00000
 8008588:	94a03595 	.word	0x94a03595
 800858c:	3fdfffff 	.word	0x3fdfffff
 8008590:	35afe535 	.word	0x35afe535
 8008594:	3fe00000 	.word	0x3fe00000
 8008598:	000fffff 	.word	0x000fffff
 800859c:	7ff00000 	.word	0x7ff00000
 80085a0:	7fefffff 	.word	0x7fefffff
 80085a4:	3ff00000 	.word	0x3ff00000
 80085a8:	3fe00000 	.word	0x3fe00000
 80085ac:	7fe00000 	.word	0x7fe00000
 80085b0:	7c9fffff 	.word	0x7c9fffff
 80085b4:	9b08      	ldr	r3, [sp, #32]
 80085b6:	b323      	cbz	r3, 8008602 <_strtod_l+0xb5a>
 80085b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80085bc:	d821      	bhi.n	8008602 <_strtod_l+0xb5a>
 80085be:	a328      	add	r3, pc, #160	@ (adr r3, 8008660 <_strtod_l+0xbb8>)
 80085c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c4:	4630      	mov	r0, r6
 80085c6:	4639      	mov	r1, r7
 80085c8:	f7f8 faa2 	bl	8000b10 <__aeabi_dcmple>
 80085cc:	b1a0      	cbz	r0, 80085f8 <_strtod_l+0xb50>
 80085ce:	4639      	mov	r1, r7
 80085d0:	4630      	mov	r0, r6
 80085d2:	f7f8 faf9 	bl	8000bc8 <__aeabi_d2uiz>
 80085d6:	2801      	cmp	r0, #1
 80085d8:	bf38      	it	cc
 80085da:	2001      	movcc	r0, #1
 80085dc:	f7f7 ffa2 	bl	8000524 <__aeabi_ui2d>
 80085e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085e2:	4606      	mov	r6, r0
 80085e4:	460f      	mov	r7, r1
 80085e6:	b9fb      	cbnz	r3, 8008628 <_strtod_l+0xb80>
 80085e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80085ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80085ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80085f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80085f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80085f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80085fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80085fe:	1b5b      	subs	r3, r3, r5
 8008600:	9311      	str	r3, [sp, #68]	@ 0x44
 8008602:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008606:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800860a:	f003 fe33 	bl	800c274 <__ulp>
 800860e:	4650      	mov	r0, sl
 8008610:	ec53 2b10 	vmov	r2, r3, d0
 8008614:	4659      	mov	r1, fp
 8008616:	f7f7 ffff 	bl	8000618 <__aeabi_dmul>
 800861a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800861e:	f7f7 fe45 	bl	80002ac <__adddf3>
 8008622:	4682      	mov	sl, r0
 8008624:	468b      	mov	fp, r1
 8008626:	e770      	b.n	800850a <_strtod_l+0xa62>
 8008628:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800862c:	e7e0      	b.n	80085f0 <_strtod_l+0xb48>
 800862e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008668 <_strtod_l+0xbc0>)
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	f7f8 fa62 	bl	8000afc <__aeabi_dcmplt>
 8008638:	e798      	b.n	800856c <_strtod_l+0xac4>
 800863a:	2300      	movs	r3, #0
 800863c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800863e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008640:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008642:	6013      	str	r3, [r2, #0]
 8008644:	f7ff ba6d 	b.w	8007b22 <_strtod_l+0x7a>
 8008648:	2a65      	cmp	r2, #101	@ 0x65
 800864a:	f43f ab66 	beq.w	8007d1a <_strtod_l+0x272>
 800864e:	2a45      	cmp	r2, #69	@ 0x45
 8008650:	f43f ab63 	beq.w	8007d1a <_strtod_l+0x272>
 8008654:	2301      	movs	r3, #1
 8008656:	f7ff bb9e 	b.w	8007d96 <_strtod_l+0x2ee>
 800865a:	bf00      	nop
 800865c:	f3af 8000 	nop.w
 8008660:	ffc00000 	.word	0xffc00000
 8008664:	41dfffff 	.word	0x41dfffff
 8008668:	94a03595 	.word	0x94a03595
 800866c:	3fcfffff 	.word	0x3fcfffff

08008670 <_strtod_r>:
 8008670:	4b01      	ldr	r3, [pc, #4]	@ (8008678 <_strtod_r+0x8>)
 8008672:	f7ff ba19 	b.w	8007aa8 <_strtod_l>
 8008676:	bf00      	nop
 8008678:	20000034 	.word	0x20000034

0800867c <strtod>:
 800867c:	460a      	mov	r2, r1
 800867e:	4601      	mov	r1, r0
 8008680:	4802      	ldr	r0, [pc, #8]	@ (800868c <strtod+0x10>)
 8008682:	4b03      	ldr	r3, [pc, #12]	@ (8008690 <strtod+0x14>)
 8008684:	6800      	ldr	r0, [r0, #0]
 8008686:	f7ff ba0f 	b.w	8007aa8 <_strtod_l>
 800868a:	bf00      	nop
 800868c:	200001a0 	.word	0x200001a0
 8008690:	20000034 	.word	0x20000034

08008694 <_strtol_l.constprop.0>:
 8008694:	2b24      	cmp	r3, #36	@ 0x24
 8008696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800869a:	4686      	mov	lr, r0
 800869c:	4690      	mov	r8, r2
 800869e:	d801      	bhi.n	80086a4 <_strtol_l.constprop.0+0x10>
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d106      	bne.n	80086b2 <_strtol_l.constprop.0+0x1e>
 80086a4:	f001 fff2 	bl	800a68c <__errno>
 80086a8:	2316      	movs	r3, #22
 80086aa:	6003      	str	r3, [r0, #0]
 80086ac:	2000      	movs	r0, #0
 80086ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b2:	4834      	ldr	r0, [pc, #208]	@ (8008784 <_strtol_l.constprop.0+0xf0>)
 80086b4:	460d      	mov	r5, r1
 80086b6:	462a      	mov	r2, r5
 80086b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086bc:	5d06      	ldrb	r6, [r0, r4]
 80086be:	f016 0608 	ands.w	r6, r6, #8
 80086c2:	d1f8      	bne.n	80086b6 <_strtol_l.constprop.0+0x22>
 80086c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80086c6:	d12d      	bne.n	8008724 <_strtol_l.constprop.0+0x90>
 80086c8:	782c      	ldrb	r4, [r5, #0]
 80086ca:	2601      	movs	r6, #1
 80086cc:	1c95      	adds	r5, r2, #2
 80086ce:	f033 0210 	bics.w	r2, r3, #16
 80086d2:	d109      	bne.n	80086e8 <_strtol_l.constprop.0+0x54>
 80086d4:	2c30      	cmp	r4, #48	@ 0x30
 80086d6:	d12a      	bne.n	800872e <_strtol_l.constprop.0+0x9a>
 80086d8:	782a      	ldrb	r2, [r5, #0]
 80086da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80086de:	2a58      	cmp	r2, #88	@ 0x58
 80086e0:	d125      	bne.n	800872e <_strtol_l.constprop.0+0x9a>
 80086e2:	786c      	ldrb	r4, [r5, #1]
 80086e4:	2310      	movs	r3, #16
 80086e6:	3502      	adds	r5, #2
 80086e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80086ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80086f0:	2200      	movs	r2, #0
 80086f2:	fbbc f9f3 	udiv	r9, ip, r3
 80086f6:	4610      	mov	r0, r2
 80086f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80086fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008700:	2f09      	cmp	r7, #9
 8008702:	d81b      	bhi.n	800873c <_strtol_l.constprop.0+0xa8>
 8008704:	463c      	mov	r4, r7
 8008706:	42a3      	cmp	r3, r4
 8008708:	dd27      	ble.n	800875a <_strtol_l.constprop.0+0xc6>
 800870a:	1c57      	adds	r7, r2, #1
 800870c:	d007      	beq.n	800871e <_strtol_l.constprop.0+0x8a>
 800870e:	4581      	cmp	r9, r0
 8008710:	d320      	bcc.n	8008754 <_strtol_l.constprop.0+0xc0>
 8008712:	d101      	bne.n	8008718 <_strtol_l.constprop.0+0x84>
 8008714:	45a2      	cmp	sl, r4
 8008716:	db1d      	blt.n	8008754 <_strtol_l.constprop.0+0xc0>
 8008718:	fb00 4003 	mla	r0, r0, r3, r4
 800871c:	2201      	movs	r2, #1
 800871e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008722:	e7eb      	b.n	80086fc <_strtol_l.constprop.0+0x68>
 8008724:	2c2b      	cmp	r4, #43	@ 0x2b
 8008726:	bf04      	itt	eq
 8008728:	782c      	ldrbeq	r4, [r5, #0]
 800872a:	1c95      	addeq	r5, r2, #2
 800872c:	e7cf      	b.n	80086ce <_strtol_l.constprop.0+0x3a>
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1da      	bne.n	80086e8 <_strtol_l.constprop.0+0x54>
 8008732:	2c30      	cmp	r4, #48	@ 0x30
 8008734:	bf0c      	ite	eq
 8008736:	2308      	moveq	r3, #8
 8008738:	230a      	movne	r3, #10
 800873a:	e7d5      	b.n	80086e8 <_strtol_l.constprop.0+0x54>
 800873c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008740:	2f19      	cmp	r7, #25
 8008742:	d801      	bhi.n	8008748 <_strtol_l.constprop.0+0xb4>
 8008744:	3c37      	subs	r4, #55	@ 0x37
 8008746:	e7de      	b.n	8008706 <_strtol_l.constprop.0+0x72>
 8008748:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800874c:	2f19      	cmp	r7, #25
 800874e:	d804      	bhi.n	800875a <_strtol_l.constprop.0+0xc6>
 8008750:	3c57      	subs	r4, #87	@ 0x57
 8008752:	e7d8      	b.n	8008706 <_strtol_l.constprop.0+0x72>
 8008754:	f04f 32ff 	mov.w	r2, #4294967295
 8008758:	e7e1      	b.n	800871e <_strtol_l.constprop.0+0x8a>
 800875a:	1c53      	adds	r3, r2, #1
 800875c:	d108      	bne.n	8008770 <_strtol_l.constprop.0+0xdc>
 800875e:	2322      	movs	r3, #34	@ 0x22
 8008760:	f8ce 3000 	str.w	r3, [lr]
 8008764:	4660      	mov	r0, ip
 8008766:	f1b8 0f00 	cmp.w	r8, #0
 800876a:	d0a0      	beq.n	80086ae <_strtol_l.constprop.0+0x1a>
 800876c:	1e69      	subs	r1, r5, #1
 800876e:	e006      	b.n	800877e <_strtol_l.constprop.0+0xea>
 8008770:	b106      	cbz	r6, 8008774 <_strtol_l.constprop.0+0xe0>
 8008772:	4240      	negs	r0, r0
 8008774:	f1b8 0f00 	cmp.w	r8, #0
 8008778:	d099      	beq.n	80086ae <_strtol_l.constprop.0+0x1a>
 800877a:	2a00      	cmp	r2, #0
 800877c:	d1f6      	bne.n	800876c <_strtol_l.constprop.0+0xd8>
 800877e:	f8c8 1000 	str.w	r1, [r8]
 8008782:	e794      	b.n	80086ae <_strtol_l.constprop.0+0x1a>
 8008784:	0800e571 	.word	0x0800e571

08008788 <_strtol_r>:
 8008788:	f7ff bf84 	b.w	8008694 <_strtol_l.constprop.0>

0800878c <strtol>:
 800878c:	4613      	mov	r3, r2
 800878e:	460a      	mov	r2, r1
 8008790:	4601      	mov	r1, r0
 8008792:	4802      	ldr	r0, [pc, #8]	@ (800879c <strtol+0x10>)
 8008794:	6800      	ldr	r0, [r0, #0]
 8008796:	f7ff bf7d 	b.w	8008694 <_strtol_l.constprop.0>
 800879a:	bf00      	nop
 800879c:	200001a0 	.word	0x200001a0

080087a0 <__cvt>:
 80087a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087a4:	ec57 6b10 	vmov	r6, r7, d0
 80087a8:	2f00      	cmp	r7, #0
 80087aa:	460c      	mov	r4, r1
 80087ac:	4619      	mov	r1, r3
 80087ae:	463b      	mov	r3, r7
 80087b0:	bfbb      	ittet	lt
 80087b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80087b6:	461f      	movlt	r7, r3
 80087b8:	2300      	movge	r3, #0
 80087ba:	232d      	movlt	r3, #45	@ 0x2d
 80087bc:	700b      	strb	r3, [r1, #0]
 80087be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80087c4:	4691      	mov	r9, r2
 80087c6:	f023 0820 	bic.w	r8, r3, #32
 80087ca:	bfbc      	itt	lt
 80087cc:	4632      	movlt	r2, r6
 80087ce:	4616      	movlt	r6, r2
 80087d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80087d4:	d005      	beq.n	80087e2 <__cvt+0x42>
 80087d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80087da:	d100      	bne.n	80087de <__cvt+0x3e>
 80087dc:	3401      	adds	r4, #1
 80087de:	2102      	movs	r1, #2
 80087e0:	e000      	b.n	80087e4 <__cvt+0x44>
 80087e2:	2103      	movs	r1, #3
 80087e4:	ab03      	add	r3, sp, #12
 80087e6:	9301      	str	r3, [sp, #4]
 80087e8:	ab02      	add	r3, sp, #8
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	ec47 6b10 	vmov	d0, r6, r7
 80087f0:	4653      	mov	r3, sl
 80087f2:	4622      	mov	r2, r4
 80087f4:	f002 f82c 	bl	800a850 <_dtoa_r>
 80087f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80087fc:	4605      	mov	r5, r0
 80087fe:	d119      	bne.n	8008834 <__cvt+0x94>
 8008800:	f019 0f01 	tst.w	r9, #1
 8008804:	d00e      	beq.n	8008824 <__cvt+0x84>
 8008806:	eb00 0904 	add.w	r9, r0, r4
 800880a:	2200      	movs	r2, #0
 800880c:	2300      	movs	r3, #0
 800880e:	4630      	mov	r0, r6
 8008810:	4639      	mov	r1, r7
 8008812:	f7f8 f969 	bl	8000ae8 <__aeabi_dcmpeq>
 8008816:	b108      	cbz	r0, 800881c <__cvt+0x7c>
 8008818:	f8cd 900c 	str.w	r9, [sp, #12]
 800881c:	2230      	movs	r2, #48	@ 0x30
 800881e:	9b03      	ldr	r3, [sp, #12]
 8008820:	454b      	cmp	r3, r9
 8008822:	d31e      	bcc.n	8008862 <__cvt+0xc2>
 8008824:	9b03      	ldr	r3, [sp, #12]
 8008826:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008828:	1b5b      	subs	r3, r3, r5
 800882a:	4628      	mov	r0, r5
 800882c:	6013      	str	r3, [r2, #0]
 800882e:	b004      	add	sp, #16
 8008830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008834:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008838:	eb00 0904 	add.w	r9, r0, r4
 800883c:	d1e5      	bne.n	800880a <__cvt+0x6a>
 800883e:	7803      	ldrb	r3, [r0, #0]
 8008840:	2b30      	cmp	r3, #48	@ 0x30
 8008842:	d10a      	bne.n	800885a <__cvt+0xba>
 8008844:	2200      	movs	r2, #0
 8008846:	2300      	movs	r3, #0
 8008848:	4630      	mov	r0, r6
 800884a:	4639      	mov	r1, r7
 800884c:	f7f8 f94c 	bl	8000ae8 <__aeabi_dcmpeq>
 8008850:	b918      	cbnz	r0, 800885a <__cvt+0xba>
 8008852:	f1c4 0401 	rsb	r4, r4, #1
 8008856:	f8ca 4000 	str.w	r4, [sl]
 800885a:	f8da 3000 	ldr.w	r3, [sl]
 800885e:	4499      	add	r9, r3
 8008860:	e7d3      	b.n	800880a <__cvt+0x6a>
 8008862:	1c59      	adds	r1, r3, #1
 8008864:	9103      	str	r1, [sp, #12]
 8008866:	701a      	strb	r2, [r3, #0]
 8008868:	e7d9      	b.n	800881e <__cvt+0x7e>

0800886a <__exponent>:
 800886a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800886c:	2900      	cmp	r1, #0
 800886e:	bfba      	itte	lt
 8008870:	4249      	neglt	r1, r1
 8008872:	232d      	movlt	r3, #45	@ 0x2d
 8008874:	232b      	movge	r3, #43	@ 0x2b
 8008876:	2909      	cmp	r1, #9
 8008878:	7002      	strb	r2, [r0, #0]
 800887a:	7043      	strb	r3, [r0, #1]
 800887c:	dd29      	ble.n	80088d2 <__exponent+0x68>
 800887e:	f10d 0307 	add.w	r3, sp, #7
 8008882:	461d      	mov	r5, r3
 8008884:	270a      	movs	r7, #10
 8008886:	461a      	mov	r2, r3
 8008888:	fbb1 f6f7 	udiv	r6, r1, r7
 800888c:	fb07 1416 	mls	r4, r7, r6, r1
 8008890:	3430      	adds	r4, #48	@ 0x30
 8008892:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008896:	460c      	mov	r4, r1
 8008898:	2c63      	cmp	r4, #99	@ 0x63
 800889a:	f103 33ff 	add.w	r3, r3, #4294967295
 800889e:	4631      	mov	r1, r6
 80088a0:	dcf1      	bgt.n	8008886 <__exponent+0x1c>
 80088a2:	3130      	adds	r1, #48	@ 0x30
 80088a4:	1e94      	subs	r4, r2, #2
 80088a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80088aa:	1c41      	adds	r1, r0, #1
 80088ac:	4623      	mov	r3, r4
 80088ae:	42ab      	cmp	r3, r5
 80088b0:	d30a      	bcc.n	80088c8 <__exponent+0x5e>
 80088b2:	f10d 0309 	add.w	r3, sp, #9
 80088b6:	1a9b      	subs	r3, r3, r2
 80088b8:	42ac      	cmp	r4, r5
 80088ba:	bf88      	it	hi
 80088bc:	2300      	movhi	r3, #0
 80088be:	3302      	adds	r3, #2
 80088c0:	4403      	add	r3, r0
 80088c2:	1a18      	subs	r0, r3, r0
 80088c4:	b003      	add	sp, #12
 80088c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80088cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80088d0:	e7ed      	b.n	80088ae <__exponent+0x44>
 80088d2:	2330      	movs	r3, #48	@ 0x30
 80088d4:	3130      	adds	r1, #48	@ 0x30
 80088d6:	7083      	strb	r3, [r0, #2]
 80088d8:	70c1      	strb	r1, [r0, #3]
 80088da:	1d03      	adds	r3, r0, #4
 80088dc:	e7f1      	b.n	80088c2 <__exponent+0x58>
	...

080088e0 <_printf_float>:
 80088e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	b08d      	sub	sp, #52	@ 0x34
 80088e6:	460c      	mov	r4, r1
 80088e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80088ec:	4616      	mov	r6, r2
 80088ee:	461f      	mov	r7, r3
 80088f0:	4605      	mov	r5, r0
 80088f2:	f001 fe1b 	bl	800a52c <_localeconv_r>
 80088f6:	6803      	ldr	r3, [r0, #0]
 80088f8:	9304      	str	r3, [sp, #16]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7f7 fcc8 	bl	8000290 <strlen>
 8008900:	2300      	movs	r3, #0
 8008902:	930a      	str	r3, [sp, #40]	@ 0x28
 8008904:	f8d8 3000 	ldr.w	r3, [r8]
 8008908:	9005      	str	r0, [sp, #20]
 800890a:	3307      	adds	r3, #7
 800890c:	f023 0307 	bic.w	r3, r3, #7
 8008910:	f103 0208 	add.w	r2, r3, #8
 8008914:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008918:	f8d4 b000 	ldr.w	fp, [r4]
 800891c:	f8c8 2000 	str.w	r2, [r8]
 8008920:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008924:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008928:	9307      	str	r3, [sp, #28]
 800892a:	f8cd 8018 	str.w	r8, [sp, #24]
 800892e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008932:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008936:	4b9c      	ldr	r3, [pc, #624]	@ (8008ba8 <_printf_float+0x2c8>)
 8008938:	f04f 32ff 	mov.w	r2, #4294967295
 800893c:	f7f8 f906 	bl	8000b4c <__aeabi_dcmpun>
 8008940:	bb70      	cbnz	r0, 80089a0 <_printf_float+0xc0>
 8008942:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008946:	4b98      	ldr	r3, [pc, #608]	@ (8008ba8 <_printf_float+0x2c8>)
 8008948:	f04f 32ff 	mov.w	r2, #4294967295
 800894c:	f7f8 f8e0 	bl	8000b10 <__aeabi_dcmple>
 8008950:	bb30      	cbnz	r0, 80089a0 <_printf_float+0xc0>
 8008952:	2200      	movs	r2, #0
 8008954:	2300      	movs	r3, #0
 8008956:	4640      	mov	r0, r8
 8008958:	4649      	mov	r1, r9
 800895a:	f7f8 f8cf 	bl	8000afc <__aeabi_dcmplt>
 800895e:	b110      	cbz	r0, 8008966 <_printf_float+0x86>
 8008960:	232d      	movs	r3, #45	@ 0x2d
 8008962:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008966:	4a91      	ldr	r2, [pc, #580]	@ (8008bac <_printf_float+0x2cc>)
 8008968:	4b91      	ldr	r3, [pc, #580]	@ (8008bb0 <_printf_float+0x2d0>)
 800896a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800896e:	bf94      	ite	ls
 8008970:	4690      	movls	r8, r2
 8008972:	4698      	movhi	r8, r3
 8008974:	2303      	movs	r3, #3
 8008976:	6123      	str	r3, [r4, #16]
 8008978:	f02b 0304 	bic.w	r3, fp, #4
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	f04f 0900 	mov.w	r9, #0
 8008982:	9700      	str	r7, [sp, #0]
 8008984:	4633      	mov	r3, r6
 8008986:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008988:	4621      	mov	r1, r4
 800898a:	4628      	mov	r0, r5
 800898c:	f000 f9d2 	bl	8008d34 <_printf_common>
 8008990:	3001      	adds	r0, #1
 8008992:	f040 808d 	bne.w	8008ab0 <_printf_float+0x1d0>
 8008996:	f04f 30ff 	mov.w	r0, #4294967295
 800899a:	b00d      	add	sp, #52	@ 0x34
 800899c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a0:	4642      	mov	r2, r8
 80089a2:	464b      	mov	r3, r9
 80089a4:	4640      	mov	r0, r8
 80089a6:	4649      	mov	r1, r9
 80089a8:	f7f8 f8d0 	bl	8000b4c <__aeabi_dcmpun>
 80089ac:	b140      	cbz	r0, 80089c0 <_printf_float+0xe0>
 80089ae:	464b      	mov	r3, r9
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	bfbc      	itt	lt
 80089b4:	232d      	movlt	r3, #45	@ 0x2d
 80089b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80089ba:	4a7e      	ldr	r2, [pc, #504]	@ (8008bb4 <_printf_float+0x2d4>)
 80089bc:	4b7e      	ldr	r3, [pc, #504]	@ (8008bb8 <_printf_float+0x2d8>)
 80089be:	e7d4      	b.n	800896a <_printf_float+0x8a>
 80089c0:	6863      	ldr	r3, [r4, #4]
 80089c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80089c6:	9206      	str	r2, [sp, #24]
 80089c8:	1c5a      	adds	r2, r3, #1
 80089ca:	d13b      	bne.n	8008a44 <_printf_float+0x164>
 80089cc:	2306      	movs	r3, #6
 80089ce:	6063      	str	r3, [r4, #4]
 80089d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80089d4:	2300      	movs	r3, #0
 80089d6:	6022      	str	r2, [r4, #0]
 80089d8:	9303      	str	r3, [sp, #12]
 80089da:	ab0a      	add	r3, sp, #40	@ 0x28
 80089dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80089e0:	ab09      	add	r3, sp, #36	@ 0x24
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	6861      	ldr	r1, [r4, #4]
 80089e6:	ec49 8b10 	vmov	d0, r8, r9
 80089ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80089ee:	4628      	mov	r0, r5
 80089f0:	f7ff fed6 	bl	80087a0 <__cvt>
 80089f4:	9b06      	ldr	r3, [sp, #24]
 80089f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089f8:	2b47      	cmp	r3, #71	@ 0x47
 80089fa:	4680      	mov	r8, r0
 80089fc:	d129      	bne.n	8008a52 <_printf_float+0x172>
 80089fe:	1cc8      	adds	r0, r1, #3
 8008a00:	db02      	blt.n	8008a08 <_printf_float+0x128>
 8008a02:	6863      	ldr	r3, [r4, #4]
 8008a04:	4299      	cmp	r1, r3
 8008a06:	dd41      	ble.n	8008a8c <_printf_float+0x1ac>
 8008a08:	f1aa 0a02 	sub.w	sl, sl, #2
 8008a0c:	fa5f fa8a 	uxtb.w	sl, sl
 8008a10:	3901      	subs	r1, #1
 8008a12:	4652      	mov	r2, sl
 8008a14:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008a18:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a1a:	f7ff ff26 	bl	800886a <__exponent>
 8008a1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a20:	1813      	adds	r3, r2, r0
 8008a22:	2a01      	cmp	r2, #1
 8008a24:	4681      	mov	r9, r0
 8008a26:	6123      	str	r3, [r4, #16]
 8008a28:	dc02      	bgt.n	8008a30 <_printf_float+0x150>
 8008a2a:	6822      	ldr	r2, [r4, #0]
 8008a2c:	07d2      	lsls	r2, r2, #31
 8008a2e:	d501      	bpl.n	8008a34 <_printf_float+0x154>
 8008a30:	3301      	adds	r3, #1
 8008a32:	6123      	str	r3, [r4, #16]
 8008a34:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d0a2      	beq.n	8008982 <_printf_float+0xa2>
 8008a3c:	232d      	movs	r3, #45	@ 0x2d
 8008a3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a42:	e79e      	b.n	8008982 <_printf_float+0xa2>
 8008a44:	9a06      	ldr	r2, [sp, #24]
 8008a46:	2a47      	cmp	r2, #71	@ 0x47
 8008a48:	d1c2      	bne.n	80089d0 <_printf_float+0xf0>
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1c0      	bne.n	80089d0 <_printf_float+0xf0>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e7bd      	b.n	80089ce <_printf_float+0xee>
 8008a52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a56:	d9db      	bls.n	8008a10 <_printf_float+0x130>
 8008a58:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008a5c:	d118      	bne.n	8008a90 <_printf_float+0x1b0>
 8008a5e:	2900      	cmp	r1, #0
 8008a60:	6863      	ldr	r3, [r4, #4]
 8008a62:	dd0b      	ble.n	8008a7c <_printf_float+0x19c>
 8008a64:	6121      	str	r1, [r4, #16]
 8008a66:	b913      	cbnz	r3, 8008a6e <_printf_float+0x18e>
 8008a68:	6822      	ldr	r2, [r4, #0]
 8008a6a:	07d0      	lsls	r0, r2, #31
 8008a6c:	d502      	bpl.n	8008a74 <_printf_float+0x194>
 8008a6e:	3301      	adds	r3, #1
 8008a70:	440b      	add	r3, r1
 8008a72:	6123      	str	r3, [r4, #16]
 8008a74:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008a76:	f04f 0900 	mov.w	r9, #0
 8008a7a:	e7db      	b.n	8008a34 <_printf_float+0x154>
 8008a7c:	b913      	cbnz	r3, 8008a84 <_printf_float+0x1a4>
 8008a7e:	6822      	ldr	r2, [r4, #0]
 8008a80:	07d2      	lsls	r2, r2, #31
 8008a82:	d501      	bpl.n	8008a88 <_printf_float+0x1a8>
 8008a84:	3302      	adds	r3, #2
 8008a86:	e7f4      	b.n	8008a72 <_printf_float+0x192>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e7f2      	b.n	8008a72 <_printf_float+0x192>
 8008a8c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008a90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a92:	4299      	cmp	r1, r3
 8008a94:	db05      	blt.n	8008aa2 <_printf_float+0x1c2>
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	6121      	str	r1, [r4, #16]
 8008a9a:	07d8      	lsls	r0, r3, #31
 8008a9c:	d5ea      	bpl.n	8008a74 <_printf_float+0x194>
 8008a9e:	1c4b      	adds	r3, r1, #1
 8008aa0:	e7e7      	b.n	8008a72 <_printf_float+0x192>
 8008aa2:	2900      	cmp	r1, #0
 8008aa4:	bfd4      	ite	le
 8008aa6:	f1c1 0202 	rsble	r2, r1, #2
 8008aaa:	2201      	movgt	r2, #1
 8008aac:	4413      	add	r3, r2
 8008aae:	e7e0      	b.n	8008a72 <_printf_float+0x192>
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	055a      	lsls	r2, r3, #21
 8008ab4:	d407      	bmi.n	8008ac6 <_printf_float+0x1e6>
 8008ab6:	6923      	ldr	r3, [r4, #16]
 8008ab8:	4642      	mov	r2, r8
 8008aba:	4631      	mov	r1, r6
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b8      	blx	r7
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	d12b      	bne.n	8008b1c <_printf_float+0x23c>
 8008ac4:	e767      	b.n	8008996 <_printf_float+0xb6>
 8008ac6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008aca:	f240 80dd 	bls.w	8008c88 <_printf_float+0x3a8>
 8008ace:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f7f8 f807 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d033      	beq.n	8008b46 <_printf_float+0x266>
 8008ade:	4a37      	ldr	r2, [pc, #220]	@ (8008bbc <_printf_float+0x2dc>)
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	47b8      	blx	r7
 8008ae8:	3001      	adds	r0, #1
 8008aea:	f43f af54 	beq.w	8008996 <_printf_float+0xb6>
 8008aee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008af2:	4543      	cmp	r3, r8
 8008af4:	db02      	blt.n	8008afc <_printf_float+0x21c>
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	07d8      	lsls	r0, r3, #31
 8008afa:	d50f      	bpl.n	8008b1c <_printf_float+0x23c>
 8008afc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b00:	4631      	mov	r1, r6
 8008b02:	4628      	mov	r0, r5
 8008b04:	47b8      	blx	r7
 8008b06:	3001      	adds	r0, #1
 8008b08:	f43f af45 	beq.w	8008996 <_printf_float+0xb6>
 8008b0c:	f04f 0900 	mov.w	r9, #0
 8008b10:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b14:	f104 0a1a 	add.w	sl, r4, #26
 8008b18:	45c8      	cmp	r8, r9
 8008b1a:	dc09      	bgt.n	8008b30 <_printf_float+0x250>
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	079b      	lsls	r3, r3, #30
 8008b20:	f100 8103 	bmi.w	8008d2a <_printf_float+0x44a>
 8008b24:	68e0      	ldr	r0, [r4, #12]
 8008b26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b28:	4298      	cmp	r0, r3
 8008b2a:	bfb8      	it	lt
 8008b2c:	4618      	movlt	r0, r3
 8008b2e:	e734      	b.n	800899a <_printf_float+0xba>
 8008b30:	2301      	movs	r3, #1
 8008b32:	4652      	mov	r2, sl
 8008b34:	4631      	mov	r1, r6
 8008b36:	4628      	mov	r0, r5
 8008b38:	47b8      	blx	r7
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	f43f af2b 	beq.w	8008996 <_printf_float+0xb6>
 8008b40:	f109 0901 	add.w	r9, r9, #1
 8008b44:	e7e8      	b.n	8008b18 <_printf_float+0x238>
 8008b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	dc39      	bgt.n	8008bc0 <_printf_float+0x2e0>
 8008b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8008bbc <_printf_float+0x2dc>)
 8008b4e:	2301      	movs	r3, #1
 8008b50:	4631      	mov	r1, r6
 8008b52:	4628      	mov	r0, r5
 8008b54:	47b8      	blx	r7
 8008b56:	3001      	adds	r0, #1
 8008b58:	f43f af1d 	beq.w	8008996 <_printf_float+0xb6>
 8008b5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008b60:	ea59 0303 	orrs.w	r3, r9, r3
 8008b64:	d102      	bne.n	8008b6c <_printf_float+0x28c>
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	07d9      	lsls	r1, r3, #31
 8008b6a:	d5d7      	bpl.n	8008b1c <_printf_float+0x23c>
 8008b6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b70:	4631      	mov	r1, r6
 8008b72:	4628      	mov	r0, r5
 8008b74:	47b8      	blx	r7
 8008b76:	3001      	adds	r0, #1
 8008b78:	f43f af0d 	beq.w	8008996 <_printf_float+0xb6>
 8008b7c:	f04f 0a00 	mov.w	sl, #0
 8008b80:	f104 0b1a 	add.w	fp, r4, #26
 8008b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b86:	425b      	negs	r3, r3
 8008b88:	4553      	cmp	r3, sl
 8008b8a:	dc01      	bgt.n	8008b90 <_printf_float+0x2b0>
 8008b8c:	464b      	mov	r3, r9
 8008b8e:	e793      	b.n	8008ab8 <_printf_float+0x1d8>
 8008b90:	2301      	movs	r3, #1
 8008b92:	465a      	mov	r2, fp
 8008b94:	4631      	mov	r1, r6
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b8      	blx	r7
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	f43f aefb 	beq.w	8008996 <_printf_float+0xb6>
 8008ba0:	f10a 0a01 	add.w	sl, sl, #1
 8008ba4:	e7ee      	b.n	8008b84 <_printf_float+0x2a4>
 8008ba6:	bf00      	nop
 8008ba8:	7fefffff 	.word	0x7fefffff
 8008bac:	0800e671 	.word	0x0800e671
 8008bb0:	0800e675 	.word	0x0800e675
 8008bb4:	0800e679 	.word	0x0800e679
 8008bb8:	0800e67d 	.word	0x0800e67d
 8008bbc:	0800e9c7 	.word	0x0800e9c7
 8008bc0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008bc2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008bc6:	4553      	cmp	r3, sl
 8008bc8:	bfa8      	it	ge
 8008bca:	4653      	movge	r3, sl
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	4699      	mov	r9, r3
 8008bd0:	dc36      	bgt.n	8008c40 <_printf_float+0x360>
 8008bd2:	f04f 0b00 	mov.w	fp, #0
 8008bd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bda:	f104 021a 	add.w	r2, r4, #26
 8008bde:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008be0:	9306      	str	r3, [sp, #24]
 8008be2:	eba3 0309 	sub.w	r3, r3, r9
 8008be6:	455b      	cmp	r3, fp
 8008be8:	dc31      	bgt.n	8008c4e <_printf_float+0x36e>
 8008bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bec:	459a      	cmp	sl, r3
 8008bee:	dc3a      	bgt.n	8008c66 <_printf_float+0x386>
 8008bf0:	6823      	ldr	r3, [r4, #0]
 8008bf2:	07da      	lsls	r2, r3, #31
 8008bf4:	d437      	bmi.n	8008c66 <_printf_float+0x386>
 8008bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf8:	ebaa 0903 	sub.w	r9, sl, r3
 8008bfc:	9b06      	ldr	r3, [sp, #24]
 8008bfe:	ebaa 0303 	sub.w	r3, sl, r3
 8008c02:	4599      	cmp	r9, r3
 8008c04:	bfa8      	it	ge
 8008c06:	4699      	movge	r9, r3
 8008c08:	f1b9 0f00 	cmp.w	r9, #0
 8008c0c:	dc33      	bgt.n	8008c76 <_printf_float+0x396>
 8008c0e:	f04f 0800 	mov.w	r8, #0
 8008c12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c16:	f104 0b1a 	add.w	fp, r4, #26
 8008c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c1c:	ebaa 0303 	sub.w	r3, sl, r3
 8008c20:	eba3 0309 	sub.w	r3, r3, r9
 8008c24:	4543      	cmp	r3, r8
 8008c26:	f77f af79 	ble.w	8008b1c <_printf_float+0x23c>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	465a      	mov	r2, fp
 8008c2e:	4631      	mov	r1, r6
 8008c30:	4628      	mov	r0, r5
 8008c32:	47b8      	blx	r7
 8008c34:	3001      	adds	r0, #1
 8008c36:	f43f aeae 	beq.w	8008996 <_printf_float+0xb6>
 8008c3a:	f108 0801 	add.w	r8, r8, #1
 8008c3e:	e7ec      	b.n	8008c1a <_printf_float+0x33a>
 8008c40:	4642      	mov	r2, r8
 8008c42:	4631      	mov	r1, r6
 8008c44:	4628      	mov	r0, r5
 8008c46:	47b8      	blx	r7
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d1c2      	bne.n	8008bd2 <_printf_float+0x2f2>
 8008c4c:	e6a3      	b.n	8008996 <_printf_float+0xb6>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	4631      	mov	r1, r6
 8008c52:	4628      	mov	r0, r5
 8008c54:	9206      	str	r2, [sp, #24]
 8008c56:	47b8      	blx	r7
 8008c58:	3001      	adds	r0, #1
 8008c5a:	f43f ae9c 	beq.w	8008996 <_printf_float+0xb6>
 8008c5e:	9a06      	ldr	r2, [sp, #24]
 8008c60:	f10b 0b01 	add.w	fp, fp, #1
 8008c64:	e7bb      	b.n	8008bde <_printf_float+0x2fe>
 8008c66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	47b8      	blx	r7
 8008c70:	3001      	adds	r0, #1
 8008c72:	d1c0      	bne.n	8008bf6 <_printf_float+0x316>
 8008c74:	e68f      	b.n	8008996 <_printf_float+0xb6>
 8008c76:	9a06      	ldr	r2, [sp, #24]
 8008c78:	464b      	mov	r3, r9
 8008c7a:	4442      	add	r2, r8
 8008c7c:	4631      	mov	r1, r6
 8008c7e:	4628      	mov	r0, r5
 8008c80:	47b8      	blx	r7
 8008c82:	3001      	adds	r0, #1
 8008c84:	d1c3      	bne.n	8008c0e <_printf_float+0x32e>
 8008c86:	e686      	b.n	8008996 <_printf_float+0xb6>
 8008c88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c8c:	f1ba 0f01 	cmp.w	sl, #1
 8008c90:	dc01      	bgt.n	8008c96 <_printf_float+0x3b6>
 8008c92:	07db      	lsls	r3, r3, #31
 8008c94:	d536      	bpl.n	8008d04 <_printf_float+0x424>
 8008c96:	2301      	movs	r3, #1
 8008c98:	4642      	mov	r2, r8
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	47b8      	blx	r7
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	f43f ae78 	beq.w	8008996 <_printf_float+0xb6>
 8008ca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008caa:	4631      	mov	r1, r6
 8008cac:	4628      	mov	r0, r5
 8008cae:	47b8      	blx	r7
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	f43f ae70 	beq.w	8008996 <_printf_float+0xb6>
 8008cb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008cba:	2200      	movs	r2, #0
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cc2:	f7f7 ff11 	bl	8000ae8 <__aeabi_dcmpeq>
 8008cc6:	b9c0      	cbnz	r0, 8008cfa <_printf_float+0x41a>
 8008cc8:	4653      	mov	r3, sl
 8008cca:	f108 0201 	add.w	r2, r8, #1
 8008cce:	4631      	mov	r1, r6
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	47b8      	blx	r7
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	d10c      	bne.n	8008cf2 <_printf_float+0x412>
 8008cd8:	e65d      	b.n	8008996 <_printf_float+0xb6>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	465a      	mov	r2, fp
 8008cde:	4631      	mov	r1, r6
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	47b8      	blx	r7
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	f43f ae56 	beq.w	8008996 <_printf_float+0xb6>
 8008cea:	f108 0801 	add.w	r8, r8, #1
 8008cee:	45d0      	cmp	r8, sl
 8008cf0:	dbf3      	blt.n	8008cda <_printf_float+0x3fa>
 8008cf2:	464b      	mov	r3, r9
 8008cf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008cf8:	e6df      	b.n	8008aba <_printf_float+0x1da>
 8008cfa:	f04f 0800 	mov.w	r8, #0
 8008cfe:	f104 0b1a 	add.w	fp, r4, #26
 8008d02:	e7f4      	b.n	8008cee <_printf_float+0x40e>
 8008d04:	2301      	movs	r3, #1
 8008d06:	4642      	mov	r2, r8
 8008d08:	e7e1      	b.n	8008cce <_printf_float+0x3ee>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	464a      	mov	r2, r9
 8008d0e:	4631      	mov	r1, r6
 8008d10:	4628      	mov	r0, r5
 8008d12:	47b8      	blx	r7
 8008d14:	3001      	adds	r0, #1
 8008d16:	f43f ae3e 	beq.w	8008996 <_printf_float+0xb6>
 8008d1a:	f108 0801 	add.w	r8, r8, #1
 8008d1e:	68e3      	ldr	r3, [r4, #12]
 8008d20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d22:	1a5b      	subs	r3, r3, r1
 8008d24:	4543      	cmp	r3, r8
 8008d26:	dcf0      	bgt.n	8008d0a <_printf_float+0x42a>
 8008d28:	e6fc      	b.n	8008b24 <_printf_float+0x244>
 8008d2a:	f04f 0800 	mov.w	r8, #0
 8008d2e:	f104 0919 	add.w	r9, r4, #25
 8008d32:	e7f4      	b.n	8008d1e <_printf_float+0x43e>

08008d34 <_printf_common>:
 8008d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d38:	4616      	mov	r6, r2
 8008d3a:	4698      	mov	r8, r3
 8008d3c:	688a      	ldr	r2, [r1, #8]
 8008d3e:	690b      	ldr	r3, [r1, #16]
 8008d40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d44:	4293      	cmp	r3, r2
 8008d46:	bfb8      	it	lt
 8008d48:	4613      	movlt	r3, r2
 8008d4a:	6033      	str	r3, [r6, #0]
 8008d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d50:	4607      	mov	r7, r0
 8008d52:	460c      	mov	r4, r1
 8008d54:	b10a      	cbz	r2, 8008d5a <_printf_common+0x26>
 8008d56:	3301      	adds	r3, #1
 8008d58:	6033      	str	r3, [r6, #0]
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	0699      	lsls	r1, r3, #26
 8008d5e:	bf42      	ittt	mi
 8008d60:	6833      	ldrmi	r3, [r6, #0]
 8008d62:	3302      	addmi	r3, #2
 8008d64:	6033      	strmi	r3, [r6, #0]
 8008d66:	6825      	ldr	r5, [r4, #0]
 8008d68:	f015 0506 	ands.w	r5, r5, #6
 8008d6c:	d106      	bne.n	8008d7c <_printf_common+0x48>
 8008d6e:	f104 0a19 	add.w	sl, r4, #25
 8008d72:	68e3      	ldr	r3, [r4, #12]
 8008d74:	6832      	ldr	r2, [r6, #0]
 8008d76:	1a9b      	subs	r3, r3, r2
 8008d78:	42ab      	cmp	r3, r5
 8008d7a:	dc26      	bgt.n	8008dca <_printf_common+0x96>
 8008d7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d80:	6822      	ldr	r2, [r4, #0]
 8008d82:	3b00      	subs	r3, #0
 8008d84:	bf18      	it	ne
 8008d86:	2301      	movne	r3, #1
 8008d88:	0692      	lsls	r2, r2, #26
 8008d8a:	d42b      	bmi.n	8008de4 <_printf_common+0xb0>
 8008d8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d90:	4641      	mov	r1, r8
 8008d92:	4638      	mov	r0, r7
 8008d94:	47c8      	blx	r9
 8008d96:	3001      	adds	r0, #1
 8008d98:	d01e      	beq.n	8008dd8 <_printf_common+0xa4>
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	6922      	ldr	r2, [r4, #16]
 8008d9e:	f003 0306 	and.w	r3, r3, #6
 8008da2:	2b04      	cmp	r3, #4
 8008da4:	bf02      	ittt	eq
 8008da6:	68e5      	ldreq	r5, [r4, #12]
 8008da8:	6833      	ldreq	r3, [r6, #0]
 8008daa:	1aed      	subeq	r5, r5, r3
 8008dac:	68a3      	ldr	r3, [r4, #8]
 8008dae:	bf0c      	ite	eq
 8008db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008db4:	2500      	movne	r5, #0
 8008db6:	4293      	cmp	r3, r2
 8008db8:	bfc4      	itt	gt
 8008dba:	1a9b      	subgt	r3, r3, r2
 8008dbc:	18ed      	addgt	r5, r5, r3
 8008dbe:	2600      	movs	r6, #0
 8008dc0:	341a      	adds	r4, #26
 8008dc2:	42b5      	cmp	r5, r6
 8008dc4:	d11a      	bne.n	8008dfc <_printf_common+0xc8>
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	e008      	b.n	8008ddc <_printf_common+0xa8>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	4652      	mov	r2, sl
 8008dce:	4641      	mov	r1, r8
 8008dd0:	4638      	mov	r0, r7
 8008dd2:	47c8      	blx	r9
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	d103      	bne.n	8008de0 <_printf_common+0xac>
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de0:	3501      	adds	r5, #1
 8008de2:	e7c6      	b.n	8008d72 <_printf_common+0x3e>
 8008de4:	18e1      	adds	r1, r4, r3
 8008de6:	1c5a      	adds	r2, r3, #1
 8008de8:	2030      	movs	r0, #48	@ 0x30
 8008dea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008dee:	4422      	add	r2, r4
 8008df0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008df4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008df8:	3302      	adds	r3, #2
 8008dfa:	e7c7      	b.n	8008d8c <_printf_common+0x58>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	4622      	mov	r2, r4
 8008e00:	4641      	mov	r1, r8
 8008e02:	4638      	mov	r0, r7
 8008e04:	47c8      	blx	r9
 8008e06:	3001      	adds	r0, #1
 8008e08:	d0e6      	beq.n	8008dd8 <_printf_common+0xa4>
 8008e0a:	3601      	adds	r6, #1
 8008e0c:	e7d9      	b.n	8008dc2 <_printf_common+0x8e>
	...

08008e10 <_printf_i>:
 8008e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e14:	7e0f      	ldrb	r7, [r1, #24]
 8008e16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e18:	2f78      	cmp	r7, #120	@ 0x78
 8008e1a:	4691      	mov	r9, r2
 8008e1c:	4680      	mov	r8, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	469a      	mov	sl, r3
 8008e22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e26:	d807      	bhi.n	8008e38 <_printf_i+0x28>
 8008e28:	2f62      	cmp	r7, #98	@ 0x62
 8008e2a:	d80a      	bhi.n	8008e42 <_printf_i+0x32>
 8008e2c:	2f00      	cmp	r7, #0
 8008e2e:	f000 80d2 	beq.w	8008fd6 <_printf_i+0x1c6>
 8008e32:	2f58      	cmp	r7, #88	@ 0x58
 8008e34:	f000 80b9 	beq.w	8008faa <_printf_i+0x19a>
 8008e38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e40:	e03a      	b.n	8008eb8 <_printf_i+0xa8>
 8008e42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e46:	2b15      	cmp	r3, #21
 8008e48:	d8f6      	bhi.n	8008e38 <_printf_i+0x28>
 8008e4a:	a101      	add	r1, pc, #4	@ (adr r1, 8008e50 <_printf_i+0x40>)
 8008e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e50:	08008ea9 	.word	0x08008ea9
 8008e54:	08008ebd 	.word	0x08008ebd
 8008e58:	08008e39 	.word	0x08008e39
 8008e5c:	08008e39 	.word	0x08008e39
 8008e60:	08008e39 	.word	0x08008e39
 8008e64:	08008e39 	.word	0x08008e39
 8008e68:	08008ebd 	.word	0x08008ebd
 8008e6c:	08008e39 	.word	0x08008e39
 8008e70:	08008e39 	.word	0x08008e39
 8008e74:	08008e39 	.word	0x08008e39
 8008e78:	08008e39 	.word	0x08008e39
 8008e7c:	08008fbd 	.word	0x08008fbd
 8008e80:	08008ee7 	.word	0x08008ee7
 8008e84:	08008f77 	.word	0x08008f77
 8008e88:	08008e39 	.word	0x08008e39
 8008e8c:	08008e39 	.word	0x08008e39
 8008e90:	08008fdf 	.word	0x08008fdf
 8008e94:	08008e39 	.word	0x08008e39
 8008e98:	08008ee7 	.word	0x08008ee7
 8008e9c:	08008e39 	.word	0x08008e39
 8008ea0:	08008e39 	.word	0x08008e39
 8008ea4:	08008f7f 	.word	0x08008f7f
 8008ea8:	6833      	ldr	r3, [r6, #0]
 8008eaa:	1d1a      	adds	r2, r3, #4
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6032      	str	r2, [r6, #0]
 8008eb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008eb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e09d      	b.n	8008ff8 <_printf_i+0x1e8>
 8008ebc:	6833      	ldr	r3, [r6, #0]
 8008ebe:	6820      	ldr	r0, [r4, #0]
 8008ec0:	1d19      	adds	r1, r3, #4
 8008ec2:	6031      	str	r1, [r6, #0]
 8008ec4:	0606      	lsls	r6, r0, #24
 8008ec6:	d501      	bpl.n	8008ecc <_printf_i+0xbc>
 8008ec8:	681d      	ldr	r5, [r3, #0]
 8008eca:	e003      	b.n	8008ed4 <_printf_i+0xc4>
 8008ecc:	0645      	lsls	r5, r0, #25
 8008ece:	d5fb      	bpl.n	8008ec8 <_printf_i+0xb8>
 8008ed0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ed4:	2d00      	cmp	r5, #0
 8008ed6:	da03      	bge.n	8008ee0 <_printf_i+0xd0>
 8008ed8:	232d      	movs	r3, #45	@ 0x2d
 8008eda:	426d      	negs	r5, r5
 8008edc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ee0:	4859      	ldr	r0, [pc, #356]	@ (8009048 <_printf_i+0x238>)
 8008ee2:	230a      	movs	r3, #10
 8008ee4:	e011      	b.n	8008f0a <_printf_i+0xfa>
 8008ee6:	6821      	ldr	r1, [r4, #0]
 8008ee8:	6833      	ldr	r3, [r6, #0]
 8008eea:	0608      	lsls	r0, r1, #24
 8008eec:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ef0:	d402      	bmi.n	8008ef8 <_printf_i+0xe8>
 8008ef2:	0649      	lsls	r1, r1, #25
 8008ef4:	bf48      	it	mi
 8008ef6:	b2ad      	uxthmi	r5, r5
 8008ef8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008efa:	4853      	ldr	r0, [pc, #332]	@ (8009048 <_printf_i+0x238>)
 8008efc:	6033      	str	r3, [r6, #0]
 8008efe:	bf14      	ite	ne
 8008f00:	230a      	movne	r3, #10
 8008f02:	2308      	moveq	r3, #8
 8008f04:	2100      	movs	r1, #0
 8008f06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f0a:	6866      	ldr	r6, [r4, #4]
 8008f0c:	60a6      	str	r6, [r4, #8]
 8008f0e:	2e00      	cmp	r6, #0
 8008f10:	bfa2      	ittt	ge
 8008f12:	6821      	ldrge	r1, [r4, #0]
 8008f14:	f021 0104 	bicge.w	r1, r1, #4
 8008f18:	6021      	strge	r1, [r4, #0]
 8008f1a:	b90d      	cbnz	r5, 8008f20 <_printf_i+0x110>
 8008f1c:	2e00      	cmp	r6, #0
 8008f1e:	d04b      	beq.n	8008fb8 <_printf_i+0x1a8>
 8008f20:	4616      	mov	r6, r2
 8008f22:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f26:	fb03 5711 	mls	r7, r3, r1, r5
 8008f2a:	5dc7      	ldrb	r7, [r0, r7]
 8008f2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f30:	462f      	mov	r7, r5
 8008f32:	42bb      	cmp	r3, r7
 8008f34:	460d      	mov	r5, r1
 8008f36:	d9f4      	bls.n	8008f22 <_printf_i+0x112>
 8008f38:	2b08      	cmp	r3, #8
 8008f3a:	d10b      	bne.n	8008f54 <_printf_i+0x144>
 8008f3c:	6823      	ldr	r3, [r4, #0]
 8008f3e:	07df      	lsls	r7, r3, #31
 8008f40:	d508      	bpl.n	8008f54 <_printf_i+0x144>
 8008f42:	6923      	ldr	r3, [r4, #16]
 8008f44:	6861      	ldr	r1, [r4, #4]
 8008f46:	4299      	cmp	r1, r3
 8008f48:	bfde      	ittt	le
 8008f4a:	2330      	movle	r3, #48	@ 0x30
 8008f4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f54:	1b92      	subs	r2, r2, r6
 8008f56:	6122      	str	r2, [r4, #16]
 8008f58:	f8cd a000 	str.w	sl, [sp]
 8008f5c:	464b      	mov	r3, r9
 8008f5e:	aa03      	add	r2, sp, #12
 8008f60:	4621      	mov	r1, r4
 8008f62:	4640      	mov	r0, r8
 8008f64:	f7ff fee6 	bl	8008d34 <_printf_common>
 8008f68:	3001      	adds	r0, #1
 8008f6a:	d14a      	bne.n	8009002 <_printf_i+0x1f2>
 8008f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f70:	b004      	add	sp, #16
 8008f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	f043 0320 	orr.w	r3, r3, #32
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	4833      	ldr	r0, [pc, #204]	@ (800904c <_printf_i+0x23c>)
 8008f80:	2778      	movs	r7, #120	@ 0x78
 8008f82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	6831      	ldr	r1, [r6, #0]
 8008f8a:	061f      	lsls	r7, r3, #24
 8008f8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f90:	d402      	bmi.n	8008f98 <_printf_i+0x188>
 8008f92:	065f      	lsls	r7, r3, #25
 8008f94:	bf48      	it	mi
 8008f96:	b2ad      	uxthmi	r5, r5
 8008f98:	6031      	str	r1, [r6, #0]
 8008f9a:	07d9      	lsls	r1, r3, #31
 8008f9c:	bf44      	itt	mi
 8008f9e:	f043 0320 	orrmi.w	r3, r3, #32
 8008fa2:	6023      	strmi	r3, [r4, #0]
 8008fa4:	b11d      	cbz	r5, 8008fae <_printf_i+0x19e>
 8008fa6:	2310      	movs	r3, #16
 8008fa8:	e7ac      	b.n	8008f04 <_printf_i+0xf4>
 8008faa:	4827      	ldr	r0, [pc, #156]	@ (8009048 <_printf_i+0x238>)
 8008fac:	e7e9      	b.n	8008f82 <_printf_i+0x172>
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	f023 0320 	bic.w	r3, r3, #32
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	e7f6      	b.n	8008fa6 <_printf_i+0x196>
 8008fb8:	4616      	mov	r6, r2
 8008fba:	e7bd      	b.n	8008f38 <_printf_i+0x128>
 8008fbc:	6833      	ldr	r3, [r6, #0]
 8008fbe:	6825      	ldr	r5, [r4, #0]
 8008fc0:	6961      	ldr	r1, [r4, #20]
 8008fc2:	1d18      	adds	r0, r3, #4
 8008fc4:	6030      	str	r0, [r6, #0]
 8008fc6:	062e      	lsls	r6, r5, #24
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	d501      	bpl.n	8008fd0 <_printf_i+0x1c0>
 8008fcc:	6019      	str	r1, [r3, #0]
 8008fce:	e002      	b.n	8008fd6 <_printf_i+0x1c6>
 8008fd0:	0668      	lsls	r0, r5, #25
 8008fd2:	d5fb      	bpl.n	8008fcc <_printf_i+0x1bc>
 8008fd4:	8019      	strh	r1, [r3, #0]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	6123      	str	r3, [r4, #16]
 8008fda:	4616      	mov	r6, r2
 8008fdc:	e7bc      	b.n	8008f58 <_printf_i+0x148>
 8008fde:	6833      	ldr	r3, [r6, #0]
 8008fe0:	1d1a      	adds	r2, r3, #4
 8008fe2:	6032      	str	r2, [r6, #0]
 8008fe4:	681e      	ldr	r6, [r3, #0]
 8008fe6:	6862      	ldr	r2, [r4, #4]
 8008fe8:	2100      	movs	r1, #0
 8008fea:	4630      	mov	r0, r6
 8008fec:	f7f7 f900 	bl	80001f0 <memchr>
 8008ff0:	b108      	cbz	r0, 8008ff6 <_printf_i+0x1e6>
 8008ff2:	1b80      	subs	r0, r0, r6
 8008ff4:	6060      	str	r0, [r4, #4]
 8008ff6:	6863      	ldr	r3, [r4, #4]
 8008ff8:	6123      	str	r3, [r4, #16]
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009000:	e7aa      	b.n	8008f58 <_printf_i+0x148>
 8009002:	6923      	ldr	r3, [r4, #16]
 8009004:	4632      	mov	r2, r6
 8009006:	4649      	mov	r1, r9
 8009008:	4640      	mov	r0, r8
 800900a:	47d0      	blx	sl
 800900c:	3001      	adds	r0, #1
 800900e:	d0ad      	beq.n	8008f6c <_printf_i+0x15c>
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	079b      	lsls	r3, r3, #30
 8009014:	d413      	bmi.n	800903e <_printf_i+0x22e>
 8009016:	68e0      	ldr	r0, [r4, #12]
 8009018:	9b03      	ldr	r3, [sp, #12]
 800901a:	4298      	cmp	r0, r3
 800901c:	bfb8      	it	lt
 800901e:	4618      	movlt	r0, r3
 8009020:	e7a6      	b.n	8008f70 <_printf_i+0x160>
 8009022:	2301      	movs	r3, #1
 8009024:	4632      	mov	r2, r6
 8009026:	4649      	mov	r1, r9
 8009028:	4640      	mov	r0, r8
 800902a:	47d0      	blx	sl
 800902c:	3001      	adds	r0, #1
 800902e:	d09d      	beq.n	8008f6c <_printf_i+0x15c>
 8009030:	3501      	adds	r5, #1
 8009032:	68e3      	ldr	r3, [r4, #12]
 8009034:	9903      	ldr	r1, [sp, #12]
 8009036:	1a5b      	subs	r3, r3, r1
 8009038:	42ab      	cmp	r3, r5
 800903a:	dcf2      	bgt.n	8009022 <_printf_i+0x212>
 800903c:	e7eb      	b.n	8009016 <_printf_i+0x206>
 800903e:	2500      	movs	r5, #0
 8009040:	f104 0619 	add.w	r6, r4, #25
 8009044:	e7f5      	b.n	8009032 <_printf_i+0x222>
 8009046:	bf00      	nop
 8009048:	0800e681 	.word	0x0800e681
 800904c:	0800e692 	.word	0x0800e692

08009050 <_scanf_float>:
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	b087      	sub	sp, #28
 8009056:	4617      	mov	r7, r2
 8009058:	9303      	str	r3, [sp, #12]
 800905a:	688b      	ldr	r3, [r1, #8]
 800905c:	1e5a      	subs	r2, r3, #1
 800905e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009062:	bf81      	itttt	hi
 8009064:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009068:	eb03 0b05 	addhi.w	fp, r3, r5
 800906c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009070:	608b      	strhi	r3, [r1, #8]
 8009072:	680b      	ldr	r3, [r1, #0]
 8009074:	460a      	mov	r2, r1
 8009076:	f04f 0500 	mov.w	r5, #0
 800907a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800907e:	f842 3b1c 	str.w	r3, [r2], #28
 8009082:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009086:	4680      	mov	r8, r0
 8009088:	460c      	mov	r4, r1
 800908a:	bf98      	it	ls
 800908c:	f04f 0b00 	movls.w	fp, #0
 8009090:	9201      	str	r2, [sp, #4]
 8009092:	4616      	mov	r6, r2
 8009094:	46aa      	mov	sl, r5
 8009096:	46a9      	mov	r9, r5
 8009098:	9502      	str	r5, [sp, #8]
 800909a:	68a2      	ldr	r2, [r4, #8]
 800909c:	b152      	cbz	r2, 80090b4 <_scanf_float+0x64>
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b4e      	cmp	r3, #78	@ 0x4e
 80090a4:	d864      	bhi.n	8009170 <_scanf_float+0x120>
 80090a6:	2b40      	cmp	r3, #64	@ 0x40
 80090a8:	d83c      	bhi.n	8009124 <_scanf_float+0xd4>
 80090aa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80090ae:	b2c8      	uxtb	r0, r1
 80090b0:	280e      	cmp	r0, #14
 80090b2:	d93a      	bls.n	800912a <_scanf_float+0xda>
 80090b4:	f1b9 0f00 	cmp.w	r9, #0
 80090b8:	d003      	beq.n	80090c2 <_scanf_float+0x72>
 80090ba:	6823      	ldr	r3, [r4, #0]
 80090bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090c6:	f1ba 0f01 	cmp.w	sl, #1
 80090ca:	f200 8117 	bhi.w	80092fc <_scanf_float+0x2ac>
 80090ce:	9b01      	ldr	r3, [sp, #4]
 80090d0:	429e      	cmp	r6, r3
 80090d2:	f200 8108 	bhi.w	80092e6 <_scanf_float+0x296>
 80090d6:	2001      	movs	r0, #1
 80090d8:	b007      	add	sp, #28
 80090da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090de:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80090e2:	2a0d      	cmp	r2, #13
 80090e4:	d8e6      	bhi.n	80090b4 <_scanf_float+0x64>
 80090e6:	a101      	add	r1, pc, #4	@ (adr r1, 80090ec <_scanf_float+0x9c>)
 80090e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80090ec:	08009233 	.word	0x08009233
 80090f0:	080090b5 	.word	0x080090b5
 80090f4:	080090b5 	.word	0x080090b5
 80090f8:	080090b5 	.word	0x080090b5
 80090fc:	08009293 	.word	0x08009293
 8009100:	0800926b 	.word	0x0800926b
 8009104:	080090b5 	.word	0x080090b5
 8009108:	080090b5 	.word	0x080090b5
 800910c:	08009241 	.word	0x08009241
 8009110:	080090b5 	.word	0x080090b5
 8009114:	080090b5 	.word	0x080090b5
 8009118:	080090b5 	.word	0x080090b5
 800911c:	080090b5 	.word	0x080090b5
 8009120:	080091f9 	.word	0x080091f9
 8009124:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009128:	e7db      	b.n	80090e2 <_scanf_float+0x92>
 800912a:	290e      	cmp	r1, #14
 800912c:	d8c2      	bhi.n	80090b4 <_scanf_float+0x64>
 800912e:	a001      	add	r0, pc, #4	@ (adr r0, 8009134 <_scanf_float+0xe4>)
 8009130:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009134:	080091e9 	.word	0x080091e9
 8009138:	080090b5 	.word	0x080090b5
 800913c:	080091e9 	.word	0x080091e9
 8009140:	0800927f 	.word	0x0800927f
 8009144:	080090b5 	.word	0x080090b5
 8009148:	08009191 	.word	0x08009191
 800914c:	080091cf 	.word	0x080091cf
 8009150:	080091cf 	.word	0x080091cf
 8009154:	080091cf 	.word	0x080091cf
 8009158:	080091cf 	.word	0x080091cf
 800915c:	080091cf 	.word	0x080091cf
 8009160:	080091cf 	.word	0x080091cf
 8009164:	080091cf 	.word	0x080091cf
 8009168:	080091cf 	.word	0x080091cf
 800916c:	080091cf 	.word	0x080091cf
 8009170:	2b6e      	cmp	r3, #110	@ 0x6e
 8009172:	d809      	bhi.n	8009188 <_scanf_float+0x138>
 8009174:	2b60      	cmp	r3, #96	@ 0x60
 8009176:	d8b2      	bhi.n	80090de <_scanf_float+0x8e>
 8009178:	2b54      	cmp	r3, #84	@ 0x54
 800917a:	d07b      	beq.n	8009274 <_scanf_float+0x224>
 800917c:	2b59      	cmp	r3, #89	@ 0x59
 800917e:	d199      	bne.n	80090b4 <_scanf_float+0x64>
 8009180:	2d07      	cmp	r5, #7
 8009182:	d197      	bne.n	80090b4 <_scanf_float+0x64>
 8009184:	2508      	movs	r5, #8
 8009186:	e02c      	b.n	80091e2 <_scanf_float+0x192>
 8009188:	2b74      	cmp	r3, #116	@ 0x74
 800918a:	d073      	beq.n	8009274 <_scanf_float+0x224>
 800918c:	2b79      	cmp	r3, #121	@ 0x79
 800918e:	e7f6      	b.n	800917e <_scanf_float+0x12e>
 8009190:	6821      	ldr	r1, [r4, #0]
 8009192:	05c8      	lsls	r0, r1, #23
 8009194:	d51b      	bpl.n	80091ce <_scanf_float+0x17e>
 8009196:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800919a:	6021      	str	r1, [r4, #0]
 800919c:	f109 0901 	add.w	r9, r9, #1
 80091a0:	f1bb 0f00 	cmp.w	fp, #0
 80091a4:	d003      	beq.n	80091ae <_scanf_float+0x15e>
 80091a6:	3201      	adds	r2, #1
 80091a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091ac:	60a2      	str	r2, [r4, #8]
 80091ae:	68a3      	ldr	r3, [r4, #8]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	60a3      	str	r3, [r4, #8]
 80091b4:	6923      	ldr	r3, [r4, #16]
 80091b6:	3301      	adds	r3, #1
 80091b8:	6123      	str	r3, [r4, #16]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	3b01      	subs	r3, #1
 80091be:	2b00      	cmp	r3, #0
 80091c0:	607b      	str	r3, [r7, #4]
 80091c2:	f340 8087 	ble.w	80092d4 <_scanf_float+0x284>
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	3301      	adds	r3, #1
 80091ca:	603b      	str	r3, [r7, #0]
 80091cc:	e765      	b.n	800909a <_scanf_float+0x4a>
 80091ce:	eb1a 0105 	adds.w	r1, sl, r5
 80091d2:	f47f af6f 	bne.w	80090b4 <_scanf_float+0x64>
 80091d6:	6822      	ldr	r2, [r4, #0]
 80091d8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80091dc:	6022      	str	r2, [r4, #0]
 80091de:	460d      	mov	r5, r1
 80091e0:	468a      	mov	sl, r1
 80091e2:	f806 3b01 	strb.w	r3, [r6], #1
 80091e6:	e7e2      	b.n	80091ae <_scanf_float+0x15e>
 80091e8:	6822      	ldr	r2, [r4, #0]
 80091ea:	0610      	lsls	r0, r2, #24
 80091ec:	f57f af62 	bpl.w	80090b4 <_scanf_float+0x64>
 80091f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80091f4:	6022      	str	r2, [r4, #0]
 80091f6:	e7f4      	b.n	80091e2 <_scanf_float+0x192>
 80091f8:	f1ba 0f00 	cmp.w	sl, #0
 80091fc:	d10e      	bne.n	800921c <_scanf_float+0x1cc>
 80091fe:	f1b9 0f00 	cmp.w	r9, #0
 8009202:	d10e      	bne.n	8009222 <_scanf_float+0x1d2>
 8009204:	6822      	ldr	r2, [r4, #0]
 8009206:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800920a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800920e:	d108      	bne.n	8009222 <_scanf_float+0x1d2>
 8009210:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009214:	6022      	str	r2, [r4, #0]
 8009216:	f04f 0a01 	mov.w	sl, #1
 800921a:	e7e2      	b.n	80091e2 <_scanf_float+0x192>
 800921c:	f1ba 0f02 	cmp.w	sl, #2
 8009220:	d055      	beq.n	80092ce <_scanf_float+0x27e>
 8009222:	2d01      	cmp	r5, #1
 8009224:	d002      	beq.n	800922c <_scanf_float+0x1dc>
 8009226:	2d04      	cmp	r5, #4
 8009228:	f47f af44 	bne.w	80090b4 <_scanf_float+0x64>
 800922c:	3501      	adds	r5, #1
 800922e:	b2ed      	uxtb	r5, r5
 8009230:	e7d7      	b.n	80091e2 <_scanf_float+0x192>
 8009232:	f1ba 0f01 	cmp.w	sl, #1
 8009236:	f47f af3d 	bne.w	80090b4 <_scanf_float+0x64>
 800923a:	f04f 0a02 	mov.w	sl, #2
 800923e:	e7d0      	b.n	80091e2 <_scanf_float+0x192>
 8009240:	b97d      	cbnz	r5, 8009262 <_scanf_float+0x212>
 8009242:	f1b9 0f00 	cmp.w	r9, #0
 8009246:	f47f af38 	bne.w	80090ba <_scanf_float+0x6a>
 800924a:	6822      	ldr	r2, [r4, #0]
 800924c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009250:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009254:	f040 8108 	bne.w	8009468 <_scanf_float+0x418>
 8009258:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800925c:	6022      	str	r2, [r4, #0]
 800925e:	2501      	movs	r5, #1
 8009260:	e7bf      	b.n	80091e2 <_scanf_float+0x192>
 8009262:	2d03      	cmp	r5, #3
 8009264:	d0e2      	beq.n	800922c <_scanf_float+0x1dc>
 8009266:	2d05      	cmp	r5, #5
 8009268:	e7de      	b.n	8009228 <_scanf_float+0x1d8>
 800926a:	2d02      	cmp	r5, #2
 800926c:	f47f af22 	bne.w	80090b4 <_scanf_float+0x64>
 8009270:	2503      	movs	r5, #3
 8009272:	e7b6      	b.n	80091e2 <_scanf_float+0x192>
 8009274:	2d06      	cmp	r5, #6
 8009276:	f47f af1d 	bne.w	80090b4 <_scanf_float+0x64>
 800927a:	2507      	movs	r5, #7
 800927c:	e7b1      	b.n	80091e2 <_scanf_float+0x192>
 800927e:	6822      	ldr	r2, [r4, #0]
 8009280:	0591      	lsls	r1, r2, #22
 8009282:	f57f af17 	bpl.w	80090b4 <_scanf_float+0x64>
 8009286:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800928a:	6022      	str	r2, [r4, #0]
 800928c:	f8cd 9008 	str.w	r9, [sp, #8]
 8009290:	e7a7      	b.n	80091e2 <_scanf_float+0x192>
 8009292:	6822      	ldr	r2, [r4, #0]
 8009294:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009298:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800929c:	d006      	beq.n	80092ac <_scanf_float+0x25c>
 800929e:	0550      	lsls	r0, r2, #21
 80092a0:	f57f af08 	bpl.w	80090b4 <_scanf_float+0x64>
 80092a4:	f1b9 0f00 	cmp.w	r9, #0
 80092a8:	f000 80de 	beq.w	8009468 <_scanf_float+0x418>
 80092ac:	0591      	lsls	r1, r2, #22
 80092ae:	bf58      	it	pl
 80092b0:	9902      	ldrpl	r1, [sp, #8]
 80092b2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80092b6:	bf58      	it	pl
 80092b8:	eba9 0101 	subpl.w	r1, r9, r1
 80092bc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80092c0:	bf58      	it	pl
 80092c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80092c6:	6022      	str	r2, [r4, #0]
 80092c8:	f04f 0900 	mov.w	r9, #0
 80092cc:	e789      	b.n	80091e2 <_scanf_float+0x192>
 80092ce:	f04f 0a03 	mov.w	sl, #3
 80092d2:	e786      	b.n	80091e2 <_scanf_float+0x192>
 80092d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80092d8:	4639      	mov	r1, r7
 80092da:	4640      	mov	r0, r8
 80092dc:	4798      	blx	r3
 80092de:	2800      	cmp	r0, #0
 80092e0:	f43f aedb 	beq.w	800909a <_scanf_float+0x4a>
 80092e4:	e6e6      	b.n	80090b4 <_scanf_float+0x64>
 80092e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80092ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80092ee:	463a      	mov	r2, r7
 80092f0:	4640      	mov	r0, r8
 80092f2:	4798      	blx	r3
 80092f4:	6923      	ldr	r3, [r4, #16]
 80092f6:	3b01      	subs	r3, #1
 80092f8:	6123      	str	r3, [r4, #16]
 80092fa:	e6e8      	b.n	80090ce <_scanf_float+0x7e>
 80092fc:	1e6b      	subs	r3, r5, #1
 80092fe:	2b06      	cmp	r3, #6
 8009300:	d824      	bhi.n	800934c <_scanf_float+0x2fc>
 8009302:	2d02      	cmp	r5, #2
 8009304:	d836      	bhi.n	8009374 <_scanf_float+0x324>
 8009306:	9b01      	ldr	r3, [sp, #4]
 8009308:	429e      	cmp	r6, r3
 800930a:	f67f aee4 	bls.w	80090d6 <_scanf_float+0x86>
 800930e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009312:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009316:	463a      	mov	r2, r7
 8009318:	4640      	mov	r0, r8
 800931a:	4798      	blx	r3
 800931c:	6923      	ldr	r3, [r4, #16]
 800931e:	3b01      	subs	r3, #1
 8009320:	6123      	str	r3, [r4, #16]
 8009322:	e7f0      	b.n	8009306 <_scanf_float+0x2b6>
 8009324:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009328:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800932c:	463a      	mov	r2, r7
 800932e:	4640      	mov	r0, r8
 8009330:	4798      	blx	r3
 8009332:	6923      	ldr	r3, [r4, #16]
 8009334:	3b01      	subs	r3, #1
 8009336:	6123      	str	r3, [r4, #16]
 8009338:	f10a 3aff 	add.w	sl, sl, #4294967295
 800933c:	fa5f fa8a 	uxtb.w	sl, sl
 8009340:	f1ba 0f02 	cmp.w	sl, #2
 8009344:	d1ee      	bne.n	8009324 <_scanf_float+0x2d4>
 8009346:	3d03      	subs	r5, #3
 8009348:	b2ed      	uxtb	r5, r5
 800934a:	1b76      	subs	r6, r6, r5
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	05da      	lsls	r2, r3, #23
 8009350:	d530      	bpl.n	80093b4 <_scanf_float+0x364>
 8009352:	055b      	lsls	r3, r3, #21
 8009354:	d511      	bpl.n	800937a <_scanf_float+0x32a>
 8009356:	9b01      	ldr	r3, [sp, #4]
 8009358:	429e      	cmp	r6, r3
 800935a:	f67f aebc 	bls.w	80090d6 <_scanf_float+0x86>
 800935e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009362:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009366:	463a      	mov	r2, r7
 8009368:	4640      	mov	r0, r8
 800936a:	4798      	blx	r3
 800936c:	6923      	ldr	r3, [r4, #16]
 800936e:	3b01      	subs	r3, #1
 8009370:	6123      	str	r3, [r4, #16]
 8009372:	e7f0      	b.n	8009356 <_scanf_float+0x306>
 8009374:	46aa      	mov	sl, r5
 8009376:	46b3      	mov	fp, r6
 8009378:	e7de      	b.n	8009338 <_scanf_float+0x2e8>
 800937a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800937e:	6923      	ldr	r3, [r4, #16]
 8009380:	2965      	cmp	r1, #101	@ 0x65
 8009382:	f103 33ff 	add.w	r3, r3, #4294967295
 8009386:	f106 35ff 	add.w	r5, r6, #4294967295
 800938a:	6123      	str	r3, [r4, #16]
 800938c:	d00c      	beq.n	80093a8 <_scanf_float+0x358>
 800938e:	2945      	cmp	r1, #69	@ 0x45
 8009390:	d00a      	beq.n	80093a8 <_scanf_float+0x358>
 8009392:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009396:	463a      	mov	r2, r7
 8009398:	4640      	mov	r0, r8
 800939a:	4798      	blx	r3
 800939c:	6923      	ldr	r3, [r4, #16]
 800939e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80093a2:	3b01      	subs	r3, #1
 80093a4:	1eb5      	subs	r5, r6, #2
 80093a6:	6123      	str	r3, [r4, #16]
 80093a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093ac:	463a      	mov	r2, r7
 80093ae:	4640      	mov	r0, r8
 80093b0:	4798      	blx	r3
 80093b2:	462e      	mov	r6, r5
 80093b4:	6822      	ldr	r2, [r4, #0]
 80093b6:	f012 0210 	ands.w	r2, r2, #16
 80093ba:	d001      	beq.n	80093c0 <_scanf_float+0x370>
 80093bc:	2000      	movs	r0, #0
 80093be:	e68b      	b.n	80090d8 <_scanf_float+0x88>
 80093c0:	7032      	strb	r2, [r6, #0]
 80093c2:	6823      	ldr	r3, [r4, #0]
 80093c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80093c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093cc:	d11c      	bne.n	8009408 <_scanf_float+0x3b8>
 80093ce:	9b02      	ldr	r3, [sp, #8]
 80093d0:	454b      	cmp	r3, r9
 80093d2:	eba3 0209 	sub.w	r2, r3, r9
 80093d6:	d123      	bne.n	8009420 <_scanf_float+0x3d0>
 80093d8:	9901      	ldr	r1, [sp, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	4640      	mov	r0, r8
 80093de:	f7ff f947 	bl	8008670 <_strtod_r>
 80093e2:	9b03      	ldr	r3, [sp, #12]
 80093e4:	6821      	ldr	r1, [r4, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f011 0f02 	tst.w	r1, #2
 80093ec:	ec57 6b10 	vmov	r6, r7, d0
 80093f0:	f103 0204 	add.w	r2, r3, #4
 80093f4:	d01f      	beq.n	8009436 <_scanf_float+0x3e6>
 80093f6:	9903      	ldr	r1, [sp, #12]
 80093f8:	600a      	str	r2, [r1, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	e9c3 6700 	strd	r6, r7, [r3]
 8009400:	68e3      	ldr	r3, [r4, #12]
 8009402:	3301      	adds	r3, #1
 8009404:	60e3      	str	r3, [r4, #12]
 8009406:	e7d9      	b.n	80093bc <_scanf_float+0x36c>
 8009408:	9b04      	ldr	r3, [sp, #16]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0e4      	beq.n	80093d8 <_scanf_float+0x388>
 800940e:	9905      	ldr	r1, [sp, #20]
 8009410:	230a      	movs	r3, #10
 8009412:	3101      	adds	r1, #1
 8009414:	4640      	mov	r0, r8
 8009416:	f7ff f9b7 	bl	8008788 <_strtol_r>
 800941a:	9b04      	ldr	r3, [sp, #16]
 800941c:	9e05      	ldr	r6, [sp, #20]
 800941e:	1ac2      	subs	r2, r0, r3
 8009420:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009424:	429e      	cmp	r6, r3
 8009426:	bf28      	it	cs
 8009428:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800942c:	4910      	ldr	r1, [pc, #64]	@ (8009470 <_scanf_float+0x420>)
 800942e:	4630      	mov	r0, r6
 8009430:	f000 f990 	bl	8009754 <siprintf>
 8009434:	e7d0      	b.n	80093d8 <_scanf_float+0x388>
 8009436:	f011 0f04 	tst.w	r1, #4
 800943a:	9903      	ldr	r1, [sp, #12]
 800943c:	600a      	str	r2, [r1, #0]
 800943e:	d1dc      	bne.n	80093fa <_scanf_float+0x3aa>
 8009440:	681d      	ldr	r5, [r3, #0]
 8009442:	4632      	mov	r2, r6
 8009444:	463b      	mov	r3, r7
 8009446:	4630      	mov	r0, r6
 8009448:	4639      	mov	r1, r7
 800944a:	f7f7 fb7f 	bl	8000b4c <__aeabi_dcmpun>
 800944e:	b128      	cbz	r0, 800945c <_scanf_float+0x40c>
 8009450:	4808      	ldr	r0, [pc, #32]	@ (8009474 <_scanf_float+0x424>)
 8009452:	f001 f965 	bl	800a720 <nanf>
 8009456:	ed85 0a00 	vstr	s0, [r5]
 800945a:	e7d1      	b.n	8009400 <_scanf_float+0x3b0>
 800945c:	4630      	mov	r0, r6
 800945e:	4639      	mov	r1, r7
 8009460:	f7f7 fbd2 	bl	8000c08 <__aeabi_d2f>
 8009464:	6028      	str	r0, [r5, #0]
 8009466:	e7cb      	b.n	8009400 <_scanf_float+0x3b0>
 8009468:	f04f 0900 	mov.w	r9, #0
 800946c:	e629      	b.n	80090c2 <_scanf_float+0x72>
 800946e:	bf00      	nop
 8009470:	0800e6a3 	.word	0x0800e6a3
 8009474:	0800dfb2 	.word	0x0800dfb2

08009478 <std>:
 8009478:	2300      	movs	r3, #0
 800947a:	b510      	push	{r4, lr}
 800947c:	4604      	mov	r4, r0
 800947e:	e9c0 3300 	strd	r3, r3, [r0]
 8009482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009486:	6083      	str	r3, [r0, #8]
 8009488:	8181      	strh	r1, [r0, #12]
 800948a:	6643      	str	r3, [r0, #100]	@ 0x64
 800948c:	81c2      	strh	r2, [r0, #14]
 800948e:	6183      	str	r3, [r0, #24]
 8009490:	4619      	mov	r1, r3
 8009492:	2208      	movs	r2, #8
 8009494:	305c      	adds	r0, #92	@ 0x5c
 8009496:	f000 fa81 	bl	800999c <memset>
 800949a:	4b0d      	ldr	r3, [pc, #52]	@ (80094d0 <std+0x58>)
 800949c:	6263      	str	r3, [r4, #36]	@ 0x24
 800949e:	4b0d      	ldr	r3, [pc, #52]	@ (80094d4 <std+0x5c>)
 80094a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80094a2:	4b0d      	ldr	r3, [pc, #52]	@ (80094d8 <std+0x60>)
 80094a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80094a6:	4b0d      	ldr	r3, [pc, #52]	@ (80094dc <std+0x64>)
 80094a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80094aa:	4b0d      	ldr	r3, [pc, #52]	@ (80094e0 <std+0x68>)
 80094ac:	6224      	str	r4, [r4, #32]
 80094ae:	429c      	cmp	r4, r3
 80094b0:	d006      	beq.n	80094c0 <std+0x48>
 80094b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80094b6:	4294      	cmp	r4, r2
 80094b8:	d002      	beq.n	80094c0 <std+0x48>
 80094ba:	33d0      	adds	r3, #208	@ 0xd0
 80094bc:	429c      	cmp	r4, r3
 80094be:	d105      	bne.n	80094cc <std+0x54>
 80094c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80094c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094c8:	f7f9 bd1b 	b.w	8002f02 <__retarget_lock_init_recursive>
 80094cc:	bd10      	pop	{r4, pc}
 80094ce:	bf00      	nop
 80094d0:	080097e9 	.word	0x080097e9
 80094d4:	0800980f 	.word	0x0800980f
 80094d8:	08009847 	.word	0x08009847
 80094dc:	0800986b 	.word	0x0800986b
 80094e0:	20008e20 	.word	0x20008e20

080094e4 <stdio_exit_handler>:
 80094e4:	4a02      	ldr	r2, [pc, #8]	@ (80094f0 <stdio_exit_handler+0xc>)
 80094e6:	4903      	ldr	r1, [pc, #12]	@ (80094f4 <stdio_exit_handler+0x10>)
 80094e8:	4803      	ldr	r0, [pc, #12]	@ (80094f8 <stdio_exit_handler+0x14>)
 80094ea:	f000 b869 	b.w	80095c0 <_fwalk_sglue>
 80094ee:	bf00      	nop
 80094f0:	20000020 	.word	0x20000020
 80094f4:	0800d26d 	.word	0x0800d26d
 80094f8:	200001a4 	.word	0x200001a4

080094fc <cleanup_stdio>:
 80094fc:	6841      	ldr	r1, [r0, #4]
 80094fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009530 <cleanup_stdio+0x34>)
 8009500:	4299      	cmp	r1, r3
 8009502:	b510      	push	{r4, lr}
 8009504:	4604      	mov	r4, r0
 8009506:	d001      	beq.n	800950c <cleanup_stdio+0x10>
 8009508:	f003 feb0 	bl	800d26c <_fflush_r>
 800950c:	68a1      	ldr	r1, [r4, #8]
 800950e:	4b09      	ldr	r3, [pc, #36]	@ (8009534 <cleanup_stdio+0x38>)
 8009510:	4299      	cmp	r1, r3
 8009512:	d002      	beq.n	800951a <cleanup_stdio+0x1e>
 8009514:	4620      	mov	r0, r4
 8009516:	f003 fea9 	bl	800d26c <_fflush_r>
 800951a:	68e1      	ldr	r1, [r4, #12]
 800951c:	4b06      	ldr	r3, [pc, #24]	@ (8009538 <cleanup_stdio+0x3c>)
 800951e:	4299      	cmp	r1, r3
 8009520:	d004      	beq.n	800952c <cleanup_stdio+0x30>
 8009522:	4620      	mov	r0, r4
 8009524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009528:	f003 bea0 	b.w	800d26c <_fflush_r>
 800952c:	bd10      	pop	{r4, pc}
 800952e:	bf00      	nop
 8009530:	20008e20 	.word	0x20008e20
 8009534:	20008e88 	.word	0x20008e88
 8009538:	20008ef0 	.word	0x20008ef0

0800953c <global_stdio_init.part.0>:
 800953c:	b510      	push	{r4, lr}
 800953e:	4b0b      	ldr	r3, [pc, #44]	@ (800956c <global_stdio_init.part.0+0x30>)
 8009540:	4c0b      	ldr	r4, [pc, #44]	@ (8009570 <global_stdio_init.part.0+0x34>)
 8009542:	4a0c      	ldr	r2, [pc, #48]	@ (8009574 <global_stdio_init.part.0+0x38>)
 8009544:	601a      	str	r2, [r3, #0]
 8009546:	4620      	mov	r0, r4
 8009548:	2200      	movs	r2, #0
 800954a:	2104      	movs	r1, #4
 800954c:	f7ff ff94 	bl	8009478 <std>
 8009550:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009554:	2201      	movs	r2, #1
 8009556:	2109      	movs	r1, #9
 8009558:	f7ff ff8e 	bl	8009478 <std>
 800955c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009560:	2202      	movs	r2, #2
 8009562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009566:	2112      	movs	r1, #18
 8009568:	f7ff bf86 	b.w	8009478 <std>
 800956c:	20008f58 	.word	0x20008f58
 8009570:	20008e20 	.word	0x20008e20
 8009574:	080094e5 	.word	0x080094e5

08009578 <__sfp_lock_acquire>:
 8009578:	4801      	ldr	r0, [pc, #4]	@ (8009580 <__sfp_lock_acquire+0x8>)
 800957a:	f7f9 bcde 	b.w	8002f3a <__retarget_lock_acquire_recursive>
 800957e:	bf00      	nop
 8009580:	200036d0 	.word	0x200036d0

08009584 <__sfp_lock_release>:
 8009584:	4801      	ldr	r0, [pc, #4]	@ (800958c <__sfp_lock_release+0x8>)
 8009586:	f7f9 bce4 	b.w	8002f52 <__retarget_lock_release_recursive>
 800958a:	bf00      	nop
 800958c:	200036d0 	.word	0x200036d0

08009590 <__sinit>:
 8009590:	b510      	push	{r4, lr}
 8009592:	4604      	mov	r4, r0
 8009594:	f7ff fff0 	bl	8009578 <__sfp_lock_acquire>
 8009598:	6a23      	ldr	r3, [r4, #32]
 800959a:	b11b      	cbz	r3, 80095a4 <__sinit+0x14>
 800959c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095a0:	f7ff bff0 	b.w	8009584 <__sfp_lock_release>
 80095a4:	4b04      	ldr	r3, [pc, #16]	@ (80095b8 <__sinit+0x28>)
 80095a6:	6223      	str	r3, [r4, #32]
 80095a8:	4b04      	ldr	r3, [pc, #16]	@ (80095bc <__sinit+0x2c>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1f5      	bne.n	800959c <__sinit+0xc>
 80095b0:	f7ff ffc4 	bl	800953c <global_stdio_init.part.0>
 80095b4:	e7f2      	b.n	800959c <__sinit+0xc>
 80095b6:	bf00      	nop
 80095b8:	080094fd 	.word	0x080094fd
 80095bc:	20008f58 	.word	0x20008f58

080095c0 <_fwalk_sglue>:
 80095c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c4:	4607      	mov	r7, r0
 80095c6:	4688      	mov	r8, r1
 80095c8:	4614      	mov	r4, r2
 80095ca:	2600      	movs	r6, #0
 80095cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095d0:	f1b9 0901 	subs.w	r9, r9, #1
 80095d4:	d505      	bpl.n	80095e2 <_fwalk_sglue+0x22>
 80095d6:	6824      	ldr	r4, [r4, #0]
 80095d8:	2c00      	cmp	r4, #0
 80095da:	d1f7      	bne.n	80095cc <_fwalk_sglue+0xc>
 80095dc:	4630      	mov	r0, r6
 80095de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095e2:	89ab      	ldrh	r3, [r5, #12]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d907      	bls.n	80095f8 <_fwalk_sglue+0x38>
 80095e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095ec:	3301      	adds	r3, #1
 80095ee:	d003      	beq.n	80095f8 <_fwalk_sglue+0x38>
 80095f0:	4629      	mov	r1, r5
 80095f2:	4638      	mov	r0, r7
 80095f4:	47c0      	blx	r8
 80095f6:	4306      	orrs	r6, r0
 80095f8:	3568      	adds	r5, #104	@ 0x68
 80095fa:	e7e9      	b.n	80095d0 <_fwalk_sglue+0x10>

080095fc <iprintf>:
 80095fc:	b40f      	push	{r0, r1, r2, r3}
 80095fe:	b507      	push	{r0, r1, r2, lr}
 8009600:	4906      	ldr	r1, [pc, #24]	@ (800961c <iprintf+0x20>)
 8009602:	ab04      	add	r3, sp, #16
 8009604:	6808      	ldr	r0, [r1, #0]
 8009606:	f853 2b04 	ldr.w	r2, [r3], #4
 800960a:	6881      	ldr	r1, [r0, #8]
 800960c:	9301      	str	r3, [sp, #4]
 800960e:	f003 fb43 	bl	800cc98 <_vfiprintf_r>
 8009612:	b003      	add	sp, #12
 8009614:	f85d eb04 	ldr.w	lr, [sp], #4
 8009618:	b004      	add	sp, #16
 800961a:	4770      	bx	lr
 800961c:	200001a0 	.word	0x200001a0

08009620 <putchar>:
 8009620:	4b02      	ldr	r3, [pc, #8]	@ (800962c <putchar+0xc>)
 8009622:	4601      	mov	r1, r0
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	6882      	ldr	r2, [r0, #8]
 8009628:	f003 beaa 	b.w	800d380 <_putc_r>
 800962c:	200001a0 	.word	0x200001a0

08009630 <_puts_r>:
 8009630:	6a03      	ldr	r3, [r0, #32]
 8009632:	b570      	push	{r4, r5, r6, lr}
 8009634:	6884      	ldr	r4, [r0, #8]
 8009636:	4605      	mov	r5, r0
 8009638:	460e      	mov	r6, r1
 800963a:	b90b      	cbnz	r3, 8009640 <_puts_r+0x10>
 800963c:	f7ff ffa8 	bl	8009590 <__sinit>
 8009640:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009642:	07db      	lsls	r3, r3, #31
 8009644:	d405      	bmi.n	8009652 <_puts_r+0x22>
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	0598      	lsls	r0, r3, #22
 800964a:	d402      	bmi.n	8009652 <_puts_r+0x22>
 800964c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800964e:	f7f9 fc74 	bl	8002f3a <__retarget_lock_acquire_recursive>
 8009652:	89a3      	ldrh	r3, [r4, #12]
 8009654:	0719      	lsls	r1, r3, #28
 8009656:	d502      	bpl.n	800965e <_puts_r+0x2e>
 8009658:	6923      	ldr	r3, [r4, #16]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d135      	bne.n	80096ca <_puts_r+0x9a>
 800965e:	4621      	mov	r1, r4
 8009660:	4628      	mov	r0, r5
 8009662:	f000 f945 	bl	80098f0 <__swsetup_r>
 8009666:	b380      	cbz	r0, 80096ca <_puts_r+0x9a>
 8009668:	f04f 35ff 	mov.w	r5, #4294967295
 800966c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800966e:	07da      	lsls	r2, r3, #31
 8009670:	d405      	bmi.n	800967e <_puts_r+0x4e>
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	059b      	lsls	r3, r3, #22
 8009676:	d402      	bmi.n	800967e <_puts_r+0x4e>
 8009678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800967a:	f7f9 fc6a 	bl	8002f52 <__retarget_lock_release_recursive>
 800967e:	4628      	mov	r0, r5
 8009680:	bd70      	pop	{r4, r5, r6, pc}
 8009682:	2b00      	cmp	r3, #0
 8009684:	da04      	bge.n	8009690 <_puts_r+0x60>
 8009686:	69a2      	ldr	r2, [r4, #24]
 8009688:	429a      	cmp	r2, r3
 800968a:	dc17      	bgt.n	80096bc <_puts_r+0x8c>
 800968c:	290a      	cmp	r1, #10
 800968e:	d015      	beq.n	80096bc <_puts_r+0x8c>
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	1c5a      	adds	r2, r3, #1
 8009694:	6022      	str	r2, [r4, #0]
 8009696:	7019      	strb	r1, [r3, #0]
 8009698:	68a3      	ldr	r3, [r4, #8]
 800969a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800969e:	3b01      	subs	r3, #1
 80096a0:	60a3      	str	r3, [r4, #8]
 80096a2:	2900      	cmp	r1, #0
 80096a4:	d1ed      	bne.n	8009682 <_puts_r+0x52>
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	da11      	bge.n	80096ce <_puts_r+0x9e>
 80096aa:	4622      	mov	r2, r4
 80096ac:	210a      	movs	r1, #10
 80096ae:	4628      	mov	r0, r5
 80096b0:	f000 f8df 	bl	8009872 <__swbuf_r>
 80096b4:	3001      	adds	r0, #1
 80096b6:	d0d7      	beq.n	8009668 <_puts_r+0x38>
 80096b8:	250a      	movs	r5, #10
 80096ba:	e7d7      	b.n	800966c <_puts_r+0x3c>
 80096bc:	4622      	mov	r2, r4
 80096be:	4628      	mov	r0, r5
 80096c0:	f000 f8d7 	bl	8009872 <__swbuf_r>
 80096c4:	3001      	adds	r0, #1
 80096c6:	d1e7      	bne.n	8009698 <_puts_r+0x68>
 80096c8:	e7ce      	b.n	8009668 <_puts_r+0x38>
 80096ca:	3e01      	subs	r6, #1
 80096cc:	e7e4      	b.n	8009698 <_puts_r+0x68>
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	1c5a      	adds	r2, r3, #1
 80096d2:	6022      	str	r2, [r4, #0]
 80096d4:	220a      	movs	r2, #10
 80096d6:	701a      	strb	r2, [r3, #0]
 80096d8:	e7ee      	b.n	80096b8 <_puts_r+0x88>
	...

080096dc <puts>:
 80096dc:	4b02      	ldr	r3, [pc, #8]	@ (80096e8 <puts+0xc>)
 80096de:	4601      	mov	r1, r0
 80096e0:	6818      	ldr	r0, [r3, #0]
 80096e2:	f7ff bfa5 	b.w	8009630 <_puts_r>
 80096e6:	bf00      	nop
 80096e8:	200001a0 	.word	0x200001a0

080096ec <sniprintf>:
 80096ec:	b40c      	push	{r2, r3}
 80096ee:	b530      	push	{r4, r5, lr}
 80096f0:	4b17      	ldr	r3, [pc, #92]	@ (8009750 <sniprintf+0x64>)
 80096f2:	1e0c      	subs	r4, r1, #0
 80096f4:	681d      	ldr	r5, [r3, #0]
 80096f6:	b09d      	sub	sp, #116	@ 0x74
 80096f8:	da08      	bge.n	800970c <sniprintf+0x20>
 80096fa:	238b      	movs	r3, #139	@ 0x8b
 80096fc:	602b      	str	r3, [r5, #0]
 80096fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009702:	b01d      	add	sp, #116	@ 0x74
 8009704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009708:	b002      	add	sp, #8
 800970a:	4770      	bx	lr
 800970c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009710:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009714:	bf14      	ite	ne
 8009716:	f104 33ff 	addne.w	r3, r4, #4294967295
 800971a:	4623      	moveq	r3, r4
 800971c:	9304      	str	r3, [sp, #16]
 800971e:	9307      	str	r3, [sp, #28]
 8009720:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009724:	9002      	str	r0, [sp, #8]
 8009726:	9006      	str	r0, [sp, #24]
 8009728:	f8ad 3016 	strh.w	r3, [sp, #22]
 800972c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800972e:	ab21      	add	r3, sp, #132	@ 0x84
 8009730:	a902      	add	r1, sp, #8
 8009732:	4628      	mov	r0, r5
 8009734:	9301      	str	r3, [sp, #4]
 8009736:	f002 ffbd 	bl	800c6b4 <_svfiprintf_r>
 800973a:	1c43      	adds	r3, r0, #1
 800973c:	bfbc      	itt	lt
 800973e:	238b      	movlt	r3, #139	@ 0x8b
 8009740:	602b      	strlt	r3, [r5, #0]
 8009742:	2c00      	cmp	r4, #0
 8009744:	d0dd      	beq.n	8009702 <sniprintf+0x16>
 8009746:	9b02      	ldr	r3, [sp, #8]
 8009748:	2200      	movs	r2, #0
 800974a:	701a      	strb	r2, [r3, #0]
 800974c:	e7d9      	b.n	8009702 <sniprintf+0x16>
 800974e:	bf00      	nop
 8009750:	200001a0 	.word	0x200001a0

08009754 <siprintf>:
 8009754:	b40e      	push	{r1, r2, r3}
 8009756:	b500      	push	{lr}
 8009758:	b09c      	sub	sp, #112	@ 0x70
 800975a:	ab1d      	add	r3, sp, #116	@ 0x74
 800975c:	9002      	str	r0, [sp, #8]
 800975e:	9006      	str	r0, [sp, #24]
 8009760:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009764:	4809      	ldr	r0, [pc, #36]	@ (800978c <siprintf+0x38>)
 8009766:	9107      	str	r1, [sp, #28]
 8009768:	9104      	str	r1, [sp, #16]
 800976a:	4909      	ldr	r1, [pc, #36]	@ (8009790 <siprintf+0x3c>)
 800976c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009770:	9105      	str	r1, [sp, #20]
 8009772:	6800      	ldr	r0, [r0, #0]
 8009774:	9301      	str	r3, [sp, #4]
 8009776:	a902      	add	r1, sp, #8
 8009778:	f002 ff9c 	bl	800c6b4 <_svfiprintf_r>
 800977c:	9b02      	ldr	r3, [sp, #8]
 800977e:	2200      	movs	r2, #0
 8009780:	701a      	strb	r2, [r3, #0]
 8009782:	b01c      	add	sp, #112	@ 0x70
 8009784:	f85d eb04 	ldr.w	lr, [sp], #4
 8009788:	b003      	add	sp, #12
 800978a:	4770      	bx	lr
 800978c:	200001a0 	.word	0x200001a0
 8009790:	ffff0208 	.word	0xffff0208

08009794 <siscanf>:
 8009794:	b40e      	push	{r1, r2, r3}
 8009796:	b530      	push	{r4, r5, lr}
 8009798:	b09c      	sub	sp, #112	@ 0x70
 800979a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800979c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80097a0:	f854 5b04 	ldr.w	r5, [r4], #4
 80097a4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80097a8:	9002      	str	r0, [sp, #8]
 80097aa:	9006      	str	r0, [sp, #24]
 80097ac:	f7f6 fd70 	bl	8000290 <strlen>
 80097b0:	4b0b      	ldr	r3, [pc, #44]	@ (80097e0 <siscanf+0x4c>)
 80097b2:	9003      	str	r0, [sp, #12]
 80097b4:	9007      	str	r0, [sp, #28]
 80097b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097b8:	480a      	ldr	r0, [pc, #40]	@ (80097e4 <siscanf+0x50>)
 80097ba:	9401      	str	r4, [sp, #4]
 80097bc:	2300      	movs	r3, #0
 80097be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80097c0:	9314      	str	r3, [sp, #80]	@ 0x50
 80097c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80097c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80097ca:	462a      	mov	r2, r5
 80097cc:	4623      	mov	r3, r4
 80097ce:	a902      	add	r1, sp, #8
 80097d0:	6800      	ldr	r0, [r0, #0]
 80097d2:	f003 f8c3 	bl	800c95c <__ssvfiscanf_r>
 80097d6:	b01c      	add	sp, #112	@ 0x70
 80097d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097dc:	b003      	add	sp, #12
 80097de:	4770      	bx	lr
 80097e0:	0800980b 	.word	0x0800980b
 80097e4:	200001a0 	.word	0x200001a0

080097e8 <__sread>:
 80097e8:	b510      	push	{r4, lr}
 80097ea:	460c      	mov	r4, r1
 80097ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f0:	f000 ff18 	bl	800a624 <_read_r>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	bfab      	itete	ge
 80097f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80097fa:	89a3      	ldrhlt	r3, [r4, #12]
 80097fc:	181b      	addge	r3, r3, r0
 80097fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009802:	bfac      	ite	ge
 8009804:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009806:	81a3      	strhlt	r3, [r4, #12]
 8009808:	bd10      	pop	{r4, pc}

0800980a <__seofread>:
 800980a:	2000      	movs	r0, #0
 800980c:	4770      	bx	lr

0800980e <__swrite>:
 800980e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009812:	461f      	mov	r7, r3
 8009814:	898b      	ldrh	r3, [r1, #12]
 8009816:	05db      	lsls	r3, r3, #23
 8009818:	4605      	mov	r5, r0
 800981a:	460c      	mov	r4, r1
 800981c:	4616      	mov	r6, r2
 800981e:	d505      	bpl.n	800982c <__swrite+0x1e>
 8009820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009824:	2302      	movs	r3, #2
 8009826:	2200      	movs	r2, #0
 8009828:	f000 feea 	bl	800a600 <_lseek_r>
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009832:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009836:	81a3      	strh	r3, [r4, #12]
 8009838:	4632      	mov	r2, r6
 800983a:	463b      	mov	r3, r7
 800983c:	4628      	mov	r0, r5
 800983e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009842:	f000 bf11 	b.w	800a668 <_write_r>

08009846 <__sseek>:
 8009846:	b510      	push	{r4, lr}
 8009848:	460c      	mov	r4, r1
 800984a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800984e:	f000 fed7 	bl	800a600 <_lseek_r>
 8009852:	1c43      	adds	r3, r0, #1
 8009854:	89a3      	ldrh	r3, [r4, #12]
 8009856:	bf15      	itete	ne
 8009858:	6560      	strne	r0, [r4, #84]	@ 0x54
 800985a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800985e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009862:	81a3      	strheq	r3, [r4, #12]
 8009864:	bf18      	it	ne
 8009866:	81a3      	strhne	r3, [r4, #12]
 8009868:	bd10      	pop	{r4, pc}

0800986a <__sclose>:
 800986a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800986e:	f000 be61 	b.w	800a534 <_close_r>

08009872 <__swbuf_r>:
 8009872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009874:	460e      	mov	r6, r1
 8009876:	4614      	mov	r4, r2
 8009878:	4605      	mov	r5, r0
 800987a:	b118      	cbz	r0, 8009884 <__swbuf_r+0x12>
 800987c:	6a03      	ldr	r3, [r0, #32]
 800987e:	b90b      	cbnz	r3, 8009884 <__swbuf_r+0x12>
 8009880:	f7ff fe86 	bl	8009590 <__sinit>
 8009884:	69a3      	ldr	r3, [r4, #24]
 8009886:	60a3      	str	r3, [r4, #8]
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	071a      	lsls	r2, r3, #28
 800988c:	d501      	bpl.n	8009892 <__swbuf_r+0x20>
 800988e:	6923      	ldr	r3, [r4, #16]
 8009890:	b943      	cbnz	r3, 80098a4 <__swbuf_r+0x32>
 8009892:	4621      	mov	r1, r4
 8009894:	4628      	mov	r0, r5
 8009896:	f000 f82b 	bl	80098f0 <__swsetup_r>
 800989a:	b118      	cbz	r0, 80098a4 <__swbuf_r+0x32>
 800989c:	f04f 37ff 	mov.w	r7, #4294967295
 80098a0:	4638      	mov	r0, r7
 80098a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	6922      	ldr	r2, [r4, #16]
 80098a8:	1a98      	subs	r0, r3, r2
 80098aa:	6963      	ldr	r3, [r4, #20]
 80098ac:	b2f6      	uxtb	r6, r6
 80098ae:	4283      	cmp	r3, r0
 80098b0:	4637      	mov	r7, r6
 80098b2:	dc05      	bgt.n	80098c0 <__swbuf_r+0x4e>
 80098b4:	4621      	mov	r1, r4
 80098b6:	4628      	mov	r0, r5
 80098b8:	f003 fcd8 	bl	800d26c <_fflush_r>
 80098bc:	2800      	cmp	r0, #0
 80098be:	d1ed      	bne.n	800989c <__swbuf_r+0x2a>
 80098c0:	68a3      	ldr	r3, [r4, #8]
 80098c2:	3b01      	subs	r3, #1
 80098c4:	60a3      	str	r3, [r4, #8]
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	1c5a      	adds	r2, r3, #1
 80098ca:	6022      	str	r2, [r4, #0]
 80098cc:	701e      	strb	r6, [r3, #0]
 80098ce:	6962      	ldr	r2, [r4, #20]
 80098d0:	1c43      	adds	r3, r0, #1
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d004      	beq.n	80098e0 <__swbuf_r+0x6e>
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	07db      	lsls	r3, r3, #31
 80098da:	d5e1      	bpl.n	80098a0 <__swbuf_r+0x2e>
 80098dc:	2e0a      	cmp	r6, #10
 80098de:	d1df      	bne.n	80098a0 <__swbuf_r+0x2e>
 80098e0:	4621      	mov	r1, r4
 80098e2:	4628      	mov	r0, r5
 80098e4:	f003 fcc2 	bl	800d26c <_fflush_r>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d0d9      	beq.n	80098a0 <__swbuf_r+0x2e>
 80098ec:	e7d6      	b.n	800989c <__swbuf_r+0x2a>
	...

080098f0 <__swsetup_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	4b29      	ldr	r3, [pc, #164]	@ (8009998 <__swsetup_r+0xa8>)
 80098f4:	4605      	mov	r5, r0
 80098f6:	6818      	ldr	r0, [r3, #0]
 80098f8:	460c      	mov	r4, r1
 80098fa:	b118      	cbz	r0, 8009904 <__swsetup_r+0x14>
 80098fc:	6a03      	ldr	r3, [r0, #32]
 80098fe:	b90b      	cbnz	r3, 8009904 <__swsetup_r+0x14>
 8009900:	f7ff fe46 	bl	8009590 <__sinit>
 8009904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009908:	0719      	lsls	r1, r3, #28
 800990a:	d422      	bmi.n	8009952 <__swsetup_r+0x62>
 800990c:	06da      	lsls	r2, r3, #27
 800990e:	d407      	bmi.n	8009920 <__swsetup_r+0x30>
 8009910:	2209      	movs	r2, #9
 8009912:	602a      	str	r2, [r5, #0]
 8009914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009918:	81a3      	strh	r3, [r4, #12]
 800991a:	f04f 30ff 	mov.w	r0, #4294967295
 800991e:	e033      	b.n	8009988 <__swsetup_r+0x98>
 8009920:	0758      	lsls	r0, r3, #29
 8009922:	d512      	bpl.n	800994a <__swsetup_r+0x5a>
 8009924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009926:	b141      	cbz	r1, 800993a <__swsetup_r+0x4a>
 8009928:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800992c:	4299      	cmp	r1, r3
 800992e:	d002      	beq.n	8009936 <__swsetup_r+0x46>
 8009930:	4628      	mov	r0, r5
 8009932:	f001 fd51 	bl	800b3d8 <_free_r>
 8009936:	2300      	movs	r3, #0
 8009938:	6363      	str	r3, [r4, #52]	@ 0x34
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009940:	81a3      	strh	r3, [r4, #12]
 8009942:	2300      	movs	r3, #0
 8009944:	6063      	str	r3, [r4, #4]
 8009946:	6923      	ldr	r3, [r4, #16]
 8009948:	6023      	str	r3, [r4, #0]
 800994a:	89a3      	ldrh	r3, [r4, #12]
 800994c:	f043 0308 	orr.w	r3, r3, #8
 8009950:	81a3      	strh	r3, [r4, #12]
 8009952:	6923      	ldr	r3, [r4, #16]
 8009954:	b94b      	cbnz	r3, 800996a <__swsetup_r+0x7a>
 8009956:	89a3      	ldrh	r3, [r4, #12]
 8009958:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800995c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009960:	d003      	beq.n	800996a <__swsetup_r+0x7a>
 8009962:	4621      	mov	r1, r4
 8009964:	4628      	mov	r0, r5
 8009966:	f003 fccf 	bl	800d308 <__smakebuf_r>
 800996a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800996e:	f013 0201 	ands.w	r2, r3, #1
 8009972:	d00a      	beq.n	800998a <__swsetup_r+0x9a>
 8009974:	2200      	movs	r2, #0
 8009976:	60a2      	str	r2, [r4, #8]
 8009978:	6962      	ldr	r2, [r4, #20]
 800997a:	4252      	negs	r2, r2
 800997c:	61a2      	str	r2, [r4, #24]
 800997e:	6922      	ldr	r2, [r4, #16]
 8009980:	b942      	cbnz	r2, 8009994 <__swsetup_r+0xa4>
 8009982:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009986:	d1c5      	bne.n	8009914 <__swsetup_r+0x24>
 8009988:	bd38      	pop	{r3, r4, r5, pc}
 800998a:	0799      	lsls	r1, r3, #30
 800998c:	bf58      	it	pl
 800998e:	6962      	ldrpl	r2, [r4, #20]
 8009990:	60a2      	str	r2, [r4, #8]
 8009992:	e7f4      	b.n	800997e <__swsetup_r+0x8e>
 8009994:	2000      	movs	r0, #0
 8009996:	e7f7      	b.n	8009988 <__swsetup_r+0x98>
 8009998:	200001a0 	.word	0x200001a0

0800999c <memset>:
 800999c:	4402      	add	r2, r0
 800999e:	4603      	mov	r3, r0
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d100      	bne.n	80099a6 <memset+0xa>
 80099a4:	4770      	bx	lr
 80099a6:	f803 1b01 	strb.w	r1, [r3], #1
 80099aa:	e7f9      	b.n	80099a0 <memset+0x4>

080099ac <strchr>:
 80099ac:	b2c9      	uxtb	r1, r1
 80099ae:	4603      	mov	r3, r0
 80099b0:	4618      	mov	r0, r3
 80099b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099b6:	b112      	cbz	r2, 80099be <strchr+0x12>
 80099b8:	428a      	cmp	r2, r1
 80099ba:	d1f9      	bne.n	80099b0 <strchr+0x4>
 80099bc:	4770      	bx	lr
 80099be:	2900      	cmp	r1, #0
 80099c0:	bf18      	it	ne
 80099c2:	2000      	movne	r0, #0
 80099c4:	4770      	bx	lr

080099c6 <strncmp>:
 80099c6:	b510      	push	{r4, lr}
 80099c8:	b16a      	cbz	r2, 80099e6 <strncmp+0x20>
 80099ca:	3901      	subs	r1, #1
 80099cc:	1884      	adds	r4, r0, r2
 80099ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d103      	bne.n	80099e2 <strncmp+0x1c>
 80099da:	42a0      	cmp	r0, r4
 80099dc:	d001      	beq.n	80099e2 <strncmp+0x1c>
 80099de:	2a00      	cmp	r2, #0
 80099e0:	d1f5      	bne.n	80099ce <strncmp+0x8>
 80099e2:	1ad0      	subs	r0, r2, r3
 80099e4:	bd10      	pop	{r4, pc}
 80099e6:	4610      	mov	r0, r2
 80099e8:	e7fc      	b.n	80099e4 <strncmp+0x1e>

080099ea <strncpy>:
 80099ea:	b510      	push	{r4, lr}
 80099ec:	3901      	subs	r1, #1
 80099ee:	4603      	mov	r3, r0
 80099f0:	b132      	cbz	r2, 8009a00 <strncpy+0x16>
 80099f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80099f6:	f803 4b01 	strb.w	r4, [r3], #1
 80099fa:	3a01      	subs	r2, #1
 80099fc:	2c00      	cmp	r4, #0
 80099fe:	d1f7      	bne.n	80099f0 <strncpy+0x6>
 8009a00:	441a      	add	r2, r3
 8009a02:	2100      	movs	r1, #0
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d100      	bne.n	8009a0a <strncpy+0x20>
 8009a08:	bd10      	pop	{r4, pc}
 8009a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a0e:	e7f9      	b.n	8009a04 <strncpy+0x1a>

08009a10 <strrchr>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8009a16:	4603      	mov	r3, r0
 8009a18:	d10e      	bne.n	8009a38 <strrchr+0x28>
 8009a1a:	4621      	mov	r1, r4
 8009a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a20:	f7ff bfc4 	b.w	80099ac <strchr>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	4605      	mov	r5, r0
 8009a28:	4621      	mov	r1, r4
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7ff ffbe 	bl	80099ac <strchr>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d1f7      	bne.n	8009a24 <strrchr+0x14>
 8009a34:	4628      	mov	r0, r5
 8009a36:	bd38      	pop	{r3, r4, r5, pc}
 8009a38:	2500      	movs	r5, #0
 8009a3a:	e7f5      	b.n	8009a28 <strrchr+0x18>

08009a3c <strstr>:
 8009a3c:	780a      	ldrb	r2, [r1, #0]
 8009a3e:	b570      	push	{r4, r5, r6, lr}
 8009a40:	b96a      	cbnz	r2, 8009a5e <strstr+0x22>
 8009a42:	bd70      	pop	{r4, r5, r6, pc}
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d109      	bne.n	8009a5c <strstr+0x20>
 8009a48:	460c      	mov	r4, r1
 8009a4a:	4605      	mov	r5, r0
 8009a4c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d0f6      	beq.n	8009a42 <strstr+0x6>
 8009a54:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009a58:	429e      	cmp	r6, r3
 8009a5a:	d0f7      	beq.n	8009a4c <strstr+0x10>
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	7803      	ldrb	r3, [r0, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1ef      	bne.n	8009a44 <strstr+0x8>
 8009a64:	4618      	mov	r0, r3
 8009a66:	e7ec      	b.n	8009a42 <strstr+0x6>

08009a68 <validate_structure>:
 8009a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a6a:	6801      	ldr	r1, [r0, #0]
 8009a6c:	293b      	cmp	r1, #59	@ 0x3b
 8009a6e:	4604      	mov	r4, r0
 8009a70:	d911      	bls.n	8009a96 <validate_structure+0x2e>
 8009a72:	223c      	movs	r2, #60	@ 0x3c
 8009a74:	4668      	mov	r0, sp
 8009a76:	f000 fe59 	bl	800a72c <div>
 8009a7a:	9a01      	ldr	r2, [sp, #4]
 8009a7c:	6863      	ldr	r3, [r4, #4]
 8009a7e:	9900      	ldr	r1, [sp, #0]
 8009a80:	2a00      	cmp	r2, #0
 8009a82:	440b      	add	r3, r1
 8009a84:	6063      	str	r3, [r4, #4]
 8009a86:	bfbb      	ittet	lt
 8009a88:	323c      	addlt	r2, #60	@ 0x3c
 8009a8a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009a8e:	6022      	strge	r2, [r4, #0]
 8009a90:	6022      	strlt	r2, [r4, #0]
 8009a92:	bfb8      	it	lt
 8009a94:	6063      	strlt	r3, [r4, #4]
 8009a96:	6861      	ldr	r1, [r4, #4]
 8009a98:	293b      	cmp	r1, #59	@ 0x3b
 8009a9a:	d911      	bls.n	8009ac0 <validate_structure+0x58>
 8009a9c:	223c      	movs	r2, #60	@ 0x3c
 8009a9e:	4668      	mov	r0, sp
 8009aa0:	f000 fe44 	bl	800a72c <div>
 8009aa4:	9a01      	ldr	r2, [sp, #4]
 8009aa6:	68a3      	ldr	r3, [r4, #8]
 8009aa8:	9900      	ldr	r1, [sp, #0]
 8009aaa:	2a00      	cmp	r2, #0
 8009aac:	440b      	add	r3, r1
 8009aae:	60a3      	str	r3, [r4, #8]
 8009ab0:	bfbb      	ittet	lt
 8009ab2:	323c      	addlt	r2, #60	@ 0x3c
 8009ab4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009ab8:	6062      	strge	r2, [r4, #4]
 8009aba:	6062      	strlt	r2, [r4, #4]
 8009abc:	bfb8      	it	lt
 8009abe:	60a3      	strlt	r3, [r4, #8]
 8009ac0:	68a1      	ldr	r1, [r4, #8]
 8009ac2:	2917      	cmp	r1, #23
 8009ac4:	d911      	bls.n	8009aea <validate_structure+0x82>
 8009ac6:	2218      	movs	r2, #24
 8009ac8:	4668      	mov	r0, sp
 8009aca:	f000 fe2f 	bl	800a72c <div>
 8009ace:	9a01      	ldr	r2, [sp, #4]
 8009ad0:	68e3      	ldr	r3, [r4, #12]
 8009ad2:	9900      	ldr	r1, [sp, #0]
 8009ad4:	2a00      	cmp	r2, #0
 8009ad6:	440b      	add	r3, r1
 8009ad8:	60e3      	str	r3, [r4, #12]
 8009ada:	bfbb      	ittet	lt
 8009adc:	3218      	addlt	r2, #24
 8009ade:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009ae2:	60a2      	strge	r2, [r4, #8]
 8009ae4:	60a2      	strlt	r2, [r4, #8]
 8009ae6:	bfb8      	it	lt
 8009ae8:	60e3      	strlt	r3, [r4, #12]
 8009aea:	6921      	ldr	r1, [r4, #16]
 8009aec:	290b      	cmp	r1, #11
 8009aee:	d911      	bls.n	8009b14 <validate_structure+0xac>
 8009af0:	220c      	movs	r2, #12
 8009af2:	4668      	mov	r0, sp
 8009af4:	f000 fe1a 	bl	800a72c <div>
 8009af8:	9a01      	ldr	r2, [sp, #4]
 8009afa:	6963      	ldr	r3, [r4, #20]
 8009afc:	9900      	ldr	r1, [sp, #0]
 8009afe:	2a00      	cmp	r2, #0
 8009b00:	440b      	add	r3, r1
 8009b02:	6163      	str	r3, [r4, #20]
 8009b04:	bfbb      	ittet	lt
 8009b06:	320c      	addlt	r2, #12
 8009b08:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009b0c:	6122      	strge	r2, [r4, #16]
 8009b0e:	6122      	strlt	r2, [r4, #16]
 8009b10:	bfb8      	it	lt
 8009b12:	6163      	strlt	r3, [r4, #20]
 8009b14:	6963      	ldr	r3, [r4, #20]
 8009b16:	079a      	lsls	r2, r3, #30
 8009b18:	d11c      	bne.n	8009b54 <validate_structure+0xec>
 8009b1a:	2164      	movs	r1, #100	@ 0x64
 8009b1c:	fb93 f2f1 	sdiv	r2, r3, r1
 8009b20:	fb01 3212 	mls	r2, r1, r2, r3
 8009b24:	b9c2      	cbnz	r2, 8009b58 <validate_structure+0xf0>
 8009b26:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8009b2a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009b2e:	fb93 f1f2 	sdiv	r1, r3, r2
 8009b32:	fb02 3311 	mls	r3, r2, r1, r3
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	bf14      	ite	ne
 8009b3a:	231c      	movne	r3, #28
 8009b3c:	231d      	moveq	r3, #29
 8009b3e:	68e2      	ldr	r2, [r4, #12]
 8009b40:	2a00      	cmp	r2, #0
 8009b42:	dc0b      	bgt.n	8009b5c <validate_structure+0xf4>
 8009b44:	4d31      	ldr	r5, [pc, #196]	@ (8009c0c <validate_structure+0x1a4>)
 8009b46:	200b      	movs	r0, #11
 8009b48:	2164      	movs	r1, #100	@ 0x64
 8009b4a:	68e6      	ldr	r6, [r4, #12]
 8009b4c:	2e00      	cmp	r6, #0
 8009b4e:	dd30      	ble.n	8009bb2 <validate_structure+0x14a>
 8009b50:	b003      	add	sp, #12
 8009b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b54:	231c      	movs	r3, #28
 8009b56:	e7f2      	b.n	8009b3e <validate_structure+0xd6>
 8009b58:	231d      	movs	r3, #29
 8009b5a:	e7f0      	b.n	8009b3e <validate_structure+0xd6>
 8009b5c:	4d2b      	ldr	r5, [pc, #172]	@ (8009c0c <validate_structure+0x1a4>)
 8009b5e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8009b62:	2a01      	cmp	r2, #1
 8009b64:	bf14      	ite	ne
 8009b66:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 8009b6a:	4618      	moveq	r0, r3
 8009b6c:	4281      	cmp	r1, r0
 8009b6e:	ddef      	ble.n	8009b50 <validate_structure+0xe8>
 8009b70:	3201      	adds	r2, #1
 8009b72:	1a09      	subs	r1, r1, r0
 8009b74:	2a0c      	cmp	r2, #12
 8009b76:	60e1      	str	r1, [r4, #12]
 8009b78:	6122      	str	r2, [r4, #16]
 8009b7a:	d1f0      	bne.n	8009b5e <validate_structure+0xf6>
 8009b7c:	6963      	ldr	r3, [r4, #20]
 8009b7e:	2100      	movs	r1, #0
 8009b80:	1c5a      	adds	r2, r3, #1
 8009b82:	6121      	str	r1, [r4, #16]
 8009b84:	0791      	lsls	r1, r2, #30
 8009b86:	6162      	str	r2, [r4, #20]
 8009b88:	d13c      	bne.n	8009c04 <validate_structure+0x19c>
 8009b8a:	2164      	movs	r1, #100	@ 0x64
 8009b8c:	fb92 f0f1 	sdiv	r0, r2, r1
 8009b90:	fb01 2210 	mls	r2, r1, r0, r2
 8009b94:	2a00      	cmp	r2, #0
 8009b96:	d137      	bne.n	8009c08 <validate_structure+0x1a0>
 8009b98:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8009b9c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009ba0:	fb93 f1f2 	sdiv	r1, r3, r2
 8009ba4:	fb02 3311 	mls	r3, r2, r1, r3
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	bf14      	ite	ne
 8009bac:	231c      	movne	r3, #28
 8009bae:	231d      	moveq	r3, #29
 8009bb0:	e7d5      	b.n	8009b5e <validate_structure+0xf6>
 8009bb2:	6922      	ldr	r2, [r4, #16]
 8009bb4:	3a01      	subs	r2, #1
 8009bb6:	6122      	str	r2, [r4, #16]
 8009bb8:	3201      	adds	r2, #1
 8009bba:	d116      	bne.n	8009bea <validate_structure+0x182>
 8009bbc:	6963      	ldr	r3, [r4, #20]
 8009bbe:	1e5a      	subs	r2, r3, #1
 8009bc0:	0797      	lsls	r7, r2, #30
 8009bc2:	e9c4 0204 	strd	r0, r2, [r4, #16]
 8009bc6:	d119      	bne.n	8009bfc <validate_structure+0x194>
 8009bc8:	fb92 f7f1 	sdiv	r7, r2, r1
 8009bcc:	fb01 2217 	mls	r2, r1, r7, r2
 8009bd0:	b9b2      	cbnz	r2, 8009c00 <validate_structure+0x198>
 8009bd2:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8009bd6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009bda:	fb93 f7f2 	sdiv	r7, r3, r2
 8009bde:	fb02 3317 	mls	r3, r2, r7, r3
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	bf14      	ite	ne
 8009be6:	231c      	movne	r3, #28
 8009be8:	231d      	moveq	r3, #29
 8009bea:	6922      	ldr	r2, [r4, #16]
 8009bec:	2a01      	cmp	r2, #1
 8009bee:	bf14      	ite	ne
 8009bf0:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8009bf4:	461a      	moveq	r2, r3
 8009bf6:	4432      	add	r2, r6
 8009bf8:	60e2      	str	r2, [r4, #12]
 8009bfa:	e7a6      	b.n	8009b4a <validate_structure+0xe2>
 8009bfc:	231c      	movs	r3, #28
 8009bfe:	e7f4      	b.n	8009bea <validate_structure+0x182>
 8009c00:	231d      	movs	r3, #29
 8009c02:	e7f2      	b.n	8009bea <validate_structure+0x182>
 8009c04:	231c      	movs	r3, #28
 8009c06:	e7aa      	b.n	8009b5e <validate_structure+0xf6>
 8009c08:	231d      	movs	r3, #29
 8009c0a:	e7a8      	b.n	8009b5e <validate_structure+0xf6>
 8009c0c:	0800e6d8 	.word	0x0800e6d8

08009c10 <mktime>:
 8009c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c14:	b085      	sub	sp, #20
 8009c16:	4607      	mov	r7, r0
 8009c18:	f003 fc74 	bl	800d504 <__gettzinfo>
 8009c1c:	4681      	mov	r9, r0
 8009c1e:	4638      	mov	r0, r7
 8009c20:	f7ff ff22 	bl	8009a68 <validate_structure>
 8009c24:	e9d7 4300 	ldrd	r4, r3, [r7]
 8009c28:	223c      	movs	r2, #60	@ 0x3c
 8009c2a:	fb02 4403 	mla	r4, r2, r3, r4
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	697d      	ldr	r5, [r7, #20]
 8009c32:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8009c36:	fb02 4403 	mla	r4, r2, r3, r4
 8009c3a:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8009c3e:	4ac1      	ldr	r2, [pc, #772]	@ (8009f44 <mktime+0x334>)
 8009c40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009c44:	3e01      	subs	r6, #1
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	4416      	add	r6, r2
 8009c4a:	dd11      	ble.n	8009c70 <mktime+0x60>
 8009c4c:	07a9      	lsls	r1, r5, #30
 8009c4e:	d10f      	bne.n	8009c70 <mktime+0x60>
 8009c50:	2264      	movs	r2, #100	@ 0x64
 8009c52:	fb95 f3f2 	sdiv	r3, r5, r2
 8009c56:	fb02 5313 	mls	r3, r2, r3, r5
 8009c5a:	b943      	cbnz	r3, 8009c6e <mktime+0x5e>
 8009c5c:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8009c60:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009c64:	fb93 f1f2 	sdiv	r1, r3, r2
 8009c68:	fb02 3311 	mls	r3, r2, r1, r3
 8009c6c:	b903      	cbnz	r3, 8009c70 <mktime+0x60>
 8009c6e:	3601      	adds	r6, #1
 8009c70:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8009c74:	3310      	adds	r3, #16
 8009c76:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	61fe      	str	r6, [r7, #28]
 8009c7e:	f200 8167 	bhi.w	8009f50 <mktime+0x340>
 8009c82:	2d46      	cmp	r5, #70	@ 0x46
 8009c84:	f340 808e 	ble.w	8009da4 <mktime+0x194>
 8009c88:	2346      	movs	r3, #70	@ 0x46
 8009c8a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8009c8e:	2164      	movs	r1, #100	@ 0x64
 8009c90:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8009c94:	079a      	lsls	r2, r3, #30
 8009c96:	d17f      	bne.n	8009d98 <mktime+0x188>
 8009c98:	fb93 f2f1 	sdiv	r2, r3, r1
 8009c9c:	fb01 3212 	mls	r2, r1, r2, r3
 8009ca0:	2a00      	cmp	r2, #0
 8009ca2:	d17c      	bne.n	8009d9e <mktime+0x18e>
 8009ca4:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8009ca8:	fb92 fef0 	sdiv	lr, r2, r0
 8009cac:	fb00 221e 	mls	r2, r0, lr, r2
 8009cb0:	2a00      	cmp	r2, #0
 8009cb2:	bf14      	ite	ne
 8009cb4:	4662      	movne	r2, ip
 8009cb6:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8009cba:	3301      	adds	r3, #1
 8009cbc:	429d      	cmp	r5, r3
 8009cbe:	4416      	add	r6, r2
 8009cc0:	d1e8      	bne.n	8009c94 <mktime+0x84>
 8009cc2:	4ba1      	ldr	r3, [pc, #644]	@ (8009f48 <mktime+0x338>)
 8009cc4:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8009cc8:	fbc6 4803 	smlal	r4, r8, r6, r3
 8009ccc:	f000 f9fa 	bl	800a0c4 <__tz_lock>
 8009cd0:	f000 fa04 	bl	800a0dc <_tzset_unlocked>
 8009cd4:	4b9d      	ldr	r3, [pc, #628]	@ (8009f4c <mktime+0x33c>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 8140 	beq.w	8009f5e <mktime+0x34e>
 8009cde:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8009ce2:	6978      	ldr	r0, [r7, #20]
 8009ce4:	4653      	mov	r3, sl
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	bfa8      	it	ge
 8009cea:	2301      	movge	r3, #1
 8009cec:	9301      	str	r3, [sp, #4]
 8009cee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009cf2:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8009cf6:	4283      	cmp	r3, r0
 8009cf8:	f040 8096 	bne.w	8009e28 <mktime+0x218>
 8009cfc:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8009d00:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8009d04:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8009d08:	1a13      	subs	r3, r2, r0
 8009d0a:	9303      	str	r3, [sp, #12]
 8009d0c:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8009d10:	9302      	str	r3, [sp, #8]
 8009d12:	9a02      	ldr	r2, [sp, #8]
 8009d14:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8009d18:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8009d1c:	ebb2 0e03 	subs.w	lr, r2, r3
 8009d20:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8009d24:	4574      	cmp	r4, lr
 8009d26:	eb78 0201 	sbcs.w	r2, r8, r1
 8009d2a:	f280 8085 	bge.w	8009e38 <mktime+0x228>
 8009d2e:	f8d9 2000 	ldr.w	r2, [r9]
 8009d32:	2a00      	cmp	r2, #0
 8009d34:	f000 808d 	beq.w	8009e52 <mktime+0x242>
 8009d38:	9a03      	ldr	r2, [sp, #12]
 8009d3a:	4294      	cmp	r4, r2
 8009d3c:	eb78 020b 	sbcs.w	r2, r8, fp
 8009d40:	f2c0 810a 	blt.w	8009f58 <mktime+0x348>
 8009d44:	4574      	cmp	r4, lr
 8009d46:	eb78 0101 	sbcs.w	r1, r8, r1
 8009d4a:	bfb4      	ite	lt
 8009d4c:	f04f 0b01 	movlt.w	fp, #1
 8009d50:	f04f 0b00 	movge.w	fp, #0
 8009d54:	f1ba 0f00 	cmp.w	sl, #0
 8009d58:	f280 8087 	bge.w	8009e6a <mktime+0x25a>
 8009d5c:	f1bb 0f01 	cmp.w	fp, #1
 8009d60:	f040 80ff 	bne.w	8009f62 <mktime+0x352>
 8009d64:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 8009d68:	191c      	adds	r4, r3, r4
 8009d6a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8009d6e:	f04f 0b01 	mov.w	fp, #1
 8009d72:	f000 f9ad 	bl	800a0d0 <__tz_unlock>
 8009d76:	3604      	adds	r6, #4
 8009d78:	2307      	movs	r3, #7
 8009d7a:	fb96 f3f3 	sdiv	r3, r6, r3
 8009d7e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009d82:	1af6      	subs	r6, r6, r3
 8009d84:	f100 80db 	bmi.w	8009f3e <mktime+0x32e>
 8009d88:	f8c7 b020 	str.w	fp, [r7, #32]
 8009d8c:	61be      	str	r6, [r7, #24]
 8009d8e:	4620      	mov	r0, r4
 8009d90:	4641      	mov	r1, r8
 8009d92:	b005      	add	sp, #20
 8009d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d98:	f240 126d 	movw	r2, #365	@ 0x16d
 8009d9c:	e78d      	b.n	8009cba <mktime+0xaa>
 8009d9e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8009da2:	e78a      	b.n	8009cba <mktime+0xaa>
 8009da4:	d08d      	beq.n	8009cc2 <mktime+0xb2>
 8009da6:	2345      	movs	r3, #69	@ 0x45
 8009da8:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8009dac:	2164      	movs	r1, #100	@ 0x64
 8009dae:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8009db2:	e012      	b.n	8009dda <mktime+0x1ca>
 8009db4:	bb62      	cbnz	r2, 8009e10 <mktime+0x200>
 8009db6:	fb93 f2f1 	sdiv	r2, r3, r1
 8009dba:	fb01 3212 	mls	r2, r1, r2, r3
 8009dbe:	bb52      	cbnz	r2, 8009e16 <mktime+0x206>
 8009dc0:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8009dc4:	fb92 fef0 	sdiv	lr, r2, r0
 8009dc8:	fb00 221e 	mls	r2, r0, lr, r2
 8009dcc:	2a00      	cmp	r2, #0
 8009dce:	bf14      	ite	ne
 8009dd0:	4662      	movne	r2, ip
 8009dd2:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8009dd6:	1ab6      	subs	r6, r6, r2
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	429d      	cmp	r5, r3
 8009ddc:	f003 0203 	and.w	r2, r3, #3
 8009de0:	dbe8      	blt.n	8009db4 <mktime+0x1a4>
 8009de2:	b9da      	cbnz	r2, 8009e1c <mktime+0x20c>
 8009de4:	2264      	movs	r2, #100	@ 0x64
 8009de6:	fb95 f3f2 	sdiv	r3, r5, r2
 8009dea:	fb02 5313 	mls	r3, r2, r3, r5
 8009dee:	b9c3      	cbnz	r3, 8009e22 <mktime+0x212>
 8009df0:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8009df4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009df8:	fb93 f1f2 	sdiv	r1, r3, r2
 8009dfc:	fb02 3311 	mls	r3, r2, r1, r3
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f240 136d 	movw	r3, #365	@ 0x16d
 8009e06:	bf08      	it	eq
 8009e08:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 8009e0c:	1af6      	subs	r6, r6, r3
 8009e0e:	e758      	b.n	8009cc2 <mktime+0xb2>
 8009e10:	f240 126d 	movw	r2, #365	@ 0x16d
 8009e14:	e7df      	b.n	8009dd6 <mktime+0x1c6>
 8009e16:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8009e1a:	e7dc      	b.n	8009dd6 <mktime+0x1c6>
 8009e1c:	f240 136d 	movw	r3, #365	@ 0x16d
 8009e20:	e7f4      	b.n	8009e0c <mktime+0x1fc>
 8009e22:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8009e26:	e7f1      	b.n	8009e0c <mktime+0x1fc>
 8009e28:	f000 f8a2 	bl	8009f70 <__tzcalc_limits>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	f47f af65 	bne.w	8009cfc <mktime+0xec>
 8009e32:	f8dd b004 	ldr.w	fp, [sp, #4]
 8009e36:	e791      	b.n	8009d5c <mktime+0x14c>
 8009e38:	9a02      	ldr	r2, [sp, #8]
 8009e3a:	1a12      	subs	r2, r2, r0
 8009e3c:	9202      	str	r2, [sp, #8]
 8009e3e:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8009e42:	eb6c 0c02 	sbc.w	ip, ip, r2
 8009e46:	9a02      	ldr	r2, [sp, #8]
 8009e48:	4294      	cmp	r4, r2
 8009e4a:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8009e4e:	dbf0      	blt.n	8009e32 <mktime+0x222>
 8009e50:	e76d      	b.n	8009d2e <mktime+0x11e>
 8009e52:	9a03      	ldr	r2, [sp, #12]
 8009e54:	4294      	cmp	r4, r2
 8009e56:	eb78 020b 	sbcs.w	r2, r8, fp
 8009e5a:	f6ff af73 	blt.w	8009d44 <mktime+0x134>
 8009e5e:	f1ba 0f00 	cmp.w	sl, #0
 8009e62:	f6ff af7f 	blt.w	8009d64 <mktime+0x154>
 8009e66:	f04f 0b01 	mov.w	fp, #1
 8009e6a:	9a01      	ldr	r2, [sp, #4]
 8009e6c:	ea82 020b 	eor.w	r2, r2, fp
 8009e70:	2a01      	cmp	r2, #1
 8009e72:	f47f af73 	bne.w	8009d5c <mktime+0x14c>
 8009e76:	f1bb 0f00 	cmp.w	fp, #0
 8009e7a:	d035      	beq.n	8009ee8 <mktime+0x2d8>
 8009e7c:	1a1b      	subs	r3, r3, r0
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8009e84:	441a      	add	r2, r3
 8009e86:	191c      	adds	r4, r3, r4
 8009e88:	603a      	str	r2, [r7, #0]
 8009e8a:	4638      	mov	r0, r7
 8009e8c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8009e90:	f7ff fdea 	bl	8009a68 <validate_structure>
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	ebb2 020a 	subs.w	r2, r2, sl
 8009e9a:	f43f af5f 	beq.w	8009d5c <mktime+0x14c>
 8009e9e:	2a01      	cmp	r2, #1
 8009ea0:	dc24      	bgt.n	8009eec <mktime+0x2dc>
 8009ea2:	1c93      	adds	r3, r2, #2
 8009ea4:	bfd8      	it	le
 8009ea6:	2201      	movle	r2, #1
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	18d3      	adds	r3, r2, r3
 8009eac:	d527      	bpl.n	8009efe <mktime+0x2ee>
 8009eae:	1e6b      	subs	r3, r5, #1
 8009eb0:	0798      	lsls	r0, r3, #30
 8009eb2:	d11e      	bne.n	8009ef2 <mktime+0x2e2>
 8009eb4:	2164      	movs	r1, #100	@ 0x64
 8009eb6:	fb93 f0f1 	sdiv	r0, r3, r1
 8009eba:	fb01 3310 	mls	r3, r1, r0, r3
 8009ebe:	b9db      	cbnz	r3, 8009ef8 <mktime+0x2e8>
 8009ec0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8009ec4:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8009ec8:	fb95 f1f3 	sdiv	r1, r5, r3
 8009ecc:	fb03 5511 	mls	r5, r3, r1, r5
 8009ed0:	2d00      	cmp	r5, #0
 8009ed2:	f240 136d 	movw	r3, #365	@ 0x16d
 8009ed6:	bf18      	it	ne
 8009ed8:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8009edc:	61fb      	str	r3, [r7, #28]
 8009ede:	4416      	add	r6, r2
 8009ee0:	e73c      	b.n	8009d5c <mktime+0x14c>
 8009ee2:	f04f 0b00 	mov.w	fp, #0
 8009ee6:	e7c0      	b.n	8009e6a <mktime+0x25a>
 8009ee8:	1ac3      	subs	r3, r0, r3
 8009eea:	e7c8      	b.n	8009e7e <mktime+0x26e>
 8009eec:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef0:	e7da      	b.n	8009ea8 <mktime+0x298>
 8009ef2:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8009ef6:	e7f1      	b.n	8009edc <mktime+0x2cc>
 8009ef8:	f240 136d 	movw	r3, #365	@ 0x16d
 8009efc:	e7ee      	b.n	8009edc <mktime+0x2cc>
 8009efe:	07a9      	lsls	r1, r5, #30
 8009f00:	d117      	bne.n	8009f32 <mktime+0x322>
 8009f02:	2064      	movs	r0, #100	@ 0x64
 8009f04:	fb95 f1f0 	sdiv	r1, r5, r0
 8009f08:	fb00 5111 	mls	r1, r0, r1, r5
 8009f0c:	b9a1      	cbnz	r1, 8009f38 <mktime+0x328>
 8009f0e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8009f12:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 8009f16:	fb95 f0f1 	sdiv	r0, r5, r1
 8009f1a:	fb01 5510 	mls	r5, r1, r0, r5
 8009f1e:	2d00      	cmp	r5, #0
 8009f20:	f240 116d 	movw	r1, #365	@ 0x16d
 8009f24:	bf08      	it	eq
 8009f26:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 8009f2a:	428b      	cmp	r3, r1
 8009f2c:	bfa8      	it	ge
 8009f2e:	1a5b      	subge	r3, r3, r1
 8009f30:	e7d4      	b.n	8009edc <mktime+0x2cc>
 8009f32:	f240 116d 	movw	r1, #365	@ 0x16d
 8009f36:	e7f8      	b.n	8009f2a <mktime+0x31a>
 8009f38:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8009f3c:	e7f5      	b.n	8009f2a <mktime+0x31a>
 8009f3e:	3607      	adds	r6, #7
 8009f40:	e722      	b.n	8009d88 <mktime+0x178>
 8009f42:	bf00      	nop
 8009f44:	0800e6a8 	.word	0x0800e6a8
 8009f48:	00015180 	.word	0x00015180
 8009f4c:	20008f7c 	.word	0x20008f7c
 8009f50:	f04f 34ff 	mov.w	r4, #4294967295
 8009f54:	46a0      	mov	r8, r4
 8009f56:	e71a      	b.n	8009d8e <mktime+0x17e>
 8009f58:	f1ba 0f00 	cmp.w	sl, #0
 8009f5c:	dac1      	bge.n	8009ee2 <mktime+0x2d2>
 8009f5e:	f04f 0b00 	mov.w	fp, #0
 8009f62:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8009f66:	191c      	adds	r4, r3, r4
 8009f68:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8009f6c:	e701      	b.n	8009d72 <mktime+0x162>
 8009f6e:	bf00      	nop

08009f70 <__tzcalc_limits>:
 8009f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f74:	4604      	mov	r4, r0
 8009f76:	f003 fac5 	bl	800d504 <__gettzinfo>
 8009f7a:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8009f7e:	429c      	cmp	r4, r3
 8009f80:	f340 8099 	ble.w	800a0b6 <__tzcalc_limits+0x146>
 8009f84:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 8009f88:	19e5      	adds	r5, r4, r7
 8009f8a:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8009f8e:	f240 126d 	movw	r2, #365	@ 0x16d
 8009f92:	10ad      	asrs	r5, r5, #2
 8009f94:	fb02 5503 	mla	r5, r2, r3, r5
 8009f98:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 8009f9c:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8009fa0:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8009fa4:	4f45      	ldr	r7, [pc, #276]	@ (800a0bc <__tzcalc_limits+0x14c>)
 8009fa6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009faa:	441d      	add	r5, r3
 8009fac:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009fb0:	eb04 030c 	add.w	r3, r4, ip
 8009fb4:	6044      	str	r4, [r0, #4]
 8009fb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fba:	4601      	mov	r1, r0
 8009fbc:	441d      	add	r5, r3
 8009fbe:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8009fc2:	7a0b      	ldrb	r3, [r1, #8]
 8009fc4:	694a      	ldr	r2, [r1, #20]
 8009fc6:	2b4a      	cmp	r3, #74	@ 0x4a
 8009fc8:	d133      	bne.n	800a032 <__tzcalc_limits+0xc2>
 8009fca:	07a6      	lsls	r6, r4, #30
 8009fcc:	eb05 0302 	add.w	r3, r5, r2
 8009fd0:	d106      	bne.n	8009fe0 <__tzcalc_limits+0x70>
 8009fd2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8009fd6:	fb94 f6fe 	sdiv	r6, r4, lr
 8009fda:	fb0e 4616 	mls	r6, lr, r6, r4
 8009fde:	b936      	cbnz	r6, 8009fee <__tzcalc_limits+0x7e>
 8009fe0:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8009fe4:	fb94 f6fe 	sdiv	r6, r4, lr
 8009fe8:	fb0e 4616 	mls	r6, lr, r6, r4
 8009fec:	b9fe      	cbnz	r6, 800a02e <__tzcalc_limits+0xbe>
 8009fee:	2a3b      	cmp	r2, #59	@ 0x3b
 8009ff0:	bfd4      	ite	le
 8009ff2:	2200      	movle	r2, #0
 8009ff4:	2201      	movgt	r2, #1
 8009ff6:	4413      	add	r3, r2
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	698a      	ldr	r2, [r1, #24]
 8009ffc:	17d6      	asrs	r6, r2, #31
 8009ffe:	fbc3 2607 	smlal	r2, r6, r3, r7
 800a002:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800a004:	18d2      	adds	r2, r2, r3
 800a006:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800a00a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800a00e:	3128      	adds	r1, #40	@ 0x28
 800a010:	458c      	cmp	ip, r1
 800a012:	d1d6      	bne.n	8009fc2 <__tzcalc_limits+0x52>
 800a014:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800a018:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800a01c:	428c      	cmp	r4, r1
 800a01e:	4193      	sbcs	r3, r2
 800a020:	bfb4      	ite	lt
 800a022:	2301      	movlt	r3, #1
 800a024:	2300      	movge	r3, #0
 800a026:	6003      	str	r3, [r0, #0]
 800a028:	2001      	movs	r0, #1
 800a02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a02e:	2200      	movs	r2, #0
 800a030:	e7e1      	b.n	8009ff6 <__tzcalc_limits+0x86>
 800a032:	2b44      	cmp	r3, #68	@ 0x44
 800a034:	d101      	bne.n	800a03a <__tzcalc_limits+0xca>
 800a036:	18ab      	adds	r3, r5, r2
 800a038:	e7df      	b.n	8009ffa <__tzcalc_limits+0x8a>
 800a03a:	07a3      	lsls	r3, r4, #30
 800a03c:	d105      	bne.n	800a04a <__tzcalc_limits+0xda>
 800a03e:	2664      	movs	r6, #100	@ 0x64
 800a040:	fb94 f3f6 	sdiv	r3, r4, r6
 800a044:	fb06 4313 	mls	r3, r6, r3, r4
 800a048:	bb7b      	cbnz	r3, 800a0aa <__tzcalc_limits+0x13a>
 800a04a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800a04e:	fb94 f6f3 	sdiv	r6, r4, r3
 800a052:	fb03 4616 	mls	r6, r3, r6, r4
 800a056:	fab6 f686 	clz	r6, r6
 800a05a:	0976      	lsrs	r6, r6, #5
 800a05c:	f8df e060 	ldr.w	lr, [pc, #96]	@ 800a0c0 <__tzcalc_limits+0x150>
 800a060:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800a064:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800a068:	462b      	mov	r3, r5
 800a06a:	f04f 0800 	mov.w	r8, #0
 800a06e:	fb0a e606 	mla	r6, sl, r6, lr
 800a072:	f108 0801 	add.w	r8, r8, #1
 800a076:	45c1      	cmp	r9, r8
 800a078:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800a07c:	dc17      	bgt.n	800a0ae <__tzcalc_limits+0x13e>
 800a07e:	f103 0804 	add.w	r8, r3, #4
 800a082:	2607      	movs	r6, #7
 800a084:	fb98 f6f6 	sdiv	r6, r8, r6
 800a088:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800a08c:	eba8 0606 	sub.w	r6, r8, r6
 800a090:	1b92      	subs	r2, r2, r6
 800a092:	690e      	ldr	r6, [r1, #16]
 800a094:	f106 36ff 	add.w	r6, r6, #4294967295
 800a098:	bf48      	it	mi
 800a09a:	3207      	addmi	r2, #7
 800a09c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800a0a0:	4432      	add	r2, r6
 800a0a2:	4572      	cmp	r2, lr
 800a0a4:	da05      	bge.n	800a0b2 <__tzcalc_limits+0x142>
 800a0a6:	4413      	add	r3, r2
 800a0a8:	e7a7      	b.n	8009ffa <__tzcalc_limits+0x8a>
 800a0aa:	2601      	movs	r6, #1
 800a0ac:	e7d6      	b.n	800a05c <__tzcalc_limits+0xec>
 800a0ae:	4473      	add	r3, lr
 800a0b0:	e7df      	b.n	800a072 <__tzcalc_limits+0x102>
 800a0b2:	3a07      	subs	r2, #7
 800a0b4:	e7f5      	b.n	800a0a2 <__tzcalc_limits+0x132>
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	e7b7      	b.n	800a02a <__tzcalc_limits+0xba>
 800a0ba:	bf00      	nop
 800a0bc:	00015180 	.word	0x00015180
 800a0c0:	0800e9c8 	.word	0x0800e9c8

0800a0c4 <__tz_lock>:
 800a0c4:	4801      	ldr	r0, [pc, #4]	@ (800a0cc <__tz_lock+0x8>)
 800a0c6:	f7f8 bf30 	b.w	8002f2a <__retarget_lock_acquire>
 800a0ca:	bf00      	nop
 800a0cc:	200036ac 	.word	0x200036ac

0800a0d0 <__tz_unlock>:
 800a0d0:	4801      	ldr	r0, [pc, #4]	@ (800a0d8 <__tz_unlock+0x8>)
 800a0d2:	f7f8 bf34 	b.w	8002f3e <__retarget_lock_release>
 800a0d6:	bf00      	nop
 800a0d8:	200036ac 	.word	0x200036ac

0800a0dc <_tzset_unlocked>:
 800a0dc:	4b01      	ldr	r3, [pc, #4]	@ (800a0e4 <_tzset_unlocked+0x8>)
 800a0de:	6818      	ldr	r0, [r3, #0]
 800a0e0:	f000 b802 	b.w	800a0e8 <_tzset_unlocked_r>
 800a0e4:	200001a0 	.word	0x200001a0

0800a0e8 <_tzset_unlocked_r>:
 800a0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ec:	b08d      	sub	sp, #52	@ 0x34
 800a0ee:	4607      	mov	r7, r0
 800a0f0:	f003 fa08 	bl	800d504 <__gettzinfo>
 800a0f4:	49bc      	ldr	r1, [pc, #752]	@ (800a3e8 <_tzset_unlocked_r+0x300>)
 800a0f6:	4dbd      	ldr	r5, [pc, #756]	@ (800a3ec <_tzset_unlocked_r+0x304>)
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	4638      	mov	r0, r7
 800a0fc:	f001 fd2c 	bl	800bb58 <_getenv_r>
 800a100:	4606      	mov	r6, r0
 800a102:	bb10      	cbnz	r0, 800a14a <_tzset_unlocked_r+0x62>
 800a104:	4bba      	ldr	r3, [pc, #744]	@ (800a3f0 <_tzset_unlocked_r+0x308>)
 800a106:	4abb      	ldr	r2, [pc, #748]	@ (800a3f4 <_tzset_unlocked_r+0x30c>)
 800a108:	6018      	str	r0, [r3, #0]
 800a10a:	4bbb      	ldr	r3, [pc, #748]	@ (800a3f8 <_tzset_unlocked_r+0x310>)
 800a10c:	62a0      	str	r0, [r4, #40]	@ 0x28
 800a10e:	6018      	str	r0, [r3, #0]
 800a110:	4bba      	ldr	r3, [pc, #744]	@ (800a3fc <_tzset_unlocked_r+0x314>)
 800a112:	6520      	str	r0, [r4, #80]	@ 0x50
 800a114:	e9c3 2200 	strd	r2, r2, [r3]
 800a118:	214a      	movs	r1, #74	@ 0x4a
 800a11a:	2200      	movs	r2, #0
 800a11c:	2300      	movs	r3, #0
 800a11e:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800a122:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800a126:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800a12a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800a12e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800a132:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800a136:	6828      	ldr	r0, [r5, #0]
 800a138:	7221      	strb	r1, [r4, #8]
 800a13a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800a13e:	f7fd fbdd 	bl	80078fc <free>
 800a142:	602e      	str	r6, [r5, #0]
 800a144:	b00d      	add	sp, #52	@ 0x34
 800a146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a14a:	6829      	ldr	r1, [r5, #0]
 800a14c:	2900      	cmp	r1, #0
 800a14e:	f040 808e 	bne.w	800a26e <_tzset_unlocked_r+0x186>
 800a152:	6828      	ldr	r0, [r5, #0]
 800a154:	f7fd fbd2 	bl	80078fc <free>
 800a158:	4630      	mov	r0, r6
 800a15a:	f7f6 f899 	bl	8000290 <strlen>
 800a15e:	1c41      	adds	r1, r0, #1
 800a160:	4638      	mov	r0, r7
 800a162:	f7fd fbf5 	bl	8007950 <_malloc_r>
 800a166:	6028      	str	r0, [r5, #0]
 800a168:	2800      	cmp	r0, #0
 800a16a:	f040 8086 	bne.w	800a27a <_tzset_unlocked_r+0x192>
 800a16e:	4aa2      	ldr	r2, [pc, #648]	@ (800a3f8 <_tzset_unlocked_r+0x310>)
 800a170:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800a3fc <_tzset_unlocked_r+0x314>
 800a174:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800a3f0 <_tzset_unlocked_r+0x308>
 800a178:	2300      	movs	r3, #0
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	4aa0      	ldr	r2, [pc, #640]	@ (800a400 <_tzset_unlocked_r+0x318>)
 800a17e:	f8ca 3000 	str.w	r3, [sl]
 800a182:	2000      	movs	r0, #0
 800a184:	2100      	movs	r1, #0
 800a186:	e9c8 2200 	strd	r2, r2, [r8]
 800a18a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800a18e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800a192:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800a196:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800a19a:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800a19e:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800a1a2:	224a      	movs	r2, #74	@ 0x4a
 800a1a4:	7222      	strb	r2, [r4, #8]
 800a1a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a1a8:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800a1ac:	6523      	str	r3, [r4, #80]	@ 0x50
 800a1ae:	7833      	ldrb	r3, [r6, #0]
 800a1b0:	2b3a      	cmp	r3, #58	@ 0x3a
 800a1b2:	bf08      	it	eq
 800a1b4:	3601      	addeq	r6, #1
 800a1b6:	7833      	ldrb	r3, [r6, #0]
 800a1b8:	2b3c      	cmp	r3, #60	@ 0x3c
 800a1ba:	d162      	bne.n	800a282 <_tzset_unlocked_r+0x19a>
 800a1bc:	1c75      	adds	r5, r6, #1
 800a1be:	4a91      	ldr	r2, [pc, #580]	@ (800a404 <_tzset_unlocked_r+0x31c>)
 800a1c0:	4991      	ldr	r1, [pc, #580]	@ (800a408 <_tzset_unlocked_r+0x320>)
 800a1c2:	ab0a      	add	r3, sp, #40	@ 0x28
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	f7ff fae5 	bl	8009794 <siscanf>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	ddba      	ble.n	800a144 <_tzset_unlocked_r+0x5c>
 800a1ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1d0:	1eda      	subs	r2, r3, #3
 800a1d2:	2a07      	cmp	r2, #7
 800a1d4:	d8b6      	bhi.n	800a144 <_tzset_unlocked_r+0x5c>
 800a1d6:	5ceb      	ldrb	r3, [r5, r3]
 800a1d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800a1da:	d1b3      	bne.n	800a144 <_tzset_unlocked_r+0x5c>
 800a1dc:	3602      	adds	r6, #2
 800a1de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1e0:	18f5      	adds	r5, r6, r3
 800a1e2:	5cf3      	ldrb	r3, [r6, r3]
 800a1e4:	2b2d      	cmp	r3, #45	@ 0x2d
 800a1e6:	d15a      	bne.n	800a29e <_tzset_unlocked_r+0x1b6>
 800a1e8:	3501      	adds	r5, #1
 800a1ea:	f04f 39ff 	mov.w	r9, #4294967295
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a1f4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a1f8:	af08      	add	r7, sp, #32
 800a1fa:	ab0a      	add	r3, sp, #40	@ 0x28
 800a1fc:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800a200:	9303      	str	r3, [sp, #12]
 800a202:	f10d 031e 	add.w	r3, sp, #30
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	4980      	ldr	r1, [pc, #512]	@ (800a40c <_tzset_unlocked_r+0x324>)
 800a20a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a20c:	aa07      	add	r2, sp, #28
 800a20e:	4628      	mov	r0, r5
 800a210:	f7ff fac0 	bl	8009794 <siscanf>
 800a214:	2800      	cmp	r0, #0
 800a216:	dd95      	ble.n	800a144 <_tzset_unlocked_r+0x5c>
 800a218:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a21c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800a220:	223c      	movs	r2, #60	@ 0x3c
 800a222:	fb02 6603 	mla	r6, r2, r3, r6
 800a226:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800a22a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800a22e:	fb02 6603 	mla	r6, r2, r3, r6
 800a232:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a234:	fb09 f606 	mul.w	r6, r9, r6
 800a238:	eb05 0903 	add.w	r9, r5, r3
 800a23c:	5ceb      	ldrb	r3, [r5, r3]
 800a23e:	2b3c      	cmp	r3, #60	@ 0x3c
 800a240:	f040 80ee 	bne.w	800a420 <_tzset_unlocked_r+0x338>
 800a244:	f109 0501 	add.w	r5, r9, #1
 800a248:	4a71      	ldr	r2, [pc, #452]	@ (800a410 <_tzset_unlocked_r+0x328>)
 800a24a:	496f      	ldr	r1, [pc, #444]	@ (800a408 <_tzset_unlocked_r+0x320>)
 800a24c:	ab0a      	add	r3, sp, #40	@ 0x28
 800a24e:	4628      	mov	r0, r5
 800a250:	f7ff faa0 	bl	8009794 <siscanf>
 800a254:	2800      	cmp	r0, #0
 800a256:	dc28      	bgt.n	800a2aa <_tzset_unlocked_r+0x1c2>
 800a258:	f899 3001 	ldrb.w	r3, [r9, #1]
 800a25c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a25e:	d124      	bne.n	800a2aa <_tzset_unlocked_r+0x1c2>
 800a260:	4b68      	ldr	r3, [pc, #416]	@ (800a404 <_tzset_unlocked_r+0x31c>)
 800a262:	62a6      	str	r6, [r4, #40]	@ 0x28
 800a264:	e9c8 3300 	strd	r3, r3, [r8]
 800a268:	f8ca 6000 	str.w	r6, [sl]
 800a26c:	e76a      	b.n	800a144 <_tzset_unlocked_r+0x5c>
 800a26e:	f7f5 ffaf 	bl	80001d0 <strcmp>
 800a272:	2800      	cmp	r0, #0
 800a274:	f47f af6d 	bne.w	800a152 <_tzset_unlocked_r+0x6a>
 800a278:	e764      	b.n	800a144 <_tzset_unlocked_r+0x5c>
 800a27a:	4631      	mov	r1, r6
 800a27c:	f000 fa30 	bl	800a6e0 <strcpy>
 800a280:	e775      	b.n	800a16e <_tzset_unlocked_r+0x86>
 800a282:	4a60      	ldr	r2, [pc, #384]	@ (800a404 <_tzset_unlocked_r+0x31c>)
 800a284:	4963      	ldr	r1, [pc, #396]	@ (800a414 <_tzset_unlocked_r+0x32c>)
 800a286:	ab0a      	add	r3, sp, #40	@ 0x28
 800a288:	4630      	mov	r0, r6
 800a28a:	f7ff fa83 	bl	8009794 <siscanf>
 800a28e:	2800      	cmp	r0, #0
 800a290:	f77f af58 	ble.w	800a144 <_tzset_unlocked_r+0x5c>
 800a294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a296:	3b03      	subs	r3, #3
 800a298:	2b07      	cmp	r3, #7
 800a29a:	d9a0      	bls.n	800a1de <_tzset_unlocked_r+0xf6>
 800a29c:	e752      	b.n	800a144 <_tzset_unlocked_r+0x5c>
 800a29e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a2a0:	bf08      	it	eq
 800a2a2:	3501      	addeq	r5, #1
 800a2a4:	f04f 0901 	mov.w	r9, #1
 800a2a8:	e7a1      	b.n	800a1ee <_tzset_unlocked_r+0x106>
 800a2aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2ac:	1eda      	subs	r2, r3, #3
 800a2ae:	2a07      	cmp	r2, #7
 800a2b0:	f63f af48 	bhi.w	800a144 <_tzset_unlocked_r+0x5c>
 800a2b4:	5ceb      	ldrb	r3, [r5, r3]
 800a2b6:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2b8:	f47f af44 	bne.w	800a144 <_tzset_unlocked_r+0x5c>
 800a2bc:	f109 0902 	add.w	r9, r9, #2
 800a2c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2c2:	eb09 0503 	add.w	r5, r9, r3
 800a2c6:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a2ca:	2b2d      	cmp	r3, #45	@ 0x2d
 800a2cc:	f040 80b7 	bne.w	800a43e <_tzset_unlocked_r+0x356>
 800a2d0:	3501      	adds	r5, #1
 800a2d2:	f04f 39ff 	mov.w	r9, #4294967295
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a2dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a2e0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a2e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2e6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a2e8:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800a2ec:	9301      	str	r3, [sp, #4]
 800a2ee:	f10d 031e 	add.w	r3, sp, #30
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	4945      	ldr	r1, [pc, #276]	@ (800a40c <_tzset_unlocked_r+0x324>)
 800a2f6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a2f8:	aa07      	add	r2, sp, #28
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f7ff fa4a 	bl	8009794 <siscanf>
 800a300:	2800      	cmp	r0, #0
 800a302:	f300 80a2 	bgt.w	800a44a <_tzset_unlocked_r+0x362>
 800a306:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800a30a:	9304      	str	r3, [sp, #16]
 800a30c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a30e:	4627      	mov	r7, r4
 800a310:	441d      	add	r5, r3
 800a312:	f04f 0b00 	mov.w	fp, #0
 800a316:	782b      	ldrb	r3, [r5, #0]
 800a318:	2b2c      	cmp	r3, #44	@ 0x2c
 800a31a:	bf08      	it	eq
 800a31c:	3501      	addeq	r5, #1
 800a31e:	f895 9000 	ldrb.w	r9, [r5]
 800a322:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800a326:	f040 80a3 	bne.w	800a470 <_tzset_unlocked_r+0x388>
 800a32a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a32c:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800a330:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a334:	aa09      	add	r2, sp, #36	@ 0x24
 800a336:	9200      	str	r2, [sp, #0]
 800a338:	4937      	ldr	r1, [pc, #220]	@ (800a418 <_tzset_unlocked_r+0x330>)
 800a33a:	9303      	str	r3, [sp, #12]
 800a33c:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800a340:	4628      	mov	r0, r5
 800a342:	f7ff fa27 	bl	8009794 <siscanf>
 800a346:	2803      	cmp	r0, #3
 800a348:	f47f aefc 	bne.w	800a144 <_tzset_unlocked_r+0x5c>
 800a34c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800a350:	1e4b      	subs	r3, r1, #1
 800a352:	2b0b      	cmp	r3, #11
 800a354:	f63f aef6 	bhi.w	800a144 <_tzset_unlocked_r+0x5c>
 800a358:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800a35c:	1e53      	subs	r3, r2, #1
 800a35e:	2b04      	cmp	r3, #4
 800a360:	f63f aef0 	bhi.w	800a144 <_tzset_unlocked_r+0x5c>
 800a364:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800a368:	2b06      	cmp	r3, #6
 800a36a:	f63f aeeb 	bhi.w	800a144 <_tzset_unlocked_r+0x5c>
 800a36e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800a372:	f887 9008 	strb.w	r9, [r7, #8]
 800a376:	617b      	str	r3, [r7, #20]
 800a378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a37a:	eb05 0903 	add.w	r9, r5, r3
 800a37e:	2500      	movs	r5, #0
 800a380:	f04f 0302 	mov.w	r3, #2
 800a384:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a388:	f8ad 501e 	strh.w	r5, [sp, #30]
 800a38c:	f8ad 5020 	strh.w	r5, [sp, #32]
 800a390:	950a      	str	r5, [sp, #40]	@ 0x28
 800a392:	f899 3000 	ldrb.w	r3, [r9]
 800a396:	2b2f      	cmp	r3, #47	@ 0x2f
 800a398:	f040 8096 	bne.w	800a4c8 <_tzset_unlocked_r+0x3e0>
 800a39c:	ab0a      	add	r3, sp, #40	@ 0x28
 800a39e:	aa08      	add	r2, sp, #32
 800a3a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a3a4:	f10d 021e 	add.w	r2, sp, #30
 800a3a8:	9200      	str	r2, [sp, #0]
 800a3aa:	491c      	ldr	r1, [pc, #112]	@ (800a41c <_tzset_unlocked_r+0x334>)
 800a3ac:	9303      	str	r3, [sp, #12]
 800a3ae:	aa07      	add	r2, sp, #28
 800a3b0:	4648      	mov	r0, r9
 800a3b2:	f7ff f9ef 	bl	8009794 <siscanf>
 800a3b6:	42a8      	cmp	r0, r5
 800a3b8:	f300 8086 	bgt.w	800a4c8 <_tzset_unlocked_r+0x3e0>
 800a3bc:	214a      	movs	r1, #74	@ 0x4a
 800a3be:	2200      	movs	r2, #0
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800a3c6:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a3ca:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800a3ce:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800a3d2:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800a3d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800a3da:	7221      	strb	r1, [r4, #8]
 800a3dc:	62a5      	str	r5, [r4, #40]	@ 0x28
 800a3de:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800a3e2:	6525      	str	r5, [r4, #80]	@ 0x50
 800a3e4:	e6ae      	b.n	800a144 <_tzset_unlocked_r+0x5c>
 800a3e6:	bf00      	nop
 800a3e8:	0800e708 	.word	0x0800e708
 800a3ec:	20008f5c 	.word	0x20008f5c
 800a3f0:	20008f78 	.word	0x20008f78
 800a3f4:	0800e70b 	.word	0x0800e70b
 800a3f8:	20008f7c 	.word	0x20008f7c
 800a3fc:	2000002c 	.word	0x2000002c
 800a400:	0800dfb2 	.word	0x0800dfb2
 800a404:	20008f6c 	.word	0x20008f6c
 800a408:	0800e70f 	.word	0x0800e70f
 800a40c:	0800e744 	.word	0x0800e744
 800a410:	20008f60 	.word	0x20008f60
 800a414:	0800e722 	.word	0x0800e722
 800a418:	0800e730 	.word	0x0800e730
 800a41c:	0800e743 	.word	0x0800e743
 800a420:	4a3e      	ldr	r2, [pc, #248]	@ (800a51c <_tzset_unlocked_r+0x434>)
 800a422:	493f      	ldr	r1, [pc, #252]	@ (800a520 <_tzset_unlocked_r+0x438>)
 800a424:	ab0a      	add	r3, sp, #40	@ 0x28
 800a426:	4648      	mov	r0, r9
 800a428:	f7ff f9b4 	bl	8009794 <siscanf>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	f77f af17 	ble.w	800a260 <_tzset_unlocked_r+0x178>
 800a432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a434:	3b03      	subs	r3, #3
 800a436:	2b07      	cmp	r3, #7
 800a438:	f67f af42 	bls.w	800a2c0 <_tzset_unlocked_r+0x1d8>
 800a43c:	e682      	b.n	800a144 <_tzset_unlocked_r+0x5c>
 800a43e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a440:	bf08      	it	eq
 800a442:	3501      	addeq	r5, #1
 800a444:	f04f 0901 	mov.w	r9, #1
 800a448:	e745      	b.n	800a2d6 <_tzset_unlocked_r+0x1ee>
 800a44a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a44e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a452:	213c      	movs	r1, #60	@ 0x3c
 800a454:	fb01 3302 	mla	r3, r1, r2, r3
 800a458:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a45c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800a460:	fb01 3302 	mla	r3, r1, r2, r3
 800a464:	fb09 f303 	mul.w	r3, r9, r3
 800a468:	e74f      	b.n	800a30a <_tzset_unlocked_r+0x222>
 800a46a:	f04f 0b01 	mov.w	fp, #1
 800a46e:	e752      	b.n	800a316 <_tzset_unlocked_r+0x22e>
 800a470:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800a474:	bf06      	itte	eq
 800a476:	3501      	addeq	r5, #1
 800a478:	464b      	moveq	r3, r9
 800a47a:	2344      	movne	r3, #68	@ 0x44
 800a47c:	220a      	movs	r2, #10
 800a47e:	a90b      	add	r1, sp, #44	@ 0x2c
 800a480:	4628      	mov	r0, r5
 800a482:	9305      	str	r3, [sp, #20]
 800a484:	f002 f8a4 	bl	800c5d0 <strtoul>
 800a488:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800a48c:	9b05      	ldr	r3, [sp, #20]
 800a48e:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800a492:	45a9      	cmp	r9, r5
 800a494:	d114      	bne.n	800a4c0 <_tzset_unlocked_r+0x3d8>
 800a496:	234d      	movs	r3, #77	@ 0x4d
 800a498:	f1bb 0f00 	cmp.w	fp, #0
 800a49c:	d107      	bne.n	800a4ae <_tzset_unlocked_r+0x3c6>
 800a49e:	7223      	strb	r3, [r4, #8]
 800a4a0:	2103      	movs	r1, #3
 800a4a2:	2302      	movs	r3, #2
 800a4a4:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800a4a8:	f8c4 b014 	str.w	fp, [r4, #20]
 800a4ac:	e767      	b.n	800a37e <_tzset_unlocked_r+0x296>
 800a4ae:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800a4b2:	220b      	movs	r2, #11
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800a4be:	e75e      	b.n	800a37e <_tzset_unlocked_r+0x296>
 800a4c0:	b280      	uxth	r0, r0
 800a4c2:	723b      	strb	r3, [r7, #8]
 800a4c4:	6178      	str	r0, [r7, #20]
 800a4c6:	e75a      	b.n	800a37e <_tzset_unlocked_r+0x296>
 800a4c8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a4cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a4d0:	213c      	movs	r1, #60	@ 0x3c
 800a4d2:	fb01 3302 	mla	r3, r1, r2, r3
 800a4d6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a4da:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800a4de:	fb01 3302 	mla	r3, r1, r2, r3
 800a4e2:	61bb      	str	r3, [r7, #24]
 800a4e4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800a4e6:	3728      	adds	r7, #40	@ 0x28
 800a4e8:	444d      	add	r5, r9
 800a4ea:	f1bb 0f00 	cmp.w	fp, #0
 800a4ee:	d0bc      	beq.n	800a46a <_tzset_unlocked_r+0x382>
 800a4f0:	9b04      	ldr	r3, [sp, #16]
 800a4f2:	6523      	str	r3, [r4, #80]	@ 0x50
 800a4f4:	4b0b      	ldr	r3, [pc, #44]	@ (800a524 <_tzset_unlocked_r+0x43c>)
 800a4f6:	f8c8 3000 	str.w	r3, [r8]
 800a4fa:	6860      	ldr	r0, [r4, #4]
 800a4fc:	4b07      	ldr	r3, [pc, #28]	@ (800a51c <_tzset_unlocked_r+0x434>)
 800a4fe:	62a6      	str	r6, [r4, #40]	@ 0x28
 800a500:	f8c8 3004 	str.w	r3, [r8, #4]
 800a504:	f7ff fd34 	bl	8009f70 <__tzcalc_limits>
 800a508:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a50a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a50c:	f8ca 2000 	str.w	r2, [sl]
 800a510:	1a9b      	subs	r3, r3, r2
 800a512:	4a05      	ldr	r2, [pc, #20]	@ (800a528 <_tzset_unlocked_r+0x440>)
 800a514:	bf18      	it	ne
 800a516:	2301      	movne	r3, #1
 800a518:	6013      	str	r3, [r2, #0]
 800a51a:	e613      	b.n	800a144 <_tzset_unlocked_r+0x5c>
 800a51c:	20008f60 	.word	0x20008f60
 800a520:	0800e722 	.word	0x0800e722
 800a524:	20008f6c 	.word	0x20008f6c
 800a528:	20008f7c 	.word	0x20008f7c

0800a52c <_localeconv_r>:
 800a52c:	4800      	ldr	r0, [pc, #0]	@ (800a530 <_localeconv_r+0x4>)
 800a52e:	4770      	bx	lr
 800a530:	20000124 	.word	0x20000124

0800a534 <_close_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	4d06      	ldr	r5, [pc, #24]	@ (800a550 <_close_r+0x1c>)
 800a538:	2300      	movs	r3, #0
 800a53a:	4604      	mov	r4, r0
 800a53c:	4608      	mov	r0, r1
 800a53e:	602b      	str	r3, [r5, #0]
 800a540:	f7f8 fc3e 	bl	8002dc0 <_close>
 800a544:	1c43      	adds	r3, r0, #1
 800a546:	d102      	bne.n	800a54e <_close_r+0x1a>
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	b103      	cbz	r3, 800a54e <_close_r+0x1a>
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	bd38      	pop	{r3, r4, r5, pc}
 800a550:	20008f80 	.word	0x20008f80

0800a554 <_reclaim_reent>:
 800a554:	4b29      	ldr	r3, [pc, #164]	@ (800a5fc <_reclaim_reent+0xa8>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4283      	cmp	r3, r0
 800a55a:	b570      	push	{r4, r5, r6, lr}
 800a55c:	4604      	mov	r4, r0
 800a55e:	d04b      	beq.n	800a5f8 <_reclaim_reent+0xa4>
 800a560:	69c3      	ldr	r3, [r0, #28]
 800a562:	b1ab      	cbz	r3, 800a590 <_reclaim_reent+0x3c>
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	b16b      	cbz	r3, 800a584 <_reclaim_reent+0x30>
 800a568:	2500      	movs	r5, #0
 800a56a:	69e3      	ldr	r3, [r4, #28]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	5959      	ldr	r1, [r3, r5]
 800a570:	2900      	cmp	r1, #0
 800a572:	d13b      	bne.n	800a5ec <_reclaim_reent+0x98>
 800a574:	3504      	adds	r5, #4
 800a576:	2d80      	cmp	r5, #128	@ 0x80
 800a578:	d1f7      	bne.n	800a56a <_reclaim_reent+0x16>
 800a57a:	69e3      	ldr	r3, [r4, #28]
 800a57c:	4620      	mov	r0, r4
 800a57e:	68d9      	ldr	r1, [r3, #12]
 800a580:	f000 ff2a 	bl	800b3d8 <_free_r>
 800a584:	69e3      	ldr	r3, [r4, #28]
 800a586:	6819      	ldr	r1, [r3, #0]
 800a588:	b111      	cbz	r1, 800a590 <_reclaim_reent+0x3c>
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 ff24 	bl	800b3d8 <_free_r>
 800a590:	6961      	ldr	r1, [r4, #20]
 800a592:	b111      	cbz	r1, 800a59a <_reclaim_reent+0x46>
 800a594:	4620      	mov	r0, r4
 800a596:	f000 ff1f 	bl	800b3d8 <_free_r>
 800a59a:	69e1      	ldr	r1, [r4, #28]
 800a59c:	b111      	cbz	r1, 800a5a4 <_reclaim_reent+0x50>
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f000 ff1a 	bl	800b3d8 <_free_r>
 800a5a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a5a6:	b111      	cbz	r1, 800a5ae <_reclaim_reent+0x5a>
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f000 ff15 	bl	800b3d8 <_free_r>
 800a5ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5b0:	b111      	cbz	r1, 800a5b8 <_reclaim_reent+0x64>
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f000 ff10 	bl	800b3d8 <_free_r>
 800a5b8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a5ba:	b111      	cbz	r1, 800a5c2 <_reclaim_reent+0x6e>
 800a5bc:	4620      	mov	r0, r4
 800a5be:	f000 ff0b 	bl	800b3d8 <_free_r>
 800a5c2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a5c4:	b111      	cbz	r1, 800a5cc <_reclaim_reent+0x78>
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f000 ff06 	bl	800b3d8 <_free_r>
 800a5cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a5ce:	b111      	cbz	r1, 800a5d6 <_reclaim_reent+0x82>
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f000 ff01 	bl	800b3d8 <_free_r>
 800a5d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a5d8:	b111      	cbz	r1, 800a5e0 <_reclaim_reent+0x8c>
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f000 fefc 	bl	800b3d8 <_free_r>
 800a5e0:	6a23      	ldr	r3, [r4, #32]
 800a5e2:	b14b      	cbz	r3, 800a5f8 <_reclaim_reent+0xa4>
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a5ea:	4718      	bx	r3
 800a5ec:	680e      	ldr	r6, [r1, #0]
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f000 fef2 	bl	800b3d8 <_free_r>
 800a5f4:	4631      	mov	r1, r6
 800a5f6:	e7bb      	b.n	800a570 <_reclaim_reent+0x1c>
 800a5f8:	bd70      	pop	{r4, r5, r6, pc}
 800a5fa:	bf00      	nop
 800a5fc:	200001a0 	.word	0x200001a0

0800a600 <_lseek_r>:
 800a600:	b538      	push	{r3, r4, r5, lr}
 800a602:	4d07      	ldr	r5, [pc, #28]	@ (800a620 <_lseek_r+0x20>)
 800a604:	4604      	mov	r4, r0
 800a606:	4608      	mov	r0, r1
 800a608:	4611      	mov	r1, r2
 800a60a:	2200      	movs	r2, #0
 800a60c:	602a      	str	r2, [r5, #0]
 800a60e:	461a      	mov	r2, r3
 800a610:	f7f8 fbe0 	bl	8002dd4 <_lseek>
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	d102      	bne.n	800a61e <_lseek_r+0x1e>
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	b103      	cbz	r3, 800a61e <_lseek_r+0x1e>
 800a61c:	6023      	str	r3, [r4, #0]
 800a61e:	bd38      	pop	{r3, r4, r5, pc}
 800a620:	20008f80 	.word	0x20008f80

0800a624 <_read_r>:
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	4d07      	ldr	r5, [pc, #28]	@ (800a644 <_read_r+0x20>)
 800a628:	4604      	mov	r4, r0
 800a62a:	4608      	mov	r0, r1
 800a62c:	4611      	mov	r1, r2
 800a62e:	2200      	movs	r2, #0
 800a630:	602a      	str	r2, [r5, #0]
 800a632:	461a      	mov	r2, r3
 800a634:	f7f8 fba8 	bl	8002d88 <_read>
 800a638:	1c43      	adds	r3, r0, #1
 800a63a:	d102      	bne.n	800a642 <_read_r+0x1e>
 800a63c:	682b      	ldr	r3, [r5, #0]
 800a63e:	b103      	cbz	r3, 800a642 <_read_r+0x1e>
 800a640:	6023      	str	r3, [r4, #0]
 800a642:	bd38      	pop	{r3, r4, r5, pc}
 800a644:	20008f80 	.word	0x20008f80

0800a648 <_sbrk_r>:
 800a648:	b538      	push	{r3, r4, r5, lr}
 800a64a:	4d06      	ldr	r5, [pc, #24]	@ (800a664 <_sbrk_r+0x1c>)
 800a64c:	2300      	movs	r3, #0
 800a64e:	4604      	mov	r4, r0
 800a650:	4608      	mov	r0, r1
 800a652:	602b      	str	r3, [r5, #0]
 800a654:	f7f8 fbc0 	bl	8002dd8 <_sbrk>
 800a658:	1c43      	adds	r3, r0, #1
 800a65a:	d102      	bne.n	800a662 <_sbrk_r+0x1a>
 800a65c:	682b      	ldr	r3, [r5, #0]
 800a65e:	b103      	cbz	r3, 800a662 <_sbrk_r+0x1a>
 800a660:	6023      	str	r3, [r4, #0]
 800a662:	bd38      	pop	{r3, r4, r5, pc}
 800a664:	20008f80 	.word	0x20008f80

0800a668 <_write_r>:
 800a668:	b538      	push	{r3, r4, r5, lr}
 800a66a:	4d07      	ldr	r5, [pc, #28]	@ (800a688 <_write_r+0x20>)
 800a66c:	4604      	mov	r4, r0
 800a66e:	4608      	mov	r0, r1
 800a670:	4611      	mov	r1, r2
 800a672:	2200      	movs	r2, #0
 800a674:	602a      	str	r2, [r5, #0]
 800a676:	461a      	mov	r2, r3
 800a678:	f7f8 fb94 	bl	8002da4 <_write>
 800a67c:	1c43      	adds	r3, r0, #1
 800a67e:	d102      	bne.n	800a686 <_write_r+0x1e>
 800a680:	682b      	ldr	r3, [r5, #0]
 800a682:	b103      	cbz	r3, 800a686 <_write_r+0x1e>
 800a684:	6023      	str	r3, [r4, #0]
 800a686:	bd38      	pop	{r3, r4, r5, pc}
 800a688:	20008f80 	.word	0x20008f80

0800a68c <__errno>:
 800a68c:	4b01      	ldr	r3, [pc, #4]	@ (800a694 <__errno+0x8>)
 800a68e:	6818      	ldr	r0, [r3, #0]
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	200001a0 	.word	0x200001a0

0800a698 <__libc_init_array>:
 800a698:	b570      	push	{r4, r5, r6, lr}
 800a69a:	4d0d      	ldr	r5, [pc, #52]	@ (800a6d0 <__libc_init_array+0x38>)
 800a69c:	4c0d      	ldr	r4, [pc, #52]	@ (800a6d4 <__libc_init_array+0x3c>)
 800a69e:	1b64      	subs	r4, r4, r5
 800a6a0:	10a4      	asrs	r4, r4, #2
 800a6a2:	2600      	movs	r6, #0
 800a6a4:	42a6      	cmp	r6, r4
 800a6a6:	d109      	bne.n	800a6bc <__libc_init_array+0x24>
 800a6a8:	4d0b      	ldr	r5, [pc, #44]	@ (800a6d8 <__libc_init_array+0x40>)
 800a6aa:	4c0c      	ldr	r4, [pc, #48]	@ (800a6dc <__libc_init_array+0x44>)
 800a6ac:	f003 f8a0 	bl	800d7f0 <_init>
 800a6b0:	1b64      	subs	r4, r4, r5
 800a6b2:	10a4      	asrs	r4, r4, #2
 800a6b4:	2600      	movs	r6, #0
 800a6b6:	42a6      	cmp	r6, r4
 800a6b8:	d105      	bne.n	800a6c6 <__libc_init_array+0x2e>
 800a6ba:	bd70      	pop	{r4, r5, r6, pc}
 800a6bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6c0:	4798      	blx	r3
 800a6c2:	3601      	adds	r6, #1
 800a6c4:	e7ee      	b.n	800a6a4 <__libc_init_array+0xc>
 800a6c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ca:	4798      	blx	r3
 800a6cc:	3601      	adds	r6, #1
 800a6ce:	e7f2      	b.n	800a6b6 <__libc_init_array+0x1e>
 800a6d0:	0800ea70 	.word	0x0800ea70
 800a6d4:	0800ea70 	.word	0x0800ea70
 800a6d8:	0800ea70 	.word	0x0800ea70
 800a6dc:	0800ea74 	.word	0x0800ea74

0800a6e0 <strcpy>:
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6e6:	f803 2b01 	strb.w	r2, [r3], #1
 800a6ea:	2a00      	cmp	r2, #0
 800a6ec:	d1f9      	bne.n	800a6e2 <strcpy+0x2>
 800a6ee:	4770      	bx	lr

0800a6f0 <memcpy>:
 800a6f0:	440a      	add	r2, r1
 800a6f2:	4291      	cmp	r1, r2
 800a6f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6f8:	d100      	bne.n	800a6fc <memcpy+0xc>
 800a6fa:	4770      	bx	lr
 800a6fc:	b510      	push	{r4, lr}
 800a6fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a702:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a706:	4291      	cmp	r1, r2
 800a708:	d1f9      	bne.n	800a6fe <memcpy+0xe>
 800a70a:	bd10      	pop	{r4, pc}
 800a70c:	0000      	movs	r0, r0
	...

0800a710 <nan>:
 800a710:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a718 <nan+0x8>
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	00000000 	.word	0x00000000
 800a71c:	7ff80000 	.word	0x7ff80000

0800a720 <nanf>:
 800a720:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a728 <nanf+0x8>
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	7fc00000 	.word	0x7fc00000

0800a72c <div>:
 800a72c:	b510      	push	{r4, lr}
 800a72e:	fb91 f4f2 	sdiv	r4, r1, r2
 800a732:	fb02 1114 	mls	r1, r2, r4, r1
 800a736:	6004      	str	r4, [r0, #0]
 800a738:	6041      	str	r1, [r0, #4]
 800a73a:	bd10      	pop	{r4, pc}

0800a73c <quorem>:
 800a73c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a740:	6903      	ldr	r3, [r0, #16]
 800a742:	690c      	ldr	r4, [r1, #16]
 800a744:	42a3      	cmp	r3, r4
 800a746:	4607      	mov	r7, r0
 800a748:	db7e      	blt.n	800a848 <quorem+0x10c>
 800a74a:	3c01      	subs	r4, #1
 800a74c:	f101 0814 	add.w	r8, r1, #20
 800a750:	00a3      	lsls	r3, r4, #2
 800a752:	f100 0514 	add.w	r5, r0, #20
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a75c:	9301      	str	r3, [sp, #4]
 800a75e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a762:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a766:	3301      	adds	r3, #1
 800a768:	429a      	cmp	r2, r3
 800a76a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a76e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a772:	d32e      	bcc.n	800a7d2 <quorem+0x96>
 800a774:	f04f 0a00 	mov.w	sl, #0
 800a778:	46c4      	mov	ip, r8
 800a77a:	46ae      	mov	lr, r5
 800a77c:	46d3      	mov	fp, sl
 800a77e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a782:	b298      	uxth	r0, r3
 800a784:	fb06 a000 	mla	r0, r6, r0, sl
 800a788:	0c02      	lsrs	r2, r0, #16
 800a78a:	0c1b      	lsrs	r3, r3, #16
 800a78c:	fb06 2303 	mla	r3, r6, r3, r2
 800a790:	f8de 2000 	ldr.w	r2, [lr]
 800a794:	b280      	uxth	r0, r0
 800a796:	b292      	uxth	r2, r2
 800a798:	1a12      	subs	r2, r2, r0
 800a79a:	445a      	add	r2, fp
 800a79c:	f8de 0000 	ldr.w	r0, [lr]
 800a7a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a7aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a7ae:	b292      	uxth	r2, r2
 800a7b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a7b4:	45e1      	cmp	r9, ip
 800a7b6:	f84e 2b04 	str.w	r2, [lr], #4
 800a7ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a7be:	d2de      	bcs.n	800a77e <quorem+0x42>
 800a7c0:	9b00      	ldr	r3, [sp, #0]
 800a7c2:	58eb      	ldr	r3, [r5, r3]
 800a7c4:	b92b      	cbnz	r3, 800a7d2 <quorem+0x96>
 800a7c6:	9b01      	ldr	r3, [sp, #4]
 800a7c8:	3b04      	subs	r3, #4
 800a7ca:	429d      	cmp	r5, r3
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	d32f      	bcc.n	800a830 <quorem+0xf4>
 800a7d0:	613c      	str	r4, [r7, #16]
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	f001 fc9e 	bl	800c114 <__mcmp>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	db25      	blt.n	800a828 <quorem+0xec>
 800a7dc:	4629      	mov	r1, r5
 800a7de:	2000      	movs	r0, #0
 800a7e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7e4:	f8d1 c000 	ldr.w	ip, [r1]
 800a7e8:	fa1f fe82 	uxth.w	lr, r2
 800a7ec:	fa1f f38c 	uxth.w	r3, ip
 800a7f0:	eba3 030e 	sub.w	r3, r3, lr
 800a7f4:	4403      	add	r3, r0
 800a7f6:	0c12      	lsrs	r2, r2, #16
 800a7f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a7fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a800:	b29b      	uxth	r3, r3
 800a802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a806:	45c1      	cmp	r9, r8
 800a808:	f841 3b04 	str.w	r3, [r1], #4
 800a80c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a810:	d2e6      	bcs.n	800a7e0 <quorem+0xa4>
 800a812:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a81a:	b922      	cbnz	r2, 800a826 <quorem+0xea>
 800a81c:	3b04      	subs	r3, #4
 800a81e:	429d      	cmp	r5, r3
 800a820:	461a      	mov	r2, r3
 800a822:	d30b      	bcc.n	800a83c <quorem+0x100>
 800a824:	613c      	str	r4, [r7, #16]
 800a826:	3601      	adds	r6, #1
 800a828:	4630      	mov	r0, r6
 800a82a:	b003      	add	sp, #12
 800a82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a830:	6812      	ldr	r2, [r2, #0]
 800a832:	3b04      	subs	r3, #4
 800a834:	2a00      	cmp	r2, #0
 800a836:	d1cb      	bne.n	800a7d0 <quorem+0x94>
 800a838:	3c01      	subs	r4, #1
 800a83a:	e7c6      	b.n	800a7ca <quorem+0x8e>
 800a83c:	6812      	ldr	r2, [r2, #0]
 800a83e:	3b04      	subs	r3, #4
 800a840:	2a00      	cmp	r2, #0
 800a842:	d1ef      	bne.n	800a824 <quorem+0xe8>
 800a844:	3c01      	subs	r4, #1
 800a846:	e7ea      	b.n	800a81e <quorem+0xe2>
 800a848:	2000      	movs	r0, #0
 800a84a:	e7ee      	b.n	800a82a <quorem+0xee>
 800a84c:	0000      	movs	r0, r0
	...

0800a850 <_dtoa_r>:
 800a850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a854:	69c7      	ldr	r7, [r0, #28]
 800a856:	b099      	sub	sp, #100	@ 0x64
 800a858:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a85c:	ec55 4b10 	vmov	r4, r5, d0
 800a860:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a862:	9109      	str	r1, [sp, #36]	@ 0x24
 800a864:	4683      	mov	fp, r0
 800a866:	920e      	str	r2, [sp, #56]	@ 0x38
 800a868:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a86a:	b97f      	cbnz	r7, 800a88c <_dtoa_r+0x3c>
 800a86c:	2010      	movs	r0, #16
 800a86e:	f7fd f83d 	bl	80078ec <malloc>
 800a872:	4602      	mov	r2, r0
 800a874:	f8cb 001c 	str.w	r0, [fp, #28]
 800a878:	b920      	cbnz	r0, 800a884 <_dtoa_r+0x34>
 800a87a:	4ba7      	ldr	r3, [pc, #668]	@ (800ab18 <_dtoa_r+0x2c8>)
 800a87c:	21ef      	movs	r1, #239	@ 0xef
 800a87e:	48a7      	ldr	r0, [pc, #668]	@ (800ab1c <_dtoa_r+0x2cc>)
 800a880:	f002 fe66 	bl	800d550 <__assert_func>
 800a884:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a888:	6007      	str	r7, [r0, #0]
 800a88a:	60c7      	str	r7, [r0, #12]
 800a88c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a890:	6819      	ldr	r1, [r3, #0]
 800a892:	b159      	cbz	r1, 800a8ac <_dtoa_r+0x5c>
 800a894:	685a      	ldr	r2, [r3, #4]
 800a896:	604a      	str	r2, [r1, #4]
 800a898:	2301      	movs	r3, #1
 800a89a:	4093      	lsls	r3, r2
 800a89c:	608b      	str	r3, [r1, #8]
 800a89e:	4658      	mov	r0, fp
 800a8a0:	f001 f9b4 	bl	800bc0c <_Bfree>
 800a8a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	601a      	str	r2, [r3, #0]
 800a8ac:	1e2b      	subs	r3, r5, #0
 800a8ae:	bfb9      	ittee	lt
 800a8b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a8b4:	9303      	strlt	r3, [sp, #12]
 800a8b6:	2300      	movge	r3, #0
 800a8b8:	6033      	strge	r3, [r6, #0]
 800a8ba:	9f03      	ldr	r7, [sp, #12]
 800a8bc:	4b98      	ldr	r3, [pc, #608]	@ (800ab20 <_dtoa_r+0x2d0>)
 800a8be:	bfbc      	itt	lt
 800a8c0:	2201      	movlt	r2, #1
 800a8c2:	6032      	strlt	r2, [r6, #0]
 800a8c4:	43bb      	bics	r3, r7
 800a8c6:	d112      	bne.n	800a8ee <_dtoa_r+0x9e>
 800a8c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a8ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a8ce:	6013      	str	r3, [r2, #0]
 800a8d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a8d4:	4323      	orrs	r3, r4
 800a8d6:	f000 854d 	beq.w	800b374 <_dtoa_r+0xb24>
 800a8da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a8dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ab34 <_dtoa_r+0x2e4>
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 854f 	beq.w	800b384 <_dtoa_r+0xb34>
 800a8e6:	f10a 0303 	add.w	r3, sl, #3
 800a8ea:	f000 bd49 	b.w	800b380 <_dtoa_r+0xb30>
 800a8ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	ec51 0b17 	vmov	r0, r1, d7
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a8fe:	f7f6 f8f3 	bl	8000ae8 <__aeabi_dcmpeq>
 800a902:	4680      	mov	r8, r0
 800a904:	b158      	cbz	r0, 800a91e <_dtoa_r+0xce>
 800a906:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a908:	2301      	movs	r3, #1
 800a90a:	6013      	str	r3, [r2, #0]
 800a90c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a90e:	b113      	cbz	r3, 800a916 <_dtoa_r+0xc6>
 800a910:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a912:	4b84      	ldr	r3, [pc, #528]	@ (800ab24 <_dtoa_r+0x2d4>)
 800a914:	6013      	str	r3, [r2, #0]
 800a916:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ab38 <_dtoa_r+0x2e8>
 800a91a:	f000 bd33 	b.w	800b384 <_dtoa_r+0xb34>
 800a91e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a922:	aa16      	add	r2, sp, #88	@ 0x58
 800a924:	a917      	add	r1, sp, #92	@ 0x5c
 800a926:	4658      	mov	r0, fp
 800a928:	f001 fd14 	bl	800c354 <__d2b>
 800a92c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a930:	4681      	mov	r9, r0
 800a932:	2e00      	cmp	r6, #0
 800a934:	d077      	beq.n	800aa26 <_dtoa_r+0x1d6>
 800a936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a938:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a93c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a944:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a948:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a94c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a950:	4619      	mov	r1, r3
 800a952:	2200      	movs	r2, #0
 800a954:	4b74      	ldr	r3, [pc, #464]	@ (800ab28 <_dtoa_r+0x2d8>)
 800a956:	f7f5 fca7 	bl	80002a8 <__aeabi_dsub>
 800a95a:	a369      	add	r3, pc, #420	@ (adr r3, 800ab00 <_dtoa_r+0x2b0>)
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	f7f5 fe5a 	bl	8000618 <__aeabi_dmul>
 800a964:	a368      	add	r3, pc, #416	@ (adr r3, 800ab08 <_dtoa_r+0x2b8>)
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	f7f5 fc9f 	bl	80002ac <__adddf3>
 800a96e:	4604      	mov	r4, r0
 800a970:	4630      	mov	r0, r6
 800a972:	460d      	mov	r5, r1
 800a974:	f7f5 fde6 	bl	8000544 <__aeabi_i2d>
 800a978:	a365      	add	r3, pc, #404	@ (adr r3, 800ab10 <_dtoa_r+0x2c0>)
 800a97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97e:	f7f5 fe4b 	bl	8000618 <__aeabi_dmul>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	4620      	mov	r0, r4
 800a988:	4629      	mov	r1, r5
 800a98a:	f7f5 fc8f 	bl	80002ac <__adddf3>
 800a98e:	4604      	mov	r4, r0
 800a990:	460d      	mov	r5, r1
 800a992:	f7f6 f8f1 	bl	8000b78 <__aeabi_d2iz>
 800a996:	2200      	movs	r2, #0
 800a998:	4607      	mov	r7, r0
 800a99a:	2300      	movs	r3, #0
 800a99c:	4620      	mov	r0, r4
 800a99e:	4629      	mov	r1, r5
 800a9a0:	f7f6 f8ac 	bl	8000afc <__aeabi_dcmplt>
 800a9a4:	b140      	cbz	r0, 800a9b8 <_dtoa_r+0x168>
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	f7f5 fdcc 	bl	8000544 <__aeabi_i2d>
 800a9ac:	4622      	mov	r2, r4
 800a9ae:	462b      	mov	r3, r5
 800a9b0:	f7f6 f89a 	bl	8000ae8 <__aeabi_dcmpeq>
 800a9b4:	b900      	cbnz	r0, 800a9b8 <_dtoa_r+0x168>
 800a9b6:	3f01      	subs	r7, #1
 800a9b8:	2f16      	cmp	r7, #22
 800a9ba:	d851      	bhi.n	800aa60 <_dtoa_r+0x210>
 800a9bc:	4b5b      	ldr	r3, [pc, #364]	@ (800ab2c <_dtoa_r+0x2dc>)
 800a9be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9ca:	f7f6 f897 	bl	8000afc <__aeabi_dcmplt>
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	d048      	beq.n	800aa64 <_dtoa_r+0x214>
 800a9d2:	3f01      	subs	r7, #1
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	9312      	str	r3, [sp, #72]	@ 0x48
 800a9d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a9da:	1b9b      	subs	r3, r3, r6
 800a9dc:	1e5a      	subs	r2, r3, #1
 800a9de:	bf44      	itt	mi
 800a9e0:	f1c3 0801 	rsbmi	r8, r3, #1
 800a9e4:	2300      	movmi	r3, #0
 800a9e6:	9208      	str	r2, [sp, #32]
 800a9e8:	bf54      	ite	pl
 800a9ea:	f04f 0800 	movpl.w	r8, #0
 800a9ee:	9308      	strmi	r3, [sp, #32]
 800a9f0:	2f00      	cmp	r7, #0
 800a9f2:	db39      	blt.n	800aa68 <_dtoa_r+0x218>
 800a9f4:	9b08      	ldr	r3, [sp, #32]
 800a9f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a9f8:	443b      	add	r3, r7
 800a9fa:	9308      	str	r3, [sp, #32]
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa02:	2b09      	cmp	r3, #9
 800aa04:	d864      	bhi.n	800aad0 <_dtoa_r+0x280>
 800aa06:	2b05      	cmp	r3, #5
 800aa08:	bfc4      	itt	gt
 800aa0a:	3b04      	subgt	r3, #4
 800aa0c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800aa0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa10:	f1a3 0302 	sub.w	r3, r3, #2
 800aa14:	bfcc      	ite	gt
 800aa16:	2400      	movgt	r4, #0
 800aa18:	2401      	movle	r4, #1
 800aa1a:	2b03      	cmp	r3, #3
 800aa1c:	d863      	bhi.n	800aae6 <_dtoa_r+0x296>
 800aa1e:	e8df f003 	tbb	[pc, r3]
 800aa22:	372a      	.short	0x372a
 800aa24:	5535      	.short	0x5535
 800aa26:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800aa2a:	441e      	add	r6, r3
 800aa2c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aa30:	2b20      	cmp	r3, #32
 800aa32:	bfc1      	itttt	gt
 800aa34:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aa38:	409f      	lslgt	r7, r3
 800aa3a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aa3e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aa42:	bfd6      	itet	le
 800aa44:	f1c3 0320 	rsble	r3, r3, #32
 800aa48:	ea47 0003 	orrgt.w	r0, r7, r3
 800aa4c:	fa04 f003 	lslle.w	r0, r4, r3
 800aa50:	f7f5 fd68 	bl	8000524 <__aeabi_ui2d>
 800aa54:	2201      	movs	r2, #1
 800aa56:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aa5a:	3e01      	subs	r6, #1
 800aa5c:	9214      	str	r2, [sp, #80]	@ 0x50
 800aa5e:	e777      	b.n	800a950 <_dtoa_r+0x100>
 800aa60:	2301      	movs	r3, #1
 800aa62:	e7b8      	b.n	800a9d6 <_dtoa_r+0x186>
 800aa64:	9012      	str	r0, [sp, #72]	@ 0x48
 800aa66:	e7b7      	b.n	800a9d8 <_dtoa_r+0x188>
 800aa68:	427b      	negs	r3, r7
 800aa6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	eba8 0807 	sub.w	r8, r8, r7
 800aa72:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aa74:	e7c4      	b.n	800aa00 <_dtoa_r+0x1b0>
 800aa76:	2300      	movs	r3, #0
 800aa78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	dc35      	bgt.n	800aaec <_dtoa_r+0x29c>
 800aa80:	2301      	movs	r3, #1
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	9307      	str	r3, [sp, #28]
 800aa86:	461a      	mov	r2, r3
 800aa88:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa8a:	e00b      	b.n	800aaa4 <_dtoa_r+0x254>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e7f3      	b.n	800aa78 <_dtoa_r+0x228>
 800aa90:	2300      	movs	r3, #0
 800aa92:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa96:	18fb      	adds	r3, r7, r3
 800aa98:	9300      	str	r3, [sp, #0]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	9307      	str	r3, [sp, #28]
 800aaa0:	bfb8      	it	lt
 800aaa2:	2301      	movlt	r3, #1
 800aaa4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	2204      	movs	r2, #4
 800aaac:	f102 0514 	add.w	r5, r2, #20
 800aab0:	429d      	cmp	r5, r3
 800aab2:	d91f      	bls.n	800aaf4 <_dtoa_r+0x2a4>
 800aab4:	6041      	str	r1, [r0, #4]
 800aab6:	4658      	mov	r0, fp
 800aab8:	f001 f868 	bl	800bb8c <_Balloc>
 800aabc:	4682      	mov	sl, r0
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d13c      	bne.n	800ab3c <_dtoa_r+0x2ec>
 800aac2:	4b1b      	ldr	r3, [pc, #108]	@ (800ab30 <_dtoa_r+0x2e0>)
 800aac4:	4602      	mov	r2, r0
 800aac6:	f240 11af 	movw	r1, #431	@ 0x1af
 800aaca:	e6d8      	b.n	800a87e <_dtoa_r+0x2e>
 800aacc:	2301      	movs	r3, #1
 800aace:	e7e0      	b.n	800aa92 <_dtoa_r+0x242>
 800aad0:	2401      	movs	r4, #1
 800aad2:	2300      	movs	r3, #0
 800aad4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aad6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aad8:	f04f 33ff 	mov.w	r3, #4294967295
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	9307      	str	r3, [sp, #28]
 800aae0:	2200      	movs	r2, #0
 800aae2:	2312      	movs	r3, #18
 800aae4:	e7d0      	b.n	800aa88 <_dtoa_r+0x238>
 800aae6:	2301      	movs	r3, #1
 800aae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaea:	e7f5      	b.n	800aad8 <_dtoa_r+0x288>
 800aaec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	9307      	str	r3, [sp, #28]
 800aaf2:	e7d7      	b.n	800aaa4 <_dtoa_r+0x254>
 800aaf4:	3101      	adds	r1, #1
 800aaf6:	0052      	lsls	r2, r2, #1
 800aaf8:	e7d8      	b.n	800aaac <_dtoa_r+0x25c>
 800aafa:	bf00      	nop
 800aafc:	f3af 8000 	nop.w
 800ab00:	636f4361 	.word	0x636f4361
 800ab04:	3fd287a7 	.word	0x3fd287a7
 800ab08:	8b60c8b3 	.word	0x8b60c8b3
 800ab0c:	3fc68a28 	.word	0x3fc68a28
 800ab10:	509f79fb 	.word	0x509f79fb
 800ab14:	3fd34413 	.word	0x3fd34413
 800ab18:	0800e769 	.word	0x0800e769
 800ab1c:	0800e780 	.word	0x0800e780
 800ab20:	7ff00000 	.word	0x7ff00000
 800ab24:	0800e9c8 	.word	0x0800e9c8
 800ab28:	3ff80000 	.word	0x3ff80000
 800ab2c:	0800e8d8 	.word	0x0800e8d8
 800ab30:	0800e7d8 	.word	0x0800e7d8
 800ab34:	0800e765 	.word	0x0800e765
 800ab38:	0800e9c7 	.word	0x0800e9c7
 800ab3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ab40:	6018      	str	r0, [r3, #0]
 800ab42:	9b07      	ldr	r3, [sp, #28]
 800ab44:	2b0e      	cmp	r3, #14
 800ab46:	f200 80a4 	bhi.w	800ac92 <_dtoa_r+0x442>
 800ab4a:	2c00      	cmp	r4, #0
 800ab4c:	f000 80a1 	beq.w	800ac92 <_dtoa_r+0x442>
 800ab50:	2f00      	cmp	r7, #0
 800ab52:	dd33      	ble.n	800abbc <_dtoa_r+0x36c>
 800ab54:	4bad      	ldr	r3, [pc, #692]	@ (800ae0c <_dtoa_r+0x5bc>)
 800ab56:	f007 020f 	and.w	r2, r7, #15
 800ab5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab5e:	ed93 7b00 	vldr	d7, [r3]
 800ab62:	05f8      	lsls	r0, r7, #23
 800ab64:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ab68:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ab6c:	d516      	bpl.n	800ab9c <_dtoa_r+0x34c>
 800ab6e:	4ba8      	ldr	r3, [pc, #672]	@ (800ae10 <_dtoa_r+0x5c0>)
 800ab70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab78:	f7f5 fe78 	bl	800086c <__aeabi_ddiv>
 800ab7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab80:	f004 040f 	and.w	r4, r4, #15
 800ab84:	2603      	movs	r6, #3
 800ab86:	4da2      	ldr	r5, [pc, #648]	@ (800ae10 <_dtoa_r+0x5c0>)
 800ab88:	b954      	cbnz	r4, 800aba0 <_dtoa_r+0x350>
 800ab8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab92:	f7f5 fe6b 	bl	800086c <__aeabi_ddiv>
 800ab96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab9a:	e028      	b.n	800abee <_dtoa_r+0x39e>
 800ab9c:	2602      	movs	r6, #2
 800ab9e:	e7f2      	b.n	800ab86 <_dtoa_r+0x336>
 800aba0:	07e1      	lsls	r1, r4, #31
 800aba2:	d508      	bpl.n	800abb6 <_dtoa_r+0x366>
 800aba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aba8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abac:	f7f5 fd34 	bl	8000618 <__aeabi_dmul>
 800abb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abb4:	3601      	adds	r6, #1
 800abb6:	1064      	asrs	r4, r4, #1
 800abb8:	3508      	adds	r5, #8
 800abba:	e7e5      	b.n	800ab88 <_dtoa_r+0x338>
 800abbc:	f000 80d2 	beq.w	800ad64 <_dtoa_r+0x514>
 800abc0:	427c      	negs	r4, r7
 800abc2:	4b92      	ldr	r3, [pc, #584]	@ (800ae0c <_dtoa_r+0x5bc>)
 800abc4:	4d92      	ldr	r5, [pc, #584]	@ (800ae10 <_dtoa_r+0x5c0>)
 800abc6:	f004 020f 	and.w	r2, r4, #15
 800abca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abd6:	f7f5 fd1f 	bl	8000618 <__aeabi_dmul>
 800abda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abde:	1124      	asrs	r4, r4, #4
 800abe0:	2300      	movs	r3, #0
 800abe2:	2602      	movs	r6, #2
 800abe4:	2c00      	cmp	r4, #0
 800abe6:	f040 80b2 	bne.w	800ad4e <_dtoa_r+0x4fe>
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1d3      	bne.n	800ab96 <_dtoa_r+0x346>
 800abee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800abf0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f000 80b7 	beq.w	800ad68 <_dtoa_r+0x518>
 800abfa:	4b86      	ldr	r3, [pc, #536]	@ (800ae14 <_dtoa_r+0x5c4>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	4620      	mov	r0, r4
 800ac00:	4629      	mov	r1, r5
 800ac02:	f7f5 ff7b 	bl	8000afc <__aeabi_dcmplt>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	f000 80ae 	beq.w	800ad68 <_dtoa_r+0x518>
 800ac0c:	9b07      	ldr	r3, [sp, #28]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f000 80aa 	beq.w	800ad68 <_dtoa_r+0x518>
 800ac14:	9b00      	ldr	r3, [sp, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	dd37      	ble.n	800ac8a <_dtoa_r+0x43a>
 800ac1a:	1e7b      	subs	r3, r7, #1
 800ac1c:	9304      	str	r3, [sp, #16]
 800ac1e:	4620      	mov	r0, r4
 800ac20:	4b7d      	ldr	r3, [pc, #500]	@ (800ae18 <_dtoa_r+0x5c8>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	4629      	mov	r1, r5
 800ac26:	f7f5 fcf7 	bl	8000618 <__aeabi_dmul>
 800ac2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac2e:	9c00      	ldr	r4, [sp, #0]
 800ac30:	3601      	adds	r6, #1
 800ac32:	4630      	mov	r0, r6
 800ac34:	f7f5 fc86 	bl	8000544 <__aeabi_i2d>
 800ac38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac3c:	f7f5 fcec 	bl	8000618 <__aeabi_dmul>
 800ac40:	4b76      	ldr	r3, [pc, #472]	@ (800ae1c <_dtoa_r+0x5cc>)
 800ac42:	2200      	movs	r2, #0
 800ac44:	f7f5 fb32 	bl	80002ac <__adddf3>
 800ac48:	4605      	mov	r5, r0
 800ac4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ac4e:	2c00      	cmp	r4, #0
 800ac50:	f040 808d 	bne.w	800ad6e <_dtoa_r+0x51e>
 800ac54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac58:	4b71      	ldr	r3, [pc, #452]	@ (800ae20 <_dtoa_r+0x5d0>)
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f7f5 fb24 	bl	80002a8 <__aeabi_dsub>
 800ac60:	4602      	mov	r2, r0
 800ac62:	460b      	mov	r3, r1
 800ac64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac68:	462a      	mov	r2, r5
 800ac6a:	4633      	mov	r3, r6
 800ac6c:	f7f5 ff64 	bl	8000b38 <__aeabi_dcmpgt>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	f040 828b 	bne.w	800b18c <_dtoa_r+0x93c>
 800ac76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac7a:	462a      	mov	r2, r5
 800ac7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ac80:	f7f5 ff3c 	bl	8000afc <__aeabi_dcmplt>
 800ac84:	2800      	cmp	r0, #0
 800ac86:	f040 8128 	bne.w	800aeda <_dtoa_r+0x68a>
 800ac8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ac8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ac92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f2c0 815a 	blt.w	800af4e <_dtoa_r+0x6fe>
 800ac9a:	2f0e      	cmp	r7, #14
 800ac9c:	f300 8157 	bgt.w	800af4e <_dtoa_r+0x6fe>
 800aca0:	4b5a      	ldr	r3, [pc, #360]	@ (800ae0c <_dtoa_r+0x5bc>)
 800aca2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aca6:	ed93 7b00 	vldr	d7, [r3]
 800acaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acac:	2b00      	cmp	r3, #0
 800acae:	ed8d 7b00 	vstr	d7, [sp]
 800acb2:	da03      	bge.n	800acbc <_dtoa_r+0x46c>
 800acb4:	9b07      	ldr	r3, [sp, #28]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f340 8101 	ble.w	800aebe <_dtoa_r+0x66e>
 800acbc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800acc0:	4656      	mov	r6, sl
 800acc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acc6:	4620      	mov	r0, r4
 800acc8:	4629      	mov	r1, r5
 800acca:	f7f5 fdcf 	bl	800086c <__aeabi_ddiv>
 800acce:	f7f5 ff53 	bl	8000b78 <__aeabi_d2iz>
 800acd2:	4680      	mov	r8, r0
 800acd4:	f7f5 fc36 	bl	8000544 <__aeabi_i2d>
 800acd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acdc:	f7f5 fc9c 	bl	8000618 <__aeabi_dmul>
 800ace0:	4602      	mov	r2, r0
 800ace2:	460b      	mov	r3, r1
 800ace4:	4620      	mov	r0, r4
 800ace6:	4629      	mov	r1, r5
 800ace8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800acec:	f7f5 fadc 	bl	80002a8 <__aeabi_dsub>
 800acf0:	f806 4b01 	strb.w	r4, [r6], #1
 800acf4:	9d07      	ldr	r5, [sp, #28]
 800acf6:	eba6 040a 	sub.w	r4, r6, sl
 800acfa:	42a5      	cmp	r5, r4
 800acfc:	4602      	mov	r2, r0
 800acfe:	460b      	mov	r3, r1
 800ad00:	f040 8117 	bne.w	800af32 <_dtoa_r+0x6e2>
 800ad04:	f7f5 fad2 	bl	80002ac <__adddf3>
 800ad08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad0c:	4604      	mov	r4, r0
 800ad0e:	460d      	mov	r5, r1
 800ad10:	f7f5 ff12 	bl	8000b38 <__aeabi_dcmpgt>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	f040 80f9 	bne.w	800af0c <_dtoa_r+0x6bc>
 800ad1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad1e:	4620      	mov	r0, r4
 800ad20:	4629      	mov	r1, r5
 800ad22:	f7f5 fee1 	bl	8000ae8 <__aeabi_dcmpeq>
 800ad26:	b118      	cbz	r0, 800ad30 <_dtoa_r+0x4e0>
 800ad28:	f018 0f01 	tst.w	r8, #1
 800ad2c:	f040 80ee 	bne.w	800af0c <_dtoa_r+0x6bc>
 800ad30:	4649      	mov	r1, r9
 800ad32:	4658      	mov	r0, fp
 800ad34:	f000 ff6a 	bl	800bc0c <_Bfree>
 800ad38:	2300      	movs	r3, #0
 800ad3a:	7033      	strb	r3, [r6, #0]
 800ad3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad3e:	3701      	adds	r7, #1
 800ad40:	601f      	str	r7, [r3, #0]
 800ad42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f000 831d 	beq.w	800b384 <_dtoa_r+0xb34>
 800ad4a:	601e      	str	r6, [r3, #0]
 800ad4c:	e31a      	b.n	800b384 <_dtoa_r+0xb34>
 800ad4e:	07e2      	lsls	r2, r4, #31
 800ad50:	d505      	bpl.n	800ad5e <_dtoa_r+0x50e>
 800ad52:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad56:	f7f5 fc5f 	bl	8000618 <__aeabi_dmul>
 800ad5a:	3601      	adds	r6, #1
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	1064      	asrs	r4, r4, #1
 800ad60:	3508      	adds	r5, #8
 800ad62:	e73f      	b.n	800abe4 <_dtoa_r+0x394>
 800ad64:	2602      	movs	r6, #2
 800ad66:	e742      	b.n	800abee <_dtoa_r+0x39e>
 800ad68:	9c07      	ldr	r4, [sp, #28]
 800ad6a:	9704      	str	r7, [sp, #16]
 800ad6c:	e761      	b.n	800ac32 <_dtoa_r+0x3e2>
 800ad6e:	4b27      	ldr	r3, [pc, #156]	@ (800ae0c <_dtoa_r+0x5bc>)
 800ad70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad7a:	4454      	add	r4, sl
 800ad7c:	2900      	cmp	r1, #0
 800ad7e:	d053      	beq.n	800ae28 <_dtoa_r+0x5d8>
 800ad80:	4928      	ldr	r1, [pc, #160]	@ (800ae24 <_dtoa_r+0x5d4>)
 800ad82:	2000      	movs	r0, #0
 800ad84:	f7f5 fd72 	bl	800086c <__aeabi_ddiv>
 800ad88:	4633      	mov	r3, r6
 800ad8a:	462a      	mov	r2, r5
 800ad8c:	f7f5 fa8c 	bl	80002a8 <__aeabi_dsub>
 800ad90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad94:	4656      	mov	r6, sl
 800ad96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad9a:	f7f5 feed 	bl	8000b78 <__aeabi_d2iz>
 800ad9e:	4605      	mov	r5, r0
 800ada0:	f7f5 fbd0 	bl	8000544 <__aeabi_i2d>
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adac:	f7f5 fa7c 	bl	80002a8 <__aeabi_dsub>
 800adb0:	3530      	adds	r5, #48	@ 0x30
 800adb2:	4602      	mov	r2, r0
 800adb4:	460b      	mov	r3, r1
 800adb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800adba:	f806 5b01 	strb.w	r5, [r6], #1
 800adbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800adc2:	f7f5 fe9b 	bl	8000afc <__aeabi_dcmplt>
 800adc6:	2800      	cmp	r0, #0
 800adc8:	d171      	bne.n	800aeae <_dtoa_r+0x65e>
 800adca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adce:	4911      	ldr	r1, [pc, #68]	@ (800ae14 <_dtoa_r+0x5c4>)
 800add0:	2000      	movs	r0, #0
 800add2:	f7f5 fa69 	bl	80002a8 <__aeabi_dsub>
 800add6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800adda:	f7f5 fe8f 	bl	8000afc <__aeabi_dcmplt>
 800adde:	2800      	cmp	r0, #0
 800ade0:	f040 8095 	bne.w	800af0e <_dtoa_r+0x6be>
 800ade4:	42a6      	cmp	r6, r4
 800ade6:	f43f af50 	beq.w	800ac8a <_dtoa_r+0x43a>
 800adea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800adee:	4b0a      	ldr	r3, [pc, #40]	@ (800ae18 <_dtoa_r+0x5c8>)
 800adf0:	2200      	movs	r2, #0
 800adf2:	f7f5 fc11 	bl	8000618 <__aeabi_dmul>
 800adf6:	4b08      	ldr	r3, [pc, #32]	@ (800ae18 <_dtoa_r+0x5c8>)
 800adf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800adfc:	2200      	movs	r2, #0
 800adfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae02:	f7f5 fc09 	bl	8000618 <__aeabi_dmul>
 800ae06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae0a:	e7c4      	b.n	800ad96 <_dtoa_r+0x546>
 800ae0c:	0800e8d8 	.word	0x0800e8d8
 800ae10:	0800e8b0 	.word	0x0800e8b0
 800ae14:	3ff00000 	.word	0x3ff00000
 800ae18:	40240000 	.word	0x40240000
 800ae1c:	401c0000 	.word	0x401c0000
 800ae20:	40140000 	.word	0x40140000
 800ae24:	3fe00000 	.word	0x3fe00000
 800ae28:	4631      	mov	r1, r6
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	f7f5 fbf4 	bl	8000618 <__aeabi_dmul>
 800ae30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae34:	9415      	str	r4, [sp, #84]	@ 0x54
 800ae36:	4656      	mov	r6, sl
 800ae38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae3c:	f7f5 fe9c 	bl	8000b78 <__aeabi_d2iz>
 800ae40:	4605      	mov	r5, r0
 800ae42:	f7f5 fb7f 	bl	8000544 <__aeabi_i2d>
 800ae46:	4602      	mov	r2, r0
 800ae48:	460b      	mov	r3, r1
 800ae4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae4e:	f7f5 fa2b 	bl	80002a8 <__aeabi_dsub>
 800ae52:	3530      	adds	r5, #48	@ 0x30
 800ae54:	f806 5b01 	strb.w	r5, [r6], #1
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	42a6      	cmp	r6, r4
 800ae5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae62:	f04f 0200 	mov.w	r2, #0
 800ae66:	d124      	bne.n	800aeb2 <_dtoa_r+0x662>
 800ae68:	4bac      	ldr	r3, [pc, #688]	@ (800b11c <_dtoa_r+0x8cc>)
 800ae6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ae6e:	f7f5 fa1d 	bl	80002ac <__adddf3>
 800ae72:	4602      	mov	r2, r0
 800ae74:	460b      	mov	r3, r1
 800ae76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae7a:	f7f5 fe5d 	bl	8000b38 <__aeabi_dcmpgt>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d145      	bne.n	800af0e <_dtoa_r+0x6be>
 800ae82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae86:	49a5      	ldr	r1, [pc, #660]	@ (800b11c <_dtoa_r+0x8cc>)
 800ae88:	2000      	movs	r0, #0
 800ae8a:	f7f5 fa0d 	bl	80002a8 <__aeabi_dsub>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae96:	f7f5 fe31 	bl	8000afc <__aeabi_dcmplt>
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	f43f aef5 	beq.w	800ac8a <_dtoa_r+0x43a>
 800aea0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800aea2:	1e73      	subs	r3, r6, #1
 800aea4:	9315      	str	r3, [sp, #84]	@ 0x54
 800aea6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aeaa:	2b30      	cmp	r3, #48	@ 0x30
 800aeac:	d0f8      	beq.n	800aea0 <_dtoa_r+0x650>
 800aeae:	9f04      	ldr	r7, [sp, #16]
 800aeb0:	e73e      	b.n	800ad30 <_dtoa_r+0x4e0>
 800aeb2:	4b9b      	ldr	r3, [pc, #620]	@ (800b120 <_dtoa_r+0x8d0>)
 800aeb4:	f7f5 fbb0 	bl	8000618 <__aeabi_dmul>
 800aeb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aebc:	e7bc      	b.n	800ae38 <_dtoa_r+0x5e8>
 800aebe:	d10c      	bne.n	800aeda <_dtoa_r+0x68a>
 800aec0:	4b98      	ldr	r3, [pc, #608]	@ (800b124 <_dtoa_r+0x8d4>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aec8:	f7f5 fba6 	bl	8000618 <__aeabi_dmul>
 800aecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aed0:	f7f5 fe28 	bl	8000b24 <__aeabi_dcmpge>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	f000 8157 	beq.w	800b188 <_dtoa_r+0x938>
 800aeda:	2400      	movs	r4, #0
 800aedc:	4625      	mov	r5, r4
 800aede:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aee0:	43db      	mvns	r3, r3
 800aee2:	9304      	str	r3, [sp, #16]
 800aee4:	4656      	mov	r6, sl
 800aee6:	2700      	movs	r7, #0
 800aee8:	4621      	mov	r1, r4
 800aeea:	4658      	mov	r0, fp
 800aeec:	f000 fe8e 	bl	800bc0c <_Bfree>
 800aef0:	2d00      	cmp	r5, #0
 800aef2:	d0dc      	beq.n	800aeae <_dtoa_r+0x65e>
 800aef4:	b12f      	cbz	r7, 800af02 <_dtoa_r+0x6b2>
 800aef6:	42af      	cmp	r7, r5
 800aef8:	d003      	beq.n	800af02 <_dtoa_r+0x6b2>
 800aefa:	4639      	mov	r1, r7
 800aefc:	4658      	mov	r0, fp
 800aefe:	f000 fe85 	bl	800bc0c <_Bfree>
 800af02:	4629      	mov	r1, r5
 800af04:	4658      	mov	r0, fp
 800af06:	f000 fe81 	bl	800bc0c <_Bfree>
 800af0a:	e7d0      	b.n	800aeae <_dtoa_r+0x65e>
 800af0c:	9704      	str	r7, [sp, #16]
 800af0e:	4633      	mov	r3, r6
 800af10:	461e      	mov	r6, r3
 800af12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af16:	2a39      	cmp	r2, #57	@ 0x39
 800af18:	d107      	bne.n	800af2a <_dtoa_r+0x6da>
 800af1a:	459a      	cmp	sl, r3
 800af1c:	d1f8      	bne.n	800af10 <_dtoa_r+0x6c0>
 800af1e:	9a04      	ldr	r2, [sp, #16]
 800af20:	3201      	adds	r2, #1
 800af22:	9204      	str	r2, [sp, #16]
 800af24:	2230      	movs	r2, #48	@ 0x30
 800af26:	f88a 2000 	strb.w	r2, [sl]
 800af2a:	781a      	ldrb	r2, [r3, #0]
 800af2c:	3201      	adds	r2, #1
 800af2e:	701a      	strb	r2, [r3, #0]
 800af30:	e7bd      	b.n	800aeae <_dtoa_r+0x65e>
 800af32:	4b7b      	ldr	r3, [pc, #492]	@ (800b120 <_dtoa_r+0x8d0>)
 800af34:	2200      	movs	r2, #0
 800af36:	f7f5 fb6f 	bl	8000618 <__aeabi_dmul>
 800af3a:	2200      	movs	r2, #0
 800af3c:	2300      	movs	r3, #0
 800af3e:	4604      	mov	r4, r0
 800af40:	460d      	mov	r5, r1
 800af42:	f7f5 fdd1 	bl	8000ae8 <__aeabi_dcmpeq>
 800af46:	2800      	cmp	r0, #0
 800af48:	f43f aebb 	beq.w	800acc2 <_dtoa_r+0x472>
 800af4c:	e6f0      	b.n	800ad30 <_dtoa_r+0x4e0>
 800af4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af50:	2a00      	cmp	r2, #0
 800af52:	f000 80db 	beq.w	800b10c <_dtoa_r+0x8bc>
 800af56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af58:	2a01      	cmp	r2, #1
 800af5a:	f300 80bf 	bgt.w	800b0dc <_dtoa_r+0x88c>
 800af5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800af60:	2a00      	cmp	r2, #0
 800af62:	f000 80b7 	beq.w	800b0d4 <_dtoa_r+0x884>
 800af66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800af6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af6c:	4646      	mov	r6, r8
 800af6e:	9a08      	ldr	r2, [sp, #32]
 800af70:	2101      	movs	r1, #1
 800af72:	441a      	add	r2, r3
 800af74:	4658      	mov	r0, fp
 800af76:	4498      	add	r8, r3
 800af78:	9208      	str	r2, [sp, #32]
 800af7a:	f000 ff45 	bl	800be08 <__i2b>
 800af7e:	4605      	mov	r5, r0
 800af80:	b15e      	cbz	r6, 800af9a <_dtoa_r+0x74a>
 800af82:	9b08      	ldr	r3, [sp, #32]
 800af84:	2b00      	cmp	r3, #0
 800af86:	dd08      	ble.n	800af9a <_dtoa_r+0x74a>
 800af88:	42b3      	cmp	r3, r6
 800af8a:	9a08      	ldr	r2, [sp, #32]
 800af8c:	bfa8      	it	ge
 800af8e:	4633      	movge	r3, r6
 800af90:	eba8 0803 	sub.w	r8, r8, r3
 800af94:	1af6      	subs	r6, r6, r3
 800af96:	1ad3      	subs	r3, r2, r3
 800af98:	9308      	str	r3, [sp, #32]
 800af9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af9c:	b1f3      	cbz	r3, 800afdc <_dtoa_r+0x78c>
 800af9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	f000 80b7 	beq.w	800b114 <_dtoa_r+0x8c4>
 800afa6:	b18c      	cbz	r4, 800afcc <_dtoa_r+0x77c>
 800afa8:	4629      	mov	r1, r5
 800afaa:	4622      	mov	r2, r4
 800afac:	4658      	mov	r0, fp
 800afae:	f000 ffeb 	bl	800bf88 <__pow5mult>
 800afb2:	464a      	mov	r2, r9
 800afb4:	4601      	mov	r1, r0
 800afb6:	4605      	mov	r5, r0
 800afb8:	4658      	mov	r0, fp
 800afba:	f000 ff3b 	bl	800be34 <__multiply>
 800afbe:	4649      	mov	r1, r9
 800afc0:	9004      	str	r0, [sp, #16]
 800afc2:	4658      	mov	r0, fp
 800afc4:	f000 fe22 	bl	800bc0c <_Bfree>
 800afc8:	9b04      	ldr	r3, [sp, #16]
 800afca:	4699      	mov	r9, r3
 800afcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afce:	1b1a      	subs	r2, r3, r4
 800afd0:	d004      	beq.n	800afdc <_dtoa_r+0x78c>
 800afd2:	4649      	mov	r1, r9
 800afd4:	4658      	mov	r0, fp
 800afd6:	f000 ffd7 	bl	800bf88 <__pow5mult>
 800afda:	4681      	mov	r9, r0
 800afdc:	2101      	movs	r1, #1
 800afde:	4658      	mov	r0, fp
 800afe0:	f000 ff12 	bl	800be08 <__i2b>
 800afe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afe6:	4604      	mov	r4, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	f000 81cf 	beq.w	800b38c <_dtoa_r+0xb3c>
 800afee:	461a      	mov	r2, r3
 800aff0:	4601      	mov	r1, r0
 800aff2:	4658      	mov	r0, fp
 800aff4:	f000 ffc8 	bl	800bf88 <__pow5mult>
 800aff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800affa:	2b01      	cmp	r3, #1
 800affc:	4604      	mov	r4, r0
 800affe:	f300 8095 	bgt.w	800b12c <_dtoa_r+0x8dc>
 800b002:	9b02      	ldr	r3, [sp, #8]
 800b004:	2b00      	cmp	r3, #0
 800b006:	f040 8087 	bne.w	800b118 <_dtoa_r+0x8c8>
 800b00a:	9b03      	ldr	r3, [sp, #12]
 800b00c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b010:	2b00      	cmp	r3, #0
 800b012:	f040 8089 	bne.w	800b128 <_dtoa_r+0x8d8>
 800b016:	9b03      	ldr	r3, [sp, #12]
 800b018:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b01c:	0d1b      	lsrs	r3, r3, #20
 800b01e:	051b      	lsls	r3, r3, #20
 800b020:	b12b      	cbz	r3, 800b02e <_dtoa_r+0x7de>
 800b022:	9b08      	ldr	r3, [sp, #32]
 800b024:	3301      	adds	r3, #1
 800b026:	9308      	str	r3, [sp, #32]
 800b028:	f108 0801 	add.w	r8, r8, #1
 800b02c:	2301      	movs	r3, #1
 800b02e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b030:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b032:	2b00      	cmp	r3, #0
 800b034:	f000 81b0 	beq.w	800b398 <_dtoa_r+0xb48>
 800b038:	6923      	ldr	r3, [r4, #16]
 800b03a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b03e:	6918      	ldr	r0, [r3, #16]
 800b040:	f000 fe96 	bl	800bd70 <__hi0bits>
 800b044:	f1c0 0020 	rsb	r0, r0, #32
 800b048:	9b08      	ldr	r3, [sp, #32]
 800b04a:	4418      	add	r0, r3
 800b04c:	f010 001f 	ands.w	r0, r0, #31
 800b050:	d077      	beq.n	800b142 <_dtoa_r+0x8f2>
 800b052:	f1c0 0320 	rsb	r3, r0, #32
 800b056:	2b04      	cmp	r3, #4
 800b058:	dd6b      	ble.n	800b132 <_dtoa_r+0x8e2>
 800b05a:	9b08      	ldr	r3, [sp, #32]
 800b05c:	f1c0 001c 	rsb	r0, r0, #28
 800b060:	4403      	add	r3, r0
 800b062:	4480      	add	r8, r0
 800b064:	4406      	add	r6, r0
 800b066:	9308      	str	r3, [sp, #32]
 800b068:	f1b8 0f00 	cmp.w	r8, #0
 800b06c:	dd05      	ble.n	800b07a <_dtoa_r+0x82a>
 800b06e:	4649      	mov	r1, r9
 800b070:	4642      	mov	r2, r8
 800b072:	4658      	mov	r0, fp
 800b074:	f000 ffe2 	bl	800c03c <__lshift>
 800b078:	4681      	mov	r9, r0
 800b07a:	9b08      	ldr	r3, [sp, #32]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	dd05      	ble.n	800b08c <_dtoa_r+0x83c>
 800b080:	4621      	mov	r1, r4
 800b082:	461a      	mov	r2, r3
 800b084:	4658      	mov	r0, fp
 800b086:	f000 ffd9 	bl	800c03c <__lshift>
 800b08a:	4604      	mov	r4, r0
 800b08c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d059      	beq.n	800b146 <_dtoa_r+0x8f6>
 800b092:	4621      	mov	r1, r4
 800b094:	4648      	mov	r0, r9
 800b096:	f001 f83d 	bl	800c114 <__mcmp>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	da53      	bge.n	800b146 <_dtoa_r+0x8f6>
 800b09e:	1e7b      	subs	r3, r7, #1
 800b0a0:	9304      	str	r3, [sp, #16]
 800b0a2:	4649      	mov	r1, r9
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	220a      	movs	r2, #10
 800b0a8:	4658      	mov	r0, fp
 800b0aa:	f000 fdd1 	bl	800bc50 <__multadd>
 800b0ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0b0:	4681      	mov	r9, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f000 8172 	beq.w	800b39c <_dtoa_r+0xb4c>
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	220a      	movs	r2, #10
 800b0be:	4658      	mov	r0, fp
 800b0c0:	f000 fdc6 	bl	800bc50 <__multadd>
 800b0c4:	9b00      	ldr	r3, [sp, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	4605      	mov	r5, r0
 800b0ca:	dc67      	bgt.n	800b19c <_dtoa_r+0x94c>
 800b0cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	dc41      	bgt.n	800b156 <_dtoa_r+0x906>
 800b0d2:	e063      	b.n	800b19c <_dtoa_r+0x94c>
 800b0d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b0d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b0da:	e746      	b.n	800af6a <_dtoa_r+0x71a>
 800b0dc:	9b07      	ldr	r3, [sp, #28]
 800b0de:	1e5c      	subs	r4, r3, #1
 800b0e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0e2:	42a3      	cmp	r3, r4
 800b0e4:	bfbf      	itttt	lt
 800b0e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b0e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b0ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b0ec:	1ae3      	sublt	r3, r4, r3
 800b0ee:	bfb4      	ite	lt
 800b0f0:	18d2      	addlt	r2, r2, r3
 800b0f2:	1b1c      	subge	r4, r3, r4
 800b0f4:	9b07      	ldr	r3, [sp, #28]
 800b0f6:	bfbc      	itt	lt
 800b0f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b0fa:	2400      	movlt	r4, #0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	bfb5      	itete	lt
 800b100:	eba8 0603 	sublt.w	r6, r8, r3
 800b104:	9b07      	ldrge	r3, [sp, #28]
 800b106:	2300      	movlt	r3, #0
 800b108:	4646      	movge	r6, r8
 800b10a:	e730      	b.n	800af6e <_dtoa_r+0x71e>
 800b10c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b10e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b110:	4646      	mov	r6, r8
 800b112:	e735      	b.n	800af80 <_dtoa_r+0x730>
 800b114:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b116:	e75c      	b.n	800afd2 <_dtoa_r+0x782>
 800b118:	2300      	movs	r3, #0
 800b11a:	e788      	b.n	800b02e <_dtoa_r+0x7de>
 800b11c:	3fe00000 	.word	0x3fe00000
 800b120:	40240000 	.word	0x40240000
 800b124:	40140000 	.word	0x40140000
 800b128:	9b02      	ldr	r3, [sp, #8]
 800b12a:	e780      	b.n	800b02e <_dtoa_r+0x7de>
 800b12c:	2300      	movs	r3, #0
 800b12e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b130:	e782      	b.n	800b038 <_dtoa_r+0x7e8>
 800b132:	d099      	beq.n	800b068 <_dtoa_r+0x818>
 800b134:	9a08      	ldr	r2, [sp, #32]
 800b136:	331c      	adds	r3, #28
 800b138:	441a      	add	r2, r3
 800b13a:	4498      	add	r8, r3
 800b13c:	441e      	add	r6, r3
 800b13e:	9208      	str	r2, [sp, #32]
 800b140:	e792      	b.n	800b068 <_dtoa_r+0x818>
 800b142:	4603      	mov	r3, r0
 800b144:	e7f6      	b.n	800b134 <_dtoa_r+0x8e4>
 800b146:	9b07      	ldr	r3, [sp, #28]
 800b148:	9704      	str	r7, [sp, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	dc20      	bgt.n	800b190 <_dtoa_r+0x940>
 800b14e:	9300      	str	r3, [sp, #0]
 800b150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b152:	2b02      	cmp	r3, #2
 800b154:	dd1e      	ble.n	800b194 <_dtoa_r+0x944>
 800b156:	9b00      	ldr	r3, [sp, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	f47f aec0 	bne.w	800aede <_dtoa_r+0x68e>
 800b15e:	4621      	mov	r1, r4
 800b160:	2205      	movs	r2, #5
 800b162:	4658      	mov	r0, fp
 800b164:	f000 fd74 	bl	800bc50 <__multadd>
 800b168:	4601      	mov	r1, r0
 800b16a:	4604      	mov	r4, r0
 800b16c:	4648      	mov	r0, r9
 800b16e:	f000 ffd1 	bl	800c114 <__mcmp>
 800b172:	2800      	cmp	r0, #0
 800b174:	f77f aeb3 	ble.w	800aede <_dtoa_r+0x68e>
 800b178:	4656      	mov	r6, sl
 800b17a:	2331      	movs	r3, #49	@ 0x31
 800b17c:	f806 3b01 	strb.w	r3, [r6], #1
 800b180:	9b04      	ldr	r3, [sp, #16]
 800b182:	3301      	adds	r3, #1
 800b184:	9304      	str	r3, [sp, #16]
 800b186:	e6ae      	b.n	800aee6 <_dtoa_r+0x696>
 800b188:	9c07      	ldr	r4, [sp, #28]
 800b18a:	9704      	str	r7, [sp, #16]
 800b18c:	4625      	mov	r5, r4
 800b18e:	e7f3      	b.n	800b178 <_dtoa_r+0x928>
 800b190:	9b07      	ldr	r3, [sp, #28]
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b196:	2b00      	cmp	r3, #0
 800b198:	f000 8104 	beq.w	800b3a4 <_dtoa_r+0xb54>
 800b19c:	2e00      	cmp	r6, #0
 800b19e:	dd05      	ble.n	800b1ac <_dtoa_r+0x95c>
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	4632      	mov	r2, r6
 800b1a4:	4658      	mov	r0, fp
 800b1a6:	f000 ff49 	bl	800c03c <__lshift>
 800b1aa:	4605      	mov	r5, r0
 800b1ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d05a      	beq.n	800b268 <_dtoa_r+0xa18>
 800b1b2:	6869      	ldr	r1, [r5, #4]
 800b1b4:	4658      	mov	r0, fp
 800b1b6:	f000 fce9 	bl	800bb8c <_Balloc>
 800b1ba:	4606      	mov	r6, r0
 800b1bc:	b928      	cbnz	r0, 800b1ca <_dtoa_r+0x97a>
 800b1be:	4b84      	ldr	r3, [pc, #528]	@ (800b3d0 <_dtoa_r+0xb80>)
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b1c6:	f7ff bb5a 	b.w	800a87e <_dtoa_r+0x2e>
 800b1ca:	692a      	ldr	r2, [r5, #16]
 800b1cc:	3202      	adds	r2, #2
 800b1ce:	0092      	lsls	r2, r2, #2
 800b1d0:	f105 010c 	add.w	r1, r5, #12
 800b1d4:	300c      	adds	r0, #12
 800b1d6:	f7ff fa8b 	bl	800a6f0 <memcpy>
 800b1da:	2201      	movs	r2, #1
 800b1dc:	4631      	mov	r1, r6
 800b1de:	4658      	mov	r0, fp
 800b1e0:	f000 ff2c 	bl	800c03c <__lshift>
 800b1e4:	f10a 0301 	add.w	r3, sl, #1
 800b1e8:	9307      	str	r3, [sp, #28]
 800b1ea:	9b00      	ldr	r3, [sp, #0]
 800b1ec:	4453      	add	r3, sl
 800b1ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1f0:	9b02      	ldr	r3, [sp, #8]
 800b1f2:	f003 0301 	and.w	r3, r3, #1
 800b1f6:	462f      	mov	r7, r5
 800b1f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1fa:	4605      	mov	r5, r0
 800b1fc:	9b07      	ldr	r3, [sp, #28]
 800b1fe:	4621      	mov	r1, r4
 800b200:	3b01      	subs	r3, #1
 800b202:	4648      	mov	r0, r9
 800b204:	9300      	str	r3, [sp, #0]
 800b206:	f7ff fa99 	bl	800a73c <quorem>
 800b20a:	4639      	mov	r1, r7
 800b20c:	9002      	str	r0, [sp, #8]
 800b20e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b212:	4648      	mov	r0, r9
 800b214:	f000 ff7e 	bl	800c114 <__mcmp>
 800b218:	462a      	mov	r2, r5
 800b21a:	9008      	str	r0, [sp, #32]
 800b21c:	4621      	mov	r1, r4
 800b21e:	4658      	mov	r0, fp
 800b220:	f000 ff94 	bl	800c14c <__mdiff>
 800b224:	68c2      	ldr	r2, [r0, #12]
 800b226:	4606      	mov	r6, r0
 800b228:	bb02      	cbnz	r2, 800b26c <_dtoa_r+0xa1c>
 800b22a:	4601      	mov	r1, r0
 800b22c:	4648      	mov	r0, r9
 800b22e:	f000 ff71 	bl	800c114 <__mcmp>
 800b232:	4602      	mov	r2, r0
 800b234:	4631      	mov	r1, r6
 800b236:	4658      	mov	r0, fp
 800b238:	920e      	str	r2, [sp, #56]	@ 0x38
 800b23a:	f000 fce7 	bl	800bc0c <_Bfree>
 800b23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b240:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b242:	9e07      	ldr	r6, [sp, #28]
 800b244:	ea43 0102 	orr.w	r1, r3, r2
 800b248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b24a:	4319      	orrs	r1, r3
 800b24c:	d110      	bne.n	800b270 <_dtoa_r+0xa20>
 800b24e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b252:	d029      	beq.n	800b2a8 <_dtoa_r+0xa58>
 800b254:	9b08      	ldr	r3, [sp, #32]
 800b256:	2b00      	cmp	r3, #0
 800b258:	dd02      	ble.n	800b260 <_dtoa_r+0xa10>
 800b25a:	9b02      	ldr	r3, [sp, #8]
 800b25c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b260:	9b00      	ldr	r3, [sp, #0]
 800b262:	f883 8000 	strb.w	r8, [r3]
 800b266:	e63f      	b.n	800aee8 <_dtoa_r+0x698>
 800b268:	4628      	mov	r0, r5
 800b26a:	e7bb      	b.n	800b1e4 <_dtoa_r+0x994>
 800b26c:	2201      	movs	r2, #1
 800b26e:	e7e1      	b.n	800b234 <_dtoa_r+0x9e4>
 800b270:	9b08      	ldr	r3, [sp, #32]
 800b272:	2b00      	cmp	r3, #0
 800b274:	db04      	blt.n	800b280 <_dtoa_r+0xa30>
 800b276:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b278:	430b      	orrs	r3, r1
 800b27a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b27c:	430b      	orrs	r3, r1
 800b27e:	d120      	bne.n	800b2c2 <_dtoa_r+0xa72>
 800b280:	2a00      	cmp	r2, #0
 800b282:	dded      	ble.n	800b260 <_dtoa_r+0xa10>
 800b284:	4649      	mov	r1, r9
 800b286:	2201      	movs	r2, #1
 800b288:	4658      	mov	r0, fp
 800b28a:	f000 fed7 	bl	800c03c <__lshift>
 800b28e:	4621      	mov	r1, r4
 800b290:	4681      	mov	r9, r0
 800b292:	f000 ff3f 	bl	800c114 <__mcmp>
 800b296:	2800      	cmp	r0, #0
 800b298:	dc03      	bgt.n	800b2a2 <_dtoa_r+0xa52>
 800b29a:	d1e1      	bne.n	800b260 <_dtoa_r+0xa10>
 800b29c:	f018 0f01 	tst.w	r8, #1
 800b2a0:	d0de      	beq.n	800b260 <_dtoa_r+0xa10>
 800b2a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b2a6:	d1d8      	bne.n	800b25a <_dtoa_r+0xa0a>
 800b2a8:	9a00      	ldr	r2, [sp, #0]
 800b2aa:	2339      	movs	r3, #57	@ 0x39
 800b2ac:	7013      	strb	r3, [r2, #0]
 800b2ae:	4633      	mov	r3, r6
 800b2b0:	461e      	mov	r6, r3
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b2b8:	2a39      	cmp	r2, #57	@ 0x39
 800b2ba:	d052      	beq.n	800b362 <_dtoa_r+0xb12>
 800b2bc:	3201      	adds	r2, #1
 800b2be:	701a      	strb	r2, [r3, #0]
 800b2c0:	e612      	b.n	800aee8 <_dtoa_r+0x698>
 800b2c2:	2a00      	cmp	r2, #0
 800b2c4:	dd07      	ble.n	800b2d6 <_dtoa_r+0xa86>
 800b2c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b2ca:	d0ed      	beq.n	800b2a8 <_dtoa_r+0xa58>
 800b2cc:	9a00      	ldr	r2, [sp, #0]
 800b2ce:	f108 0301 	add.w	r3, r8, #1
 800b2d2:	7013      	strb	r3, [r2, #0]
 800b2d4:	e608      	b.n	800aee8 <_dtoa_r+0x698>
 800b2d6:	9b07      	ldr	r3, [sp, #28]
 800b2d8:	9a07      	ldr	r2, [sp, #28]
 800b2da:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b2de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d028      	beq.n	800b336 <_dtoa_r+0xae6>
 800b2e4:	4649      	mov	r1, r9
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	220a      	movs	r2, #10
 800b2ea:	4658      	mov	r0, fp
 800b2ec:	f000 fcb0 	bl	800bc50 <__multadd>
 800b2f0:	42af      	cmp	r7, r5
 800b2f2:	4681      	mov	r9, r0
 800b2f4:	f04f 0300 	mov.w	r3, #0
 800b2f8:	f04f 020a 	mov.w	r2, #10
 800b2fc:	4639      	mov	r1, r7
 800b2fe:	4658      	mov	r0, fp
 800b300:	d107      	bne.n	800b312 <_dtoa_r+0xac2>
 800b302:	f000 fca5 	bl	800bc50 <__multadd>
 800b306:	4607      	mov	r7, r0
 800b308:	4605      	mov	r5, r0
 800b30a:	9b07      	ldr	r3, [sp, #28]
 800b30c:	3301      	adds	r3, #1
 800b30e:	9307      	str	r3, [sp, #28]
 800b310:	e774      	b.n	800b1fc <_dtoa_r+0x9ac>
 800b312:	f000 fc9d 	bl	800bc50 <__multadd>
 800b316:	4629      	mov	r1, r5
 800b318:	4607      	mov	r7, r0
 800b31a:	2300      	movs	r3, #0
 800b31c:	220a      	movs	r2, #10
 800b31e:	4658      	mov	r0, fp
 800b320:	f000 fc96 	bl	800bc50 <__multadd>
 800b324:	4605      	mov	r5, r0
 800b326:	e7f0      	b.n	800b30a <_dtoa_r+0xaba>
 800b328:	9b00      	ldr	r3, [sp, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	bfcc      	ite	gt
 800b32e:	461e      	movgt	r6, r3
 800b330:	2601      	movle	r6, #1
 800b332:	4456      	add	r6, sl
 800b334:	2700      	movs	r7, #0
 800b336:	4649      	mov	r1, r9
 800b338:	2201      	movs	r2, #1
 800b33a:	4658      	mov	r0, fp
 800b33c:	f000 fe7e 	bl	800c03c <__lshift>
 800b340:	4621      	mov	r1, r4
 800b342:	4681      	mov	r9, r0
 800b344:	f000 fee6 	bl	800c114 <__mcmp>
 800b348:	2800      	cmp	r0, #0
 800b34a:	dcb0      	bgt.n	800b2ae <_dtoa_r+0xa5e>
 800b34c:	d102      	bne.n	800b354 <_dtoa_r+0xb04>
 800b34e:	f018 0f01 	tst.w	r8, #1
 800b352:	d1ac      	bne.n	800b2ae <_dtoa_r+0xa5e>
 800b354:	4633      	mov	r3, r6
 800b356:	461e      	mov	r6, r3
 800b358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b35c:	2a30      	cmp	r2, #48	@ 0x30
 800b35e:	d0fa      	beq.n	800b356 <_dtoa_r+0xb06>
 800b360:	e5c2      	b.n	800aee8 <_dtoa_r+0x698>
 800b362:	459a      	cmp	sl, r3
 800b364:	d1a4      	bne.n	800b2b0 <_dtoa_r+0xa60>
 800b366:	9b04      	ldr	r3, [sp, #16]
 800b368:	3301      	adds	r3, #1
 800b36a:	9304      	str	r3, [sp, #16]
 800b36c:	2331      	movs	r3, #49	@ 0x31
 800b36e:	f88a 3000 	strb.w	r3, [sl]
 800b372:	e5b9      	b.n	800aee8 <_dtoa_r+0x698>
 800b374:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b376:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b3d4 <_dtoa_r+0xb84>
 800b37a:	b11b      	cbz	r3, 800b384 <_dtoa_r+0xb34>
 800b37c:	f10a 0308 	add.w	r3, sl, #8
 800b380:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b382:	6013      	str	r3, [r2, #0]
 800b384:	4650      	mov	r0, sl
 800b386:	b019      	add	sp, #100	@ 0x64
 800b388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b38e:	2b01      	cmp	r3, #1
 800b390:	f77f ae37 	ble.w	800b002 <_dtoa_r+0x7b2>
 800b394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b396:	930a      	str	r3, [sp, #40]	@ 0x28
 800b398:	2001      	movs	r0, #1
 800b39a:	e655      	b.n	800b048 <_dtoa_r+0x7f8>
 800b39c:	9b00      	ldr	r3, [sp, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f77f aed6 	ble.w	800b150 <_dtoa_r+0x900>
 800b3a4:	4656      	mov	r6, sl
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	4648      	mov	r0, r9
 800b3aa:	f7ff f9c7 	bl	800a73c <quorem>
 800b3ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b3b2:	f806 8b01 	strb.w	r8, [r6], #1
 800b3b6:	9b00      	ldr	r3, [sp, #0]
 800b3b8:	eba6 020a 	sub.w	r2, r6, sl
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	ddb3      	ble.n	800b328 <_dtoa_r+0xad8>
 800b3c0:	4649      	mov	r1, r9
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	220a      	movs	r2, #10
 800b3c6:	4658      	mov	r0, fp
 800b3c8:	f000 fc42 	bl	800bc50 <__multadd>
 800b3cc:	4681      	mov	r9, r0
 800b3ce:	e7ea      	b.n	800b3a6 <_dtoa_r+0xb56>
 800b3d0:	0800e7d8 	.word	0x0800e7d8
 800b3d4:	0800e75c 	.word	0x0800e75c

0800b3d8 <_free_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4605      	mov	r5, r0
 800b3dc:	2900      	cmp	r1, #0
 800b3de:	d041      	beq.n	800b464 <_free_r+0x8c>
 800b3e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3e4:	1f0c      	subs	r4, r1, #4
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	bfb8      	it	lt
 800b3ea:	18e4      	addlt	r4, r4, r3
 800b3ec:	f7fc fb30 	bl	8007a50 <__malloc_lock>
 800b3f0:	4a1d      	ldr	r2, [pc, #116]	@ (800b468 <_free_r+0x90>)
 800b3f2:	6813      	ldr	r3, [r2, #0]
 800b3f4:	b933      	cbnz	r3, 800b404 <_free_r+0x2c>
 800b3f6:	6063      	str	r3, [r4, #4]
 800b3f8:	6014      	str	r4, [r2, #0]
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b400:	f7fc bb2c 	b.w	8007a5c <__malloc_unlock>
 800b404:	42a3      	cmp	r3, r4
 800b406:	d908      	bls.n	800b41a <_free_r+0x42>
 800b408:	6820      	ldr	r0, [r4, #0]
 800b40a:	1821      	adds	r1, r4, r0
 800b40c:	428b      	cmp	r3, r1
 800b40e:	bf01      	itttt	eq
 800b410:	6819      	ldreq	r1, [r3, #0]
 800b412:	685b      	ldreq	r3, [r3, #4]
 800b414:	1809      	addeq	r1, r1, r0
 800b416:	6021      	streq	r1, [r4, #0]
 800b418:	e7ed      	b.n	800b3f6 <_free_r+0x1e>
 800b41a:	461a      	mov	r2, r3
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	b10b      	cbz	r3, 800b424 <_free_r+0x4c>
 800b420:	42a3      	cmp	r3, r4
 800b422:	d9fa      	bls.n	800b41a <_free_r+0x42>
 800b424:	6811      	ldr	r1, [r2, #0]
 800b426:	1850      	adds	r0, r2, r1
 800b428:	42a0      	cmp	r0, r4
 800b42a:	d10b      	bne.n	800b444 <_free_r+0x6c>
 800b42c:	6820      	ldr	r0, [r4, #0]
 800b42e:	4401      	add	r1, r0
 800b430:	1850      	adds	r0, r2, r1
 800b432:	4283      	cmp	r3, r0
 800b434:	6011      	str	r1, [r2, #0]
 800b436:	d1e0      	bne.n	800b3fa <_free_r+0x22>
 800b438:	6818      	ldr	r0, [r3, #0]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	6053      	str	r3, [r2, #4]
 800b43e:	4408      	add	r0, r1
 800b440:	6010      	str	r0, [r2, #0]
 800b442:	e7da      	b.n	800b3fa <_free_r+0x22>
 800b444:	d902      	bls.n	800b44c <_free_r+0x74>
 800b446:	230c      	movs	r3, #12
 800b448:	602b      	str	r3, [r5, #0]
 800b44a:	e7d6      	b.n	800b3fa <_free_r+0x22>
 800b44c:	6820      	ldr	r0, [r4, #0]
 800b44e:	1821      	adds	r1, r4, r0
 800b450:	428b      	cmp	r3, r1
 800b452:	bf04      	itt	eq
 800b454:	6819      	ldreq	r1, [r3, #0]
 800b456:	685b      	ldreq	r3, [r3, #4]
 800b458:	6063      	str	r3, [r4, #4]
 800b45a:	bf04      	itt	eq
 800b45c:	1809      	addeq	r1, r1, r0
 800b45e:	6021      	streq	r1, [r4, #0]
 800b460:	6054      	str	r4, [r2, #4]
 800b462:	e7ca      	b.n	800b3fa <_free_r+0x22>
 800b464:	bd38      	pop	{r3, r4, r5, pc}
 800b466:	bf00      	nop
 800b468:	20008e1c 	.word	0x20008e1c

0800b46c <rshift>:
 800b46c:	6903      	ldr	r3, [r0, #16]
 800b46e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b472:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b476:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b47a:	f100 0414 	add.w	r4, r0, #20
 800b47e:	dd45      	ble.n	800b50c <rshift+0xa0>
 800b480:	f011 011f 	ands.w	r1, r1, #31
 800b484:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b488:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b48c:	d10c      	bne.n	800b4a8 <rshift+0x3c>
 800b48e:	f100 0710 	add.w	r7, r0, #16
 800b492:	4629      	mov	r1, r5
 800b494:	42b1      	cmp	r1, r6
 800b496:	d334      	bcc.n	800b502 <rshift+0x96>
 800b498:	1a9b      	subs	r3, r3, r2
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	1eea      	subs	r2, r5, #3
 800b49e:	4296      	cmp	r6, r2
 800b4a0:	bf38      	it	cc
 800b4a2:	2300      	movcc	r3, #0
 800b4a4:	4423      	add	r3, r4
 800b4a6:	e015      	b.n	800b4d4 <rshift+0x68>
 800b4a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b4ac:	f1c1 0820 	rsb	r8, r1, #32
 800b4b0:	40cf      	lsrs	r7, r1
 800b4b2:	f105 0e04 	add.w	lr, r5, #4
 800b4b6:	46a1      	mov	r9, r4
 800b4b8:	4576      	cmp	r6, lr
 800b4ba:	46f4      	mov	ip, lr
 800b4bc:	d815      	bhi.n	800b4ea <rshift+0x7e>
 800b4be:	1a9a      	subs	r2, r3, r2
 800b4c0:	0092      	lsls	r2, r2, #2
 800b4c2:	3a04      	subs	r2, #4
 800b4c4:	3501      	adds	r5, #1
 800b4c6:	42ae      	cmp	r6, r5
 800b4c8:	bf38      	it	cc
 800b4ca:	2200      	movcc	r2, #0
 800b4cc:	18a3      	adds	r3, r4, r2
 800b4ce:	50a7      	str	r7, [r4, r2]
 800b4d0:	b107      	cbz	r7, 800b4d4 <rshift+0x68>
 800b4d2:	3304      	adds	r3, #4
 800b4d4:	1b1a      	subs	r2, r3, r4
 800b4d6:	42a3      	cmp	r3, r4
 800b4d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b4dc:	bf08      	it	eq
 800b4de:	2300      	moveq	r3, #0
 800b4e0:	6102      	str	r2, [r0, #16]
 800b4e2:	bf08      	it	eq
 800b4e4:	6143      	streq	r3, [r0, #20]
 800b4e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4ea:	f8dc c000 	ldr.w	ip, [ip]
 800b4ee:	fa0c fc08 	lsl.w	ip, ip, r8
 800b4f2:	ea4c 0707 	orr.w	r7, ip, r7
 800b4f6:	f849 7b04 	str.w	r7, [r9], #4
 800b4fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b4fe:	40cf      	lsrs	r7, r1
 800b500:	e7da      	b.n	800b4b8 <rshift+0x4c>
 800b502:	f851 cb04 	ldr.w	ip, [r1], #4
 800b506:	f847 cf04 	str.w	ip, [r7, #4]!
 800b50a:	e7c3      	b.n	800b494 <rshift+0x28>
 800b50c:	4623      	mov	r3, r4
 800b50e:	e7e1      	b.n	800b4d4 <rshift+0x68>

0800b510 <__hexdig_fun>:
 800b510:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b514:	2b09      	cmp	r3, #9
 800b516:	d802      	bhi.n	800b51e <__hexdig_fun+0xe>
 800b518:	3820      	subs	r0, #32
 800b51a:	b2c0      	uxtb	r0, r0
 800b51c:	4770      	bx	lr
 800b51e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b522:	2b05      	cmp	r3, #5
 800b524:	d801      	bhi.n	800b52a <__hexdig_fun+0x1a>
 800b526:	3847      	subs	r0, #71	@ 0x47
 800b528:	e7f7      	b.n	800b51a <__hexdig_fun+0xa>
 800b52a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b52e:	2b05      	cmp	r3, #5
 800b530:	d801      	bhi.n	800b536 <__hexdig_fun+0x26>
 800b532:	3827      	subs	r0, #39	@ 0x27
 800b534:	e7f1      	b.n	800b51a <__hexdig_fun+0xa>
 800b536:	2000      	movs	r0, #0
 800b538:	4770      	bx	lr
	...

0800b53c <__gethex>:
 800b53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b540:	b085      	sub	sp, #20
 800b542:	468a      	mov	sl, r1
 800b544:	9302      	str	r3, [sp, #8]
 800b546:	680b      	ldr	r3, [r1, #0]
 800b548:	9001      	str	r0, [sp, #4]
 800b54a:	4690      	mov	r8, r2
 800b54c:	1c9c      	adds	r4, r3, #2
 800b54e:	46a1      	mov	r9, r4
 800b550:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b554:	2830      	cmp	r0, #48	@ 0x30
 800b556:	d0fa      	beq.n	800b54e <__gethex+0x12>
 800b558:	eba9 0303 	sub.w	r3, r9, r3
 800b55c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b560:	f7ff ffd6 	bl	800b510 <__hexdig_fun>
 800b564:	4605      	mov	r5, r0
 800b566:	2800      	cmp	r0, #0
 800b568:	d168      	bne.n	800b63c <__gethex+0x100>
 800b56a:	49a0      	ldr	r1, [pc, #640]	@ (800b7ec <__gethex+0x2b0>)
 800b56c:	2201      	movs	r2, #1
 800b56e:	4648      	mov	r0, r9
 800b570:	f7fe fa29 	bl	80099c6 <strncmp>
 800b574:	4607      	mov	r7, r0
 800b576:	2800      	cmp	r0, #0
 800b578:	d167      	bne.n	800b64a <__gethex+0x10e>
 800b57a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b57e:	4626      	mov	r6, r4
 800b580:	f7ff ffc6 	bl	800b510 <__hexdig_fun>
 800b584:	2800      	cmp	r0, #0
 800b586:	d062      	beq.n	800b64e <__gethex+0x112>
 800b588:	4623      	mov	r3, r4
 800b58a:	7818      	ldrb	r0, [r3, #0]
 800b58c:	2830      	cmp	r0, #48	@ 0x30
 800b58e:	4699      	mov	r9, r3
 800b590:	f103 0301 	add.w	r3, r3, #1
 800b594:	d0f9      	beq.n	800b58a <__gethex+0x4e>
 800b596:	f7ff ffbb 	bl	800b510 <__hexdig_fun>
 800b59a:	fab0 f580 	clz	r5, r0
 800b59e:	096d      	lsrs	r5, r5, #5
 800b5a0:	f04f 0b01 	mov.w	fp, #1
 800b5a4:	464a      	mov	r2, r9
 800b5a6:	4616      	mov	r6, r2
 800b5a8:	3201      	adds	r2, #1
 800b5aa:	7830      	ldrb	r0, [r6, #0]
 800b5ac:	f7ff ffb0 	bl	800b510 <__hexdig_fun>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	d1f8      	bne.n	800b5a6 <__gethex+0x6a>
 800b5b4:	498d      	ldr	r1, [pc, #564]	@ (800b7ec <__gethex+0x2b0>)
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	f7fe fa04 	bl	80099c6 <strncmp>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d13f      	bne.n	800b642 <__gethex+0x106>
 800b5c2:	b944      	cbnz	r4, 800b5d6 <__gethex+0x9a>
 800b5c4:	1c74      	adds	r4, r6, #1
 800b5c6:	4622      	mov	r2, r4
 800b5c8:	4616      	mov	r6, r2
 800b5ca:	3201      	adds	r2, #1
 800b5cc:	7830      	ldrb	r0, [r6, #0]
 800b5ce:	f7ff ff9f 	bl	800b510 <__hexdig_fun>
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	d1f8      	bne.n	800b5c8 <__gethex+0x8c>
 800b5d6:	1ba4      	subs	r4, r4, r6
 800b5d8:	00a7      	lsls	r7, r4, #2
 800b5da:	7833      	ldrb	r3, [r6, #0]
 800b5dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b5e0:	2b50      	cmp	r3, #80	@ 0x50
 800b5e2:	d13e      	bne.n	800b662 <__gethex+0x126>
 800b5e4:	7873      	ldrb	r3, [r6, #1]
 800b5e6:	2b2b      	cmp	r3, #43	@ 0x2b
 800b5e8:	d033      	beq.n	800b652 <__gethex+0x116>
 800b5ea:	2b2d      	cmp	r3, #45	@ 0x2d
 800b5ec:	d034      	beq.n	800b658 <__gethex+0x11c>
 800b5ee:	1c71      	adds	r1, r6, #1
 800b5f0:	2400      	movs	r4, #0
 800b5f2:	7808      	ldrb	r0, [r1, #0]
 800b5f4:	f7ff ff8c 	bl	800b510 <__hexdig_fun>
 800b5f8:	1e43      	subs	r3, r0, #1
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b18      	cmp	r3, #24
 800b5fe:	d830      	bhi.n	800b662 <__gethex+0x126>
 800b600:	f1a0 0210 	sub.w	r2, r0, #16
 800b604:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b608:	f7ff ff82 	bl	800b510 <__hexdig_fun>
 800b60c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b610:	fa5f fc8c 	uxtb.w	ip, ip
 800b614:	f1bc 0f18 	cmp.w	ip, #24
 800b618:	f04f 030a 	mov.w	r3, #10
 800b61c:	d91e      	bls.n	800b65c <__gethex+0x120>
 800b61e:	b104      	cbz	r4, 800b622 <__gethex+0xe6>
 800b620:	4252      	negs	r2, r2
 800b622:	4417      	add	r7, r2
 800b624:	f8ca 1000 	str.w	r1, [sl]
 800b628:	b1ed      	cbz	r5, 800b666 <__gethex+0x12a>
 800b62a:	f1bb 0f00 	cmp.w	fp, #0
 800b62e:	bf0c      	ite	eq
 800b630:	2506      	moveq	r5, #6
 800b632:	2500      	movne	r5, #0
 800b634:	4628      	mov	r0, r5
 800b636:	b005      	add	sp, #20
 800b638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63c:	2500      	movs	r5, #0
 800b63e:	462c      	mov	r4, r5
 800b640:	e7b0      	b.n	800b5a4 <__gethex+0x68>
 800b642:	2c00      	cmp	r4, #0
 800b644:	d1c7      	bne.n	800b5d6 <__gethex+0x9a>
 800b646:	4627      	mov	r7, r4
 800b648:	e7c7      	b.n	800b5da <__gethex+0x9e>
 800b64a:	464e      	mov	r6, r9
 800b64c:	462f      	mov	r7, r5
 800b64e:	2501      	movs	r5, #1
 800b650:	e7c3      	b.n	800b5da <__gethex+0x9e>
 800b652:	2400      	movs	r4, #0
 800b654:	1cb1      	adds	r1, r6, #2
 800b656:	e7cc      	b.n	800b5f2 <__gethex+0xb6>
 800b658:	2401      	movs	r4, #1
 800b65a:	e7fb      	b.n	800b654 <__gethex+0x118>
 800b65c:	fb03 0002 	mla	r0, r3, r2, r0
 800b660:	e7ce      	b.n	800b600 <__gethex+0xc4>
 800b662:	4631      	mov	r1, r6
 800b664:	e7de      	b.n	800b624 <__gethex+0xe8>
 800b666:	eba6 0309 	sub.w	r3, r6, r9
 800b66a:	3b01      	subs	r3, #1
 800b66c:	4629      	mov	r1, r5
 800b66e:	2b07      	cmp	r3, #7
 800b670:	dc0a      	bgt.n	800b688 <__gethex+0x14c>
 800b672:	9801      	ldr	r0, [sp, #4]
 800b674:	f000 fa8a 	bl	800bb8c <_Balloc>
 800b678:	4604      	mov	r4, r0
 800b67a:	b940      	cbnz	r0, 800b68e <__gethex+0x152>
 800b67c:	4b5c      	ldr	r3, [pc, #368]	@ (800b7f0 <__gethex+0x2b4>)
 800b67e:	4602      	mov	r2, r0
 800b680:	21e4      	movs	r1, #228	@ 0xe4
 800b682:	485c      	ldr	r0, [pc, #368]	@ (800b7f4 <__gethex+0x2b8>)
 800b684:	f001 ff64 	bl	800d550 <__assert_func>
 800b688:	3101      	adds	r1, #1
 800b68a:	105b      	asrs	r3, r3, #1
 800b68c:	e7ef      	b.n	800b66e <__gethex+0x132>
 800b68e:	f100 0a14 	add.w	sl, r0, #20
 800b692:	2300      	movs	r3, #0
 800b694:	4655      	mov	r5, sl
 800b696:	469b      	mov	fp, r3
 800b698:	45b1      	cmp	r9, r6
 800b69a:	d337      	bcc.n	800b70c <__gethex+0x1d0>
 800b69c:	f845 bb04 	str.w	fp, [r5], #4
 800b6a0:	eba5 050a 	sub.w	r5, r5, sl
 800b6a4:	10ad      	asrs	r5, r5, #2
 800b6a6:	6125      	str	r5, [r4, #16]
 800b6a8:	4658      	mov	r0, fp
 800b6aa:	f000 fb61 	bl	800bd70 <__hi0bits>
 800b6ae:	016d      	lsls	r5, r5, #5
 800b6b0:	f8d8 6000 	ldr.w	r6, [r8]
 800b6b4:	1a2d      	subs	r5, r5, r0
 800b6b6:	42b5      	cmp	r5, r6
 800b6b8:	dd54      	ble.n	800b764 <__gethex+0x228>
 800b6ba:	1bad      	subs	r5, r5, r6
 800b6bc:	4629      	mov	r1, r5
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f000 fef5 	bl	800c4ae <__any_on>
 800b6c4:	4681      	mov	r9, r0
 800b6c6:	b178      	cbz	r0, 800b6e8 <__gethex+0x1ac>
 800b6c8:	1e6b      	subs	r3, r5, #1
 800b6ca:	1159      	asrs	r1, r3, #5
 800b6cc:	f003 021f 	and.w	r2, r3, #31
 800b6d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b6d4:	f04f 0901 	mov.w	r9, #1
 800b6d8:	fa09 f202 	lsl.w	r2, r9, r2
 800b6dc:	420a      	tst	r2, r1
 800b6de:	d003      	beq.n	800b6e8 <__gethex+0x1ac>
 800b6e0:	454b      	cmp	r3, r9
 800b6e2:	dc36      	bgt.n	800b752 <__gethex+0x216>
 800b6e4:	f04f 0902 	mov.w	r9, #2
 800b6e8:	4629      	mov	r1, r5
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f7ff febe 	bl	800b46c <rshift>
 800b6f0:	442f      	add	r7, r5
 800b6f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6f6:	42bb      	cmp	r3, r7
 800b6f8:	da42      	bge.n	800b780 <__gethex+0x244>
 800b6fa:	9801      	ldr	r0, [sp, #4]
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	f000 fa85 	bl	800bc0c <_Bfree>
 800b702:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b704:	2300      	movs	r3, #0
 800b706:	6013      	str	r3, [r2, #0]
 800b708:	25a3      	movs	r5, #163	@ 0xa3
 800b70a:	e793      	b.n	800b634 <__gethex+0xf8>
 800b70c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b710:	2a2e      	cmp	r2, #46	@ 0x2e
 800b712:	d012      	beq.n	800b73a <__gethex+0x1fe>
 800b714:	2b20      	cmp	r3, #32
 800b716:	d104      	bne.n	800b722 <__gethex+0x1e6>
 800b718:	f845 bb04 	str.w	fp, [r5], #4
 800b71c:	f04f 0b00 	mov.w	fp, #0
 800b720:	465b      	mov	r3, fp
 800b722:	7830      	ldrb	r0, [r6, #0]
 800b724:	9303      	str	r3, [sp, #12]
 800b726:	f7ff fef3 	bl	800b510 <__hexdig_fun>
 800b72a:	9b03      	ldr	r3, [sp, #12]
 800b72c:	f000 000f 	and.w	r0, r0, #15
 800b730:	4098      	lsls	r0, r3
 800b732:	ea4b 0b00 	orr.w	fp, fp, r0
 800b736:	3304      	adds	r3, #4
 800b738:	e7ae      	b.n	800b698 <__gethex+0x15c>
 800b73a:	45b1      	cmp	r9, r6
 800b73c:	d8ea      	bhi.n	800b714 <__gethex+0x1d8>
 800b73e:	492b      	ldr	r1, [pc, #172]	@ (800b7ec <__gethex+0x2b0>)
 800b740:	9303      	str	r3, [sp, #12]
 800b742:	2201      	movs	r2, #1
 800b744:	4630      	mov	r0, r6
 800b746:	f7fe f93e 	bl	80099c6 <strncmp>
 800b74a:	9b03      	ldr	r3, [sp, #12]
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d1e1      	bne.n	800b714 <__gethex+0x1d8>
 800b750:	e7a2      	b.n	800b698 <__gethex+0x15c>
 800b752:	1ea9      	subs	r1, r5, #2
 800b754:	4620      	mov	r0, r4
 800b756:	f000 feaa 	bl	800c4ae <__any_on>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d0c2      	beq.n	800b6e4 <__gethex+0x1a8>
 800b75e:	f04f 0903 	mov.w	r9, #3
 800b762:	e7c1      	b.n	800b6e8 <__gethex+0x1ac>
 800b764:	da09      	bge.n	800b77a <__gethex+0x23e>
 800b766:	1b75      	subs	r5, r6, r5
 800b768:	4621      	mov	r1, r4
 800b76a:	9801      	ldr	r0, [sp, #4]
 800b76c:	462a      	mov	r2, r5
 800b76e:	f000 fc65 	bl	800c03c <__lshift>
 800b772:	1b7f      	subs	r7, r7, r5
 800b774:	4604      	mov	r4, r0
 800b776:	f100 0a14 	add.w	sl, r0, #20
 800b77a:	f04f 0900 	mov.w	r9, #0
 800b77e:	e7b8      	b.n	800b6f2 <__gethex+0x1b6>
 800b780:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b784:	42bd      	cmp	r5, r7
 800b786:	dd6f      	ble.n	800b868 <__gethex+0x32c>
 800b788:	1bed      	subs	r5, r5, r7
 800b78a:	42ae      	cmp	r6, r5
 800b78c:	dc34      	bgt.n	800b7f8 <__gethex+0x2bc>
 800b78e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b792:	2b02      	cmp	r3, #2
 800b794:	d022      	beq.n	800b7dc <__gethex+0x2a0>
 800b796:	2b03      	cmp	r3, #3
 800b798:	d024      	beq.n	800b7e4 <__gethex+0x2a8>
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d115      	bne.n	800b7ca <__gethex+0x28e>
 800b79e:	42ae      	cmp	r6, r5
 800b7a0:	d113      	bne.n	800b7ca <__gethex+0x28e>
 800b7a2:	2e01      	cmp	r6, #1
 800b7a4:	d10b      	bne.n	800b7be <__gethex+0x282>
 800b7a6:	9a02      	ldr	r2, [sp, #8]
 800b7a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b7ac:	6013      	str	r3, [r2, #0]
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	6123      	str	r3, [r4, #16]
 800b7b2:	f8ca 3000 	str.w	r3, [sl]
 800b7b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7b8:	2562      	movs	r5, #98	@ 0x62
 800b7ba:	601c      	str	r4, [r3, #0]
 800b7bc:	e73a      	b.n	800b634 <__gethex+0xf8>
 800b7be:	1e71      	subs	r1, r6, #1
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f000 fe74 	bl	800c4ae <__any_on>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d1ed      	bne.n	800b7a6 <__gethex+0x26a>
 800b7ca:	9801      	ldr	r0, [sp, #4]
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	f000 fa1d 	bl	800bc0c <_Bfree>
 800b7d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	6013      	str	r3, [r2, #0]
 800b7d8:	2550      	movs	r5, #80	@ 0x50
 800b7da:	e72b      	b.n	800b634 <__gethex+0xf8>
 800b7dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1f3      	bne.n	800b7ca <__gethex+0x28e>
 800b7e2:	e7e0      	b.n	800b7a6 <__gethex+0x26a>
 800b7e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1dd      	bne.n	800b7a6 <__gethex+0x26a>
 800b7ea:	e7ee      	b.n	800b7ca <__gethex+0x28e>
 800b7ec:	0800dc20 	.word	0x0800dc20
 800b7f0:	0800e7d8 	.word	0x0800e7d8
 800b7f4:	0800e7e9 	.word	0x0800e7e9
 800b7f8:	1e6f      	subs	r7, r5, #1
 800b7fa:	f1b9 0f00 	cmp.w	r9, #0
 800b7fe:	d130      	bne.n	800b862 <__gethex+0x326>
 800b800:	b127      	cbz	r7, 800b80c <__gethex+0x2d0>
 800b802:	4639      	mov	r1, r7
 800b804:	4620      	mov	r0, r4
 800b806:	f000 fe52 	bl	800c4ae <__any_on>
 800b80a:	4681      	mov	r9, r0
 800b80c:	117a      	asrs	r2, r7, #5
 800b80e:	2301      	movs	r3, #1
 800b810:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b814:	f007 071f 	and.w	r7, r7, #31
 800b818:	40bb      	lsls	r3, r7
 800b81a:	4213      	tst	r3, r2
 800b81c:	4629      	mov	r1, r5
 800b81e:	4620      	mov	r0, r4
 800b820:	bf18      	it	ne
 800b822:	f049 0902 	orrne.w	r9, r9, #2
 800b826:	f7ff fe21 	bl	800b46c <rshift>
 800b82a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b82e:	1b76      	subs	r6, r6, r5
 800b830:	2502      	movs	r5, #2
 800b832:	f1b9 0f00 	cmp.w	r9, #0
 800b836:	d047      	beq.n	800b8c8 <__gethex+0x38c>
 800b838:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b83c:	2b02      	cmp	r3, #2
 800b83e:	d015      	beq.n	800b86c <__gethex+0x330>
 800b840:	2b03      	cmp	r3, #3
 800b842:	d017      	beq.n	800b874 <__gethex+0x338>
 800b844:	2b01      	cmp	r3, #1
 800b846:	d109      	bne.n	800b85c <__gethex+0x320>
 800b848:	f019 0f02 	tst.w	r9, #2
 800b84c:	d006      	beq.n	800b85c <__gethex+0x320>
 800b84e:	f8da 3000 	ldr.w	r3, [sl]
 800b852:	ea49 0903 	orr.w	r9, r9, r3
 800b856:	f019 0f01 	tst.w	r9, #1
 800b85a:	d10e      	bne.n	800b87a <__gethex+0x33e>
 800b85c:	f045 0510 	orr.w	r5, r5, #16
 800b860:	e032      	b.n	800b8c8 <__gethex+0x38c>
 800b862:	f04f 0901 	mov.w	r9, #1
 800b866:	e7d1      	b.n	800b80c <__gethex+0x2d0>
 800b868:	2501      	movs	r5, #1
 800b86a:	e7e2      	b.n	800b832 <__gethex+0x2f6>
 800b86c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b86e:	f1c3 0301 	rsb	r3, r3, #1
 800b872:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b876:	2b00      	cmp	r3, #0
 800b878:	d0f0      	beq.n	800b85c <__gethex+0x320>
 800b87a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b87e:	f104 0314 	add.w	r3, r4, #20
 800b882:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b886:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b88a:	f04f 0c00 	mov.w	ip, #0
 800b88e:	4618      	mov	r0, r3
 800b890:	f853 2b04 	ldr.w	r2, [r3], #4
 800b894:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b898:	d01b      	beq.n	800b8d2 <__gethex+0x396>
 800b89a:	3201      	adds	r2, #1
 800b89c:	6002      	str	r2, [r0, #0]
 800b89e:	2d02      	cmp	r5, #2
 800b8a0:	f104 0314 	add.w	r3, r4, #20
 800b8a4:	d13c      	bne.n	800b920 <__gethex+0x3e4>
 800b8a6:	f8d8 2000 	ldr.w	r2, [r8]
 800b8aa:	3a01      	subs	r2, #1
 800b8ac:	42b2      	cmp	r2, r6
 800b8ae:	d109      	bne.n	800b8c4 <__gethex+0x388>
 800b8b0:	1171      	asrs	r1, r6, #5
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b8b8:	f006 061f 	and.w	r6, r6, #31
 800b8bc:	fa02 f606 	lsl.w	r6, r2, r6
 800b8c0:	421e      	tst	r6, r3
 800b8c2:	d13a      	bne.n	800b93a <__gethex+0x3fe>
 800b8c4:	f045 0520 	orr.w	r5, r5, #32
 800b8c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8ca:	601c      	str	r4, [r3, #0]
 800b8cc:	9b02      	ldr	r3, [sp, #8]
 800b8ce:	601f      	str	r7, [r3, #0]
 800b8d0:	e6b0      	b.n	800b634 <__gethex+0xf8>
 800b8d2:	4299      	cmp	r1, r3
 800b8d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b8d8:	d8d9      	bhi.n	800b88e <__gethex+0x352>
 800b8da:	68a3      	ldr	r3, [r4, #8]
 800b8dc:	459b      	cmp	fp, r3
 800b8de:	db17      	blt.n	800b910 <__gethex+0x3d4>
 800b8e0:	6861      	ldr	r1, [r4, #4]
 800b8e2:	9801      	ldr	r0, [sp, #4]
 800b8e4:	3101      	adds	r1, #1
 800b8e6:	f000 f951 	bl	800bb8c <_Balloc>
 800b8ea:	4681      	mov	r9, r0
 800b8ec:	b918      	cbnz	r0, 800b8f6 <__gethex+0x3ba>
 800b8ee:	4b1a      	ldr	r3, [pc, #104]	@ (800b958 <__gethex+0x41c>)
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	2184      	movs	r1, #132	@ 0x84
 800b8f4:	e6c5      	b.n	800b682 <__gethex+0x146>
 800b8f6:	6922      	ldr	r2, [r4, #16]
 800b8f8:	3202      	adds	r2, #2
 800b8fa:	f104 010c 	add.w	r1, r4, #12
 800b8fe:	0092      	lsls	r2, r2, #2
 800b900:	300c      	adds	r0, #12
 800b902:	f7fe fef5 	bl	800a6f0 <memcpy>
 800b906:	4621      	mov	r1, r4
 800b908:	9801      	ldr	r0, [sp, #4]
 800b90a:	f000 f97f 	bl	800bc0c <_Bfree>
 800b90e:	464c      	mov	r4, r9
 800b910:	6923      	ldr	r3, [r4, #16]
 800b912:	1c5a      	adds	r2, r3, #1
 800b914:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b918:	6122      	str	r2, [r4, #16]
 800b91a:	2201      	movs	r2, #1
 800b91c:	615a      	str	r2, [r3, #20]
 800b91e:	e7be      	b.n	800b89e <__gethex+0x362>
 800b920:	6922      	ldr	r2, [r4, #16]
 800b922:	455a      	cmp	r2, fp
 800b924:	dd0b      	ble.n	800b93e <__gethex+0x402>
 800b926:	2101      	movs	r1, #1
 800b928:	4620      	mov	r0, r4
 800b92a:	f7ff fd9f 	bl	800b46c <rshift>
 800b92e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b932:	3701      	adds	r7, #1
 800b934:	42bb      	cmp	r3, r7
 800b936:	f6ff aee0 	blt.w	800b6fa <__gethex+0x1be>
 800b93a:	2501      	movs	r5, #1
 800b93c:	e7c2      	b.n	800b8c4 <__gethex+0x388>
 800b93e:	f016 061f 	ands.w	r6, r6, #31
 800b942:	d0fa      	beq.n	800b93a <__gethex+0x3fe>
 800b944:	4453      	add	r3, sl
 800b946:	f1c6 0620 	rsb	r6, r6, #32
 800b94a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b94e:	f000 fa0f 	bl	800bd70 <__hi0bits>
 800b952:	42b0      	cmp	r0, r6
 800b954:	dbe7      	blt.n	800b926 <__gethex+0x3ea>
 800b956:	e7f0      	b.n	800b93a <__gethex+0x3fe>
 800b958:	0800e7d8 	.word	0x0800e7d8

0800b95c <L_shift>:
 800b95c:	f1c2 0208 	rsb	r2, r2, #8
 800b960:	0092      	lsls	r2, r2, #2
 800b962:	b570      	push	{r4, r5, r6, lr}
 800b964:	f1c2 0620 	rsb	r6, r2, #32
 800b968:	6843      	ldr	r3, [r0, #4]
 800b96a:	6804      	ldr	r4, [r0, #0]
 800b96c:	fa03 f506 	lsl.w	r5, r3, r6
 800b970:	432c      	orrs	r4, r5
 800b972:	40d3      	lsrs	r3, r2
 800b974:	6004      	str	r4, [r0, #0]
 800b976:	f840 3f04 	str.w	r3, [r0, #4]!
 800b97a:	4288      	cmp	r0, r1
 800b97c:	d3f4      	bcc.n	800b968 <L_shift+0xc>
 800b97e:	bd70      	pop	{r4, r5, r6, pc}

0800b980 <__match>:
 800b980:	b530      	push	{r4, r5, lr}
 800b982:	6803      	ldr	r3, [r0, #0]
 800b984:	3301      	adds	r3, #1
 800b986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b98a:	b914      	cbnz	r4, 800b992 <__match+0x12>
 800b98c:	6003      	str	r3, [r0, #0]
 800b98e:	2001      	movs	r0, #1
 800b990:	bd30      	pop	{r4, r5, pc}
 800b992:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b996:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b99a:	2d19      	cmp	r5, #25
 800b99c:	bf98      	it	ls
 800b99e:	3220      	addls	r2, #32
 800b9a0:	42a2      	cmp	r2, r4
 800b9a2:	d0f0      	beq.n	800b986 <__match+0x6>
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	e7f3      	b.n	800b990 <__match+0x10>

0800b9a8 <__hexnan>:
 800b9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ac:	680b      	ldr	r3, [r1, #0]
 800b9ae:	6801      	ldr	r1, [r0, #0]
 800b9b0:	115e      	asrs	r6, r3, #5
 800b9b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b9b6:	f013 031f 	ands.w	r3, r3, #31
 800b9ba:	b087      	sub	sp, #28
 800b9bc:	bf18      	it	ne
 800b9be:	3604      	addne	r6, #4
 800b9c0:	2500      	movs	r5, #0
 800b9c2:	1f37      	subs	r7, r6, #4
 800b9c4:	4682      	mov	sl, r0
 800b9c6:	4690      	mov	r8, r2
 800b9c8:	9301      	str	r3, [sp, #4]
 800b9ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800b9ce:	46b9      	mov	r9, r7
 800b9d0:	463c      	mov	r4, r7
 800b9d2:	9502      	str	r5, [sp, #8]
 800b9d4:	46ab      	mov	fp, r5
 800b9d6:	784a      	ldrb	r2, [r1, #1]
 800b9d8:	1c4b      	adds	r3, r1, #1
 800b9da:	9303      	str	r3, [sp, #12]
 800b9dc:	b342      	cbz	r2, 800ba30 <__hexnan+0x88>
 800b9de:	4610      	mov	r0, r2
 800b9e0:	9105      	str	r1, [sp, #20]
 800b9e2:	9204      	str	r2, [sp, #16]
 800b9e4:	f7ff fd94 	bl	800b510 <__hexdig_fun>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	d151      	bne.n	800ba90 <__hexnan+0xe8>
 800b9ec:	9a04      	ldr	r2, [sp, #16]
 800b9ee:	9905      	ldr	r1, [sp, #20]
 800b9f0:	2a20      	cmp	r2, #32
 800b9f2:	d818      	bhi.n	800ba26 <__hexnan+0x7e>
 800b9f4:	9b02      	ldr	r3, [sp, #8]
 800b9f6:	459b      	cmp	fp, r3
 800b9f8:	dd13      	ble.n	800ba22 <__hexnan+0x7a>
 800b9fa:	454c      	cmp	r4, r9
 800b9fc:	d206      	bcs.n	800ba0c <__hexnan+0x64>
 800b9fe:	2d07      	cmp	r5, #7
 800ba00:	dc04      	bgt.n	800ba0c <__hexnan+0x64>
 800ba02:	462a      	mov	r2, r5
 800ba04:	4649      	mov	r1, r9
 800ba06:	4620      	mov	r0, r4
 800ba08:	f7ff ffa8 	bl	800b95c <L_shift>
 800ba0c:	4544      	cmp	r4, r8
 800ba0e:	d952      	bls.n	800bab6 <__hexnan+0x10e>
 800ba10:	2300      	movs	r3, #0
 800ba12:	f1a4 0904 	sub.w	r9, r4, #4
 800ba16:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba1a:	f8cd b008 	str.w	fp, [sp, #8]
 800ba1e:	464c      	mov	r4, r9
 800ba20:	461d      	mov	r5, r3
 800ba22:	9903      	ldr	r1, [sp, #12]
 800ba24:	e7d7      	b.n	800b9d6 <__hexnan+0x2e>
 800ba26:	2a29      	cmp	r2, #41	@ 0x29
 800ba28:	d157      	bne.n	800bada <__hexnan+0x132>
 800ba2a:	3102      	adds	r1, #2
 800ba2c:	f8ca 1000 	str.w	r1, [sl]
 800ba30:	f1bb 0f00 	cmp.w	fp, #0
 800ba34:	d051      	beq.n	800bada <__hexnan+0x132>
 800ba36:	454c      	cmp	r4, r9
 800ba38:	d206      	bcs.n	800ba48 <__hexnan+0xa0>
 800ba3a:	2d07      	cmp	r5, #7
 800ba3c:	dc04      	bgt.n	800ba48 <__hexnan+0xa0>
 800ba3e:	462a      	mov	r2, r5
 800ba40:	4649      	mov	r1, r9
 800ba42:	4620      	mov	r0, r4
 800ba44:	f7ff ff8a 	bl	800b95c <L_shift>
 800ba48:	4544      	cmp	r4, r8
 800ba4a:	d936      	bls.n	800baba <__hexnan+0x112>
 800ba4c:	f1a8 0204 	sub.w	r2, r8, #4
 800ba50:	4623      	mov	r3, r4
 800ba52:	f853 1b04 	ldr.w	r1, [r3], #4
 800ba56:	f842 1f04 	str.w	r1, [r2, #4]!
 800ba5a:	429f      	cmp	r7, r3
 800ba5c:	d2f9      	bcs.n	800ba52 <__hexnan+0xaa>
 800ba5e:	1b3b      	subs	r3, r7, r4
 800ba60:	f023 0303 	bic.w	r3, r3, #3
 800ba64:	3304      	adds	r3, #4
 800ba66:	3401      	adds	r4, #1
 800ba68:	3e03      	subs	r6, #3
 800ba6a:	42b4      	cmp	r4, r6
 800ba6c:	bf88      	it	hi
 800ba6e:	2304      	movhi	r3, #4
 800ba70:	4443      	add	r3, r8
 800ba72:	2200      	movs	r2, #0
 800ba74:	f843 2b04 	str.w	r2, [r3], #4
 800ba78:	429f      	cmp	r7, r3
 800ba7a:	d2fb      	bcs.n	800ba74 <__hexnan+0xcc>
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	b91b      	cbnz	r3, 800ba88 <__hexnan+0xe0>
 800ba80:	4547      	cmp	r7, r8
 800ba82:	d128      	bne.n	800bad6 <__hexnan+0x12e>
 800ba84:	2301      	movs	r3, #1
 800ba86:	603b      	str	r3, [r7, #0]
 800ba88:	2005      	movs	r0, #5
 800ba8a:	b007      	add	sp, #28
 800ba8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba90:	3501      	adds	r5, #1
 800ba92:	2d08      	cmp	r5, #8
 800ba94:	f10b 0b01 	add.w	fp, fp, #1
 800ba98:	dd06      	ble.n	800baa8 <__hexnan+0x100>
 800ba9a:	4544      	cmp	r4, r8
 800ba9c:	d9c1      	bls.n	800ba22 <__hexnan+0x7a>
 800ba9e:	2300      	movs	r3, #0
 800baa0:	f844 3c04 	str.w	r3, [r4, #-4]
 800baa4:	2501      	movs	r5, #1
 800baa6:	3c04      	subs	r4, #4
 800baa8:	6822      	ldr	r2, [r4, #0]
 800baaa:	f000 000f 	and.w	r0, r0, #15
 800baae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bab2:	6020      	str	r0, [r4, #0]
 800bab4:	e7b5      	b.n	800ba22 <__hexnan+0x7a>
 800bab6:	2508      	movs	r5, #8
 800bab8:	e7b3      	b.n	800ba22 <__hexnan+0x7a>
 800baba:	9b01      	ldr	r3, [sp, #4]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d0dd      	beq.n	800ba7c <__hexnan+0xd4>
 800bac0:	f1c3 0320 	rsb	r3, r3, #32
 800bac4:	f04f 32ff 	mov.w	r2, #4294967295
 800bac8:	40da      	lsrs	r2, r3
 800baca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bace:	4013      	ands	r3, r2
 800bad0:	f846 3c04 	str.w	r3, [r6, #-4]
 800bad4:	e7d2      	b.n	800ba7c <__hexnan+0xd4>
 800bad6:	3f04      	subs	r7, #4
 800bad8:	e7d0      	b.n	800ba7c <__hexnan+0xd4>
 800bada:	2004      	movs	r0, #4
 800badc:	e7d5      	b.n	800ba8a <__hexnan+0xe2>
	...

0800bae0 <_findenv_r>:
 800bae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800bb54 <_findenv_r+0x74>
 800bae8:	4606      	mov	r6, r0
 800baea:	4689      	mov	r9, r1
 800baec:	4617      	mov	r7, r2
 800baee:	f001 fd61 	bl	800d5b4 <__env_lock>
 800baf2:	f8da 4000 	ldr.w	r4, [sl]
 800baf6:	b134      	cbz	r4, 800bb06 <_findenv_r+0x26>
 800baf8:	464b      	mov	r3, r9
 800bafa:	4698      	mov	r8, r3
 800bafc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb00:	b13a      	cbz	r2, 800bb12 <_findenv_r+0x32>
 800bb02:	2a3d      	cmp	r2, #61	@ 0x3d
 800bb04:	d1f9      	bne.n	800bafa <_findenv_r+0x1a>
 800bb06:	4630      	mov	r0, r6
 800bb08:	f001 fd5a 	bl	800d5c0 <__env_unlock>
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb12:	eba8 0809 	sub.w	r8, r8, r9
 800bb16:	46a3      	mov	fp, r4
 800bb18:	f854 0b04 	ldr.w	r0, [r4], #4
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d0f2      	beq.n	800bb06 <_findenv_r+0x26>
 800bb20:	4642      	mov	r2, r8
 800bb22:	4649      	mov	r1, r9
 800bb24:	f7fd ff4f 	bl	80099c6 <strncmp>
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	d1f4      	bne.n	800bb16 <_findenv_r+0x36>
 800bb2c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bb30:	eb03 0508 	add.w	r5, r3, r8
 800bb34:	f813 3008 	ldrb.w	r3, [r3, r8]
 800bb38:	2b3d      	cmp	r3, #61	@ 0x3d
 800bb3a:	d1ec      	bne.n	800bb16 <_findenv_r+0x36>
 800bb3c:	f8da 3000 	ldr.w	r3, [sl]
 800bb40:	ebab 0303 	sub.w	r3, fp, r3
 800bb44:	109b      	asrs	r3, r3, #2
 800bb46:	4630      	mov	r0, r6
 800bb48:	603b      	str	r3, [r7, #0]
 800bb4a:	f001 fd39 	bl	800d5c0 <__env_unlock>
 800bb4e:	1c68      	adds	r0, r5, #1
 800bb50:	e7dd      	b.n	800bb0e <_findenv_r+0x2e>
 800bb52:	bf00      	nop
 800bb54:	2000000c 	.word	0x2000000c

0800bb58 <_getenv_r>:
 800bb58:	b507      	push	{r0, r1, r2, lr}
 800bb5a:	aa01      	add	r2, sp, #4
 800bb5c:	f7ff ffc0 	bl	800bae0 <_findenv_r>
 800bb60:	b003      	add	sp, #12
 800bb62:	f85d fb04 	ldr.w	pc, [sp], #4

0800bb66 <__ascii_mbtowc>:
 800bb66:	b082      	sub	sp, #8
 800bb68:	b901      	cbnz	r1, 800bb6c <__ascii_mbtowc+0x6>
 800bb6a:	a901      	add	r1, sp, #4
 800bb6c:	b142      	cbz	r2, 800bb80 <__ascii_mbtowc+0x1a>
 800bb6e:	b14b      	cbz	r3, 800bb84 <__ascii_mbtowc+0x1e>
 800bb70:	7813      	ldrb	r3, [r2, #0]
 800bb72:	600b      	str	r3, [r1, #0]
 800bb74:	7812      	ldrb	r2, [r2, #0]
 800bb76:	1e10      	subs	r0, r2, #0
 800bb78:	bf18      	it	ne
 800bb7a:	2001      	movne	r0, #1
 800bb7c:	b002      	add	sp, #8
 800bb7e:	4770      	bx	lr
 800bb80:	4610      	mov	r0, r2
 800bb82:	e7fb      	b.n	800bb7c <__ascii_mbtowc+0x16>
 800bb84:	f06f 0001 	mvn.w	r0, #1
 800bb88:	e7f8      	b.n	800bb7c <__ascii_mbtowc+0x16>
	...

0800bb8c <_Balloc>:
 800bb8c:	b570      	push	{r4, r5, r6, lr}
 800bb8e:	69c6      	ldr	r6, [r0, #28]
 800bb90:	4604      	mov	r4, r0
 800bb92:	460d      	mov	r5, r1
 800bb94:	b976      	cbnz	r6, 800bbb4 <_Balloc+0x28>
 800bb96:	2010      	movs	r0, #16
 800bb98:	f7fb fea8 	bl	80078ec <malloc>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	61e0      	str	r0, [r4, #28]
 800bba0:	b920      	cbnz	r0, 800bbac <_Balloc+0x20>
 800bba2:	4b18      	ldr	r3, [pc, #96]	@ (800bc04 <_Balloc+0x78>)
 800bba4:	4818      	ldr	r0, [pc, #96]	@ (800bc08 <_Balloc+0x7c>)
 800bba6:	216b      	movs	r1, #107	@ 0x6b
 800bba8:	f001 fcd2 	bl	800d550 <__assert_func>
 800bbac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbb0:	6006      	str	r6, [r0, #0]
 800bbb2:	60c6      	str	r6, [r0, #12]
 800bbb4:	69e6      	ldr	r6, [r4, #28]
 800bbb6:	68f3      	ldr	r3, [r6, #12]
 800bbb8:	b183      	cbz	r3, 800bbdc <_Balloc+0x50>
 800bbba:	69e3      	ldr	r3, [r4, #28]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bbc2:	b9b8      	cbnz	r0, 800bbf4 <_Balloc+0x68>
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	fa01 f605 	lsl.w	r6, r1, r5
 800bbca:	1d72      	adds	r2, r6, #5
 800bbcc:	0092      	lsls	r2, r2, #2
 800bbce:	4620      	mov	r0, r4
 800bbd0:	f001 fcdc 	bl	800d58c <_calloc_r>
 800bbd4:	b160      	cbz	r0, 800bbf0 <_Balloc+0x64>
 800bbd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bbda:	e00e      	b.n	800bbfa <_Balloc+0x6e>
 800bbdc:	2221      	movs	r2, #33	@ 0x21
 800bbde:	2104      	movs	r1, #4
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f001 fcd3 	bl	800d58c <_calloc_r>
 800bbe6:	69e3      	ldr	r3, [r4, #28]
 800bbe8:	60f0      	str	r0, [r6, #12]
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1e4      	bne.n	800bbba <_Balloc+0x2e>
 800bbf0:	2000      	movs	r0, #0
 800bbf2:	bd70      	pop	{r4, r5, r6, pc}
 800bbf4:	6802      	ldr	r2, [r0, #0]
 800bbf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc00:	e7f7      	b.n	800bbf2 <_Balloc+0x66>
 800bc02:	bf00      	nop
 800bc04:	0800e769 	.word	0x0800e769
 800bc08:	0800e849 	.word	0x0800e849

0800bc0c <_Bfree>:
 800bc0c:	b570      	push	{r4, r5, r6, lr}
 800bc0e:	69c6      	ldr	r6, [r0, #28]
 800bc10:	4605      	mov	r5, r0
 800bc12:	460c      	mov	r4, r1
 800bc14:	b976      	cbnz	r6, 800bc34 <_Bfree+0x28>
 800bc16:	2010      	movs	r0, #16
 800bc18:	f7fb fe68 	bl	80078ec <malloc>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	61e8      	str	r0, [r5, #28]
 800bc20:	b920      	cbnz	r0, 800bc2c <_Bfree+0x20>
 800bc22:	4b09      	ldr	r3, [pc, #36]	@ (800bc48 <_Bfree+0x3c>)
 800bc24:	4809      	ldr	r0, [pc, #36]	@ (800bc4c <_Bfree+0x40>)
 800bc26:	218f      	movs	r1, #143	@ 0x8f
 800bc28:	f001 fc92 	bl	800d550 <__assert_func>
 800bc2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc30:	6006      	str	r6, [r0, #0]
 800bc32:	60c6      	str	r6, [r0, #12]
 800bc34:	b13c      	cbz	r4, 800bc46 <_Bfree+0x3a>
 800bc36:	69eb      	ldr	r3, [r5, #28]
 800bc38:	6862      	ldr	r2, [r4, #4]
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc40:	6021      	str	r1, [r4, #0]
 800bc42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc46:	bd70      	pop	{r4, r5, r6, pc}
 800bc48:	0800e769 	.word	0x0800e769
 800bc4c:	0800e849 	.word	0x0800e849

0800bc50 <__multadd>:
 800bc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc54:	690d      	ldr	r5, [r1, #16]
 800bc56:	4607      	mov	r7, r0
 800bc58:	460c      	mov	r4, r1
 800bc5a:	461e      	mov	r6, r3
 800bc5c:	f101 0c14 	add.w	ip, r1, #20
 800bc60:	2000      	movs	r0, #0
 800bc62:	f8dc 3000 	ldr.w	r3, [ip]
 800bc66:	b299      	uxth	r1, r3
 800bc68:	fb02 6101 	mla	r1, r2, r1, r6
 800bc6c:	0c1e      	lsrs	r6, r3, #16
 800bc6e:	0c0b      	lsrs	r3, r1, #16
 800bc70:	fb02 3306 	mla	r3, r2, r6, r3
 800bc74:	b289      	uxth	r1, r1
 800bc76:	3001      	adds	r0, #1
 800bc78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc7c:	4285      	cmp	r5, r0
 800bc7e:	f84c 1b04 	str.w	r1, [ip], #4
 800bc82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc86:	dcec      	bgt.n	800bc62 <__multadd+0x12>
 800bc88:	b30e      	cbz	r6, 800bcce <__multadd+0x7e>
 800bc8a:	68a3      	ldr	r3, [r4, #8]
 800bc8c:	42ab      	cmp	r3, r5
 800bc8e:	dc19      	bgt.n	800bcc4 <__multadd+0x74>
 800bc90:	6861      	ldr	r1, [r4, #4]
 800bc92:	4638      	mov	r0, r7
 800bc94:	3101      	adds	r1, #1
 800bc96:	f7ff ff79 	bl	800bb8c <_Balloc>
 800bc9a:	4680      	mov	r8, r0
 800bc9c:	b928      	cbnz	r0, 800bcaa <__multadd+0x5a>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	4b0c      	ldr	r3, [pc, #48]	@ (800bcd4 <__multadd+0x84>)
 800bca2:	480d      	ldr	r0, [pc, #52]	@ (800bcd8 <__multadd+0x88>)
 800bca4:	21ba      	movs	r1, #186	@ 0xba
 800bca6:	f001 fc53 	bl	800d550 <__assert_func>
 800bcaa:	6922      	ldr	r2, [r4, #16]
 800bcac:	3202      	adds	r2, #2
 800bcae:	f104 010c 	add.w	r1, r4, #12
 800bcb2:	0092      	lsls	r2, r2, #2
 800bcb4:	300c      	adds	r0, #12
 800bcb6:	f7fe fd1b 	bl	800a6f0 <memcpy>
 800bcba:	4621      	mov	r1, r4
 800bcbc:	4638      	mov	r0, r7
 800bcbe:	f7ff ffa5 	bl	800bc0c <_Bfree>
 800bcc2:	4644      	mov	r4, r8
 800bcc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bcc8:	3501      	adds	r5, #1
 800bcca:	615e      	str	r6, [r3, #20]
 800bccc:	6125      	str	r5, [r4, #16]
 800bcce:	4620      	mov	r0, r4
 800bcd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd4:	0800e7d8 	.word	0x0800e7d8
 800bcd8:	0800e849 	.word	0x0800e849

0800bcdc <__s2b>:
 800bcdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bce0:	460c      	mov	r4, r1
 800bce2:	4615      	mov	r5, r2
 800bce4:	461f      	mov	r7, r3
 800bce6:	2209      	movs	r2, #9
 800bce8:	3308      	adds	r3, #8
 800bcea:	4606      	mov	r6, r0
 800bcec:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	db09      	blt.n	800bd0c <__s2b+0x30>
 800bcf8:	4630      	mov	r0, r6
 800bcfa:	f7ff ff47 	bl	800bb8c <_Balloc>
 800bcfe:	b940      	cbnz	r0, 800bd12 <__s2b+0x36>
 800bd00:	4602      	mov	r2, r0
 800bd02:	4b19      	ldr	r3, [pc, #100]	@ (800bd68 <__s2b+0x8c>)
 800bd04:	4819      	ldr	r0, [pc, #100]	@ (800bd6c <__s2b+0x90>)
 800bd06:	21d3      	movs	r1, #211	@ 0xd3
 800bd08:	f001 fc22 	bl	800d550 <__assert_func>
 800bd0c:	0052      	lsls	r2, r2, #1
 800bd0e:	3101      	adds	r1, #1
 800bd10:	e7f0      	b.n	800bcf4 <__s2b+0x18>
 800bd12:	9b08      	ldr	r3, [sp, #32]
 800bd14:	6143      	str	r3, [r0, #20]
 800bd16:	2d09      	cmp	r5, #9
 800bd18:	f04f 0301 	mov.w	r3, #1
 800bd1c:	6103      	str	r3, [r0, #16]
 800bd1e:	dd16      	ble.n	800bd4e <__s2b+0x72>
 800bd20:	f104 0909 	add.w	r9, r4, #9
 800bd24:	46c8      	mov	r8, r9
 800bd26:	442c      	add	r4, r5
 800bd28:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bd2c:	4601      	mov	r1, r0
 800bd2e:	3b30      	subs	r3, #48	@ 0x30
 800bd30:	220a      	movs	r2, #10
 800bd32:	4630      	mov	r0, r6
 800bd34:	f7ff ff8c 	bl	800bc50 <__multadd>
 800bd38:	45a0      	cmp	r8, r4
 800bd3a:	d1f5      	bne.n	800bd28 <__s2b+0x4c>
 800bd3c:	f1a5 0408 	sub.w	r4, r5, #8
 800bd40:	444c      	add	r4, r9
 800bd42:	1b2d      	subs	r5, r5, r4
 800bd44:	1963      	adds	r3, r4, r5
 800bd46:	42bb      	cmp	r3, r7
 800bd48:	db04      	blt.n	800bd54 <__s2b+0x78>
 800bd4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd4e:	340a      	adds	r4, #10
 800bd50:	2509      	movs	r5, #9
 800bd52:	e7f6      	b.n	800bd42 <__s2b+0x66>
 800bd54:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bd58:	4601      	mov	r1, r0
 800bd5a:	3b30      	subs	r3, #48	@ 0x30
 800bd5c:	220a      	movs	r2, #10
 800bd5e:	4630      	mov	r0, r6
 800bd60:	f7ff ff76 	bl	800bc50 <__multadd>
 800bd64:	e7ee      	b.n	800bd44 <__s2b+0x68>
 800bd66:	bf00      	nop
 800bd68:	0800e7d8 	.word	0x0800e7d8
 800bd6c:	0800e849 	.word	0x0800e849

0800bd70 <__hi0bits>:
 800bd70:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bd74:	4603      	mov	r3, r0
 800bd76:	bf36      	itet	cc
 800bd78:	0403      	lslcc	r3, r0, #16
 800bd7a:	2000      	movcs	r0, #0
 800bd7c:	2010      	movcc	r0, #16
 800bd7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd82:	bf3c      	itt	cc
 800bd84:	021b      	lslcc	r3, r3, #8
 800bd86:	3008      	addcc	r0, #8
 800bd88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd8c:	bf3c      	itt	cc
 800bd8e:	011b      	lslcc	r3, r3, #4
 800bd90:	3004      	addcc	r0, #4
 800bd92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd96:	bf3c      	itt	cc
 800bd98:	009b      	lslcc	r3, r3, #2
 800bd9a:	3002      	addcc	r0, #2
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	db05      	blt.n	800bdac <__hi0bits+0x3c>
 800bda0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bda4:	f100 0001 	add.w	r0, r0, #1
 800bda8:	bf08      	it	eq
 800bdaa:	2020      	moveq	r0, #32
 800bdac:	4770      	bx	lr

0800bdae <__lo0bits>:
 800bdae:	6803      	ldr	r3, [r0, #0]
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	f013 0007 	ands.w	r0, r3, #7
 800bdb6:	d00b      	beq.n	800bdd0 <__lo0bits+0x22>
 800bdb8:	07d9      	lsls	r1, r3, #31
 800bdba:	d421      	bmi.n	800be00 <__lo0bits+0x52>
 800bdbc:	0798      	lsls	r0, r3, #30
 800bdbe:	bf49      	itett	mi
 800bdc0:	085b      	lsrmi	r3, r3, #1
 800bdc2:	089b      	lsrpl	r3, r3, #2
 800bdc4:	2001      	movmi	r0, #1
 800bdc6:	6013      	strmi	r3, [r2, #0]
 800bdc8:	bf5c      	itt	pl
 800bdca:	6013      	strpl	r3, [r2, #0]
 800bdcc:	2002      	movpl	r0, #2
 800bdce:	4770      	bx	lr
 800bdd0:	b299      	uxth	r1, r3
 800bdd2:	b909      	cbnz	r1, 800bdd8 <__lo0bits+0x2a>
 800bdd4:	0c1b      	lsrs	r3, r3, #16
 800bdd6:	2010      	movs	r0, #16
 800bdd8:	b2d9      	uxtb	r1, r3
 800bdda:	b909      	cbnz	r1, 800bde0 <__lo0bits+0x32>
 800bddc:	3008      	adds	r0, #8
 800bdde:	0a1b      	lsrs	r3, r3, #8
 800bde0:	0719      	lsls	r1, r3, #28
 800bde2:	bf04      	itt	eq
 800bde4:	091b      	lsreq	r3, r3, #4
 800bde6:	3004      	addeq	r0, #4
 800bde8:	0799      	lsls	r1, r3, #30
 800bdea:	bf04      	itt	eq
 800bdec:	089b      	lsreq	r3, r3, #2
 800bdee:	3002      	addeq	r0, #2
 800bdf0:	07d9      	lsls	r1, r3, #31
 800bdf2:	d403      	bmi.n	800bdfc <__lo0bits+0x4e>
 800bdf4:	085b      	lsrs	r3, r3, #1
 800bdf6:	f100 0001 	add.w	r0, r0, #1
 800bdfa:	d003      	beq.n	800be04 <__lo0bits+0x56>
 800bdfc:	6013      	str	r3, [r2, #0]
 800bdfe:	4770      	bx	lr
 800be00:	2000      	movs	r0, #0
 800be02:	4770      	bx	lr
 800be04:	2020      	movs	r0, #32
 800be06:	4770      	bx	lr

0800be08 <__i2b>:
 800be08:	b510      	push	{r4, lr}
 800be0a:	460c      	mov	r4, r1
 800be0c:	2101      	movs	r1, #1
 800be0e:	f7ff febd 	bl	800bb8c <_Balloc>
 800be12:	4602      	mov	r2, r0
 800be14:	b928      	cbnz	r0, 800be22 <__i2b+0x1a>
 800be16:	4b05      	ldr	r3, [pc, #20]	@ (800be2c <__i2b+0x24>)
 800be18:	4805      	ldr	r0, [pc, #20]	@ (800be30 <__i2b+0x28>)
 800be1a:	f240 1145 	movw	r1, #325	@ 0x145
 800be1e:	f001 fb97 	bl	800d550 <__assert_func>
 800be22:	2301      	movs	r3, #1
 800be24:	6144      	str	r4, [r0, #20]
 800be26:	6103      	str	r3, [r0, #16]
 800be28:	bd10      	pop	{r4, pc}
 800be2a:	bf00      	nop
 800be2c:	0800e7d8 	.word	0x0800e7d8
 800be30:	0800e849 	.word	0x0800e849

0800be34 <__multiply>:
 800be34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be38:	4614      	mov	r4, r2
 800be3a:	690a      	ldr	r2, [r1, #16]
 800be3c:	6923      	ldr	r3, [r4, #16]
 800be3e:	429a      	cmp	r2, r3
 800be40:	bfa8      	it	ge
 800be42:	4623      	movge	r3, r4
 800be44:	460f      	mov	r7, r1
 800be46:	bfa4      	itt	ge
 800be48:	460c      	movge	r4, r1
 800be4a:	461f      	movge	r7, r3
 800be4c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800be50:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800be54:	68a3      	ldr	r3, [r4, #8]
 800be56:	6861      	ldr	r1, [r4, #4]
 800be58:	eb0a 0609 	add.w	r6, sl, r9
 800be5c:	42b3      	cmp	r3, r6
 800be5e:	b085      	sub	sp, #20
 800be60:	bfb8      	it	lt
 800be62:	3101      	addlt	r1, #1
 800be64:	f7ff fe92 	bl	800bb8c <_Balloc>
 800be68:	b930      	cbnz	r0, 800be78 <__multiply+0x44>
 800be6a:	4602      	mov	r2, r0
 800be6c:	4b44      	ldr	r3, [pc, #272]	@ (800bf80 <__multiply+0x14c>)
 800be6e:	4845      	ldr	r0, [pc, #276]	@ (800bf84 <__multiply+0x150>)
 800be70:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800be74:	f001 fb6c 	bl	800d550 <__assert_func>
 800be78:	f100 0514 	add.w	r5, r0, #20
 800be7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be80:	462b      	mov	r3, r5
 800be82:	2200      	movs	r2, #0
 800be84:	4543      	cmp	r3, r8
 800be86:	d321      	bcc.n	800becc <__multiply+0x98>
 800be88:	f107 0114 	add.w	r1, r7, #20
 800be8c:	f104 0214 	add.w	r2, r4, #20
 800be90:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800be94:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800be98:	9302      	str	r3, [sp, #8]
 800be9a:	1b13      	subs	r3, r2, r4
 800be9c:	3b15      	subs	r3, #21
 800be9e:	f023 0303 	bic.w	r3, r3, #3
 800bea2:	3304      	adds	r3, #4
 800bea4:	f104 0715 	add.w	r7, r4, #21
 800bea8:	42ba      	cmp	r2, r7
 800beaa:	bf38      	it	cc
 800beac:	2304      	movcc	r3, #4
 800beae:	9301      	str	r3, [sp, #4]
 800beb0:	9b02      	ldr	r3, [sp, #8]
 800beb2:	9103      	str	r1, [sp, #12]
 800beb4:	428b      	cmp	r3, r1
 800beb6:	d80c      	bhi.n	800bed2 <__multiply+0x9e>
 800beb8:	2e00      	cmp	r6, #0
 800beba:	dd03      	ble.n	800bec4 <__multiply+0x90>
 800bebc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d05b      	beq.n	800bf7c <__multiply+0x148>
 800bec4:	6106      	str	r6, [r0, #16]
 800bec6:	b005      	add	sp, #20
 800bec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800becc:	f843 2b04 	str.w	r2, [r3], #4
 800bed0:	e7d8      	b.n	800be84 <__multiply+0x50>
 800bed2:	f8b1 a000 	ldrh.w	sl, [r1]
 800bed6:	f1ba 0f00 	cmp.w	sl, #0
 800beda:	d024      	beq.n	800bf26 <__multiply+0xf2>
 800bedc:	f104 0e14 	add.w	lr, r4, #20
 800bee0:	46a9      	mov	r9, r5
 800bee2:	f04f 0c00 	mov.w	ip, #0
 800bee6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800beea:	f8d9 3000 	ldr.w	r3, [r9]
 800beee:	fa1f fb87 	uxth.w	fp, r7
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	fb0a 330b 	mla	r3, sl, fp, r3
 800bef8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800befc:	f8d9 7000 	ldr.w	r7, [r9]
 800bf00:	4463      	add	r3, ip
 800bf02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bf06:	fb0a c70b 	mla	r7, sl, fp, ip
 800bf0a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf14:	4572      	cmp	r2, lr
 800bf16:	f849 3b04 	str.w	r3, [r9], #4
 800bf1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bf1e:	d8e2      	bhi.n	800bee6 <__multiply+0xb2>
 800bf20:	9b01      	ldr	r3, [sp, #4]
 800bf22:	f845 c003 	str.w	ip, [r5, r3]
 800bf26:	9b03      	ldr	r3, [sp, #12]
 800bf28:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bf2c:	3104      	adds	r1, #4
 800bf2e:	f1b9 0f00 	cmp.w	r9, #0
 800bf32:	d021      	beq.n	800bf78 <__multiply+0x144>
 800bf34:	682b      	ldr	r3, [r5, #0]
 800bf36:	f104 0c14 	add.w	ip, r4, #20
 800bf3a:	46ae      	mov	lr, r5
 800bf3c:	f04f 0a00 	mov.w	sl, #0
 800bf40:	f8bc b000 	ldrh.w	fp, [ip]
 800bf44:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bf48:	fb09 770b 	mla	r7, r9, fp, r7
 800bf4c:	4457      	add	r7, sl
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf54:	f84e 3b04 	str.w	r3, [lr], #4
 800bf58:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf60:	f8be 3000 	ldrh.w	r3, [lr]
 800bf64:	fb09 330a 	mla	r3, r9, sl, r3
 800bf68:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bf6c:	4562      	cmp	r2, ip
 800bf6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf72:	d8e5      	bhi.n	800bf40 <__multiply+0x10c>
 800bf74:	9f01      	ldr	r7, [sp, #4]
 800bf76:	51eb      	str	r3, [r5, r7]
 800bf78:	3504      	adds	r5, #4
 800bf7a:	e799      	b.n	800beb0 <__multiply+0x7c>
 800bf7c:	3e01      	subs	r6, #1
 800bf7e:	e79b      	b.n	800beb8 <__multiply+0x84>
 800bf80:	0800e7d8 	.word	0x0800e7d8
 800bf84:	0800e849 	.word	0x0800e849

0800bf88 <__pow5mult>:
 800bf88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf8c:	4615      	mov	r5, r2
 800bf8e:	f012 0203 	ands.w	r2, r2, #3
 800bf92:	4607      	mov	r7, r0
 800bf94:	460e      	mov	r6, r1
 800bf96:	d007      	beq.n	800bfa8 <__pow5mult+0x20>
 800bf98:	4c25      	ldr	r4, [pc, #148]	@ (800c030 <__pow5mult+0xa8>)
 800bf9a:	3a01      	subs	r2, #1
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bfa2:	f7ff fe55 	bl	800bc50 <__multadd>
 800bfa6:	4606      	mov	r6, r0
 800bfa8:	10ad      	asrs	r5, r5, #2
 800bfaa:	d03d      	beq.n	800c028 <__pow5mult+0xa0>
 800bfac:	69fc      	ldr	r4, [r7, #28]
 800bfae:	b97c      	cbnz	r4, 800bfd0 <__pow5mult+0x48>
 800bfb0:	2010      	movs	r0, #16
 800bfb2:	f7fb fc9b 	bl	80078ec <malloc>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	61f8      	str	r0, [r7, #28]
 800bfba:	b928      	cbnz	r0, 800bfc8 <__pow5mult+0x40>
 800bfbc:	4b1d      	ldr	r3, [pc, #116]	@ (800c034 <__pow5mult+0xac>)
 800bfbe:	481e      	ldr	r0, [pc, #120]	@ (800c038 <__pow5mult+0xb0>)
 800bfc0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bfc4:	f001 fac4 	bl	800d550 <__assert_func>
 800bfc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfcc:	6004      	str	r4, [r0, #0]
 800bfce:	60c4      	str	r4, [r0, #12]
 800bfd0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bfd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bfd8:	b94c      	cbnz	r4, 800bfee <__pow5mult+0x66>
 800bfda:	f240 2171 	movw	r1, #625	@ 0x271
 800bfde:	4638      	mov	r0, r7
 800bfe0:	f7ff ff12 	bl	800be08 <__i2b>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bfea:	4604      	mov	r4, r0
 800bfec:	6003      	str	r3, [r0, #0]
 800bfee:	f04f 0900 	mov.w	r9, #0
 800bff2:	07eb      	lsls	r3, r5, #31
 800bff4:	d50a      	bpl.n	800c00c <__pow5mult+0x84>
 800bff6:	4631      	mov	r1, r6
 800bff8:	4622      	mov	r2, r4
 800bffa:	4638      	mov	r0, r7
 800bffc:	f7ff ff1a 	bl	800be34 <__multiply>
 800c000:	4631      	mov	r1, r6
 800c002:	4680      	mov	r8, r0
 800c004:	4638      	mov	r0, r7
 800c006:	f7ff fe01 	bl	800bc0c <_Bfree>
 800c00a:	4646      	mov	r6, r8
 800c00c:	106d      	asrs	r5, r5, #1
 800c00e:	d00b      	beq.n	800c028 <__pow5mult+0xa0>
 800c010:	6820      	ldr	r0, [r4, #0]
 800c012:	b938      	cbnz	r0, 800c024 <__pow5mult+0x9c>
 800c014:	4622      	mov	r2, r4
 800c016:	4621      	mov	r1, r4
 800c018:	4638      	mov	r0, r7
 800c01a:	f7ff ff0b 	bl	800be34 <__multiply>
 800c01e:	6020      	str	r0, [r4, #0]
 800c020:	f8c0 9000 	str.w	r9, [r0]
 800c024:	4604      	mov	r4, r0
 800c026:	e7e4      	b.n	800bff2 <__pow5mult+0x6a>
 800c028:	4630      	mov	r0, r6
 800c02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c02e:	bf00      	nop
 800c030:	0800e8a4 	.word	0x0800e8a4
 800c034:	0800e769 	.word	0x0800e769
 800c038:	0800e849 	.word	0x0800e849

0800c03c <__lshift>:
 800c03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c040:	460c      	mov	r4, r1
 800c042:	6849      	ldr	r1, [r1, #4]
 800c044:	6923      	ldr	r3, [r4, #16]
 800c046:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c04a:	68a3      	ldr	r3, [r4, #8]
 800c04c:	4607      	mov	r7, r0
 800c04e:	4691      	mov	r9, r2
 800c050:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c054:	f108 0601 	add.w	r6, r8, #1
 800c058:	42b3      	cmp	r3, r6
 800c05a:	db0b      	blt.n	800c074 <__lshift+0x38>
 800c05c:	4638      	mov	r0, r7
 800c05e:	f7ff fd95 	bl	800bb8c <_Balloc>
 800c062:	4605      	mov	r5, r0
 800c064:	b948      	cbnz	r0, 800c07a <__lshift+0x3e>
 800c066:	4602      	mov	r2, r0
 800c068:	4b28      	ldr	r3, [pc, #160]	@ (800c10c <__lshift+0xd0>)
 800c06a:	4829      	ldr	r0, [pc, #164]	@ (800c110 <__lshift+0xd4>)
 800c06c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c070:	f001 fa6e 	bl	800d550 <__assert_func>
 800c074:	3101      	adds	r1, #1
 800c076:	005b      	lsls	r3, r3, #1
 800c078:	e7ee      	b.n	800c058 <__lshift+0x1c>
 800c07a:	2300      	movs	r3, #0
 800c07c:	f100 0114 	add.w	r1, r0, #20
 800c080:	f100 0210 	add.w	r2, r0, #16
 800c084:	4618      	mov	r0, r3
 800c086:	4553      	cmp	r3, sl
 800c088:	db33      	blt.n	800c0f2 <__lshift+0xb6>
 800c08a:	6920      	ldr	r0, [r4, #16]
 800c08c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c090:	f104 0314 	add.w	r3, r4, #20
 800c094:	f019 091f 	ands.w	r9, r9, #31
 800c098:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c09c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c0a0:	d02b      	beq.n	800c0fa <__lshift+0xbe>
 800c0a2:	f1c9 0e20 	rsb	lr, r9, #32
 800c0a6:	468a      	mov	sl, r1
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	6818      	ldr	r0, [r3, #0]
 800c0ac:	fa00 f009 	lsl.w	r0, r0, r9
 800c0b0:	4310      	orrs	r0, r2
 800c0b2:	f84a 0b04 	str.w	r0, [sl], #4
 800c0b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ba:	459c      	cmp	ip, r3
 800c0bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c0c0:	d8f3      	bhi.n	800c0aa <__lshift+0x6e>
 800c0c2:	ebac 0304 	sub.w	r3, ip, r4
 800c0c6:	3b15      	subs	r3, #21
 800c0c8:	f023 0303 	bic.w	r3, r3, #3
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	f104 0015 	add.w	r0, r4, #21
 800c0d2:	4584      	cmp	ip, r0
 800c0d4:	bf38      	it	cc
 800c0d6:	2304      	movcc	r3, #4
 800c0d8:	50ca      	str	r2, [r1, r3]
 800c0da:	b10a      	cbz	r2, 800c0e0 <__lshift+0xa4>
 800c0dc:	f108 0602 	add.w	r6, r8, #2
 800c0e0:	3e01      	subs	r6, #1
 800c0e2:	4638      	mov	r0, r7
 800c0e4:	612e      	str	r6, [r5, #16]
 800c0e6:	4621      	mov	r1, r4
 800c0e8:	f7ff fd90 	bl	800bc0c <_Bfree>
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	e7c5      	b.n	800c086 <__lshift+0x4a>
 800c0fa:	3904      	subs	r1, #4
 800c0fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c100:	f841 2f04 	str.w	r2, [r1, #4]!
 800c104:	459c      	cmp	ip, r3
 800c106:	d8f9      	bhi.n	800c0fc <__lshift+0xc0>
 800c108:	e7ea      	b.n	800c0e0 <__lshift+0xa4>
 800c10a:	bf00      	nop
 800c10c:	0800e7d8 	.word	0x0800e7d8
 800c110:	0800e849 	.word	0x0800e849

0800c114 <__mcmp>:
 800c114:	690a      	ldr	r2, [r1, #16]
 800c116:	4603      	mov	r3, r0
 800c118:	6900      	ldr	r0, [r0, #16]
 800c11a:	1a80      	subs	r0, r0, r2
 800c11c:	b530      	push	{r4, r5, lr}
 800c11e:	d10e      	bne.n	800c13e <__mcmp+0x2a>
 800c120:	3314      	adds	r3, #20
 800c122:	3114      	adds	r1, #20
 800c124:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c128:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c12c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c130:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c134:	4295      	cmp	r5, r2
 800c136:	d003      	beq.n	800c140 <__mcmp+0x2c>
 800c138:	d205      	bcs.n	800c146 <__mcmp+0x32>
 800c13a:	f04f 30ff 	mov.w	r0, #4294967295
 800c13e:	bd30      	pop	{r4, r5, pc}
 800c140:	42a3      	cmp	r3, r4
 800c142:	d3f3      	bcc.n	800c12c <__mcmp+0x18>
 800c144:	e7fb      	b.n	800c13e <__mcmp+0x2a>
 800c146:	2001      	movs	r0, #1
 800c148:	e7f9      	b.n	800c13e <__mcmp+0x2a>
	...

0800c14c <__mdiff>:
 800c14c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c150:	4689      	mov	r9, r1
 800c152:	4606      	mov	r6, r0
 800c154:	4611      	mov	r1, r2
 800c156:	4648      	mov	r0, r9
 800c158:	4614      	mov	r4, r2
 800c15a:	f7ff ffdb 	bl	800c114 <__mcmp>
 800c15e:	1e05      	subs	r5, r0, #0
 800c160:	d112      	bne.n	800c188 <__mdiff+0x3c>
 800c162:	4629      	mov	r1, r5
 800c164:	4630      	mov	r0, r6
 800c166:	f7ff fd11 	bl	800bb8c <_Balloc>
 800c16a:	4602      	mov	r2, r0
 800c16c:	b928      	cbnz	r0, 800c17a <__mdiff+0x2e>
 800c16e:	4b3f      	ldr	r3, [pc, #252]	@ (800c26c <__mdiff+0x120>)
 800c170:	f240 2137 	movw	r1, #567	@ 0x237
 800c174:	483e      	ldr	r0, [pc, #248]	@ (800c270 <__mdiff+0x124>)
 800c176:	f001 f9eb 	bl	800d550 <__assert_func>
 800c17a:	2301      	movs	r3, #1
 800c17c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c180:	4610      	mov	r0, r2
 800c182:	b003      	add	sp, #12
 800c184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c188:	bfbc      	itt	lt
 800c18a:	464b      	movlt	r3, r9
 800c18c:	46a1      	movlt	r9, r4
 800c18e:	4630      	mov	r0, r6
 800c190:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c194:	bfba      	itte	lt
 800c196:	461c      	movlt	r4, r3
 800c198:	2501      	movlt	r5, #1
 800c19a:	2500      	movge	r5, #0
 800c19c:	f7ff fcf6 	bl	800bb8c <_Balloc>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	b918      	cbnz	r0, 800c1ac <__mdiff+0x60>
 800c1a4:	4b31      	ldr	r3, [pc, #196]	@ (800c26c <__mdiff+0x120>)
 800c1a6:	f240 2145 	movw	r1, #581	@ 0x245
 800c1aa:	e7e3      	b.n	800c174 <__mdiff+0x28>
 800c1ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c1b0:	6926      	ldr	r6, [r4, #16]
 800c1b2:	60c5      	str	r5, [r0, #12]
 800c1b4:	f109 0310 	add.w	r3, r9, #16
 800c1b8:	f109 0514 	add.w	r5, r9, #20
 800c1bc:	f104 0e14 	add.w	lr, r4, #20
 800c1c0:	f100 0b14 	add.w	fp, r0, #20
 800c1c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c1c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c1cc:	9301      	str	r3, [sp, #4]
 800c1ce:	46d9      	mov	r9, fp
 800c1d0:	f04f 0c00 	mov.w	ip, #0
 800c1d4:	9b01      	ldr	r3, [sp, #4]
 800c1d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c1da:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c1de:	9301      	str	r3, [sp, #4]
 800c1e0:	fa1f f38a 	uxth.w	r3, sl
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	b283      	uxth	r3, r0
 800c1e8:	1acb      	subs	r3, r1, r3
 800c1ea:	0c00      	lsrs	r0, r0, #16
 800c1ec:	4463      	add	r3, ip
 800c1ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c1f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c1fc:	4576      	cmp	r6, lr
 800c1fe:	f849 3b04 	str.w	r3, [r9], #4
 800c202:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c206:	d8e5      	bhi.n	800c1d4 <__mdiff+0x88>
 800c208:	1b33      	subs	r3, r6, r4
 800c20a:	3b15      	subs	r3, #21
 800c20c:	f023 0303 	bic.w	r3, r3, #3
 800c210:	3415      	adds	r4, #21
 800c212:	3304      	adds	r3, #4
 800c214:	42a6      	cmp	r6, r4
 800c216:	bf38      	it	cc
 800c218:	2304      	movcc	r3, #4
 800c21a:	441d      	add	r5, r3
 800c21c:	445b      	add	r3, fp
 800c21e:	461e      	mov	r6, r3
 800c220:	462c      	mov	r4, r5
 800c222:	4544      	cmp	r4, r8
 800c224:	d30e      	bcc.n	800c244 <__mdiff+0xf8>
 800c226:	f108 0103 	add.w	r1, r8, #3
 800c22a:	1b49      	subs	r1, r1, r5
 800c22c:	f021 0103 	bic.w	r1, r1, #3
 800c230:	3d03      	subs	r5, #3
 800c232:	45a8      	cmp	r8, r5
 800c234:	bf38      	it	cc
 800c236:	2100      	movcc	r1, #0
 800c238:	440b      	add	r3, r1
 800c23a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c23e:	b191      	cbz	r1, 800c266 <__mdiff+0x11a>
 800c240:	6117      	str	r7, [r2, #16]
 800c242:	e79d      	b.n	800c180 <__mdiff+0x34>
 800c244:	f854 1b04 	ldr.w	r1, [r4], #4
 800c248:	46e6      	mov	lr, ip
 800c24a:	0c08      	lsrs	r0, r1, #16
 800c24c:	fa1c fc81 	uxtah	ip, ip, r1
 800c250:	4471      	add	r1, lr
 800c252:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c256:	b289      	uxth	r1, r1
 800c258:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c25c:	f846 1b04 	str.w	r1, [r6], #4
 800c260:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c264:	e7dd      	b.n	800c222 <__mdiff+0xd6>
 800c266:	3f01      	subs	r7, #1
 800c268:	e7e7      	b.n	800c23a <__mdiff+0xee>
 800c26a:	bf00      	nop
 800c26c:	0800e7d8 	.word	0x0800e7d8
 800c270:	0800e849 	.word	0x0800e849

0800c274 <__ulp>:
 800c274:	b082      	sub	sp, #8
 800c276:	ed8d 0b00 	vstr	d0, [sp]
 800c27a:	9a01      	ldr	r2, [sp, #4]
 800c27c:	4b0f      	ldr	r3, [pc, #60]	@ (800c2bc <__ulp+0x48>)
 800c27e:	4013      	ands	r3, r2
 800c280:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c284:	2b00      	cmp	r3, #0
 800c286:	dc08      	bgt.n	800c29a <__ulp+0x26>
 800c288:	425b      	negs	r3, r3
 800c28a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c28e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c292:	da04      	bge.n	800c29e <__ulp+0x2a>
 800c294:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c298:	4113      	asrs	r3, r2
 800c29a:	2200      	movs	r2, #0
 800c29c:	e008      	b.n	800c2b0 <__ulp+0x3c>
 800c29e:	f1a2 0314 	sub.w	r3, r2, #20
 800c2a2:	2b1e      	cmp	r3, #30
 800c2a4:	bfda      	itte	le
 800c2a6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c2aa:	40da      	lsrle	r2, r3
 800c2ac:	2201      	movgt	r2, #1
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	4610      	mov	r0, r2
 800c2b4:	ec41 0b10 	vmov	d0, r0, r1
 800c2b8:	b002      	add	sp, #8
 800c2ba:	4770      	bx	lr
 800c2bc:	7ff00000 	.word	0x7ff00000

0800c2c0 <__b2d>:
 800c2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c4:	6906      	ldr	r6, [r0, #16]
 800c2c6:	f100 0814 	add.w	r8, r0, #20
 800c2ca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c2ce:	1f37      	subs	r7, r6, #4
 800c2d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c2d4:	4610      	mov	r0, r2
 800c2d6:	f7ff fd4b 	bl	800bd70 <__hi0bits>
 800c2da:	f1c0 0320 	rsb	r3, r0, #32
 800c2de:	280a      	cmp	r0, #10
 800c2e0:	600b      	str	r3, [r1, #0]
 800c2e2:	491b      	ldr	r1, [pc, #108]	@ (800c350 <__b2d+0x90>)
 800c2e4:	dc15      	bgt.n	800c312 <__b2d+0x52>
 800c2e6:	f1c0 0c0b 	rsb	ip, r0, #11
 800c2ea:	fa22 f30c 	lsr.w	r3, r2, ip
 800c2ee:	45b8      	cmp	r8, r7
 800c2f0:	ea43 0501 	orr.w	r5, r3, r1
 800c2f4:	bf34      	ite	cc
 800c2f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c2fa:	2300      	movcs	r3, #0
 800c2fc:	3015      	adds	r0, #21
 800c2fe:	fa02 f000 	lsl.w	r0, r2, r0
 800c302:	fa23 f30c 	lsr.w	r3, r3, ip
 800c306:	4303      	orrs	r3, r0
 800c308:	461c      	mov	r4, r3
 800c30a:	ec45 4b10 	vmov	d0, r4, r5
 800c30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c312:	45b8      	cmp	r8, r7
 800c314:	bf3a      	itte	cc
 800c316:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c31a:	f1a6 0708 	subcc.w	r7, r6, #8
 800c31e:	2300      	movcs	r3, #0
 800c320:	380b      	subs	r0, #11
 800c322:	d012      	beq.n	800c34a <__b2d+0x8a>
 800c324:	f1c0 0120 	rsb	r1, r0, #32
 800c328:	fa23 f401 	lsr.w	r4, r3, r1
 800c32c:	4082      	lsls	r2, r0
 800c32e:	4322      	orrs	r2, r4
 800c330:	4547      	cmp	r7, r8
 800c332:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c336:	bf8c      	ite	hi
 800c338:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c33c:	2200      	movls	r2, #0
 800c33e:	4083      	lsls	r3, r0
 800c340:	40ca      	lsrs	r2, r1
 800c342:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c346:	4313      	orrs	r3, r2
 800c348:	e7de      	b.n	800c308 <__b2d+0x48>
 800c34a:	ea42 0501 	orr.w	r5, r2, r1
 800c34e:	e7db      	b.n	800c308 <__b2d+0x48>
 800c350:	3ff00000 	.word	0x3ff00000

0800c354 <__d2b>:
 800c354:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c358:	460f      	mov	r7, r1
 800c35a:	2101      	movs	r1, #1
 800c35c:	ec59 8b10 	vmov	r8, r9, d0
 800c360:	4616      	mov	r6, r2
 800c362:	f7ff fc13 	bl	800bb8c <_Balloc>
 800c366:	4604      	mov	r4, r0
 800c368:	b930      	cbnz	r0, 800c378 <__d2b+0x24>
 800c36a:	4602      	mov	r2, r0
 800c36c:	4b23      	ldr	r3, [pc, #140]	@ (800c3fc <__d2b+0xa8>)
 800c36e:	4824      	ldr	r0, [pc, #144]	@ (800c400 <__d2b+0xac>)
 800c370:	f240 310f 	movw	r1, #783	@ 0x30f
 800c374:	f001 f8ec 	bl	800d550 <__assert_func>
 800c378:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c37c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c380:	b10d      	cbz	r5, 800c386 <__d2b+0x32>
 800c382:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c386:	9301      	str	r3, [sp, #4]
 800c388:	f1b8 0300 	subs.w	r3, r8, #0
 800c38c:	d023      	beq.n	800c3d6 <__d2b+0x82>
 800c38e:	4668      	mov	r0, sp
 800c390:	9300      	str	r3, [sp, #0]
 800c392:	f7ff fd0c 	bl	800bdae <__lo0bits>
 800c396:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c39a:	b1d0      	cbz	r0, 800c3d2 <__d2b+0x7e>
 800c39c:	f1c0 0320 	rsb	r3, r0, #32
 800c3a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3a4:	430b      	orrs	r3, r1
 800c3a6:	40c2      	lsrs	r2, r0
 800c3a8:	6163      	str	r3, [r4, #20]
 800c3aa:	9201      	str	r2, [sp, #4]
 800c3ac:	9b01      	ldr	r3, [sp, #4]
 800c3ae:	61a3      	str	r3, [r4, #24]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	bf0c      	ite	eq
 800c3b4:	2201      	moveq	r2, #1
 800c3b6:	2202      	movne	r2, #2
 800c3b8:	6122      	str	r2, [r4, #16]
 800c3ba:	b1a5      	cbz	r5, 800c3e6 <__d2b+0x92>
 800c3bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c3c0:	4405      	add	r5, r0
 800c3c2:	603d      	str	r5, [r7, #0]
 800c3c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c3c8:	6030      	str	r0, [r6, #0]
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	b003      	add	sp, #12
 800c3ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3d2:	6161      	str	r1, [r4, #20]
 800c3d4:	e7ea      	b.n	800c3ac <__d2b+0x58>
 800c3d6:	a801      	add	r0, sp, #4
 800c3d8:	f7ff fce9 	bl	800bdae <__lo0bits>
 800c3dc:	9b01      	ldr	r3, [sp, #4]
 800c3de:	6163      	str	r3, [r4, #20]
 800c3e0:	3020      	adds	r0, #32
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	e7e8      	b.n	800c3b8 <__d2b+0x64>
 800c3e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c3ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c3ee:	6038      	str	r0, [r7, #0]
 800c3f0:	6918      	ldr	r0, [r3, #16]
 800c3f2:	f7ff fcbd 	bl	800bd70 <__hi0bits>
 800c3f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c3fa:	e7e5      	b.n	800c3c8 <__d2b+0x74>
 800c3fc:	0800e7d8 	.word	0x0800e7d8
 800c400:	0800e849 	.word	0x0800e849

0800c404 <__ratio>:
 800c404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c408:	b085      	sub	sp, #20
 800c40a:	e9cd 1000 	strd	r1, r0, [sp]
 800c40e:	a902      	add	r1, sp, #8
 800c410:	f7ff ff56 	bl	800c2c0 <__b2d>
 800c414:	9800      	ldr	r0, [sp, #0]
 800c416:	a903      	add	r1, sp, #12
 800c418:	ec55 4b10 	vmov	r4, r5, d0
 800c41c:	f7ff ff50 	bl	800c2c0 <__b2d>
 800c420:	9b01      	ldr	r3, [sp, #4]
 800c422:	6919      	ldr	r1, [r3, #16]
 800c424:	9b00      	ldr	r3, [sp, #0]
 800c426:	691b      	ldr	r3, [r3, #16]
 800c428:	1ac9      	subs	r1, r1, r3
 800c42a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c42e:	1a9b      	subs	r3, r3, r2
 800c430:	ec5b ab10 	vmov	sl, fp, d0
 800c434:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c438:	2b00      	cmp	r3, #0
 800c43a:	bfce      	itee	gt
 800c43c:	462a      	movgt	r2, r5
 800c43e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c442:	465a      	movle	r2, fp
 800c444:	462f      	mov	r7, r5
 800c446:	46d9      	mov	r9, fp
 800c448:	bfcc      	ite	gt
 800c44a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c44e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c452:	464b      	mov	r3, r9
 800c454:	4652      	mov	r2, sl
 800c456:	4620      	mov	r0, r4
 800c458:	4639      	mov	r1, r7
 800c45a:	f7f4 fa07 	bl	800086c <__aeabi_ddiv>
 800c45e:	ec41 0b10 	vmov	d0, r0, r1
 800c462:	b005      	add	sp, #20
 800c464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c468 <__copybits>:
 800c468:	3901      	subs	r1, #1
 800c46a:	b570      	push	{r4, r5, r6, lr}
 800c46c:	1149      	asrs	r1, r1, #5
 800c46e:	6914      	ldr	r4, [r2, #16]
 800c470:	3101      	adds	r1, #1
 800c472:	f102 0314 	add.w	r3, r2, #20
 800c476:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c47a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c47e:	1f05      	subs	r5, r0, #4
 800c480:	42a3      	cmp	r3, r4
 800c482:	d30c      	bcc.n	800c49e <__copybits+0x36>
 800c484:	1aa3      	subs	r3, r4, r2
 800c486:	3b11      	subs	r3, #17
 800c488:	f023 0303 	bic.w	r3, r3, #3
 800c48c:	3211      	adds	r2, #17
 800c48e:	42a2      	cmp	r2, r4
 800c490:	bf88      	it	hi
 800c492:	2300      	movhi	r3, #0
 800c494:	4418      	add	r0, r3
 800c496:	2300      	movs	r3, #0
 800c498:	4288      	cmp	r0, r1
 800c49a:	d305      	bcc.n	800c4a8 <__copybits+0x40>
 800c49c:	bd70      	pop	{r4, r5, r6, pc}
 800c49e:	f853 6b04 	ldr.w	r6, [r3], #4
 800c4a2:	f845 6f04 	str.w	r6, [r5, #4]!
 800c4a6:	e7eb      	b.n	800c480 <__copybits+0x18>
 800c4a8:	f840 3b04 	str.w	r3, [r0], #4
 800c4ac:	e7f4      	b.n	800c498 <__copybits+0x30>

0800c4ae <__any_on>:
 800c4ae:	f100 0214 	add.w	r2, r0, #20
 800c4b2:	6900      	ldr	r0, [r0, #16]
 800c4b4:	114b      	asrs	r3, r1, #5
 800c4b6:	4298      	cmp	r0, r3
 800c4b8:	b510      	push	{r4, lr}
 800c4ba:	db11      	blt.n	800c4e0 <__any_on+0x32>
 800c4bc:	dd0a      	ble.n	800c4d4 <__any_on+0x26>
 800c4be:	f011 011f 	ands.w	r1, r1, #31
 800c4c2:	d007      	beq.n	800c4d4 <__any_on+0x26>
 800c4c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c4c8:	fa24 f001 	lsr.w	r0, r4, r1
 800c4cc:	fa00 f101 	lsl.w	r1, r0, r1
 800c4d0:	428c      	cmp	r4, r1
 800c4d2:	d10b      	bne.n	800c4ec <__any_on+0x3e>
 800c4d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d803      	bhi.n	800c4e4 <__any_on+0x36>
 800c4dc:	2000      	movs	r0, #0
 800c4de:	bd10      	pop	{r4, pc}
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	e7f7      	b.n	800c4d4 <__any_on+0x26>
 800c4e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4e8:	2900      	cmp	r1, #0
 800c4ea:	d0f5      	beq.n	800c4d8 <__any_on+0x2a>
 800c4ec:	2001      	movs	r0, #1
 800c4ee:	e7f6      	b.n	800c4de <__any_on+0x30>

0800c4f0 <_strtoul_l.constprop.0>:
 800c4f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4f4:	4e34      	ldr	r6, [pc, #208]	@ (800c5c8 <_strtoul_l.constprop.0+0xd8>)
 800c4f6:	4686      	mov	lr, r0
 800c4f8:	460d      	mov	r5, r1
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c500:	5d37      	ldrb	r7, [r6, r4]
 800c502:	f017 0708 	ands.w	r7, r7, #8
 800c506:	d1f8      	bne.n	800c4fa <_strtoul_l.constprop.0+0xa>
 800c508:	2c2d      	cmp	r4, #45	@ 0x2d
 800c50a:	d12f      	bne.n	800c56c <_strtoul_l.constprop.0+0x7c>
 800c50c:	782c      	ldrb	r4, [r5, #0]
 800c50e:	2701      	movs	r7, #1
 800c510:	1c85      	adds	r5, r0, #2
 800c512:	f033 0010 	bics.w	r0, r3, #16
 800c516:	d109      	bne.n	800c52c <_strtoul_l.constprop.0+0x3c>
 800c518:	2c30      	cmp	r4, #48	@ 0x30
 800c51a:	d12c      	bne.n	800c576 <_strtoul_l.constprop.0+0x86>
 800c51c:	7828      	ldrb	r0, [r5, #0]
 800c51e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800c522:	2858      	cmp	r0, #88	@ 0x58
 800c524:	d127      	bne.n	800c576 <_strtoul_l.constprop.0+0x86>
 800c526:	786c      	ldrb	r4, [r5, #1]
 800c528:	2310      	movs	r3, #16
 800c52a:	3502      	adds	r5, #2
 800c52c:	f04f 38ff 	mov.w	r8, #4294967295
 800c530:	2600      	movs	r6, #0
 800c532:	fbb8 f8f3 	udiv	r8, r8, r3
 800c536:	fb03 f908 	mul.w	r9, r3, r8
 800c53a:	ea6f 0909 	mvn.w	r9, r9
 800c53e:	4630      	mov	r0, r6
 800c540:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800c544:	f1bc 0f09 	cmp.w	ip, #9
 800c548:	d81c      	bhi.n	800c584 <_strtoul_l.constprop.0+0x94>
 800c54a:	4664      	mov	r4, ip
 800c54c:	42a3      	cmp	r3, r4
 800c54e:	dd2a      	ble.n	800c5a6 <_strtoul_l.constprop.0+0xb6>
 800c550:	f1b6 3fff 	cmp.w	r6, #4294967295
 800c554:	d007      	beq.n	800c566 <_strtoul_l.constprop.0+0x76>
 800c556:	4580      	cmp	r8, r0
 800c558:	d322      	bcc.n	800c5a0 <_strtoul_l.constprop.0+0xb0>
 800c55a:	d101      	bne.n	800c560 <_strtoul_l.constprop.0+0x70>
 800c55c:	45a1      	cmp	r9, r4
 800c55e:	db1f      	blt.n	800c5a0 <_strtoul_l.constprop.0+0xb0>
 800c560:	fb00 4003 	mla	r0, r0, r3, r4
 800c564:	2601      	movs	r6, #1
 800c566:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c56a:	e7e9      	b.n	800c540 <_strtoul_l.constprop.0+0x50>
 800c56c:	2c2b      	cmp	r4, #43	@ 0x2b
 800c56e:	bf04      	itt	eq
 800c570:	782c      	ldrbeq	r4, [r5, #0]
 800c572:	1c85      	addeq	r5, r0, #2
 800c574:	e7cd      	b.n	800c512 <_strtoul_l.constprop.0+0x22>
 800c576:	2b00      	cmp	r3, #0
 800c578:	d1d8      	bne.n	800c52c <_strtoul_l.constprop.0+0x3c>
 800c57a:	2c30      	cmp	r4, #48	@ 0x30
 800c57c:	bf0c      	ite	eq
 800c57e:	2308      	moveq	r3, #8
 800c580:	230a      	movne	r3, #10
 800c582:	e7d3      	b.n	800c52c <_strtoul_l.constprop.0+0x3c>
 800c584:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800c588:	f1bc 0f19 	cmp.w	ip, #25
 800c58c:	d801      	bhi.n	800c592 <_strtoul_l.constprop.0+0xa2>
 800c58e:	3c37      	subs	r4, #55	@ 0x37
 800c590:	e7dc      	b.n	800c54c <_strtoul_l.constprop.0+0x5c>
 800c592:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800c596:	f1bc 0f19 	cmp.w	ip, #25
 800c59a:	d804      	bhi.n	800c5a6 <_strtoul_l.constprop.0+0xb6>
 800c59c:	3c57      	subs	r4, #87	@ 0x57
 800c59e:	e7d5      	b.n	800c54c <_strtoul_l.constprop.0+0x5c>
 800c5a0:	f04f 36ff 	mov.w	r6, #4294967295
 800c5a4:	e7df      	b.n	800c566 <_strtoul_l.constprop.0+0x76>
 800c5a6:	1c73      	adds	r3, r6, #1
 800c5a8:	d106      	bne.n	800c5b8 <_strtoul_l.constprop.0+0xc8>
 800c5aa:	2322      	movs	r3, #34	@ 0x22
 800c5ac:	f8ce 3000 	str.w	r3, [lr]
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	b932      	cbnz	r2, 800c5c2 <_strtoul_l.constprop.0+0xd2>
 800c5b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5b8:	b107      	cbz	r7, 800c5bc <_strtoul_l.constprop.0+0xcc>
 800c5ba:	4240      	negs	r0, r0
 800c5bc:	2a00      	cmp	r2, #0
 800c5be:	d0f9      	beq.n	800c5b4 <_strtoul_l.constprop.0+0xc4>
 800c5c0:	b106      	cbz	r6, 800c5c4 <_strtoul_l.constprop.0+0xd4>
 800c5c2:	1e69      	subs	r1, r5, #1
 800c5c4:	6011      	str	r1, [r2, #0]
 800c5c6:	e7f5      	b.n	800c5b4 <_strtoul_l.constprop.0+0xc4>
 800c5c8:	0800e571 	.word	0x0800e571

0800c5cc <_strtoul_r>:
 800c5cc:	f7ff bf90 	b.w	800c4f0 <_strtoul_l.constprop.0>

0800c5d0 <strtoul>:
 800c5d0:	4613      	mov	r3, r2
 800c5d2:	460a      	mov	r2, r1
 800c5d4:	4601      	mov	r1, r0
 800c5d6:	4802      	ldr	r0, [pc, #8]	@ (800c5e0 <strtoul+0x10>)
 800c5d8:	6800      	ldr	r0, [r0, #0]
 800c5da:	f7ff bf89 	b.w	800c4f0 <_strtoul_l.constprop.0>
 800c5de:	bf00      	nop
 800c5e0:	200001a0 	.word	0x200001a0

0800c5e4 <__ascii_wctomb>:
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	4608      	mov	r0, r1
 800c5e8:	b141      	cbz	r1, 800c5fc <__ascii_wctomb+0x18>
 800c5ea:	2aff      	cmp	r2, #255	@ 0xff
 800c5ec:	d904      	bls.n	800c5f8 <__ascii_wctomb+0x14>
 800c5ee:	228a      	movs	r2, #138	@ 0x8a
 800c5f0:	601a      	str	r2, [r3, #0]
 800c5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f6:	4770      	bx	lr
 800c5f8:	700a      	strb	r2, [r1, #0]
 800c5fa:	2001      	movs	r0, #1
 800c5fc:	4770      	bx	lr

0800c5fe <__ssputs_r>:
 800c5fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c602:	688e      	ldr	r6, [r1, #8]
 800c604:	461f      	mov	r7, r3
 800c606:	42be      	cmp	r6, r7
 800c608:	680b      	ldr	r3, [r1, #0]
 800c60a:	4682      	mov	sl, r0
 800c60c:	460c      	mov	r4, r1
 800c60e:	4690      	mov	r8, r2
 800c610:	d82d      	bhi.n	800c66e <__ssputs_r+0x70>
 800c612:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c616:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c61a:	d026      	beq.n	800c66a <__ssputs_r+0x6c>
 800c61c:	6965      	ldr	r5, [r4, #20]
 800c61e:	6909      	ldr	r1, [r1, #16]
 800c620:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c624:	eba3 0901 	sub.w	r9, r3, r1
 800c628:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c62c:	1c7b      	adds	r3, r7, #1
 800c62e:	444b      	add	r3, r9
 800c630:	106d      	asrs	r5, r5, #1
 800c632:	429d      	cmp	r5, r3
 800c634:	bf38      	it	cc
 800c636:	461d      	movcc	r5, r3
 800c638:	0553      	lsls	r3, r2, #21
 800c63a:	d527      	bpl.n	800c68c <__ssputs_r+0x8e>
 800c63c:	4629      	mov	r1, r5
 800c63e:	f7fb f987 	bl	8007950 <_malloc_r>
 800c642:	4606      	mov	r6, r0
 800c644:	b360      	cbz	r0, 800c6a0 <__ssputs_r+0xa2>
 800c646:	6921      	ldr	r1, [r4, #16]
 800c648:	464a      	mov	r2, r9
 800c64a:	f7fe f851 	bl	800a6f0 <memcpy>
 800c64e:	89a3      	ldrh	r3, [r4, #12]
 800c650:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c658:	81a3      	strh	r3, [r4, #12]
 800c65a:	6126      	str	r6, [r4, #16]
 800c65c:	6165      	str	r5, [r4, #20]
 800c65e:	444e      	add	r6, r9
 800c660:	eba5 0509 	sub.w	r5, r5, r9
 800c664:	6026      	str	r6, [r4, #0]
 800c666:	60a5      	str	r5, [r4, #8]
 800c668:	463e      	mov	r6, r7
 800c66a:	42be      	cmp	r6, r7
 800c66c:	d900      	bls.n	800c670 <__ssputs_r+0x72>
 800c66e:	463e      	mov	r6, r7
 800c670:	6820      	ldr	r0, [r4, #0]
 800c672:	4632      	mov	r2, r6
 800c674:	4641      	mov	r1, r8
 800c676:	f000 ff2a 	bl	800d4ce <memmove>
 800c67a:	68a3      	ldr	r3, [r4, #8]
 800c67c:	1b9b      	subs	r3, r3, r6
 800c67e:	60a3      	str	r3, [r4, #8]
 800c680:	6823      	ldr	r3, [r4, #0]
 800c682:	4433      	add	r3, r6
 800c684:	6023      	str	r3, [r4, #0]
 800c686:	2000      	movs	r0, #0
 800c688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c68c:	462a      	mov	r2, r5
 800c68e:	f000 ff9d 	bl	800d5cc <_realloc_r>
 800c692:	4606      	mov	r6, r0
 800c694:	2800      	cmp	r0, #0
 800c696:	d1e0      	bne.n	800c65a <__ssputs_r+0x5c>
 800c698:	6921      	ldr	r1, [r4, #16]
 800c69a:	4650      	mov	r0, sl
 800c69c:	f7fe fe9c 	bl	800b3d8 <_free_r>
 800c6a0:	230c      	movs	r3, #12
 800c6a2:	f8ca 3000 	str.w	r3, [sl]
 800c6a6:	89a3      	ldrh	r3, [r4, #12]
 800c6a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6ac:	81a3      	strh	r3, [r4, #12]
 800c6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b2:	e7e9      	b.n	800c688 <__ssputs_r+0x8a>

0800c6b4 <_svfiprintf_r>:
 800c6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b8:	4698      	mov	r8, r3
 800c6ba:	898b      	ldrh	r3, [r1, #12]
 800c6bc:	061b      	lsls	r3, r3, #24
 800c6be:	b09d      	sub	sp, #116	@ 0x74
 800c6c0:	4607      	mov	r7, r0
 800c6c2:	460d      	mov	r5, r1
 800c6c4:	4614      	mov	r4, r2
 800c6c6:	d510      	bpl.n	800c6ea <_svfiprintf_r+0x36>
 800c6c8:	690b      	ldr	r3, [r1, #16]
 800c6ca:	b973      	cbnz	r3, 800c6ea <_svfiprintf_r+0x36>
 800c6cc:	2140      	movs	r1, #64	@ 0x40
 800c6ce:	f7fb f93f 	bl	8007950 <_malloc_r>
 800c6d2:	6028      	str	r0, [r5, #0]
 800c6d4:	6128      	str	r0, [r5, #16]
 800c6d6:	b930      	cbnz	r0, 800c6e6 <_svfiprintf_r+0x32>
 800c6d8:	230c      	movs	r3, #12
 800c6da:	603b      	str	r3, [r7, #0]
 800c6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e0:	b01d      	add	sp, #116	@ 0x74
 800c6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e6:	2340      	movs	r3, #64	@ 0x40
 800c6e8:	616b      	str	r3, [r5, #20]
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6ee:	2320      	movs	r3, #32
 800c6f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6f8:	2330      	movs	r3, #48	@ 0x30
 800c6fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c898 <_svfiprintf_r+0x1e4>
 800c6fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c702:	f04f 0901 	mov.w	r9, #1
 800c706:	4623      	mov	r3, r4
 800c708:	469a      	mov	sl, r3
 800c70a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c70e:	b10a      	cbz	r2, 800c714 <_svfiprintf_r+0x60>
 800c710:	2a25      	cmp	r2, #37	@ 0x25
 800c712:	d1f9      	bne.n	800c708 <_svfiprintf_r+0x54>
 800c714:	ebba 0b04 	subs.w	fp, sl, r4
 800c718:	d00b      	beq.n	800c732 <_svfiprintf_r+0x7e>
 800c71a:	465b      	mov	r3, fp
 800c71c:	4622      	mov	r2, r4
 800c71e:	4629      	mov	r1, r5
 800c720:	4638      	mov	r0, r7
 800c722:	f7ff ff6c 	bl	800c5fe <__ssputs_r>
 800c726:	3001      	adds	r0, #1
 800c728:	f000 80a7 	beq.w	800c87a <_svfiprintf_r+0x1c6>
 800c72c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c72e:	445a      	add	r2, fp
 800c730:	9209      	str	r2, [sp, #36]	@ 0x24
 800c732:	f89a 3000 	ldrb.w	r3, [sl]
 800c736:	2b00      	cmp	r3, #0
 800c738:	f000 809f 	beq.w	800c87a <_svfiprintf_r+0x1c6>
 800c73c:	2300      	movs	r3, #0
 800c73e:	f04f 32ff 	mov.w	r2, #4294967295
 800c742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c746:	f10a 0a01 	add.w	sl, sl, #1
 800c74a:	9304      	str	r3, [sp, #16]
 800c74c:	9307      	str	r3, [sp, #28]
 800c74e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c752:	931a      	str	r3, [sp, #104]	@ 0x68
 800c754:	4654      	mov	r4, sl
 800c756:	2205      	movs	r2, #5
 800c758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c75c:	484e      	ldr	r0, [pc, #312]	@ (800c898 <_svfiprintf_r+0x1e4>)
 800c75e:	f7f3 fd47 	bl	80001f0 <memchr>
 800c762:	9a04      	ldr	r2, [sp, #16]
 800c764:	b9d8      	cbnz	r0, 800c79e <_svfiprintf_r+0xea>
 800c766:	06d0      	lsls	r0, r2, #27
 800c768:	bf44      	itt	mi
 800c76a:	2320      	movmi	r3, #32
 800c76c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c770:	0711      	lsls	r1, r2, #28
 800c772:	bf44      	itt	mi
 800c774:	232b      	movmi	r3, #43	@ 0x2b
 800c776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c77a:	f89a 3000 	ldrb.w	r3, [sl]
 800c77e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c780:	d015      	beq.n	800c7ae <_svfiprintf_r+0xfa>
 800c782:	9a07      	ldr	r2, [sp, #28]
 800c784:	4654      	mov	r4, sl
 800c786:	2000      	movs	r0, #0
 800c788:	f04f 0c0a 	mov.w	ip, #10
 800c78c:	4621      	mov	r1, r4
 800c78e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c792:	3b30      	subs	r3, #48	@ 0x30
 800c794:	2b09      	cmp	r3, #9
 800c796:	d94b      	bls.n	800c830 <_svfiprintf_r+0x17c>
 800c798:	b1b0      	cbz	r0, 800c7c8 <_svfiprintf_r+0x114>
 800c79a:	9207      	str	r2, [sp, #28]
 800c79c:	e014      	b.n	800c7c8 <_svfiprintf_r+0x114>
 800c79e:	eba0 0308 	sub.w	r3, r0, r8
 800c7a2:	fa09 f303 	lsl.w	r3, r9, r3
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	9304      	str	r3, [sp, #16]
 800c7aa:	46a2      	mov	sl, r4
 800c7ac:	e7d2      	b.n	800c754 <_svfiprintf_r+0xa0>
 800c7ae:	9b03      	ldr	r3, [sp, #12]
 800c7b0:	1d19      	adds	r1, r3, #4
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	9103      	str	r1, [sp, #12]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	bfbb      	ittet	lt
 800c7ba:	425b      	neglt	r3, r3
 800c7bc:	f042 0202 	orrlt.w	r2, r2, #2
 800c7c0:	9307      	strge	r3, [sp, #28]
 800c7c2:	9307      	strlt	r3, [sp, #28]
 800c7c4:	bfb8      	it	lt
 800c7c6:	9204      	strlt	r2, [sp, #16]
 800c7c8:	7823      	ldrb	r3, [r4, #0]
 800c7ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7cc:	d10a      	bne.n	800c7e4 <_svfiprintf_r+0x130>
 800c7ce:	7863      	ldrb	r3, [r4, #1]
 800c7d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7d2:	d132      	bne.n	800c83a <_svfiprintf_r+0x186>
 800c7d4:	9b03      	ldr	r3, [sp, #12]
 800c7d6:	1d1a      	adds	r2, r3, #4
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	9203      	str	r2, [sp, #12]
 800c7dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7e0:	3402      	adds	r4, #2
 800c7e2:	9305      	str	r3, [sp, #20]
 800c7e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c8a8 <_svfiprintf_r+0x1f4>
 800c7e8:	7821      	ldrb	r1, [r4, #0]
 800c7ea:	2203      	movs	r2, #3
 800c7ec:	4650      	mov	r0, sl
 800c7ee:	f7f3 fcff 	bl	80001f0 <memchr>
 800c7f2:	b138      	cbz	r0, 800c804 <_svfiprintf_r+0x150>
 800c7f4:	9b04      	ldr	r3, [sp, #16]
 800c7f6:	eba0 000a 	sub.w	r0, r0, sl
 800c7fa:	2240      	movs	r2, #64	@ 0x40
 800c7fc:	4082      	lsls	r2, r0
 800c7fe:	4313      	orrs	r3, r2
 800c800:	3401      	adds	r4, #1
 800c802:	9304      	str	r3, [sp, #16]
 800c804:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c808:	4824      	ldr	r0, [pc, #144]	@ (800c89c <_svfiprintf_r+0x1e8>)
 800c80a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c80e:	2206      	movs	r2, #6
 800c810:	f7f3 fcee 	bl	80001f0 <memchr>
 800c814:	2800      	cmp	r0, #0
 800c816:	d036      	beq.n	800c886 <_svfiprintf_r+0x1d2>
 800c818:	4b21      	ldr	r3, [pc, #132]	@ (800c8a0 <_svfiprintf_r+0x1ec>)
 800c81a:	bb1b      	cbnz	r3, 800c864 <_svfiprintf_r+0x1b0>
 800c81c:	9b03      	ldr	r3, [sp, #12]
 800c81e:	3307      	adds	r3, #7
 800c820:	f023 0307 	bic.w	r3, r3, #7
 800c824:	3308      	adds	r3, #8
 800c826:	9303      	str	r3, [sp, #12]
 800c828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c82a:	4433      	add	r3, r6
 800c82c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c82e:	e76a      	b.n	800c706 <_svfiprintf_r+0x52>
 800c830:	fb0c 3202 	mla	r2, ip, r2, r3
 800c834:	460c      	mov	r4, r1
 800c836:	2001      	movs	r0, #1
 800c838:	e7a8      	b.n	800c78c <_svfiprintf_r+0xd8>
 800c83a:	2300      	movs	r3, #0
 800c83c:	3401      	adds	r4, #1
 800c83e:	9305      	str	r3, [sp, #20]
 800c840:	4619      	mov	r1, r3
 800c842:	f04f 0c0a 	mov.w	ip, #10
 800c846:	4620      	mov	r0, r4
 800c848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c84c:	3a30      	subs	r2, #48	@ 0x30
 800c84e:	2a09      	cmp	r2, #9
 800c850:	d903      	bls.n	800c85a <_svfiprintf_r+0x1a6>
 800c852:	2b00      	cmp	r3, #0
 800c854:	d0c6      	beq.n	800c7e4 <_svfiprintf_r+0x130>
 800c856:	9105      	str	r1, [sp, #20]
 800c858:	e7c4      	b.n	800c7e4 <_svfiprintf_r+0x130>
 800c85a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c85e:	4604      	mov	r4, r0
 800c860:	2301      	movs	r3, #1
 800c862:	e7f0      	b.n	800c846 <_svfiprintf_r+0x192>
 800c864:	ab03      	add	r3, sp, #12
 800c866:	9300      	str	r3, [sp, #0]
 800c868:	462a      	mov	r2, r5
 800c86a:	4b0e      	ldr	r3, [pc, #56]	@ (800c8a4 <_svfiprintf_r+0x1f0>)
 800c86c:	a904      	add	r1, sp, #16
 800c86e:	4638      	mov	r0, r7
 800c870:	f7fc f836 	bl	80088e0 <_printf_float>
 800c874:	1c42      	adds	r2, r0, #1
 800c876:	4606      	mov	r6, r0
 800c878:	d1d6      	bne.n	800c828 <_svfiprintf_r+0x174>
 800c87a:	89ab      	ldrh	r3, [r5, #12]
 800c87c:	065b      	lsls	r3, r3, #25
 800c87e:	f53f af2d 	bmi.w	800c6dc <_svfiprintf_r+0x28>
 800c882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c884:	e72c      	b.n	800c6e0 <_svfiprintf_r+0x2c>
 800c886:	ab03      	add	r3, sp, #12
 800c888:	9300      	str	r3, [sp, #0]
 800c88a:	462a      	mov	r2, r5
 800c88c:	4b05      	ldr	r3, [pc, #20]	@ (800c8a4 <_svfiprintf_r+0x1f0>)
 800c88e:	a904      	add	r1, sp, #16
 800c890:	4638      	mov	r0, r7
 800c892:	f7fc fabd 	bl	8008e10 <_printf_i>
 800c896:	e7ed      	b.n	800c874 <_svfiprintf_r+0x1c0>
 800c898:	0800e9a0 	.word	0x0800e9a0
 800c89c:	0800e9aa 	.word	0x0800e9aa
 800c8a0:	080088e1 	.word	0x080088e1
 800c8a4:	0800c5ff 	.word	0x0800c5ff
 800c8a8:	0800e9a6 	.word	0x0800e9a6

0800c8ac <_sungetc_r>:
 800c8ac:	b538      	push	{r3, r4, r5, lr}
 800c8ae:	1c4b      	adds	r3, r1, #1
 800c8b0:	4614      	mov	r4, r2
 800c8b2:	d103      	bne.n	800c8bc <_sungetc_r+0x10>
 800c8b4:	f04f 35ff 	mov.w	r5, #4294967295
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	bd38      	pop	{r3, r4, r5, pc}
 800c8bc:	8993      	ldrh	r3, [r2, #12]
 800c8be:	f023 0320 	bic.w	r3, r3, #32
 800c8c2:	8193      	strh	r3, [r2, #12]
 800c8c4:	6853      	ldr	r3, [r2, #4]
 800c8c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c8c8:	b2cd      	uxtb	r5, r1
 800c8ca:	b18a      	cbz	r2, 800c8f0 <_sungetc_r+0x44>
 800c8cc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	dd08      	ble.n	800c8e4 <_sungetc_r+0x38>
 800c8d2:	6823      	ldr	r3, [r4, #0]
 800c8d4:	1e5a      	subs	r2, r3, #1
 800c8d6:	6022      	str	r2, [r4, #0]
 800c8d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c8dc:	6863      	ldr	r3, [r4, #4]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	6063      	str	r3, [r4, #4]
 800c8e2:	e7e9      	b.n	800c8b8 <_sungetc_r+0xc>
 800c8e4:	4621      	mov	r1, r4
 800c8e6:	f000 fdb8 	bl	800d45a <__submore>
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	d0f1      	beq.n	800c8d2 <_sungetc_r+0x26>
 800c8ee:	e7e1      	b.n	800c8b4 <_sungetc_r+0x8>
 800c8f0:	6921      	ldr	r1, [r4, #16]
 800c8f2:	6822      	ldr	r2, [r4, #0]
 800c8f4:	b141      	cbz	r1, 800c908 <_sungetc_r+0x5c>
 800c8f6:	4291      	cmp	r1, r2
 800c8f8:	d206      	bcs.n	800c908 <_sungetc_r+0x5c>
 800c8fa:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800c8fe:	42a9      	cmp	r1, r5
 800c900:	d102      	bne.n	800c908 <_sungetc_r+0x5c>
 800c902:	3a01      	subs	r2, #1
 800c904:	6022      	str	r2, [r4, #0]
 800c906:	e7ea      	b.n	800c8de <_sungetc_r+0x32>
 800c908:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800c90c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c910:	6363      	str	r3, [r4, #52]	@ 0x34
 800c912:	2303      	movs	r3, #3
 800c914:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c916:	4623      	mov	r3, r4
 800c918:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c91c:	6023      	str	r3, [r4, #0]
 800c91e:	2301      	movs	r3, #1
 800c920:	e7de      	b.n	800c8e0 <_sungetc_r+0x34>

0800c922 <__ssrefill_r>:
 800c922:	b510      	push	{r4, lr}
 800c924:	460c      	mov	r4, r1
 800c926:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c928:	b169      	cbz	r1, 800c946 <__ssrefill_r+0x24>
 800c92a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c92e:	4299      	cmp	r1, r3
 800c930:	d001      	beq.n	800c936 <__ssrefill_r+0x14>
 800c932:	f7fe fd51 	bl	800b3d8 <_free_r>
 800c936:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c938:	6063      	str	r3, [r4, #4]
 800c93a:	2000      	movs	r0, #0
 800c93c:	6360      	str	r0, [r4, #52]	@ 0x34
 800c93e:	b113      	cbz	r3, 800c946 <__ssrefill_r+0x24>
 800c940:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c942:	6023      	str	r3, [r4, #0]
 800c944:	bd10      	pop	{r4, pc}
 800c946:	6923      	ldr	r3, [r4, #16]
 800c948:	6023      	str	r3, [r4, #0]
 800c94a:	2300      	movs	r3, #0
 800c94c:	6063      	str	r3, [r4, #4]
 800c94e:	89a3      	ldrh	r3, [r4, #12]
 800c950:	f043 0320 	orr.w	r3, r3, #32
 800c954:	81a3      	strh	r3, [r4, #12]
 800c956:	f04f 30ff 	mov.w	r0, #4294967295
 800c95a:	e7f3      	b.n	800c944 <__ssrefill_r+0x22>

0800c95c <__ssvfiscanf_r>:
 800c95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c960:	460c      	mov	r4, r1
 800c962:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c966:	2100      	movs	r1, #0
 800c968:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800c96c:	49a5      	ldr	r1, [pc, #660]	@ (800cc04 <__ssvfiscanf_r+0x2a8>)
 800c96e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800c970:	f10d 0804 	add.w	r8, sp, #4
 800c974:	49a4      	ldr	r1, [pc, #656]	@ (800cc08 <__ssvfiscanf_r+0x2ac>)
 800c976:	4fa5      	ldr	r7, [pc, #660]	@ (800cc0c <__ssvfiscanf_r+0x2b0>)
 800c978:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800c97c:	4606      	mov	r6, r0
 800c97e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	7813      	ldrb	r3, [r2, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	f000 8158 	beq.w	800cc3a <__ssvfiscanf_r+0x2de>
 800c98a:	5cf9      	ldrb	r1, [r7, r3]
 800c98c:	f011 0108 	ands.w	r1, r1, #8
 800c990:	f102 0501 	add.w	r5, r2, #1
 800c994:	d019      	beq.n	800c9ca <__ssvfiscanf_r+0x6e>
 800c996:	6863      	ldr	r3, [r4, #4]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	dd0f      	ble.n	800c9bc <__ssvfiscanf_r+0x60>
 800c99c:	6823      	ldr	r3, [r4, #0]
 800c99e:	781a      	ldrb	r2, [r3, #0]
 800c9a0:	5cba      	ldrb	r2, [r7, r2]
 800c9a2:	0712      	lsls	r2, r2, #28
 800c9a4:	d401      	bmi.n	800c9aa <__ssvfiscanf_r+0x4e>
 800c9a6:	462a      	mov	r2, r5
 800c9a8:	e7eb      	b.n	800c982 <__ssvfiscanf_r+0x26>
 800c9aa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c9ac:	3201      	adds	r2, #1
 800c9ae:	9245      	str	r2, [sp, #276]	@ 0x114
 800c9b0:	6862      	ldr	r2, [r4, #4]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	3a01      	subs	r2, #1
 800c9b6:	6062      	str	r2, [r4, #4]
 800c9b8:	6023      	str	r3, [r4, #0]
 800c9ba:	e7ec      	b.n	800c996 <__ssvfiscanf_r+0x3a>
 800c9bc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c9be:	4621      	mov	r1, r4
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	4798      	blx	r3
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	d0e9      	beq.n	800c99c <__ssvfiscanf_r+0x40>
 800c9c8:	e7ed      	b.n	800c9a6 <__ssvfiscanf_r+0x4a>
 800c9ca:	2b25      	cmp	r3, #37	@ 0x25
 800c9cc:	d012      	beq.n	800c9f4 <__ssvfiscanf_r+0x98>
 800c9ce:	4699      	mov	r9, r3
 800c9d0:	6863      	ldr	r3, [r4, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	f340 8093 	ble.w	800cafe <__ssvfiscanf_r+0x1a2>
 800c9d8:	6822      	ldr	r2, [r4, #0]
 800c9da:	7813      	ldrb	r3, [r2, #0]
 800c9dc:	454b      	cmp	r3, r9
 800c9de:	f040 812c 	bne.w	800cc3a <__ssvfiscanf_r+0x2de>
 800c9e2:	6863      	ldr	r3, [r4, #4]
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	6063      	str	r3, [r4, #4]
 800c9e8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c9ea:	3201      	adds	r2, #1
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	6022      	str	r2, [r4, #0]
 800c9f0:	9345      	str	r3, [sp, #276]	@ 0x114
 800c9f2:	e7d8      	b.n	800c9a6 <__ssvfiscanf_r+0x4a>
 800c9f4:	9141      	str	r1, [sp, #260]	@ 0x104
 800c9f6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c9f8:	7853      	ldrb	r3, [r2, #1]
 800c9fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9fc:	bf02      	ittt	eq
 800c9fe:	2310      	moveq	r3, #16
 800ca00:	1c95      	addeq	r5, r2, #2
 800ca02:	9341      	streq	r3, [sp, #260]	@ 0x104
 800ca04:	220a      	movs	r2, #10
 800ca06:	46a9      	mov	r9, r5
 800ca08:	f819 1b01 	ldrb.w	r1, [r9], #1
 800ca0c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800ca10:	2b09      	cmp	r3, #9
 800ca12:	d91e      	bls.n	800ca52 <__ssvfiscanf_r+0xf6>
 800ca14:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800cc10 <__ssvfiscanf_r+0x2b4>
 800ca18:	2203      	movs	r2, #3
 800ca1a:	4650      	mov	r0, sl
 800ca1c:	f7f3 fbe8 	bl	80001f0 <memchr>
 800ca20:	b138      	cbz	r0, 800ca32 <__ssvfiscanf_r+0xd6>
 800ca22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ca24:	eba0 000a 	sub.w	r0, r0, sl
 800ca28:	2301      	movs	r3, #1
 800ca2a:	4083      	lsls	r3, r0
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	9341      	str	r3, [sp, #260]	@ 0x104
 800ca30:	464d      	mov	r5, r9
 800ca32:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ca36:	2b78      	cmp	r3, #120	@ 0x78
 800ca38:	d806      	bhi.n	800ca48 <__ssvfiscanf_r+0xec>
 800ca3a:	2b57      	cmp	r3, #87	@ 0x57
 800ca3c:	d810      	bhi.n	800ca60 <__ssvfiscanf_r+0x104>
 800ca3e:	2b25      	cmp	r3, #37	@ 0x25
 800ca40:	d0c5      	beq.n	800c9ce <__ssvfiscanf_r+0x72>
 800ca42:	d857      	bhi.n	800caf4 <__ssvfiscanf_r+0x198>
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d065      	beq.n	800cb14 <__ssvfiscanf_r+0x1b8>
 800ca48:	2303      	movs	r3, #3
 800ca4a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ca4c:	230a      	movs	r3, #10
 800ca4e:	9342      	str	r3, [sp, #264]	@ 0x108
 800ca50:	e078      	b.n	800cb44 <__ssvfiscanf_r+0x1e8>
 800ca52:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ca54:	fb02 1103 	mla	r1, r2, r3, r1
 800ca58:	3930      	subs	r1, #48	@ 0x30
 800ca5a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ca5c:	464d      	mov	r5, r9
 800ca5e:	e7d2      	b.n	800ca06 <__ssvfiscanf_r+0xaa>
 800ca60:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800ca64:	2a20      	cmp	r2, #32
 800ca66:	d8ef      	bhi.n	800ca48 <__ssvfiscanf_r+0xec>
 800ca68:	a101      	add	r1, pc, #4	@ (adr r1, 800ca70 <__ssvfiscanf_r+0x114>)
 800ca6a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ca6e:	bf00      	nop
 800ca70:	0800cb23 	.word	0x0800cb23
 800ca74:	0800ca49 	.word	0x0800ca49
 800ca78:	0800ca49 	.word	0x0800ca49
 800ca7c:	0800cb7d 	.word	0x0800cb7d
 800ca80:	0800ca49 	.word	0x0800ca49
 800ca84:	0800ca49 	.word	0x0800ca49
 800ca88:	0800ca49 	.word	0x0800ca49
 800ca8c:	0800ca49 	.word	0x0800ca49
 800ca90:	0800ca49 	.word	0x0800ca49
 800ca94:	0800ca49 	.word	0x0800ca49
 800ca98:	0800ca49 	.word	0x0800ca49
 800ca9c:	0800cb93 	.word	0x0800cb93
 800caa0:	0800cb79 	.word	0x0800cb79
 800caa4:	0800cafb 	.word	0x0800cafb
 800caa8:	0800cafb 	.word	0x0800cafb
 800caac:	0800cafb 	.word	0x0800cafb
 800cab0:	0800ca49 	.word	0x0800ca49
 800cab4:	0800cb35 	.word	0x0800cb35
 800cab8:	0800ca49 	.word	0x0800ca49
 800cabc:	0800ca49 	.word	0x0800ca49
 800cac0:	0800ca49 	.word	0x0800ca49
 800cac4:	0800ca49 	.word	0x0800ca49
 800cac8:	0800cba3 	.word	0x0800cba3
 800cacc:	0800cb3d 	.word	0x0800cb3d
 800cad0:	0800cb1b 	.word	0x0800cb1b
 800cad4:	0800ca49 	.word	0x0800ca49
 800cad8:	0800ca49 	.word	0x0800ca49
 800cadc:	0800cb9f 	.word	0x0800cb9f
 800cae0:	0800ca49 	.word	0x0800ca49
 800cae4:	0800cb79 	.word	0x0800cb79
 800cae8:	0800ca49 	.word	0x0800ca49
 800caec:	0800ca49 	.word	0x0800ca49
 800caf0:	0800cb23 	.word	0x0800cb23
 800caf4:	3b45      	subs	r3, #69	@ 0x45
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	d8a6      	bhi.n	800ca48 <__ssvfiscanf_r+0xec>
 800cafa:	2305      	movs	r3, #5
 800cafc:	e021      	b.n	800cb42 <__ssvfiscanf_r+0x1e6>
 800cafe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cb00:	4621      	mov	r1, r4
 800cb02:	4630      	mov	r0, r6
 800cb04:	4798      	blx	r3
 800cb06:	2800      	cmp	r0, #0
 800cb08:	f43f af66 	beq.w	800c9d8 <__ssvfiscanf_r+0x7c>
 800cb0c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	f040 808b 	bne.w	800cc2a <__ssvfiscanf_r+0x2ce>
 800cb14:	f04f 30ff 	mov.w	r0, #4294967295
 800cb18:	e08b      	b.n	800cc32 <__ssvfiscanf_r+0x2d6>
 800cb1a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800cb1c:	f042 0220 	orr.w	r2, r2, #32
 800cb20:	9241      	str	r2, [sp, #260]	@ 0x104
 800cb22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800cb24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cb28:	9241      	str	r2, [sp, #260]	@ 0x104
 800cb2a:	2210      	movs	r2, #16
 800cb2c:	2b6e      	cmp	r3, #110	@ 0x6e
 800cb2e:	9242      	str	r2, [sp, #264]	@ 0x108
 800cb30:	d902      	bls.n	800cb38 <__ssvfiscanf_r+0x1dc>
 800cb32:	e005      	b.n	800cb40 <__ssvfiscanf_r+0x1e4>
 800cb34:	2300      	movs	r3, #0
 800cb36:	9342      	str	r3, [sp, #264]	@ 0x108
 800cb38:	2303      	movs	r3, #3
 800cb3a:	e002      	b.n	800cb42 <__ssvfiscanf_r+0x1e6>
 800cb3c:	2308      	movs	r3, #8
 800cb3e:	9342      	str	r3, [sp, #264]	@ 0x108
 800cb40:	2304      	movs	r3, #4
 800cb42:	9347      	str	r3, [sp, #284]	@ 0x11c
 800cb44:	6863      	ldr	r3, [r4, #4]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	dd39      	ble.n	800cbbe <__ssvfiscanf_r+0x262>
 800cb4a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800cb4c:	0659      	lsls	r1, r3, #25
 800cb4e:	d404      	bmi.n	800cb5a <__ssvfiscanf_r+0x1fe>
 800cb50:	6823      	ldr	r3, [r4, #0]
 800cb52:	781a      	ldrb	r2, [r3, #0]
 800cb54:	5cba      	ldrb	r2, [r7, r2]
 800cb56:	0712      	lsls	r2, r2, #28
 800cb58:	d438      	bmi.n	800cbcc <__ssvfiscanf_r+0x270>
 800cb5a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800cb5c:	2b02      	cmp	r3, #2
 800cb5e:	dc47      	bgt.n	800cbf0 <__ssvfiscanf_r+0x294>
 800cb60:	466b      	mov	r3, sp
 800cb62:	4622      	mov	r2, r4
 800cb64:	a941      	add	r1, sp, #260	@ 0x104
 800cb66:	4630      	mov	r0, r6
 800cb68:	f000 f9ae 	bl	800cec8 <_scanf_chars>
 800cb6c:	2801      	cmp	r0, #1
 800cb6e:	d064      	beq.n	800cc3a <__ssvfiscanf_r+0x2de>
 800cb70:	2802      	cmp	r0, #2
 800cb72:	f47f af18 	bne.w	800c9a6 <__ssvfiscanf_r+0x4a>
 800cb76:	e7c9      	b.n	800cb0c <__ssvfiscanf_r+0x1b0>
 800cb78:	220a      	movs	r2, #10
 800cb7a:	e7d7      	b.n	800cb2c <__ssvfiscanf_r+0x1d0>
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	4640      	mov	r0, r8
 800cb80:	f000 fc32 	bl	800d3e8 <__sccl>
 800cb84:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800cb86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb8a:	9341      	str	r3, [sp, #260]	@ 0x104
 800cb8c:	4605      	mov	r5, r0
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e7d7      	b.n	800cb42 <__ssvfiscanf_r+0x1e6>
 800cb92:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800cb94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb98:	9341      	str	r3, [sp, #260]	@ 0x104
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	e7d1      	b.n	800cb42 <__ssvfiscanf_r+0x1e6>
 800cb9e:	2302      	movs	r3, #2
 800cba0:	e7cf      	b.n	800cb42 <__ssvfiscanf_r+0x1e6>
 800cba2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800cba4:	06c3      	lsls	r3, r0, #27
 800cba6:	f53f aefe 	bmi.w	800c9a6 <__ssvfiscanf_r+0x4a>
 800cbaa:	9b00      	ldr	r3, [sp, #0]
 800cbac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800cbae:	1d19      	adds	r1, r3, #4
 800cbb0:	9100      	str	r1, [sp, #0]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	07c0      	lsls	r0, r0, #31
 800cbb6:	bf4c      	ite	mi
 800cbb8:	801a      	strhmi	r2, [r3, #0]
 800cbba:	601a      	strpl	r2, [r3, #0]
 800cbbc:	e6f3      	b.n	800c9a6 <__ssvfiscanf_r+0x4a>
 800cbbe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cbc0:	4621      	mov	r1, r4
 800cbc2:	4630      	mov	r0, r6
 800cbc4:	4798      	blx	r3
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d0bf      	beq.n	800cb4a <__ssvfiscanf_r+0x1ee>
 800cbca:	e79f      	b.n	800cb0c <__ssvfiscanf_r+0x1b0>
 800cbcc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800cbce:	3201      	adds	r2, #1
 800cbd0:	9245      	str	r2, [sp, #276]	@ 0x114
 800cbd2:	6862      	ldr	r2, [r4, #4]
 800cbd4:	3a01      	subs	r2, #1
 800cbd6:	2a00      	cmp	r2, #0
 800cbd8:	6062      	str	r2, [r4, #4]
 800cbda:	dd02      	ble.n	800cbe2 <__ssvfiscanf_r+0x286>
 800cbdc:	3301      	adds	r3, #1
 800cbde:	6023      	str	r3, [r4, #0]
 800cbe0:	e7b6      	b.n	800cb50 <__ssvfiscanf_r+0x1f4>
 800cbe2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cbe4:	4621      	mov	r1, r4
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	4798      	blx	r3
 800cbea:	2800      	cmp	r0, #0
 800cbec:	d0b0      	beq.n	800cb50 <__ssvfiscanf_r+0x1f4>
 800cbee:	e78d      	b.n	800cb0c <__ssvfiscanf_r+0x1b0>
 800cbf0:	2b04      	cmp	r3, #4
 800cbf2:	dc0f      	bgt.n	800cc14 <__ssvfiscanf_r+0x2b8>
 800cbf4:	466b      	mov	r3, sp
 800cbf6:	4622      	mov	r2, r4
 800cbf8:	a941      	add	r1, sp, #260	@ 0x104
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	f000 f9be 	bl	800cf7c <_scanf_i>
 800cc00:	e7b4      	b.n	800cb6c <__ssvfiscanf_r+0x210>
 800cc02:	bf00      	nop
 800cc04:	0800c8ad 	.word	0x0800c8ad
 800cc08:	0800c923 	.word	0x0800c923
 800cc0c:	0800e571 	.word	0x0800e571
 800cc10:	0800e9a6 	.word	0x0800e9a6
 800cc14:	4b0a      	ldr	r3, [pc, #40]	@ (800cc40 <__ssvfiscanf_r+0x2e4>)
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	f43f aec5 	beq.w	800c9a6 <__ssvfiscanf_r+0x4a>
 800cc1c:	466b      	mov	r3, sp
 800cc1e:	4622      	mov	r2, r4
 800cc20:	a941      	add	r1, sp, #260	@ 0x104
 800cc22:	4630      	mov	r0, r6
 800cc24:	f7fc fa14 	bl	8009050 <_scanf_float>
 800cc28:	e7a0      	b.n	800cb6c <__ssvfiscanf_r+0x210>
 800cc2a:	89a3      	ldrh	r3, [r4, #12]
 800cc2c:	065b      	lsls	r3, r3, #25
 800cc2e:	f53f af71 	bmi.w	800cb14 <__ssvfiscanf_r+0x1b8>
 800cc32:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800cc36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc3a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800cc3c:	e7f9      	b.n	800cc32 <__ssvfiscanf_r+0x2d6>
 800cc3e:	bf00      	nop
 800cc40:	08009051 	.word	0x08009051

0800cc44 <__sfputc_r>:
 800cc44:	6893      	ldr	r3, [r2, #8]
 800cc46:	3b01      	subs	r3, #1
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	b410      	push	{r4}
 800cc4c:	6093      	str	r3, [r2, #8]
 800cc4e:	da08      	bge.n	800cc62 <__sfputc_r+0x1e>
 800cc50:	6994      	ldr	r4, [r2, #24]
 800cc52:	42a3      	cmp	r3, r4
 800cc54:	db01      	blt.n	800cc5a <__sfputc_r+0x16>
 800cc56:	290a      	cmp	r1, #10
 800cc58:	d103      	bne.n	800cc62 <__sfputc_r+0x1e>
 800cc5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc5e:	f7fc be08 	b.w	8009872 <__swbuf_r>
 800cc62:	6813      	ldr	r3, [r2, #0]
 800cc64:	1c58      	adds	r0, r3, #1
 800cc66:	6010      	str	r0, [r2, #0]
 800cc68:	7019      	strb	r1, [r3, #0]
 800cc6a:	4608      	mov	r0, r1
 800cc6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc70:	4770      	bx	lr

0800cc72 <__sfputs_r>:
 800cc72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc74:	4606      	mov	r6, r0
 800cc76:	460f      	mov	r7, r1
 800cc78:	4614      	mov	r4, r2
 800cc7a:	18d5      	adds	r5, r2, r3
 800cc7c:	42ac      	cmp	r4, r5
 800cc7e:	d101      	bne.n	800cc84 <__sfputs_r+0x12>
 800cc80:	2000      	movs	r0, #0
 800cc82:	e007      	b.n	800cc94 <__sfputs_r+0x22>
 800cc84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc88:	463a      	mov	r2, r7
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	f7ff ffda 	bl	800cc44 <__sfputc_r>
 800cc90:	1c43      	adds	r3, r0, #1
 800cc92:	d1f3      	bne.n	800cc7c <__sfputs_r+0xa>
 800cc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc98 <_vfiprintf_r>:
 800cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9c:	460d      	mov	r5, r1
 800cc9e:	b09d      	sub	sp, #116	@ 0x74
 800cca0:	4614      	mov	r4, r2
 800cca2:	4698      	mov	r8, r3
 800cca4:	4606      	mov	r6, r0
 800cca6:	b118      	cbz	r0, 800ccb0 <_vfiprintf_r+0x18>
 800cca8:	6a03      	ldr	r3, [r0, #32]
 800ccaa:	b90b      	cbnz	r3, 800ccb0 <_vfiprintf_r+0x18>
 800ccac:	f7fc fc70 	bl	8009590 <__sinit>
 800ccb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccb2:	07d9      	lsls	r1, r3, #31
 800ccb4:	d405      	bmi.n	800ccc2 <_vfiprintf_r+0x2a>
 800ccb6:	89ab      	ldrh	r3, [r5, #12]
 800ccb8:	059a      	lsls	r2, r3, #22
 800ccba:	d402      	bmi.n	800ccc2 <_vfiprintf_r+0x2a>
 800ccbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccbe:	f7f6 f93c 	bl	8002f3a <__retarget_lock_acquire_recursive>
 800ccc2:	89ab      	ldrh	r3, [r5, #12]
 800ccc4:	071b      	lsls	r3, r3, #28
 800ccc6:	d501      	bpl.n	800cccc <_vfiprintf_r+0x34>
 800ccc8:	692b      	ldr	r3, [r5, #16]
 800ccca:	b99b      	cbnz	r3, 800ccf4 <_vfiprintf_r+0x5c>
 800cccc:	4629      	mov	r1, r5
 800ccce:	4630      	mov	r0, r6
 800ccd0:	f7fc fe0e 	bl	80098f0 <__swsetup_r>
 800ccd4:	b170      	cbz	r0, 800ccf4 <_vfiprintf_r+0x5c>
 800ccd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccd8:	07dc      	lsls	r4, r3, #31
 800ccda:	d504      	bpl.n	800cce6 <_vfiprintf_r+0x4e>
 800ccdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cce0:	b01d      	add	sp, #116	@ 0x74
 800cce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce6:	89ab      	ldrh	r3, [r5, #12]
 800cce8:	0598      	lsls	r0, r3, #22
 800ccea:	d4f7      	bmi.n	800ccdc <_vfiprintf_r+0x44>
 800ccec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccee:	f7f6 f930 	bl	8002f52 <__retarget_lock_release_recursive>
 800ccf2:	e7f3      	b.n	800ccdc <_vfiprintf_r+0x44>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccf8:	2320      	movs	r3, #32
 800ccfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ccfe:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd02:	2330      	movs	r3, #48	@ 0x30
 800cd04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ceb4 <_vfiprintf_r+0x21c>
 800cd08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd0c:	f04f 0901 	mov.w	r9, #1
 800cd10:	4623      	mov	r3, r4
 800cd12:	469a      	mov	sl, r3
 800cd14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd18:	b10a      	cbz	r2, 800cd1e <_vfiprintf_r+0x86>
 800cd1a:	2a25      	cmp	r2, #37	@ 0x25
 800cd1c:	d1f9      	bne.n	800cd12 <_vfiprintf_r+0x7a>
 800cd1e:	ebba 0b04 	subs.w	fp, sl, r4
 800cd22:	d00b      	beq.n	800cd3c <_vfiprintf_r+0xa4>
 800cd24:	465b      	mov	r3, fp
 800cd26:	4622      	mov	r2, r4
 800cd28:	4629      	mov	r1, r5
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	f7ff ffa1 	bl	800cc72 <__sfputs_r>
 800cd30:	3001      	adds	r0, #1
 800cd32:	f000 80a7 	beq.w	800ce84 <_vfiprintf_r+0x1ec>
 800cd36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd38:	445a      	add	r2, fp
 800cd3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd3c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f000 809f 	beq.w	800ce84 <_vfiprintf_r+0x1ec>
 800cd46:	2300      	movs	r3, #0
 800cd48:	f04f 32ff 	mov.w	r2, #4294967295
 800cd4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd50:	f10a 0a01 	add.w	sl, sl, #1
 800cd54:	9304      	str	r3, [sp, #16]
 800cd56:	9307      	str	r3, [sp, #28]
 800cd58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd5e:	4654      	mov	r4, sl
 800cd60:	2205      	movs	r2, #5
 800cd62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd66:	4853      	ldr	r0, [pc, #332]	@ (800ceb4 <_vfiprintf_r+0x21c>)
 800cd68:	f7f3 fa42 	bl	80001f0 <memchr>
 800cd6c:	9a04      	ldr	r2, [sp, #16]
 800cd6e:	b9d8      	cbnz	r0, 800cda8 <_vfiprintf_r+0x110>
 800cd70:	06d1      	lsls	r1, r2, #27
 800cd72:	bf44      	itt	mi
 800cd74:	2320      	movmi	r3, #32
 800cd76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd7a:	0713      	lsls	r3, r2, #28
 800cd7c:	bf44      	itt	mi
 800cd7e:	232b      	movmi	r3, #43	@ 0x2b
 800cd80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd84:	f89a 3000 	ldrb.w	r3, [sl]
 800cd88:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd8a:	d015      	beq.n	800cdb8 <_vfiprintf_r+0x120>
 800cd8c:	9a07      	ldr	r2, [sp, #28]
 800cd8e:	4654      	mov	r4, sl
 800cd90:	2000      	movs	r0, #0
 800cd92:	f04f 0c0a 	mov.w	ip, #10
 800cd96:	4621      	mov	r1, r4
 800cd98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd9c:	3b30      	subs	r3, #48	@ 0x30
 800cd9e:	2b09      	cmp	r3, #9
 800cda0:	d94b      	bls.n	800ce3a <_vfiprintf_r+0x1a2>
 800cda2:	b1b0      	cbz	r0, 800cdd2 <_vfiprintf_r+0x13a>
 800cda4:	9207      	str	r2, [sp, #28]
 800cda6:	e014      	b.n	800cdd2 <_vfiprintf_r+0x13a>
 800cda8:	eba0 0308 	sub.w	r3, r0, r8
 800cdac:	fa09 f303 	lsl.w	r3, r9, r3
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	9304      	str	r3, [sp, #16]
 800cdb4:	46a2      	mov	sl, r4
 800cdb6:	e7d2      	b.n	800cd5e <_vfiprintf_r+0xc6>
 800cdb8:	9b03      	ldr	r3, [sp, #12]
 800cdba:	1d19      	adds	r1, r3, #4
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	9103      	str	r1, [sp, #12]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	bfbb      	ittet	lt
 800cdc4:	425b      	neglt	r3, r3
 800cdc6:	f042 0202 	orrlt.w	r2, r2, #2
 800cdca:	9307      	strge	r3, [sp, #28]
 800cdcc:	9307      	strlt	r3, [sp, #28]
 800cdce:	bfb8      	it	lt
 800cdd0:	9204      	strlt	r2, [sp, #16]
 800cdd2:	7823      	ldrb	r3, [r4, #0]
 800cdd4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdd6:	d10a      	bne.n	800cdee <_vfiprintf_r+0x156>
 800cdd8:	7863      	ldrb	r3, [r4, #1]
 800cdda:	2b2a      	cmp	r3, #42	@ 0x2a
 800cddc:	d132      	bne.n	800ce44 <_vfiprintf_r+0x1ac>
 800cdde:	9b03      	ldr	r3, [sp, #12]
 800cde0:	1d1a      	adds	r2, r3, #4
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	9203      	str	r2, [sp, #12]
 800cde6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cdea:	3402      	adds	r4, #2
 800cdec:	9305      	str	r3, [sp, #20]
 800cdee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cec4 <_vfiprintf_r+0x22c>
 800cdf2:	7821      	ldrb	r1, [r4, #0]
 800cdf4:	2203      	movs	r2, #3
 800cdf6:	4650      	mov	r0, sl
 800cdf8:	f7f3 f9fa 	bl	80001f0 <memchr>
 800cdfc:	b138      	cbz	r0, 800ce0e <_vfiprintf_r+0x176>
 800cdfe:	9b04      	ldr	r3, [sp, #16]
 800ce00:	eba0 000a 	sub.w	r0, r0, sl
 800ce04:	2240      	movs	r2, #64	@ 0x40
 800ce06:	4082      	lsls	r2, r0
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	3401      	adds	r4, #1
 800ce0c:	9304      	str	r3, [sp, #16]
 800ce0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce12:	4829      	ldr	r0, [pc, #164]	@ (800ceb8 <_vfiprintf_r+0x220>)
 800ce14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce18:	2206      	movs	r2, #6
 800ce1a:	f7f3 f9e9 	bl	80001f0 <memchr>
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	d03f      	beq.n	800cea2 <_vfiprintf_r+0x20a>
 800ce22:	4b26      	ldr	r3, [pc, #152]	@ (800cebc <_vfiprintf_r+0x224>)
 800ce24:	bb1b      	cbnz	r3, 800ce6e <_vfiprintf_r+0x1d6>
 800ce26:	9b03      	ldr	r3, [sp, #12]
 800ce28:	3307      	adds	r3, #7
 800ce2a:	f023 0307 	bic.w	r3, r3, #7
 800ce2e:	3308      	adds	r3, #8
 800ce30:	9303      	str	r3, [sp, #12]
 800ce32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce34:	443b      	add	r3, r7
 800ce36:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce38:	e76a      	b.n	800cd10 <_vfiprintf_r+0x78>
 800ce3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce3e:	460c      	mov	r4, r1
 800ce40:	2001      	movs	r0, #1
 800ce42:	e7a8      	b.n	800cd96 <_vfiprintf_r+0xfe>
 800ce44:	2300      	movs	r3, #0
 800ce46:	3401      	adds	r4, #1
 800ce48:	9305      	str	r3, [sp, #20]
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	f04f 0c0a 	mov.w	ip, #10
 800ce50:	4620      	mov	r0, r4
 800ce52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce56:	3a30      	subs	r2, #48	@ 0x30
 800ce58:	2a09      	cmp	r2, #9
 800ce5a:	d903      	bls.n	800ce64 <_vfiprintf_r+0x1cc>
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d0c6      	beq.n	800cdee <_vfiprintf_r+0x156>
 800ce60:	9105      	str	r1, [sp, #20]
 800ce62:	e7c4      	b.n	800cdee <_vfiprintf_r+0x156>
 800ce64:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce68:	4604      	mov	r4, r0
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e7f0      	b.n	800ce50 <_vfiprintf_r+0x1b8>
 800ce6e:	ab03      	add	r3, sp, #12
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	462a      	mov	r2, r5
 800ce74:	4b12      	ldr	r3, [pc, #72]	@ (800cec0 <_vfiprintf_r+0x228>)
 800ce76:	a904      	add	r1, sp, #16
 800ce78:	4630      	mov	r0, r6
 800ce7a:	f7fb fd31 	bl	80088e0 <_printf_float>
 800ce7e:	4607      	mov	r7, r0
 800ce80:	1c78      	adds	r0, r7, #1
 800ce82:	d1d6      	bne.n	800ce32 <_vfiprintf_r+0x19a>
 800ce84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce86:	07d9      	lsls	r1, r3, #31
 800ce88:	d405      	bmi.n	800ce96 <_vfiprintf_r+0x1fe>
 800ce8a:	89ab      	ldrh	r3, [r5, #12]
 800ce8c:	059a      	lsls	r2, r3, #22
 800ce8e:	d402      	bmi.n	800ce96 <_vfiprintf_r+0x1fe>
 800ce90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce92:	f7f6 f85e 	bl	8002f52 <__retarget_lock_release_recursive>
 800ce96:	89ab      	ldrh	r3, [r5, #12]
 800ce98:	065b      	lsls	r3, r3, #25
 800ce9a:	f53f af1f 	bmi.w	800ccdc <_vfiprintf_r+0x44>
 800ce9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cea0:	e71e      	b.n	800cce0 <_vfiprintf_r+0x48>
 800cea2:	ab03      	add	r3, sp, #12
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	462a      	mov	r2, r5
 800cea8:	4b05      	ldr	r3, [pc, #20]	@ (800cec0 <_vfiprintf_r+0x228>)
 800ceaa:	a904      	add	r1, sp, #16
 800ceac:	4630      	mov	r0, r6
 800ceae:	f7fb ffaf 	bl	8008e10 <_printf_i>
 800ceb2:	e7e4      	b.n	800ce7e <_vfiprintf_r+0x1e6>
 800ceb4:	0800e9a0 	.word	0x0800e9a0
 800ceb8:	0800e9aa 	.word	0x0800e9aa
 800cebc:	080088e1 	.word	0x080088e1
 800cec0:	0800cc73 	.word	0x0800cc73
 800cec4:	0800e9a6 	.word	0x0800e9a6

0800cec8 <_scanf_chars>:
 800cec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cecc:	4615      	mov	r5, r2
 800cece:	688a      	ldr	r2, [r1, #8]
 800ced0:	4680      	mov	r8, r0
 800ced2:	460c      	mov	r4, r1
 800ced4:	b932      	cbnz	r2, 800cee4 <_scanf_chars+0x1c>
 800ced6:	698a      	ldr	r2, [r1, #24]
 800ced8:	2a00      	cmp	r2, #0
 800ceda:	bf14      	ite	ne
 800cedc:	f04f 32ff 	movne.w	r2, #4294967295
 800cee0:	2201      	moveq	r2, #1
 800cee2:	608a      	str	r2, [r1, #8]
 800cee4:	6822      	ldr	r2, [r4, #0]
 800cee6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800cf78 <_scanf_chars+0xb0>
 800ceea:	06d1      	lsls	r1, r2, #27
 800ceec:	bf5f      	itttt	pl
 800ceee:	681a      	ldrpl	r2, [r3, #0]
 800cef0:	1d11      	addpl	r1, r2, #4
 800cef2:	6019      	strpl	r1, [r3, #0]
 800cef4:	6816      	ldrpl	r6, [r2, #0]
 800cef6:	2700      	movs	r7, #0
 800cef8:	69a0      	ldr	r0, [r4, #24]
 800cefa:	b188      	cbz	r0, 800cf20 <_scanf_chars+0x58>
 800cefc:	2801      	cmp	r0, #1
 800cefe:	d107      	bne.n	800cf10 <_scanf_chars+0x48>
 800cf00:	682b      	ldr	r3, [r5, #0]
 800cf02:	781a      	ldrb	r2, [r3, #0]
 800cf04:	6963      	ldr	r3, [r4, #20]
 800cf06:	5c9b      	ldrb	r3, [r3, r2]
 800cf08:	b953      	cbnz	r3, 800cf20 <_scanf_chars+0x58>
 800cf0a:	2f00      	cmp	r7, #0
 800cf0c:	d031      	beq.n	800cf72 <_scanf_chars+0xaa>
 800cf0e:	e022      	b.n	800cf56 <_scanf_chars+0x8e>
 800cf10:	2802      	cmp	r0, #2
 800cf12:	d120      	bne.n	800cf56 <_scanf_chars+0x8e>
 800cf14:	682b      	ldr	r3, [r5, #0]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	f819 3003 	ldrb.w	r3, [r9, r3]
 800cf1c:	071b      	lsls	r3, r3, #28
 800cf1e:	d41a      	bmi.n	800cf56 <_scanf_chars+0x8e>
 800cf20:	6823      	ldr	r3, [r4, #0]
 800cf22:	06da      	lsls	r2, r3, #27
 800cf24:	bf5e      	ittt	pl
 800cf26:	682b      	ldrpl	r3, [r5, #0]
 800cf28:	781b      	ldrbpl	r3, [r3, #0]
 800cf2a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cf2e:	682a      	ldr	r2, [r5, #0]
 800cf30:	686b      	ldr	r3, [r5, #4]
 800cf32:	3201      	adds	r2, #1
 800cf34:	602a      	str	r2, [r5, #0]
 800cf36:	68a2      	ldr	r2, [r4, #8]
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	3a01      	subs	r2, #1
 800cf3c:	606b      	str	r3, [r5, #4]
 800cf3e:	3701      	adds	r7, #1
 800cf40:	60a2      	str	r2, [r4, #8]
 800cf42:	b142      	cbz	r2, 800cf56 <_scanf_chars+0x8e>
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	dcd7      	bgt.n	800cef8 <_scanf_chars+0x30>
 800cf48:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	4640      	mov	r0, r8
 800cf50:	4798      	blx	r3
 800cf52:	2800      	cmp	r0, #0
 800cf54:	d0d0      	beq.n	800cef8 <_scanf_chars+0x30>
 800cf56:	6823      	ldr	r3, [r4, #0]
 800cf58:	f013 0310 	ands.w	r3, r3, #16
 800cf5c:	d105      	bne.n	800cf6a <_scanf_chars+0xa2>
 800cf5e:	68e2      	ldr	r2, [r4, #12]
 800cf60:	3201      	adds	r2, #1
 800cf62:	60e2      	str	r2, [r4, #12]
 800cf64:	69a2      	ldr	r2, [r4, #24]
 800cf66:	b102      	cbz	r2, 800cf6a <_scanf_chars+0xa2>
 800cf68:	7033      	strb	r3, [r6, #0]
 800cf6a:	6923      	ldr	r3, [r4, #16]
 800cf6c:	443b      	add	r3, r7
 800cf6e:	6123      	str	r3, [r4, #16]
 800cf70:	2000      	movs	r0, #0
 800cf72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf76:	bf00      	nop
 800cf78:	0800e571 	.word	0x0800e571

0800cf7c <_scanf_i>:
 800cf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf80:	4698      	mov	r8, r3
 800cf82:	4b74      	ldr	r3, [pc, #464]	@ (800d154 <_scanf_i+0x1d8>)
 800cf84:	460c      	mov	r4, r1
 800cf86:	4682      	mov	sl, r0
 800cf88:	4616      	mov	r6, r2
 800cf8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf8e:	b087      	sub	sp, #28
 800cf90:	ab03      	add	r3, sp, #12
 800cf92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cf96:	4b70      	ldr	r3, [pc, #448]	@ (800d158 <_scanf_i+0x1dc>)
 800cf98:	69a1      	ldr	r1, [r4, #24]
 800cf9a:	4a70      	ldr	r2, [pc, #448]	@ (800d15c <_scanf_i+0x1e0>)
 800cf9c:	2903      	cmp	r1, #3
 800cf9e:	bf08      	it	eq
 800cfa0:	461a      	moveq	r2, r3
 800cfa2:	68a3      	ldr	r3, [r4, #8]
 800cfa4:	9201      	str	r2, [sp, #4]
 800cfa6:	1e5a      	subs	r2, r3, #1
 800cfa8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cfac:	bf88      	it	hi
 800cfae:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cfb2:	4627      	mov	r7, r4
 800cfb4:	bf82      	ittt	hi
 800cfb6:	eb03 0905 	addhi.w	r9, r3, r5
 800cfba:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cfbe:	60a3      	strhi	r3, [r4, #8]
 800cfc0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cfc4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800cfc8:	bf98      	it	ls
 800cfca:	f04f 0900 	movls.w	r9, #0
 800cfce:	6023      	str	r3, [r4, #0]
 800cfd0:	463d      	mov	r5, r7
 800cfd2:	f04f 0b00 	mov.w	fp, #0
 800cfd6:	6831      	ldr	r1, [r6, #0]
 800cfd8:	ab03      	add	r3, sp, #12
 800cfda:	7809      	ldrb	r1, [r1, #0]
 800cfdc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cfe0:	2202      	movs	r2, #2
 800cfe2:	f7f3 f905 	bl	80001f0 <memchr>
 800cfe6:	b328      	cbz	r0, 800d034 <_scanf_i+0xb8>
 800cfe8:	f1bb 0f01 	cmp.w	fp, #1
 800cfec:	d159      	bne.n	800d0a2 <_scanf_i+0x126>
 800cfee:	6862      	ldr	r2, [r4, #4]
 800cff0:	b92a      	cbnz	r2, 800cffe <_scanf_i+0x82>
 800cff2:	6822      	ldr	r2, [r4, #0]
 800cff4:	2108      	movs	r1, #8
 800cff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cffa:	6061      	str	r1, [r4, #4]
 800cffc:	6022      	str	r2, [r4, #0]
 800cffe:	6822      	ldr	r2, [r4, #0]
 800d000:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800d004:	6022      	str	r2, [r4, #0]
 800d006:	68a2      	ldr	r2, [r4, #8]
 800d008:	1e51      	subs	r1, r2, #1
 800d00a:	60a1      	str	r1, [r4, #8]
 800d00c:	b192      	cbz	r2, 800d034 <_scanf_i+0xb8>
 800d00e:	6832      	ldr	r2, [r6, #0]
 800d010:	1c51      	adds	r1, r2, #1
 800d012:	6031      	str	r1, [r6, #0]
 800d014:	7812      	ldrb	r2, [r2, #0]
 800d016:	f805 2b01 	strb.w	r2, [r5], #1
 800d01a:	6872      	ldr	r2, [r6, #4]
 800d01c:	3a01      	subs	r2, #1
 800d01e:	2a00      	cmp	r2, #0
 800d020:	6072      	str	r2, [r6, #4]
 800d022:	dc07      	bgt.n	800d034 <_scanf_i+0xb8>
 800d024:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800d028:	4631      	mov	r1, r6
 800d02a:	4650      	mov	r0, sl
 800d02c:	4790      	blx	r2
 800d02e:	2800      	cmp	r0, #0
 800d030:	f040 8085 	bne.w	800d13e <_scanf_i+0x1c2>
 800d034:	f10b 0b01 	add.w	fp, fp, #1
 800d038:	f1bb 0f03 	cmp.w	fp, #3
 800d03c:	d1cb      	bne.n	800cfd6 <_scanf_i+0x5a>
 800d03e:	6863      	ldr	r3, [r4, #4]
 800d040:	b90b      	cbnz	r3, 800d046 <_scanf_i+0xca>
 800d042:	230a      	movs	r3, #10
 800d044:	6063      	str	r3, [r4, #4]
 800d046:	6863      	ldr	r3, [r4, #4]
 800d048:	4945      	ldr	r1, [pc, #276]	@ (800d160 <_scanf_i+0x1e4>)
 800d04a:	6960      	ldr	r0, [r4, #20]
 800d04c:	1ac9      	subs	r1, r1, r3
 800d04e:	f000 f9cb 	bl	800d3e8 <__sccl>
 800d052:	f04f 0b00 	mov.w	fp, #0
 800d056:	68a3      	ldr	r3, [r4, #8]
 800d058:	6822      	ldr	r2, [r4, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d03d      	beq.n	800d0da <_scanf_i+0x15e>
 800d05e:	6831      	ldr	r1, [r6, #0]
 800d060:	6960      	ldr	r0, [r4, #20]
 800d062:	f891 c000 	ldrb.w	ip, [r1]
 800d066:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d06a:	2800      	cmp	r0, #0
 800d06c:	d035      	beq.n	800d0da <_scanf_i+0x15e>
 800d06e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800d072:	d124      	bne.n	800d0be <_scanf_i+0x142>
 800d074:	0510      	lsls	r0, r2, #20
 800d076:	d522      	bpl.n	800d0be <_scanf_i+0x142>
 800d078:	f10b 0b01 	add.w	fp, fp, #1
 800d07c:	f1b9 0f00 	cmp.w	r9, #0
 800d080:	d003      	beq.n	800d08a <_scanf_i+0x10e>
 800d082:	3301      	adds	r3, #1
 800d084:	f109 39ff 	add.w	r9, r9, #4294967295
 800d088:	60a3      	str	r3, [r4, #8]
 800d08a:	6873      	ldr	r3, [r6, #4]
 800d08c:	3b01      	subs	r3, #1
 800d08e:	2b00      	cmp	r3, #0
 800d090:	6073      	str	r3, [r6, #4]
 800d092:	dd1b      	ble.n	800d0cc <_scanf_i+0x150>
 800d094:	6833      	ldr	r3, [r6, #0]
 800d096:	3301      	adds	r3, #1
 800d098:	6033      	str	r3, [r6, #0]
 800d09a:	68a3      	ldr	r3, [r4, #8]
 800d09c:	3b01      	subs	r3, #1
 800d09e:	60a3      	str	r3, [r4, #8]
 800d0a0:	e7d9      	b.n	800d056 <_scanf_i+0xda>
 800d0a2:	f1bb 0f02 	cmp.w	fp, #2
 800d0a6:	d1ae      	bne.n	800d006 <_scanf_i+0x8a>
 800d0a8:	6822      	ldr	r2, [r4, #0]
 800d0aa:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800d0ae:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d0b2:	d1bf      	bne.n	800d034 <_scanf_i+0xb8>
 800d0b4:	2110      	movs	r1, #16
 800d0b6:	6061      	str	r1, [r4, #4]
 800d0b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d0bc:	e7a2      	b.n	800d004 <_scanf_i+0x88>
 800d0be:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800d0c2:	6022      	str	r2, [r4, #0]
 800d0c4:	780b      	ldrb	r3, [r1, #0]
 800d0c6:	f805 3b01 	strb.w	r3, [r5], #1
 800d0ca:	e7de      	b.n	800d08a <_scanf_i+0x10e>
 800d0cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d0d0:	4631      	mov	r1, r6
 800d0d2:	4650      	mov	r0, sl
 800d0d4:	4798      	blx	r3
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	d0df      	beq.n	800d09a <_scanf_i+0x11e>
 800d0da:	6823      	ldr	r3, [r4, #0]
 800d0dc:	05d9      	lsls	r1, r3, #23
 800d0de:	d50d      	bpl.n	800d0fc <_scanf_i+0x180>
 800d0e0:	42bd      	cmp	r5, r7
 800d0e2:	d909      	bls.n	800d0f8 <_scanf_i+0x17c>
 800d0e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d0e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d0ec:	4632      	mov	r2, r6
 800d0ee:	4650      	mov	r0, sl
 800d0f0:	4798      	blx	r3
 800d0f2:	f105 39ff 	add.w	r9, r5, #4294967295
 800d0f6:	464d      	mov	r5, r9
 800d0f8:	42bd      	cmp	r5, r7
 800d0fa:	d028      	beq.n	800d14e <_scanf_i+0x1d2>
 800d0fc:	6822      	ldr	r2, [r4, #0]
 800d0fe:	f012 0210 	ands.w	r2, r2, #16
 800d102:	d113      	bne.n	800d12c <_scanf_i+0x1b0>
 800d104:	702a      	strb	r2, [r5, #0]
 800d106:	6863      	ldr	r3, [r4, #4]
 800d108:	9e01      	ldr	r6, [sp, #4]
 800d10a:	4639      	mov	r1, r7
 800d10c:	4650      	mov	r0, sl
 800d10e:	47b0      	blx	r6
 800d110:	f8d8 3000 	ldr.w	r3, [r8]
 800d114:	6821      	ldr	r1, [r4, #0]
 800d116:	1d1a      	adds	r2, r3, #4
 800d118:	f8c8 2000 	str.w	r2, [r8]
 800d11c:	f011 0f20 	tst.w	r1, #32
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	d00f      	beq.n	800d144 <_scanf_i+0x1c8>
 800d124:	6018      	str	r0, [r3, #0]
 800d126:	68e3      	ldr	r3, [r4, #12]
 800d128:	3301      	adds	r3, #1
 800d12a:	60e3      	str	r3, [r4, #12]
 800d12c:	6923      	ldr	r3, [r4, #16]
 800d12e:	1bed      	subs	r5, r5, r7
 800d130:	445d      	add	r5, fp
 800d132:	442b      	add	r3, r5
 800d134:	6123      	str	r3, [r4, #16]
 800d136:	2000      	movs	r0, #0
 800d138:	b007      	add	sp, #28
 800d13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d13e:	f04f 0b00 	mov.w	fp, #0
 800d142:	e7ca      	b.n	800d0da <_scanf_i+0x15e>
 800d144:	07ca      	lsls	r2, r1, #31
 800d146:	bf4c      	ite	mi
 800d148:	8018      	strhmi	r0, [r3, #0]
 800d14a:	6018      	strpl	r0, [r3, #0]
 800d14c:	e7eb      	b.n	800d126 <_scanf_i+0x1aa>
 800d14e:	2001      	movs	r0, #1
 800d150:	e7f2      	b.n	800d138 <_scanf_i+0x1bc>
 800d152:	bf00      	nop
 800d154:	0800d840 	.word	0x0800d840
 800d158:	08008789 	.word	0x08008789
 800d15c:	0800c5cd 	.word	0x0800c5cd
 800d160:	0800e9c1 	.word	0x0800e9c1

0800d164 <__sflush_r>:
 800d164:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d16c:	0716      	lsls	r6, r2, #28
 800d16e:	4605      	mov	r5, r0
 800d170:	460c      	mov	r4, r1
 800d172:	d454      	bmi.n	800d21e <__sflush_r+0xba>
 800d174:	684b      	ldr	r3, [r1, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	dc02      	bgt.n	800d180 <__sflush_r+0x1c>
 800d17a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	dd48      	ble.n	800d212 <__sflush_r+0xae>
 800d180:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d182:	2e00      	cmp	r6, #0
 800d184:	d045      	beq.n	800d212 <__sflush_r+0xae>
 800d186:	2300      	movs	r3, #0
 800d188:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d18c:	682f      	ldr	r7, [r5, #0]
 800d18e:	6a21      	ldr	r1, [r4, #32]
 800d190:	602b      	str	r3, [r5, #0]
 800d192:	d030      	beq.n	800d1f6 <__sflush_r+0x92>
 800d194:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d196:	89a3      	ldrh	r3, [r4, #12]
 800d198:	0759      	lsls	r1, r3, #29
 800d19a:	d505      	bpl.n	800d1a8 <__sflush_r+0x44>
 800d19c:	6863      	ldr	r3, [r4, #4]
 800d19e:	1ad2      	subs	r2, r2, r3
 800d1a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d1a2:	b10b      	cbz	r3, 800d1a8 <__sflush_r+0x44>
 800d1a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d1a6:	1ad2      	subs	r2, r2, r3
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1ac:	6a21      	ldr	r1, [r4, #32]
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	47b0      	blx	r6
 800d1b2:	1c43      	adds	r3, r0, #1
 800d1b4:	89a3      	ldrh	r3, [r4, #12]
 800d1b6:	d106      	bne.n	800d1c6 <__sflush_r+0x62>
 800d1b8:	6829      	ldr	r1, [r5, #0]
 800d1ba:	291d      	cmp	r1, #29
 800d1bc:	d82b      	bhi.n	800d216 <__sflush_r+0xb2>
 800d1be:	4a2a      	ldr	r2, [pc, #168]	@ (800d268 <__sflush_r+0x104>)
 800d1c0:	410a      	asrs	r2, r1
 800d1c2:	07d6      	lsls	r6, r2, #31
 800d1c4:	d427      	bmi.n	800d216 <__sflush_r+0xb2>
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	6062      	str	r2, [r4, #4]
 800d1ca:	04d9      	lsls	r1, r3, #19
 800d1cc:	6922      	ldr	r2, [r4, #16]
 800d1ce:	6022      	str	r2, [r4, #0]
 800d1d0:	d504      	bpl.n	800d1dc <__sflush_r+0x78>
 800d1d2:	1c42      	adds	r2, r0, #1
 800d1d4:	d101      	bne.n	800d1da <__sflush_r+0x76>
 800d1d6:	682b      	ldr	r3, [r5, #0]
 800d1d8:	b903      	cbnz	r3, 800d1dc <__sflush_r+0x78>
 800d1da:	6560      	str	r0, [r4, #84]	@ 0x54
 800d1dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1de:	602f      	str	r7, [r5, #0]
 800d1e0:	b1b9      	cbz	r1, 800d212 <__sflush_r+0xae>
 800d1e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1e6:	4299      	cmp	r1, r3
 800d1e8:	d002      	beq.n	800d1f0 <__sflush_r+0x8c>
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	f7fe f8f4 	bl	800b3d8 <_free_r>
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1f4:	e00d      	b.n	800d212 <__sflush_r+0xae>
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	47b0      	blx	r6
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	1c50      	adds	r0, r2, #1
 800d200:	d1c9      	bne.n	800d196 <__sflush_r+0x32>
 800d202:	682b      	ldr	r3, [r5, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d0c6      	beq.n	800d196 <__sflush_r+0x32>
 800d208:	2b1d      	cmp	r3, #29
 800d20a:	d001      	beq.n	800d210 <__sflush_r+0xac>
 800d20c:	2b16      	cmp	r3, #22
 800d20e:	d11e      	bne.n	800d24e <__sflush_r+0xea>
 800d210:	602f      	str	r7, [r5, #0]
 800d212:	2000      	movs	r0, #0
 800d214:	e022      	b.n	800d25c <__sflush_r+0xf8>
 800d216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d21a:	b21b      	sxth	r3, r3
 800d21c:	e01b      	b.n	800d256 <__sflush_r+0xf2>
 800d21e:	690f      	ldr	r7, [r1, #16]
 800d220:	2f00      	cmp	r7, #0
 800d222:	d0f6      	beq.n	800d212 <__sflush_r+0xae>
 800d224:	0793      	lsls	r3, r2, #30
 800d226:	680e      	ldr	r6, [r1, #0]
 800d228:	bf08      	it	eq
 800d22a:	694b      	ldreq	r3, [r1, #20]
 800d22c:	600f      	str	r7, [r1, #0]
 800d22e:	bf18      	it	ne
 800d230:	2300      	movne	r3, #0
 800d232:	eba6 0807 	sub.w	r8, r6, r7
 800d236:	608b      	str	r3, [r1, #8]
 800d238:	f1b8 0f00 	cmp.w	r8, #0
 800d23c:	dde9      	ble.n	800d212 <__sflush_r+0xae>
 800d23e:	6a21      	ldr	r1, [r4, #32]
 800d240:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d242:	4643      	mov	r3, r8
 800d244:	463a      	mov	r2, r7
 800d246:	4628      	mov	r0, r5
 800d248:	47b0      	blx	r6
 800d24a:	2800      	cmp	r0, #0
 800d24c:	dc08      	bgt.n	800d260 <__sflush_r+0xfc>
 800d24e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d256:	81a3      	strh	r3, [r4, #12]
 800d258:	f04f 30ff 	mov.w	r0, #4294967295
 800d25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d260:	4407      	add	r7, r0
 800d262:	eba8 0800 	sub.w	r8, r8, r0
 800d266:	e7e7      	b.n	800d238 <__sflush_r+0xd4>
 800d268:	dfbffffe 	.word	0xdfbffffe

0800d26c <_fflush_r>:
 800d26c:	b538      	push	{r3, r4, r5, lr}
 800d26e:	690b      	ldr	r3, [r1, #16]
 800d270:	4605      	mov	r5, r0
 800d272:	460c      	mov	r4, r1
 800d274:	b913      	cbnz	r3, 800d27c <_fflush_r+0x10>
 800d276:	2500      	movs	r5, #0
 800d278:	4628      	mov	r0, r5
 800d27a:	bd38      	pop	{r3, r4, r5, pc}
 800d27c:	b118      	cbz	r0, 800d286 <_fflush_r+0x1a>
 800d27e:	6a03      	ldr	r3, [r0, #32]
 800d280:	b90b      	cbnz	r3, 800d286 <_fflush_r+0x1a>
 800d282:	f7fc f985 	bl	8009590 <__sinit>
 800d286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d0f3      	beq.n	800d276 <_fflush_r+0xa>
 800d28e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d290:	07d0      	lsls	r0, r2, #31
 800d292:	d404      	bmi.n	800d29e <_fflush_r+0x32>
 800d294:	0599      	lsls	r1, r3, #22
 800d296:	d402      	bmi.n	800d29e <_fflush_r+0x32>
 800d298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d29a:	f7f5 fe4e 	bl	8002f3a <__retarget_lock_acquire_recursive>
 800d29e:	4628      	mov	r0, r5
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	f7ff ff5f 	bl	800d164 <__sflush_r>
 800d2a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2a8:	07da      	lsls	r2, r3, #31
 800d2aa:	4605      	mov	r5, r0
 800d2ac:	d4e4      	bmi.n	800d278 <_fflush_r+0xc>
 800d2ae:	89a3      	ldrh	r3, [r4, #12]
 800d2b0:	059b      	lsls	r3, r3, #22
 800d2b2:	d4e1      	bmi.n	800d278 <_fflush_r+0xc>
 800d2b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2b6:	f7f5 fe4c 	bl	8002f52 <__retarget_lock_release_recursive>
 800d2ba:	e7dd      	b.n	800d278 <_fflush_r+0xc>

0800d2bc <__swhatbuf_r>:
 800d2bc:	b570      	push	{r4, r5, r6, lr}
 800d2be:	460c      	mov	r4, r1
 800d2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2c4:	2900      	cmp	r1, #0
 800d2c6:	b096      	sub	sp, #88	@ 0x58
 800d2c8:	4615      	mov	r5, r2
 800d2ca:	461e      	mov	r6, r3
 800d2cc:	da0d      	bge.n	800d2ea <__swhatbuf_r+0x2e>
 800d2ce:	89a3      	ldrh	r3, [r4, #12]
 800d2d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d2d4:	f04f 0100 	mov.w	r1, #0
 800d2d8:	bf14      	ite	ne
 800d2da:	2340      	movne	r3, #64	@ 0x40
 800d2dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d2e0:	2000      	movs	r0, #0
 800d2e2:	6031      	str	r1, [r6, #0]
 800d2e4:	602b      	str	r3, [r5, #0]
 800d2e6:	b016      	add	sp, #88	@ 0x58
 800d2e8:	bd70      	pop	{r4, r5, r6, pc}
 800d2ea:	466a      	mov	r2, sp
 800d2ec:	f000 f90e 	bl	800d50c <_fstat_r>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	dbec      	blt.n	800d2ce <__swhatbuf_r+0x12>
 800d2f4:	9901      	ldr	r1, [sp, #4]
 800d2f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d2fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d2fe:	4259      	negs	r1, r3
 800d300:	4159      	adcs	r1, r3
 800d302:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d306:	e7eb      	b.n	800d2e0 <__swhatbuf_r+0x24>

0800d308 <__smakebuf_r>:
 800d308:	898b      	ldrh	r3, [r1, #12]
 800d30a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d30c:	079d      	lsls	r5, r3, #30
 800d30e:	4606      	mov	r6, r0
 800d310:	460c      	mov	r4, r1
 800d312:	d507      	bpl.n	800d324 <__smakebuf_r+0x1c>
 800d314:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d318:	6023      	str	r3, [r4, #0]
 800d31a:	6123      	str	r3, [r4, #16]
 800d31c:	2301      	movs	r3, #1
 800d31e:	6163      	str	r3, [r4, #20]
 800d320:	b003      	add	sp, #12
 800d322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d324:	ab01      	add	r3, sp, #4
 800d326:	466a      	mov	r2, sp
 800d328:	f7ff ffc8 	bl	800d2bc <__swhatbuf_r>
 800d32c:	9f00      	ldr	r7, [sp, #0]
 800d32e:	4605      	mov	r5, r0
 800d330:	4639      	mov	r1, r7
 800d332:	4630      	mov	r0, r6
 800d334:	f7fa fb0c 	bl	8007950 <_malloc_r>
 800d338:	b948      	cbnz	r0, 800d34e <__smakebuf_r+0x46>
 800d33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d33e:	059a      	lsls	r2, r3, #22
 800d340:	d4ee      	bmi.n	800d320 <__smakebuf_r+0x18>
 800d342:	f023 0303 	bic.w	r3, r3, #3
 800d346:	f043 0302 	orr.w	r3, r3, #2
 800d34a:	81a3      	strh	r3, [r4, #12]
 800d34c:	e7e2      	b.n	800d314 <__smakebuf_r+0xc>
 800d34e:	89a3      	ldrh	r3, [r4, #12]
 800d350:	6020      	str	r0, [r4, #0]
 800d352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d356:	81a3      	strh	r3, [r4, #12]
 800d358:	9b01      	ldr	r3, [sp, #4]
 800d35a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d35e:	b15b      	cbz	r3, 800d378 <__smakebuf_r+0x70>
 800d360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d364:	4630      	mov	r0, r6
 800d366:	f000 f8e3 	bl	800d530 <_isatty_r>
 800d36a:	b128      	cbz	r0, 800d378 <__smakebuf_r+0x70>
 800d36c:	89a3      	ldrh	r3, [r4, #12]
 800d36e:	f023 0303 	bic.w	r3, r3, #3
 800d372:	f043 0301 	orr.w	r3, r3, #1
 800d376:	81a3      	strh	r3, [r4, #12]
 800d378:	89a3      	ldrh	r3, [r4, #12]
 800d37a:	431d      	orrs	r5, r3
 800d37c:	81a5      	strh	r5, [r4, #12]
 800d37e:	e7cf      	b.n	800d320 <__smakebuf_r+0x18>

0800d380 <_putc_r>:
 800d380:	b570      	push	{r4, r5, r6, lr}
 800d382:	460d      	mov	r5, r1
 800d384:	4614      	mov	r4, r2
 800d386:	4606      	mov	r6, r0
 800d388:	b118      	cbz	r0, 800d392 <_putc_r+0x12>
 800d38a:	6a03      	ldr	r3, [r0, #32]
 800d38c:	b90b      	cbnz	r3, 800d392 <_putc_r+0x12>
 800d38e:	f7fc f8ff 	bl	8009590 <__sinit>
 800d392:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d394:	07d8      	lsls	r0, r3, #31
 800d396:	d405      	bmi.n	800d3a4 <_putc_r+0x24>
 800d398:	89a3      	ldrh	r3, [r4, #12]
 800d39a:	0599      	lsls	r1, r3, #22
 800d39c:	d402      	bmi.n	800d3a4 <_putc_r+0x24>
 800d39e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3a0:	f7f5 fdcb 	bl	8002f3a <__retarget_lock_acquire_recursive>
 800d3a4:	68a3      	ldr	r3, [r4, #8]
 800d3a6:	3b01      	subs	r3, #1
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	60a3      	str	r3, [r4, #8]
 800d3ac:	da05      	bge.n	800d3ba <_putc_r+0x3a>
 800d3ae:	69a2      	ldr	r2, [r4, #24]
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	db12      	blt.n	800d3da <_putc_r+0x5a>
 800d3b4:	b2eb      	uxtb	r3, r5
 800d3b6:	2b0a      	cmp	r3, #10
 800d3b8:	d00f      	beq.n	800d3da <_putc_r+0x5a>
 800d3ba:	6823      	ldr	r3, [r4, #0]
 800d3bc:	1c5a      	adds	r2, r3, #1
 800d3be:	6022      	str	r2, [r4, #0]
 800d3c0:	701d      	strb	r5, [r3, #0]
 800d3c2:	b2ed      	uxtb	r5, r5
 800d3c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d3c6:	07da      	lsls	r2, r3, #31
 800d3c8:	d405      	bmi.n	800d3d6 <_putc_r+0x56>
 800d3ca:	89a3      	ldrh	r3, [r4, #12]
 800d3cc:	059b      	lsls	r3, r3, #22
 800d3ce:	d402      	bmi.n	800d3d6 <_putc_r+0x56>
 800d3d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3d2:	f7f5 fdbe 	bl	8002f52 <__retarget_lock_release_recursive>
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	bd70      	pop	{r4, r5, r6, pc}
 800d3da:	4629      	mov	r1, r5
 800d3dc:	4622      	mov	r2, r4
 800d3de:	4630      	mov	r0, r6
 800d3e0:	f7fc fa47 	bl	8009872 <__swbuf_r>
 800d3e4:	4605      	mov	r5, r0
 800d3e6:	e7ed      	b.n	800d3c4 <_putc_r+0x44>

0800d3e8 <__sccl>:
 800d3e8:	b570      	push	{r4, r5, r6, lr}
 800d3ea:	780b      	ldrb	r3, [r1, #0]
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	2b5e      	cmp	r3, #94	@ 0x5e
 800d3f0:	bf0b      	itete	eq
 800d3f2:	784b      	ldrbeq	r3, [r1, #1]
 800d3f4:	1c4a      	addne	r2, r1, #1
 800d3f6:	1c8a      	addeq	r2, r1, #2
 800d3f8:	2100      	movne	r1, #0
 800d3fa:	bf08      	it	eq
 800d3fc:	2101      	moveq	r1, #1
 800d3fe:	3801      	subs	r0, #1
 800d400:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800d404:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d408:	42a8      	cmp	r0, r5
 800d40a:	d1fb      	bne.n	800d404 <__sccl+0x1c>
 800d40c:	b90b      	cbnz	r3, 800d412 <__sccl+0x2a>
 800d40e:	1e50      	subs	r0, r2, #1
 800d410:	bd70      	pop	{r4, r5, r6, pc}
 800d412:	f081 0101 	eor.w	r1, r1, #1
 800d416:	54e1      	strb	r1, [r4, r3]
 800d418:	4610      	mov	r0, r2
 800d41a:	4602      	mov	r2, r0
 800d41c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d420:	2d2d      	cmp	r5, #45	@ 0x2d
 800d422:	d005      	beq.n	800d430 <__sccl+0x48>
 800d424:	2d5d      	cmp	r5, #93	@ 0x5d
 800d426:	d016      	beq.n	800d456 <__sccl+0x6e>
 800d428:	2d00      	cmp	r5, #0
 800d42a:	d0f1      	beq.n	800d410 <__sccl+0x28>
 800d42c:	462b      	mov	r3, r5
 800d42e:	e7f2      	b.n	800d416 <__sccl+0x2e>
 800d430:	7846      	ldrb	r6, [r0, #1]
 800d432:	2e5d      	cmp	r6, #93	@ 0x5d
 800d434:	d0fa      	beq.n	800d42c <__sccl+0x44>
 800d436:	42b3      	cmp	r3, r6
 800d438:	dcf8      	bgt.n	800d42c <__sccl+0x44>
 800d43a:	3002      	adds	r0, #2
 800d43c:	461a      	mov	r2, r3
 800d43e:	3201      	adds	r2, #1
 800d440:	4296      	cmp	r6, r2
 800d442:	54a1      	strb	r1, [r4, r2]
 800d444:	dcfb      	bgt.n	800d43e <__sccl+0x56>
 800d446:	1af2      	subs	r2, r6, r3
 800d448:	3a01      	subs	r2, #1
 800d44a:	1c5d      	adds	r5, r3, #1
 800d44c:	42b3      	cmp	r3, r6
 800d44e:	bfa8      	it	ge
 800d450:	2200      	movge	r2, #0
 800d452:	18ab      	adds	r3, r5, r2
 800d454:	e7e1      	b.n	800d41a <__sccl+0x32>
 800d456:	4610      	mov	r0, r2
 800d458:	e7da      	b.n	800d410 <__sccl+0x28>

0800d45a <__submore>:
 800d45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d45e:	460c      	mov	r4, r1
 800d460:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d462:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d466:	4299      	cmp	r1, r3
 800d468:	d11d      	bne.n	800d4a6 <__submore+0x4c>
 800d46a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d46e:	f7fa fa6f 	bl	8007950 <_malloc_r>
 800d472:	b918      	cbnz	r0, 800d47c <__submore+0x22>
 800d474:	f04f 30ff 	mov.w	r0, #4294967295
 800d478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d47c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d480:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d482:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800d486:	6360      	str	r0, [r4, #52]	@ 0x34
 800d488:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800d48c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d490:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800d494:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d498:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800d49c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800d4a0:	6020      	str	r0, [r4, #0]
 800d4a2:	2000      	movs	r0, #0
 800d4a4:	e7e8      	b.n	800d478 <__submore+0x1e>
 800d4a6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800d4a8:	0077      	lsls	r7, r6, #1
 800d4aa:	463a      	mov	r2, r7
 800d4ac:	f000 f88e 	bl	800d5cc <_realloc_r>
 800d4b0:	4605      	mov	r5, r0
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	d0de      	beq.n	800d474 <__submore+0x1a>
 800d4b6:	eb00 0806 	add.w	r8, r0, r6
 800d4ba:	4601      	mov	r1, r0
 800d4bc:	4632      	mov	r2, r6
 800d4be:	4640      	mov	r0, r8
 800d4c0:	f7fd f916 	bl	800a6f0 <memcpy>
 800d4c4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800d4c8:	f8c4 8000 	str.w	r8, [r4]
 800d4cc:	e7e9      	b.n	800d4a2 <__submore+0x48>

0800d4ce <memmove>:
 800d4ce:	4288      	cmp	r0, r1
 800d4d0:	b510      	push	{r4, lr}
 800d4d2:	eb01 0402 	add.w	r4, r1, r2
 800d4d6:	d902      	bls.n	800d4de <memmove+0x10>
 800d4d8:	4284      	cmp	r4, r0
 800d4da:	4623      	mov	r3, r4
 800d4dc:	d807      	bhi.n	800d4ee <memmove+0x20>
 800d4de:	1e43      	subs	r3, r0, #1
 800d4e0:	42a1      	cmp	r1, r4
 800d4e2:	d008      	beq.n	800d4f6 <memmove+0x28>
 800d4e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4ec:	e7f8      	b.n	800d4e0 <memmove+0x12>
 800d4ee:	4402      	add	r2, r0
 800d4f0:	4601      	mov	r1, r0
 800d4f2:	428a      	cmp	r2, r1
 800d4f4:	d100      	bne.n	800d4f8 <memmove+0x2a>
 800d4f6:	bd10      	pop	{r4, pc}
 800d4f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d500:	e7f7      	b.n	800d4f2 <memmove+0x24>
	...

0800d504 <__gettzinfo>:
 800d504:	4800      	ldr	r0, [pc, #0]	@ (800d508 <__gettzinfo+0x4>)
 800d506:	4770      	bx	lr
 800d508:	200001f0 	.word	0x200001f0

0800d50c <_fstat_r>:
 800d50c:	b538      	push	{r3, r4, r5, lr}
 800d50e:	4d07      	ldr	r5, [pc, #28]	@ (800d52c <_fstat_r+0x20>)
 800d510:	2300      	movs	r3, #0
 800d512:	4604      	mov	r4, r0
 800d514:	4608      	mov	r0, r1
 800d516:	4611      	mov	r1, r2
 800d518:	602b      	str	r3, [r5, #0]
 800d51a:	f7f5 fc54 	bl	8002dc6 <_fstat>
 800d51e:	1c43      	adds	r3, r0, #1
 800d520:	d102      	bne.n	800d528 <_fstat_r+0x1c>
 800d522:	682b      	ldr	r3, [r5, #0]
 800d524:	b103      	cbz	r3, 800d528 <_fstat_r+0x1c>
 800d526:	6023      	str	r3, [r4, #0]
 800d528:	bd38      	pop	{r3, r4, r5, pc}
 800d52a:	bf00      	nop
 800d52c:	20008f80 	.word	0x20008f80

0800d530 <_isatty_r>:
 800d530:	b538      	push	{r3, r4, r5, lr}
 800d532:	4d06      	ldr	r5, [pc, #24]	@ (800d54c <_isatty_r+0x1c>)
 800d534:	2300      	movs	r3, #0
 800d536:	4604      	mov	r4, r0
 800d538:	4608      	mov	r0, r1
 800d53a:	602b      	str	r3, [r5, #0]
 800d53c:	f7f5 fc48 	bl	8002dd0 <_isatty>
 800d540:	1c43      	adds	r3, r0, #1
 800d542:	d102      	bne.n	800d54a <_isatty_r+0x1a>
 800d544:	682b      	ldr	r3, [r5, #0]
 800d546:	b103      	cbz	r3, 800d54a <_isatty_r+0x1a>
 800d548:	6023      	str	r3, [r4, #0]
 800d54a:	bd38      	pop	{r3, r4, r5, pc}
 800d54c:	20008f80 	.word	0x20008f80

0800d550 <__assert_func>:
 800d550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d552:	4614      	mov	r4, r2
 800d554:	461a      	mov	r2, r3
 800d556:	4b09      	ldr	r3, [pc, #36]	@ (800d57c <__assert_func+0x2c>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4605      	mov	r5, r0
 800d55c:	68d8      	ldr	r0, [r3, #12]
 800d55e:	b954      	cbnz	r4, 800d576 <__assert_func+0x26>
 800d560:	4b07      	ldr	r3, [pc, #28]	@ (800d580 <__assert_func+0x30>)
 800d562:	461c      	mov	r4, r3
 800d564:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d568:	9100      	str	r1, [sp, #0]
 800d56a:	462b      	mov	r3, r5
 800d56c:	4905      	ldr	r1, [pc, #20]	@ (800d584 <__assert_func+0x34>)
 800d56e:	f000 f85b 	bl	800d628 <fiprintf>
 800d572:	f000 f86b 	bl	800d64c <abort>
 800d576:	4b04      	ldr	r3, [pc, #16]	@ (800d588 <__assert_func+0x38>)
 800d578:	e7f4      	b.n	800d564 <__assert_func+0x14>
 800d57a:	bf00      	nop
 800d57c:	200001a0 	.word	0x200001a0
 800d580:	0800dfb2 	.word	0x0800dfb2
 800d584:	0800ea39 	.word	0x0800ea39
 800d588:	0800ea2c 	.word	0x0800ea2c

0800d58c <_calloc_r>:
 800d58c:	b570      	push	{r4, r5, r6, lr}
 800d58e:	fba1 5402 	umull	r5, r4, r1, r2
 800d592:	b93c      	cbnz	r4, 800d5a4 <_calloc_r+0x18>
 800d594:	4629      	mov	r1, r5
 800d596:	f7fa f9db 	bl	8007950 <_malloc_r>
 800d59a:	4606      	mov	r6, r0
 800d59c:	b928      	cbnz	r0, 800d5aa <_calloc_r+0x1e>
 800d59e:	2600      	movs	r6, #0
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	bd70      	pop	{r4, r5, r6, pc}
 800d5a4:	220c      	movs	r2, #12
 800d5a6:	6002      	str	r2, [r0, #0]
 800d5a8:	e7f9      	b.n	800d59e <_calloc_r+0x12>
 800d5aa:	462a      	mov	r2, r5
 800d5ac:	4621      	mov	r1, r4
 800d5ae:	f7fc f9f5 	bl	800999c <memset>
 800d5b2:	e7f5      	b.n	800d5a0 <_calloc_r+0x14>

0800d5b4 <__env_lock>:
 800d5b4:	4801      	ldr	r0, [pc, #4]	@ (800d5bc <__env_lock+0x8>)
 800d5b6:	f7f5 bcc0 	b.w	8002f3a <__retarget_lock_acquire_recursive>
 800d5ba:	bf00      	nop
 800d5bc:	200036b8 	.word	0x200036b8

0800d5c0 <__env_unlock>:
 800d5c0:	4801      	ldr	r0, [pc, #4]	@ (800d5c8 <__env_unlock+0x8>)
 800d5c2:	f7f5 bcc6 	b.w	8002f52 <__retarget_lock_release_recursive>
 800d5c6:	bf00      	nop
 800d5c8:	200036b8 	.word	0x200036b8

0800d5cc <_realloc_r>:
 800d5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d0:	4680      	mov	r8, r0
 800d5d2:	4615      	mov	r5, r2
 800d5d4:	460c      	mov	r4, r1
 800d5d6:	b921      	cbnz	r1, 800d5e2 <_realloc_r+0x16>
 800d5d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5dc:	4611      	mov	r1, r2
 800d5de:	f7fa b9b7 	b.w	8007950 <_malloc_r>
 800d5e2:	b92a      	cbnz	r2, 800d5f0 <_realloc_r+0x24>
 800d5e4:	f7fd fef8 	bl	800b3d8 <_free_r>
 800d5e8:	2400      	movs	r4, #0
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5f0:	f000 f833 	bl	800d65a <_malloc_usable_size_r>
 800d5f4:	4285      	cmp	r5, r0
 800d5f6:	4606      	mov	r6, r0
 800d5f8:	d802      	bhi.n	800d600 <_realloc_r+0x34>
 800d5fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d5fe:	d8f4      	bhi.n	800d5ea <_realloc_r+0x1e>
 800d600:	4629      	mov	r1, r5
 800d602:	4640      	mov	r0, r8
 800d604:	f7fa f9a4 	bl	8007950 <_malloc_r>
 800d608:	4607      	mov	r7, r0
 800d60a:	2800      	cmp	r0, #0
 800d60c:	d0ec      	beq.n	800d5e8 <_realloc_r+0x1c>
 800d60e:	42b5      	cmp	r5, r6
 800d610:	462a      	mov	r2, r5
 800d612:	4621      	mov	r1, r4
 800d614:	bf28      	it	cs
 800d616:	4632      	movcs	r2, r6
 800d618:	f7fd f86a 	bl	800a6f0 <memcpy>
 800d61c:	4621      	mov	r1, r4
 800d61e:	4640      	mov	r0, r8
 800d620:	f7fd feda 	bl	800b3d8 <_free_r>
 800d624:	463c      	mov	r4, r7
 800d626:	e7e0      	b.n	800d5ea <_realloc_r+0x1e>

0800d628 <fiprintf>:
 800d628:	b40e      	push	{r1, r2, r3}
 800d62a:	b503      	push	{r0, r1, lr}
 800d62c:	4601      	mov	r1, r0
 800d62e:	ab03      	add	r3, sp, #12
 800d630:	4805      	ldr	r0, [pc, #20]	@ (800d648 <fiprintf+0x20>)
 800d632:	f853 2b04 	ldr.w	r2, [r3], #4
 800d636:	6800      	ldr	r0, [r0, #0]
 800d638:	9301      	str	r3, [sp, #4]
 800d63a:	f7ff fb2d 	bl	800cc98 <_vfiprintf_r>
 800d63e:	b002      	add	sp, #8
 800d640:	f85d eb04 	ldr.w	lr, [sp], #4
 800d644:	b003      	add	sp, #12
 800d646:	4770      	bx	lr
 800d648:	200001a0 	.word	0x200001a0

0800d64c <abort>:
 800d64c:	b508      	push	{r3, lr}
 800d64e:	2006      	movs	r0, #6
 800d650:	f000 f834 	bl	800d6bc <raise>
 800d654:	2001      	movs	r0, #1
 800d656:	f7f5 fb91 	bl	8002d7c <_exit>

0800d65a <_malloc_usable_size_r>:
 800d65a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d65e:	1f18      	subs	r0, r3, #4
 800d660:	2b00      	cmp	r3, #0
 800d662:	bfbc      	itt	lt
 800d664:	580b      	ldrlt	r3, [r1, r0]
 800d666:	18c0      	addlt	r0, r0, r3
 800d668:	4770      	bx	lr

0800d66a <_raise_r>:
 800d66a:	291f      	cmp	r1, #31
 800d66c:	b538      	push	{r3, r4, r5, lr}
 800d66e:	4605      	mov	r5, r0
 800d670:	460c      	mov	r4, r1
 800d672:	d904      	bls.n	800d67e <_raise_r+0x14>
 800d674:	2316      	movs	r3, #22
 800d676:	6003      	str	r3, [r0, #0]
 800d678:	f04f 30ff 	mov.w	r0, #4294967295
 800d67c:	bd38      	pop	{r3, r4, r5, pc}
 800d67e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d680:	b112      	cbz	r2, 800d688 <_raise_r+0x1e>
 800d682:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d686:	b94b      	cbnz	r3, 800d69c <_raise_r+0x32>
 800d688:	4628      	mov	r0, r5
 800d68a:	f000 f831 	bl	800d6f0 <_getpid_r>
 800d68e:	4622      	mov	r2, r4
 800d690:	4601      	mov	r1, r0
 800d692:	4628      	mov	r0, r5
 800d694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d698:	f000 b818 	b.w	800d6cc <_kill_r>
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d00a      	beq.n	800d6b6 <_raise_r+0x4c>
 800d6a0:	1c59      	adds	r1, r3, #1
 800d6a2:	d103      	bne.n	800d6ac <_raise_r+0x42>
 800d6a4:	2316      	movs	r3, #22
 800d6a6:	6003      	str	r3, [r0, #0]
 800d6a8:	2001      	movs	r0, #1
 800d6aa:	e7e7      	b.n	800d67c <_raise_r+0x12>
 800d6ac:	2100      	movs	r1, #0
 800d6ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	4798      	blx	r3
 800d6b6:	2000      	movs	r0, #0
 800d6b8:	e7e0      	b.n	800d67c <_raise_r+0x12>
	...

0800d6bc <raise>:
 800d6bc:	4b02      	ldr	r3, [pc, #8]	@ (800d6c8 <raise+0xc>)
 800d6be:	4601      	mov	r1, r0
 800d6c0:	6818      	ldr	r0, [r3, #0]
 800d6c2:	f7ff bfd2 	b.w	800d66a <_raise_r>
 800d6c6:	bf00      	nop
 800d6c8:	200001a0 	.word	0x200001a0

0800d6cc <_kill_r>:
 800d6cc:	b538      	push	{r3, r4, r5, lr}
 800d6ce:	4d07      	ldr	r5, [pc, #28]	@ (800d6ec <_kill_r+0x20>)
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	4604      	mov	r4, r0
 800d6d4:	4608      	mov	r0, r1
 800d6d6:	4611      	mov	r1, r2
 800d6d8:	602b      	str	r3, [r5, #0]
 800d6da:	f7f5 fb47 	bl	8002d6c <_kill>
 800d6de:	1c43      	adds	r3, r0, #1
 800d6e0:	d102      	bne.n	800d6e8 <_kill_r+0x1c>
 800d6e2:	682b      	ldr	r3, [r5, #0]
 800d6e4:	b103      	cbz	r3, 800d6e8 <_kill_r+0x1c>
 800d6e6:	6023      	str	r3, [r4, #0]
 800d6e8:	bd38      	pop	{r3, r4, r5, pc}
 800d6ea:	bf00      	nop
 800d6ec:	20008f80 	.word	0x20008f80

0800d6f0 <_getpid_r>:
 800d6f0:	f7f5 bb3a 	b.w	8002d68 <_getpid>
 800d6f4:	0000      	movs	r0, r0
	...

0800d6f8 <floor>:
 800d6f8:	ec51 0b10 	vmov	r0, r1, d0
 800d6fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d704:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800d708:	2e13      	cmp	r6, #19
 800d70a:	460c      	mov	r4, r1
 800d70c:	4605      	mov	r5, r0
 800d70e:	4680      	mov	r8, r0
 800d710:	dc34      	bgt.n	800d77c <floor+0x84>
 800d712:	2e00      	cmp	r6, #0
 800d714:	da17      	bge.n	800d746 <floor+0x4e>
 800d716:	a332      	add	r3, pc, #200	@ (adr r3, 800d7e0 <floor+0xe8>)
 800d718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71c:	f7f2 fdc6 	bl	80002ac <__adddf3>
 800d720:	2200      	movs	r2, #0
 800d722:	2300      	movs	r3, #0
 800d724:	f7f3 fa08 	bl	8000b38 <__aeabi_dcmpgt>
 800d728:	b150      	cbz	r0, 800d740 <floor+0x48>
 800d72a:	2c00      	cmp	r4, #0
 800d72c:	da55      	bge.n	800d7da <floor+0xe2>
 800d72e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800d732:	432c      	orrs	r4, r5
 800d734:	2500      	movs	r5, #0
 800d736:	42ac      	cmp	r4, r5
 800d738:	4c2b      	ldr	r4, [pc, #172]	@ (800d7e8 <floor+0xf0>)
 800d73a:	bf08      	it	eq
 800d73c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800d740:	4621      	mov	r1, r4
 800d742:	4628      	mov	r0, r5
 800d744:	e023      	b.n	800d78e <floor+0x96>
 800d746:	4f29      	ldr	r7, [pc, #164]	@ (800d7ec <floor+0xf4>)
 800d748:	4137      	asrs	r7, r6
 800d74a:	ea01 0307 	and.w	r3, r1, r7
 800d74e:	4303      	orrs	r3, r0
 800d750:	d01d      	beq.n	800d78e <floor+0x96>
 800d752:	a323      	add	r3, pc, #140	@ (adr r3, 800d7e0 <floor+0xe8>)
 800d754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d758:	f7f2 fda8 	bl	80002ac <__adddf3>
 800d75c:	2200      	movs	r2, #0
 800d75e:	2300      	movs	r3, #0
 800d760:	f7f3 f9ea 	bl	8000b38 <__aeabi_dcmpgt>
 800d764:	2800      	cmp	r0, #0
 800d766:	d0eb      	beq.n	800d740 <floor+0x48>
 800d768:	2c00      	cmp	r4, #0
 800d76a:	bfbe      	ittt	lt
 800d76c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800d770:	4133      	asrlt	r3, r6
 800d772:	18e4      	addlt	r4, r4, r3
 800d774:	ea24 0407 	bic.w	r4, r4, r7
 800d778:	2500      	movs	r5, #0
 800d77a:	e7e1      	b.n	800d740 <floor+0x48>
 800d77c:	2e33      	cmp	r6, #51	@ 0x33
 800d77e:	dd0a      	ble.n	800d796 <floor+0x9e>
 800d780:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800d784:	d103      	bne.n	800d78e <floor+0x96>
 800d786:	4602      	mov	r2, r0
 800d788:	460b      	mov	r3, r1
 800d78a:	f7f2 fd8f 	bl	80002ac <__adddf3>
 800d78e:	ec41 0b10 	vmov	d0, r0, r1
 800d792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d796:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800d79a:	f04f 37ff 	mov.w	r7, #4294967295
 800d79e:	40df      	lsrs	r7, r3
 800d7a0:	4207      	tst	r7, r0
 800d7a2:	d0f4      	beq.n	800d78e <floor+0x96>
 800d7a4:	a30e      	add	r3, pc, #56	@ (adr r3, 800d7e0 <floor+0xe8>)
 800d7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7aa:	f7f2 fd7f 	bl	80002ac <__adddf3>
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	f7f3 f9c1 	bl	8000b38 <__aeabi_dcmpgt>
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	d0c2      	beq.n	800d740 <floor+0x48>
 800d7ba:	2c00      	cmp	r4, #0
 800d7bc:	da0a      	bge.n	800d7d4 <floor+0xdc>
 800d7be:	2e14      	cmp	r6, #20
 800d7c0:	d101      	bne.n	800d7c6 <floor+0xce>
 800d7c2:	3401      	adds	r4, #1
 800d7c4:	e006      	b.n	800d7d4 <floor+0xdc>
 800d7c6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	40b3      	lsls	r3, r6
 800d7ce:	441d      	add	r5, r3
 800d7d0:	4545      	cmp	r5, r8
 800d7d2:	d3f6      	bcc.n	800d7c2 <floor+0xca>
 800d7d4:	ea25 0507 	bic.w	r5, r5, r7
 800d7d8:	e7b2      	b.n	800d740 <floor+0x48>
 800d7da:	2500      	movs	r5, #0
 800d7dc:	462c      	mov	r4, r5
 800d7de:	e7af      	b.n	800d740 <floor+0x48>
 800d7e0:	8800759c 	.word	0x8800759c
 800d7e4:	7e37e43c 	.word	0x7e37e43c
 800d7e8:	bff00000 	.word	0xbff00000
 800d7ec:	000fffff 	.word	0x000fffff

0800d7f0 <_init>:
 800d7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7f2:	bf00      	nop
 800d7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7f6:	bc08      	pop	{r3}
 800d7f8:	469e      	mov	lr, r3
 800d7fa:	4770      	bx	lr

0800d7fc <_fini>:
 800d7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7fe:	bf00      	nop
 800d800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d802:	bc08      	pop	{r3}
 800d804:	469e      	mov	lr, r3
 800d806:	4770      	bx	lr
