
test-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027c0  0800f758  0800f758  00010758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f18  08011f18  00013248  2**0
                  CONTENTS
  4 .ARM          00000008  08011f18  08011f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f20  08011f20  00013248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f20  08011f20  00012f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011f24  08011f24  00012f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000248  20000000  08011f28  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013248  2**0
                  CONTENTS
 10 .bss          00009600  20000248  20000248  00013248  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20009848  20009848  00013248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013248  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035f9c  00000000  00000000  00013278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006b94  00000000  00000000  00049214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00012530  00000000  00000000  0004fda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d80  00000000  00000000  000622d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000020a4  00000000  00000000  00064058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024edc  00000000  00000000  000660fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00032231  00000000  00000000  0008afd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d85d7  00000000  00000000  000bd209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001957e0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006d0c  00000000  00000000  00195824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  0019c530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f73c 	.word	0x0800f73c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	0800f73c 	.word	0x0800f73c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <sendRMCDataToFlash>:
	if(rmc.isValid == 1)
		rmc.date.epoch = convertToEpoch(rmc.date.Yr, rmc.date.Mon, rmc.date.Day, rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
}


void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8000d14:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8000d16:	490c      	ldr	r1, [pc, #48]	@ (8000d48 <sendRMCDataToFlash+0x34>)
void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8000d18:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	220c      	movs	r2, #12
 8000d20:	480a      	ldr	r0, [pc, #40]	@ (8000d4c <sendRMCDataToFlash+0x38>)
 8000d22:	f006 fe67 	bl	80079f4 <HAL_UART_Transmit>
	osStatus_t status = osMessageQueuePut(RMC_MailQFLASHId, rmcData, 0, 1000);
 8000d26:	480a      	ldr	r0, [pc, #40]	@ (8000d50 <sendRMCDataToFlash+0x3c>)
 8000d28:	4621      	mov	r1, r4
 8000d2a:	6800      	ldr	r0, [r0, #0]
 8000d2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d30:	2200      	movs	r2, #0
 8000d32:	f007 f8f5 	bl	8007f20 <osMessageQueuePut>
	if (status != osOK) {
 8000d36:	4601      	mov	r1, r0
 8000d38:	b120      	cbz	r0, 8000d44 <sendRMCDataToFlash+0x30>
	   Debug_printf("\n\n-------------------------Failed to send message: %d ------------------------\n\n", status);
 8000d3a:	4806      	ldr	r0, [pc, #24]	@ (8000d54 <sendRMCDataToFlash+0x40>)
	}
	else{
		Debug_printf("\n\n-------------------------SEND message successfullly at GPS: %d ------------------------\n\n", status);

	}
}
 8000d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Debug_printf("\n\n-------------------------SEND message successfullly at GPS: %d ------------------------\n\n", status);
 8000d40:	f003 bf00 	b.w	8004b44 <Debug_printf>
 8000d44:	4804      	ldr	r0, [pc, #16]	@ (8000d58 <sendRMCDataToFlash+0x44>)
 8000d46:	e7f9      	b.n	8000d3c <sendRMCDataToFlash+0x28>
 8000d48:	0800f834 	.word	0x0800f834
 8000d4c:	200011d0 	.word	0x200011d0
 8000d50:	200016d8 	.word	0x200016d8
 8000d54:	0800f84a 	.word	0x0800f84a
 8000d58:	0800f89b 	.word	0x0800f89b

08000d5c <getRMC>:


void getRMC(){
 8000d5c:	b570      	push	{r4, r5, r6, lr}
	int idx = 0;
	getRMC_time++;
 8000d5e:	4c41      	ldr	r4, [pc, #260]	@ (8000e64 <getRMC+0x108>)
 8000d60:	6823      	ldr	r3, [r4, #0]
 8000d62:	3301      	adds	r3, #1
 8000d64:	6023      	str	r3, [r4, #0]
	int length = 0;
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 8000d66:	4b40      	ldr	r3, [pc, #256]	@ (8000e68 <getRMC+0x10c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	461e      	mov	r6, r3
		if (gpsSentence[i] == '$' && gpsSentence[i+1] == 'G' && gpsSentence[i+2] == 'N' && gpsSentence[i+3] == 'R' && gpsSentence[i+4] == 'M' && gpsSentence[i+5] == 'C'
 8000d6c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000d70:	2924      	cmp	r1, #36	@ 0x24
 8000d72:	4615      	mov	r5, r2
 8000d74:	f102 0201 	add.w	r2, r2, #1
 8000d78:	d16e      	bne.n	8000e58 <getRMC+0xfc>
 8000d7a:	7819      	ldrb	r1, [r3, #0]
 8000d7c:	2947      	cmp	r1, #71	@ 0x47
 8000d7e:	d16b      	bne.n	8000e58 <getRMC+0xfc>
 8000d80:	7859      	ldrb	r1, [r3, #1]
 8000d82:	294e      	cmp	r1, #78	@ 0x4e
 8000d84:	d168      	bne.n	8000e58 <getRMC+0xfc>
 8000d86:	7899      	ldrb	r1, [r3, #2]
 8000d88:	2952      	cmp	r1, #82	@ 0x52
 8000d8a:	d165      	bne.n	8000e58 <getRMC+0xfc>
 8000d8c:	78d9      	ldrb	r1, [r3, #3]
 8000d8e:	294d      	cmp	r1, #77	@ 0x4d
 8000d90:	d162      	bne.n	8000e58 <getRMC+0xfc>
 8000d92:	7919      	ldrb	r1, [r3, #4]
 8000d94:	2943      	cmp	r1, #67	@ 0x43
 8000d96:	d15f      	bne.n	8000e58 <getRMC+0xfc>
			&& (GPS_STACK_SIZE -i) > 200 ){
 8000d98:	f5c2 6100 	rsb	r1, r2, #2048	@ 0x800
 8000d9c:	3101      	adds	r1, #1
 8000d9e:	29c8      	cmp	r1, #200	@ 0xc8
 8000da0:	d95a      	bls.n	8000e58 <getRMC+0xfc>
			isRMCExist = 1;
 8000da2:	4b32      	ldr	r3, [pc, #200]	@ (8000e6c <getRMC+0x110>)
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 8000da4:	4932      	ldr	r1, [pc, #200]	@ (8000e70 <getRMC+0x114>)
 8000da6:	4833      	ldr	r0, [pc, #204]	@ (8000e74 <getRMC+0x118>)
			isRMCExist = 1;
 8000da8:	2201      	movs	r2, #1
 8000daa:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 8000dac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db0:	220c      	movs	r2, #12
 8000db2:	f006 fe1f 	bl	80079f4 <HAL_UART_Transmit>
			while(gpsSentence[i+1] != 0x0A ){
 8000db6:	4a30      	ldr	r2, [pc, #192]	@ (8000e78 <getRMC+0x11c>)
 8000db8:	1973      	adds	r3, r6, r5
	int idx = 0;
 8000dba:	2000      	movs	r0, #0
			while(gpsSentence[i+1] != 0x0A ){
 8000dbc:	7859      	ldrb	r1, [r3, #1]
 8000dbe:	290a      	cmp	r1, #10
 8000dc0:	461d      	mov	r5, r3
 8000dc2:	d143      	bne.n	8000e4c <getRMC+0xf0>
			idx = 0;
			break;
		}
	 }
	for(size_t i = length; i < 128; i++){
		rmc_str[i] = 0;
 8000dc4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e78 <getRMC+0x11c>)
	}
	if(isRMCExist == 1){
 8000dc6:	4e29      	ldr	r6, [pc, #164]	@ (8000e6c <getRMC+0x110>)
		rmc_str[i] = 0;
 8000dc8:	f1c0 0280 	rsb	r2, r0, #128	@ 0x80
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4418      	add	r0, r3
 8000dd0:	f00a fdbc 	bl	800b94c <memset>
	if(isRMCExist == 1){
 8000dd4:	6833      	ldr	r3, [r6, #0]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d110      	bne.n	8000dfc <getRMC+0xa0>
//		parse_rmc(rmc_str);
//		display_rmc_data(&huart1);
//		set_time(rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
//		set_date(rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
		get_RTC_time_date(&rmc);
 8000dda:	4d28      	ldr	r5, [pc, #160]	@ (8000e7c <getRMC+0x120>)
 8000ddc:	4628      	mov	r0, r5
 8000dde:	f002 f959 	bl	8003094 <get_RTC_time_date>

		if(rmc.isValid == 1){
 8000de2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d107      	bne.n	8000df8 <getRMC+0x9c>
			Debug_printf("\n\n------------ Sending RMC at GPS------------\n\n");
 8000de8:	4825      	ldr	r0, [pc, #148]	@ (8000e80 <getRMC+0x124>)
 8000dea:	f003 feab 	bl	8004b44 <Debug_printf>
			sendRMCDataToFlash(&rmc);
 8000dee:	4628      	mov	r0, r5
 8000df0:	f7ff ff90 	bl	8000d14 <sendRMCDataToFlash>
			getRMC_time = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	6023      	str	r3, [r4, #0]
		}
		isRMCExist = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	6033      	str	r3, [r6, #0]
	}
	if(getRMC_time >= 500){
 8000dfc:	6823      	ldr	r3, [r4, #0]
 8000dfe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e02:	db0f      	blt.n	8000e24 <getRMC+0xc8>
		GPS_DISABLE();
 8000e04:	2201      	movs	r2, #1
 8000e06:	2104      	movs	r1, #4
 8000e08:	481e      	ldr	r0, [pc, #120]	@ (8000e84 <getRMC+0x128>)
 8000e0a:	f004 fe9b 	bl	8005b44 <HAL_GPIO_WritePin>
		osDelay(500);
 8000e0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e12:	f006 ffdf 	bl	8007dd4 <osDelay>
		GPS_ENABLE();
 8000e16:	481b      	ldr	r0, [pc, #108]	@ (8000e84 <getRMC+0x128>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2104      	movs	r1, #4
 8000e1c:	f004 fe92 	bl	8005b44 <HAL_GPIO_WritePin>
		getRMC_time = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	6023      	str	r3, [r4, #0]
	}
	Debug_printf("Elapsed Time blabla: %d\n", getRMC_time);
 8000e24:	6821      	ldr	r1, [r4, #0]
 8000e26:	4818      	ldr	r0, [pc, #96]	@ (8000e88 <getRMC+0x12c>)
 8000e28:	f003 fe8c 	bl	8004b44 <Debug_printf>
	HAL_UART_Transmit(&huart1, rmc_str, 128,1000);
 8000e2c:	4912      	ldr	r1, [pc, #72]	@ (8000e78 <getRMC+0x11c>)
 8000e2e:	4811      	ldr	r0, [pc, #68]	@ (8000e74 <getRMC+0x118>)
 8000e30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e34:	2280      	movs	r2, #128	@ 0x80
 8000e36:	f006 fddd 	bl	80079f4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\n",1, 1000);
}
 8000e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*)"\n",1, 1000);
 8000e3e:	4913      	ldr	r1, [pc, #76]	@ (8000e8c <getRMC+0x130>)
 8000e40:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <getRMC+0x118>)
 8000e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e46:	2201      	movs	r2, #1
 8000e48:	f006 bdd4 	b.w	80079f4 <HAL_UART_Transmit>
				rmc_str[idx] = gpsSentence[i];
 8000e4c:	7829      	ldrb	r1, [r5, #0]
 8000e4e:	f802 1b01 	strb.w	r1, [r2], #1
				idx++;
 8000e52:	3301      	adds	r3, #1
 8000e54:	3001      	adds	r0, #1
				i++;
 8000e56:	e7b1      	b.n	8000dbc <getRMC+0x60>
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 8000e58:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8000e5c:	d186      	bne.n	8000d6c <getRMC+0x10>
	int length = 0;
 8000e5e:	2000      	movs	r0, #0
 8000e60:	e7b0      	b.n	8000dc4 <getRMC+0x68>
 8000e62:	bf00      	nop
 8000e64:	20000264 	.word	0x20000264
 8000e68:	200002c8 	.word	0x200002c8
 8000e6c:	20000268 	.word	0x20000268
 8000e70:	0800f8f7 	.word	0x0800f8f7
 8000e74:	200011d0 	.word	0x200011d0
 8000e78:	20000ad8 	.word	0x20000ad8
 8000e7c:	20000270 	.word	0x20000270
 8000e80:	0800f904 	.word	0x0800f904
 8000e84:	48000800 	.word	0x48000800
 8000e88:	0800f934 	.word	0x0800f934
 8000e8c:	080109da 	.word	0x080109da

08000e90 <StartGPS>:


void StartGPS(void const * argument)
{
 8000e90:	b508      	push	{r3, lr}
	Debug_printf("\n\n--------------------STARTING GPS ---------------------\n\n");
 8000e92:	4829      	ldr	r0, [pc, #164]	@ (8000f38 <StartGPS+0xa8>)
	{
//		osThreadId_t thread1 = osThreadGetId();
//		uint32_t freeStack1 = osThreadGetStackSpace(thread1);
//
//		Debug_printf("Thread GPS %p is running low on stack: %04d bytes remaining\n", thread1, freeStack1);
		Debug_printf("\n\n----------------------- Inside GPS ------------------------\n\n");
 8000e94:	4d29      	ldr	r5, [pc, #164]	@ (8000f3c <StartGPS+0xac>)
	Debug_printf("\n\n--------------------STARTING GPS ---------------------\n\n");
 8000e96:	f003 fe55 	bl	8004b44 <Debug_printf>
	rmc.tim.hour = 0;
 8000e9a:	4b29      	ldr	r3, [pc, #164]	@ (8000f40 <StartGPS+0xb0>)
	rmc.speed = 22.4;
 8000e9c:	4a29      	ldr	r2, [pc, #164]	@ (8000f44 <StartGPS+0xb4>)
 8000e9e:	629a      	str	r2, [r3, #40]	@ 0x28
	rmc.lcation.latitude = 20.998022;
 8000ea0:	a121      	add	r1, pc, #132	@ (adr r1, 8000f28 <StartGPS+0x98>)
 8000ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
	rmc.course = 30.5;
 8000ea6:	4a28      	ldr	r2, [pc, #160]	@ (8000f48 <StartGPS+0xb8>)
 8000ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
	rmc.lcation.latitude = 20.998022;
 8000eaa:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
	rmc.lcation.NS = 'N';
 8000eae:	224e      	movs	r2, #78	@ 0x4e
	rmc.lcation.longitude = 105.794756;
 8000eb0:	a11f      	add	r1, pc, #124	@ (adr r1, 8000f30 <StartGPS+0xa0>)
 8000eb2:	e9d1 0100 	ldrd	r0, r1, [r1]
	rmc.lcation.NS = 'N';
 8000eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	rmc.lcation.EW = 'E';
 8000eba:	2245      	movs	r2, #69	@ 0x45
	rmc.tim.hour = 0;
 8000ebc:	2400      	movs	r4, #0
	rmc.lcation.EW = 'E';
 8000ebe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	rmc.isValid = 1;
 8000ec2:	2201      	movs	r2, #1
	rmc.lcation.longitude = 105.794756;
 8000ec4:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
	rmc.tim.min = 0;
 8000ec8:	e9c3 4400 	strd	r4, r4, [r3]
	rmc.date.Mon = 0;
 8000ecc:	e9c3 4404 	strd	r4, r4, [r3, #16]
	rmc.tim.sec = 0;
 8000ed0:	609c      	str	r4, [r3, #8]
	rmc.isValid = 1;
 8000ed2:	631a      	str	r2, [r3, #48]	@ 0x30
	rmc.date.Yr = 0;
 8000ed4:	619c      	str	r4, [r3, #24]
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f4c <StartGPS+0xbc>)
 8000ed8:	491d      	ldr	r1, [pc, #116]	@ (8000f50 <StartGPS+0xc0>)
 8000eda:	481e      	ldr	r0, [pc, #120]	@ (8000f54 <StartGPS+0xc4>)
 8000edc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ee0:	f002 f894 	bl	800300c <RingBufferDmaU8_initUSARTRx>
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000ee4:	4621      	mov	r1, r4
 8000ee6:	4819      	ldr	r0, [pc, #100]	@ (8000f4c <StartGPS+0xbc>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000ee8:	4c1b      	ldr	r4, [pc, #108]	@ (8000f58 <StartGPS+0xc8>)
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000eea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000eee:	f00a fd2d 	bl	800b94c <memset>
		Debug_printf("\n\n----------------------- Inside GPS ------------------------\n\n");
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	f003 fe26 	bl	8004b44 <Debug_printf>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000efe:	4620      	mov	r0, r4
 8000f00:	f004 fe20 	bl	8005b44 <HAL_GPIO_WritePin>
		osDelay(500);
 8000f04:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f08:	f006 ff64 	bl	8007dd4 <osDelay>
		getRMC();
 8000f0c:	f7ff ff26 	bl	8000d5c <getRMC>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f10:	4620      	mov	r0, r4
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f18:	f004 fe14 	bl	8005b44 <HAL_GPIO_WritePin>
		osDelay(500);
 8000f1c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f20:	f006 ff58 	bl	8007dd4 <osDelay>
	while(1)
 8000f24:	e7e5      	b.n	8000ef2 <StartGPS+0x62>
 8000f26:	bf00      	nop
 8000f28:	5eaab042 	.word	0x5eaab042
 8000f2c:	4034ff7e 	.word	0x4034ff7e
 8000f30:	48451330 	.word	0x48451330
 8000f34:	405a72dd 	.word	0x405a72dd
 8000f38:	0800f94d 	.word	0x0800f94d
 8000f3c:	0800f988 	.word	0x0800f988
 8000f40:	20000270 	.word	0x20000270
 8000f44:	41b33333 	.word	0x41b33333
 8000f48:	41f40000 	.word	0x41f40000
 8000f4c:	200002c8 	.word	0x200002c8
 8000f50:	20001148 	.word	0x20001148
 8000f54:	20000ac8 	.word	0x20000ac8
 8000f58:	48000800 	.word	0x48000800

08000f5c <create_terminal_registration>:
RMCSTRUCT rmc_jt;
uint8_t terminal_phone_number[6] = {0};
GSM_MAIL_STRUCT receivedDataGSM;


JT808_TerminalRegistration create_terminal_registration(){
 8000f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	JT808_TerminalRegistration reg_msg = {
 8000f5e:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <create_terminal_registration+0x48>)
JT808_TerminalRegistration create_terminal_registration(){
 8000f60:	b091      	sub	sp, #68	@ 0x44
	JT808_TerminalRegistration reg_msg = {
 8000f62:	ac01      	add	r4, sp, #4
JT808_TerminalRegistration create_terminal_registration(){
 8000f64:	4605      	mov	r5, r0
	JT808_TerminalRegistration reg_msg = {
 8000f66:	f103 0738 	add.w	r7, r3, #56	@ 0x38
 8000f6a:	4622      	mov	r2, r4
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	6859      	ldr	r1, [r3, #4]
 8000f70:	4626      	mov	r6, r4
 8000f72:	c603      	stmia	r6!, {r0, r1}
 8000f74:	3308      	adds	r3, #8
 8000f76:	42bb      	cmp	r3, r7
 8000f78:	4634      	mov	r4, r6
 8000f7a:	d1f7      	bne.n	8000f6c <create_terminal_registration+0x10>
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	6030      	str	r0, [r6, #0]
        .plate_no = {0x00, 0x00, 0x00, 0x00, 0x35, 0x36, 0x37, 0x38, 0x39, 0x31, 0x20, 0x32, 0x39, 0x4C, 0x31, 0x33, 0x34, 0x31, 0x35, 0x34},
        .check_sum = 0x00,  // Placeholder, will be set by the function
        .end_mask = 0x7E
    };

	return reg_msg;
 8000f80:	4613      	mov	r3, r2
 8000f82:	ae0f      	add	r6, sp, #60	@ 0x3c
 8000f84:	462a      	mov	r2, r5
 8000f86:	461c      	mov	r4, r3
 8000f88:	cc03      	ldmia	r4!, {r0, r1}
 8000f8a:	42b4      	cmp	r4, r6
 8000f8c:	6010      	str	r0, [r2, #0]
 8000f8e:	6051      	str	r1, [r2, #4]
 8000f90:	4623      	mov	r3, r4
 8000f92:	f102 0208 	add.w	r2, r2, #8
 8000f96:	d1f6      	bne.n	8000f86 <create_terminal_registration+0x2a>
 8000f98:	6820      	ldr	r0, [r4, #0]
 8000f9a:	6010      	str	r0, [r2, #0]
}
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	b011      	add	sp, #68	@ 0x44
 8000fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	0800f758 	.word	0x0800f758

08000fa8 <create_location_info_report>:


JT808_LocationInfoReport create_location_info_report() {
 8000fa8:	b530      	push	{r4, r5, lr}
	JT808_LocationInfoReport location_info = {
 8000faa:	2541      	movs	r5, #65	@ 0x41
JT808_LocationInfoReport create_location_info_report() {
 8000fac:	b093      	sub	sp, #76	@ 0x4c
 8000fae:	4604      	mov	r4, r0
	JT808_LocationInfoReport location_info = {
 8000fb0:	462a      	mov	r2, r5
 8000fb2:	4906      	ldr	r1, [pc, #24]	@ (8000fcc <create_location_info_report+0x24>)
 8000fb4:	a801      	add	r0, sp, #4
 8000fb6:	f00b fb1d 	bl	800c5f4 <memcpy>
        .signal = {0x31},                      // 31
        .additional = {0x01, 0x00, 0xFD, 0x04, 0x03, 0xF1, 0x00, 0x00, 0x0A}, // 01 00 FD 04 03 F1 00 00 0A
        .end_mask = 0x7E                       // 7E
    };
    
    return location_info;
 8000fba:	462a      	mov	r2, r5
 8000fbc:	a901      	add	r1, sp, #4
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f00b fb18 	bl	800c5f4 <memcpy>
}
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	b013      	add	sp, #76	@ 0x4c
 8000fc8:	bd30      	pop	{r4, r5, pc}
 8000fca:	bf00      	nop
 8000fcc:	0800f794 	.word	0x0800f794

08000fd0 <set_status_bit>:
void clearBit(uint8_t *status, int bitPosition) {
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
}

void set_status_bit(uint8_t *status_bit){
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <set_status_bit+0x2c>)
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000fd2:	78c3      	ldrb	r3, [r0, #3]
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8000fd4:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
 8000fd8:	294e      	cmp	r1, #78	@ 0x4e
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000fda:	bf0c      	ite	eq
 8000fdc:	f003 03fb 	andeq.w	r3, r3, #251	@ 0xfb
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8000fe0:	f043 0304 	orrne.w	r3, r3, #4
 8000fe4:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 2);

	if(rmc_jt.lcation.EW == 'E') clearBit(status_bit+3, 3);
 8000fe6:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 8000fea:	2a45      	cmp	r2, #69	@ 0x45
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000fec:	bf0c      	ite	eq
 8000fee:	f003 03f7 	andeq.w	r3, r3, #247	@ 0xf7
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8000ff2:	f043 0308 	orrne.w	r3, r3, #8
 8000ff6:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 3);
}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000bc0 	.word	0x20000bc0

08001000 <send_AT_command>:
    memcpy(message_array, location_info, *array_length);  // Copy struct data into message array

    return message_array;
}

void send_AT_command(const char *command) {
 8001000:	b510      	push	{r4, lr}
 8001002:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8001004:	f7ff f944 	bl	8000290 <strlen>
 8001008:	4621      	mov	r1, r4
 800100a:	b282      	uxth	r2, r0
}
 800100c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <send_AT_command+0x1c>)
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	f006 bced 	b.w	80079f4 <HAL_UART_Transmit>
 800101a:	bf00      	nop
 800101c:	200010c0 	.word	0x200010c0

08001020 <SIM_UART_ReInitializeRxDMA>:

void SIM_UART_ReInitializeRxDMA(void){
 8001020:	b510      	push	{r4, lr}
	HAL_StatusTypeDef ret = HAL_UART_Abort(&huart3);
 8001022:	4809      	ldr	r0, [pc, #36]	@ (8001048 <SIM_UART_ReInitializeRxDMA+0x28>)
 8001024:	f006 fa79 	bl	800751a <HAL_UART_Abort>
	if(ret != HAL_OK)
 8001028:	b108      	cbz	r0, 800102e <SIM_UART_ReInitializeRxDMA+0xe>
	{
		Error_Handler();			
 800102a:	f002 fb38 	bl	800369e <Error_Handler>
	}		
	osDelay(50);	//	50 is OK
 800102e:	2032      	movs	r0, #50	@ 0x32
 8001030:	f006 fed0 	bl	8007dd4 <osDelay>
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
}
 8001034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <SIM_UART_ReInitializeRxDMA+0x2c>)
 800103a:	4903      	ldr	r1, [pc, #12]	@ (8001048 <SIM_UART_ReInitializeRxDMA+0x28>)
 800103c:	4804      	ldr	r0, [pc, #16]	@ (8001050 <SIM_UART_ReInitializeRxDMA+0x30>)
 800103e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001042:	f001 bfe3 	b.w	800300c <RingBufferDmaU8_initUSARTRx>
 8001046:	bf00      	nop
 8001048:	200010c0 	.word	0x200010c0
 800104c:	20000c38 	.word	0x20000c38
 8001050:	20000c28 	.word	0x20000c28

08001054 <find_length>:

int find_length(uint8_t *str){
	int i = 0;
	while(str[i] != 0x00){
 8001054:	f7ff b91c 	b.w	8000290 <strlen>

08001058 <receive_response>:
	}
	return i;
		
}

void receive_response(char *cmd_str) {
 8001058:	b530      	push	{r4, r5, lr}
	uint8_t output_buffer[128];
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
	uart_transmit_string(&huart1, output_buffer);
 800105a:	4c0e      	ldr	r4, [pc, #56]	@ (8001094 <receive_response+0x3c>)
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 800105c:	4a0e      	ldr	r2, [pc, #56]	@ (8001098 <receive_response+0x40>)
	//while(response[1] == '\0'){}

	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 800105e:	4d0f      	ldr	r5, [pc, #60]	@ (800109c <receive_response+0x44>)
void receive_response(char *cmd_str) {
 8001060:	b0a1      	sub	sp, #132	@ 0x84
 8001062:	4603      	mov	r3, r0
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 8001064:	2180      	movs	r1, #128	@ 0x80
 8001066:	4668      	mov	r0, sp
 8001068:	f00a fb74 	bl	800b754 <sniprintf>
	uart_transmit_string(&huart1, output_buffer);
 800106c:	4669      	mov	r1, sp
 800106e:	4620      	mov	r0, r4
 8001070:	f003 fd58 	bl	8004b24 <uart_transmit_string>
	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 8001074:	4628      	mov	r0, r5
 8001076:	f7ff ffed 	bl	8001054 <find_length>
 800107a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107e:	b282      	uxth	r2, r0
 8001080:	4629      	mov	r1, r5
 8001082:	4620      	mov	r0, r4
 8001084:	f006 fcb6 	bl	80079f4 <HAL_UART_Transmit>
	uart_transmit_string(&huart1, (uint8_t*)"\n");
 8001088:	4905      	ldr	r1, [pc, #20]	@ (80010a0 <receive_response+0x48>)
 800108a:	4620      	mov	r0, r4
 800108c:	f003 fd4a 	bl	8004b24 <uart_transmit_string>
//	osDelay(1000);
}
 8001090:	b021      	add	sp, #132	@ 0x84
 8001092:	bd30      	pop	{r4, r5, pc}
 8001094:	200011d0 	.word	0x200011d0
 8001098:	0800f9c8 	.word	0x0800f9c8
 800109c:	20000c38 	.word	0x20000c38
 80010a0:	080109da 	.word	0x080109da

080010a4 <init_SIM_module>:

void init_SIM_module() {
 80010a4:	b510      	push	{r4, lr}
    
    // Check if module responds
	SIM_ENABLE();
 80010a6:	4c0b      	ldr	r4, [pc, #44]	@ (80010d4 <init_SIM_module+0x30>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	4611      	mov	r1, r2
 80010ac:	4620      	mov	r0, r4
 80010ae:	f004 fd49 	bl	8005b44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2102      	movs	r1, #2
 80010b6:	4620      	mov	r0, r4
 80010b8:	f004 fd44 	bl	8005b44 <HAL_GPIO_WritePin>
	osDelay(2000);
 80010bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010c0:	f006 fe88 	bl	8007dd4 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010c4:	4620      	mov	r0, r4
 80010c6:	2201      	movs	r2, #1
}
 80010c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010cc:	2102      	movs	r1, #2
 80010ce:	f004 bd39 	b.w	8005b44 <HAL_GPIO_WritePin>
 80010d2:	bf00      	nop
 80010d4:	48000800 	.word	0x48000800

080010d8 <reboot_SIM_module>:

void reboot_SIM_module(){
 80010d8:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010da:	4c11      	ldr	r4, [pc, #68]	@ (8001120 <reboot_SIM_module+0x48>)
 80010dc:	2200      	movs	r2, #0
 80010de:	2102      	movs	r1, #2
 80010e0:	4620      	mov	r0, r4
 80010e2:	f004 fd2f 	bl	8005b44 <HAL_GPIO_WritePin>
	osDelay(1500);
 80010e6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80010ea:	f006 fe73 	bl	8007dd4 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2102      	movs	r1, #2
 80010f2:	4620      	mov	r0, r4
 80010f4:	f004 fd26 	bl	8005b44 <HAL_GPIO_WritePin>
	osDelay(10000);
 80010f8:	f242 7010 	movw	r0, #10000	@ 0x2710
 80010fc:	f006 fe6a 	bl	8007dd4 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2102      	movs	r1, #2
 8001104:	4620      	mov	r0, r4
 8001106:	f004 fd1d 	bl	8005b44 <HAL_GPIO_WritePin>
	osDelay(1500);
 800110a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800110e:	f006 fe61 	bl	8007dd4 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001112:	4620      	mov	r0, r4
 8001114:	2201      	movs	r2, #1
}
 8001116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800111a:	2102      	movs	r1, #2
 800111c:	f004 bd12 	b.w	8005b44 <HAL_GPIO_WritePin>
 8001120:	48000800 	.word	0x48000800

08001124 <convert_dec_to_hex_value>:

int convert_dec_to_hex_value(int int_value){
    return (int_value /10*16) + (int_value%10);
 8001124:	220a      	movs	r2, #10
 8001126:	fb90 f3f2 	sdiv	r3, r0, r2
 800112a:	fb02 0013 	mls	r0, r2, r3, r0
}
 800112e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8001132:	4770      	bx	lr
 8001134:	0000      	movs	r0, r0
	...

08001138 <save_rmc_to_location_info>:


void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8001138:	b570      	push	{r4, r5, r6, lr}
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 800113a:	4d43      	ldr	r5, [pc, #268]	@ (8001248 <save_rmc_to_location_info+0x110>)
void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 800113c:	4604      	mov	r4, r0
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 800113e:	69a8      	ldr	r0, [r5, #24]
 8001140:	f7ff fff0 	bl	8001124 <convert_dec_to_hex_value>
 8001144:	f884 0023 	strb.w	r0, [r4, #35]	@ 0x23
	location_info->timestamp[1] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Mon);          // Assign month (0x11)
 8001148:	6968      	ldr	r0, [r5, #20]
 800114a:	f7ff ffeb 	bl	8001124 <convert_dec_to_hex_value>
 800114e:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
	location_info->timestamp[2] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Day);            // Assign day (0x08)
 8001152:	6928      	ldr	r0, [r5, #16]
 8001154:	f7ff ffe6 	bl	8001124 <convert_dec_to_hex_value>
 8001158:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
	location_info->timestamp[3] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.hour);           // Assign hour (0x14)
 800115c:	6828      	ldr	r0, [r5, #0]
 800115e:	f7ff ffe1 	bl	8001124 <convert_dec_to_hex_value>
 8001162:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
	location_info->timestamp[4] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.min);         // Assign minute (0x55)
 8001166:	6868      	ldr	r0, [r5, #4]
 8001168:	f7ff ffdc 	bl	8001124 <convert_dec_to_hex_value>
 800116c:	f884 0027 	strb.w	r0, [r4, #39]	@ 0x27
	location_info->timestamp[5] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.sec);  
 8001170:	68a8      	ldr	r0, [r5, #8]
 8001172:	f7ff ffd7 	bl	8001124 <convert_dec_to_hex_value>
 8001176:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
	double latitude = rmc_jt.lcation.latitude * 1000000;
 800117a:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	@ 0x38
 800117e:	a32e      	add	r3, pc, #184	@ (adr r3, 8001238 <save_rmc_to_location_info+0x100>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff fa48 	bl	8000618 <__aeabi_dmul>
	double longitude = rmc_jt.lcation.longitude * 1000000;
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 8001188:	ec41 0b10 	vmov	d0, r0, r1
 800118c:	f00e fa90 	bl	800f6b0 <round>
 8001190:	ec51 0b10 	vmov	r0, r1, d0
 8001194:	f7ff fcf0 	bl	8000b78 <__aeabi_d2iz>
	double longitude = rmc_jt.lcation.longitude * 1000000;
 8001198:	a327      	add	r3, pc, #156	@ (adr r3, 8001238 <save_rmc_to_location_info+0x100>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 800119e:	4606      	mov	r6, r0
	double longitude = rmc_jt.lcation.longitude * 1000000;
 80011a0:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 80011a4:	f7ff fa38 	bl	8000618 <__aeabi_dmul>
	int32_t longitude_int = (int32_t)round(longitude);
 80011a8:	ec41 0b10 	vmov	d0, r0, r1
 80011ac:	f00e fa80 	bl	800f6b0 <round>
 80011b0:	ec51 0b10 	vmov	r0, r1, d0
 80011b4:	f7ff fce0 	bl	8000b78 <__aeabi_d2iz>
	
	location_info->latitude[0] = (latitude_int >> 24) & 0xFF;  // Most significant byte
 80011b8:	0e33      	lsrs	r3, r6, #24
 80011ba:	7563      	strb	r3, [r4, #21]
	location_info->latitude[1] = (latitude_int >> 16) & 0xFF;
 80011bc:	1433      	asrs	r3, r6, #16
 80011be:	75a3      	strb	r3, [r4, #22]
	location_info->latitude[2] = (latitude_int >> 8) & 0xFF;
 80011c0:	1233      	asrs	r3, r6, #8
 80011c2:	75e3      	strb	r3, [r4, #23]
	location_info->latitude[3] = latitude_int & 0xFF;
	
	location_info->longitude[0] = (longitude_int >> 24) & 0xFF;  // Most significant byte
 80011c4:	0e03      	lsrs	r3, r0, #24
 80011c6:	7663      	strb	r3, [r4, #25]
	location_info->longitude[1] = (longitude_int >> 16) & 0xFF;
 80011c8:	1403      	asrs	r3, r0, #16
 80011ca:	76a3      	strb	r3, [r4, #26]
	location_info->longitude[2] = (longitude_int >> 8) & 0xFF;
 80011cc:	1203      	asrs	r3, r0, #8
 80011ce:	76e3      	strb	r3, [r4, #27]
	location_info->longitude[3] = longitude_int & 0xFF;
 80011d0:	7720      	strb	r0, [r4, #28]
	location_info->latitude[3] = latitude_int & 0xFF;
 80011d2:	7626      	strb	r6, [r4, #24]
	
	int speed = round(rmc_jt.speed * 10 * 1.852);
 80011d4:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80011d8:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	ee17 0a90 	vmov	r0, s15
 80011e4:	f7ff f9c0 	bl	8000568 <__aeabi_f2d>
 80011e8:	a315      	add	r3, pc, #84	@ (adr r3, 8001240 <save_rmc_to_location_info+0x108>)
 80011ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ee:	f7ff fa13 	bl	8000618 <__aeabi_dmul>
 80011f2:	ec41 0b10 	vmov	d0, r0, r1
 80011f6:	f00e fa5b 	bl	800f6b0 <round>
 80011fa:	ec51 0b10 	vmov	r0, r1, d0
 80011fe:	f7ff fcbb 	bl	8000b78 <__aeabi_d2iz>
	location_info->speed[0] = (speed >> 8) & 0xFF;
 8001202:	1203      	asrs	r3, r0, #8
 8001204:	77e3      	strb	r3, [r4, #31]
	location_info->speed[1] =  speed & 0xFF;
 8001206:	f884 0020 	strb.w	r0, [r4, #32]
	
	int direction = round(rmc_jt.course);
 800120a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800120c:	f7ff f9ac 	bl	8000568 <__aeabi_f2d>
 8001210:	ec41 0b10 	vmov	d0, r0, r1
 8001214:	f00e fa4c 	bl	800f6b0 <round>
 8001218:	ec51 0b10 	vmov	r0, r1, d0
 800121c:	f7ff fcac 	bl	8000b78 <__aeabi_d2iz>
	location_info->direction[0] = (direction >> 8) & 0xFF;
 8001220:	1203      	asrs	r3, r0, #8
	location_info->direction[1] =  direction & 0xFF;
 8001222:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
	location_info->direction[0] = (direction >> 8) & 0xFF;
 8001226:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
	
	set_status_bit(location_info->status);
 800122a:	f104 0011 	add.w	r0, r4, #17
}
 800122e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	set_status_bit(location_info->status);
 8001232:	f7ff becd 	b.w	8000fd0 <set_status_bit>
 8001236:	bf00      	nop
 8001238:	00000000 	.word	0x00000000
 800123c:	412e8480 	.word	0x412e8480
 8001240:	c083126f 	.word	0xc083126f
 8001244:	3ffda1ca 	.word	0x3ffda1ca
 8001248:	20000bc0 	.word	0x20000bc0

0800124c <first_check_SIM>:

//AT
int first_check_SIM()
{
 800124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800124e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001252:	2100      	movs	r1, #0
 8001254:	4845      	ldr	r0, [pc, #276]	@ (800136c <first_check_SIM+0x120>)
	SIM_UART_ReInitializeRxDMA();
	const char *substring = "PB DONE";
	int count_check = 0;
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	while(strstr((char *) response, substring) == NULL)
 8001256:	4d46      	ldr	r5, [pc, #280]	@ (8001370 <first_check_SIM+0x124>)
 8001258:	4c44      	ldr	r4, [pc, #272]	@ (800136c <first_check_SIM+0x120>)
	{
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 800125a:	4e46      	ldr	r6, [pc, #280]	@ (8001374 <first_check_SIM+0x128>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800125c:	f00a fb76 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001260:	f7ff fede 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001264:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001268:	2100      	movs	r1, #0
 800126a:	4840      	ldr	r0, [pc, #256]	@ (800136c <first_check_SIM+0x120>)
 800126c:	f00a fb6e 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001270:	f7ff fed6 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	while(strstr((char *) response, substring) == NULL)
 8001274:	4629      	mov	r1, r5
 8001276:	4620      	mov	r0, r4
 8001278:	f00a fbb8 	bl	800b9ec <strstr>
 800127c:	2800      	cmp	r0, #0
 800127e:	d056      	beq.n	800132e <first_check_SIM+0xe2>
		osDelay(1000);
		if(count_check >= 40) return 0;
		osDelay(200);
	}
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001280:	483c      	ldr	r0, [pc, #240]	@ (8001374 <first_check_SIM+0x128>)

	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	send_AT_command(FIRST_CHECK);
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8001282:	4e3d      	ldr	r6, [pc, #244]	@ (8001378 <first_check_SIM+0x12c>)
 8001284:	4d39      	ldr	r5, [pc, #228]	@ (800136c <first_check_SIM+0x120>)
		receive_response("First check SIM MODULE\n");
 8001286:	4f3d      	ldr	r7, [pc, #244]	@ (800137c <first_check_SIM+0x130>)
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001288:	f7ff fee6 	bl	8001058 <receive_response>
	osDelay(1000);
 800128c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001290:	f006 fda0 	bl	8007dd4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001294:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001298:	2100      	movs	r1, #0
 800129a:	4834      	ldr	r0, [pc, #208]	@ (800136c <first_check_SIM+0x120>)
 800129c:	f00a fb56 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 80012a0:	f7ff febe 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(FIRST_CHECK);
 80012a4:	4836      	ldr	r0, [pc, #216]	@ (8001380 <first_check_SIM+0x134>)
 80012a6:	f7ff feab 	bl	8001000 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80012aa:	4631      	mov	r1, r6
 80012ac:	4628      	mov	r0, r5
 80012ae:	f00a fb9d 	bl	800b9ec <strstr>
 80012b2:	4604      	mov	r4, r0
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d145      	bne.n	8001344 <first_check_SIM+0xf8>
	}
	receive_response("First check SIM MODULE\n");
 80012b8:	4830      	ldr	r0, [pc, #192]	@ (800137c <first_check_SIM+0x130>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	send_AT_command("AT+CPAS\r\n");
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80012ba:	4e2f      	ldr	r6, [pc, #188]	@ (8001378 <first_check_SIM+0x12c>)
 80012bc:	4d2b      	ldr	r5, [pc, #172]	@ (800136c <first_check_SIM+0x120>)
		receive_response("Check status of SIM MODULE\n");
 80012be:	4f31      	ldr	r7, [pc, #196]	@ (8001384 <first_check_SIM+0x138>)
	receive_response("First check SIM MODULE\n");
 80012c0:	f7ff feca 	bl	8001058 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80012c4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80012c8:	4621      	mov	r1, r4
 80012ca:	4828      	ldr	r0, [pc, #160]	@ (800136c <first_check_SIM+0x120>)
 80012cc:	f00a fb3e 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 80012d0:	f7ff fea6 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CPAS\r\n");
 80012d4:	482c      	ldr	r0, [pc, #176]	@ (8001388 <first_check_SIM+0x13c>)
 80012d6:	f7ff fe93 	bl	8001000 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80012da:	4631      	mov	r1, r6
 80012dc:	4628      	mov	r0, r5
 80012de:	f00a fb85 	bl	800b9ec <strstr>
 80012e2:	4604      	mov	r4, r0
 80012e4:	bb90      	cbnz	r0, 800134c <first_check_SIM+0x100>
		osDelay(1000);
	}
	receive_response("Check status of SIM MODULE\n");
 80012e6:	4827      	ldr	r0, [pc, #156]	@ (8001384 <first_check_SIM+0x138>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	send_AT_command("AT+CMEE=2\r\n");
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80012e8:	4e23      	ldr	r6, [pc, #140]	@ (8001378 <first_check_SIM+0x12c>)
 80012ea:	4d20      	ldr	r5, [pc, #128]	@ (800136c <first_check_SIM+0x120>)
		receive_response("Check enable result code\n");
 80012ec:	4f27      	ldr	r7, [pc, #156]	@ (800138c <first_check_SIM+0x140>)
	receive_response("Check status of SIM MODULE\n");
 80012ee:	f7ff feb3 	bl	8001058 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80012f2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80012f6:	4621      	mov	r1, r4
 80012f8:	481c      	ldr	r0, [pc, #112]	@ (800136c <first_check_SIM+0x120>)
 80012fa:	f00a fb27 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 80012fe:	f7ff fe8f 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CMEE=2\r\n");
 8001302:	4823      	ldr	r0, [pc, #140]	@ (8001390 <first_check_SIM+0x144>)
 8001304:	f7ff fe7c 	bl	8001000 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8001308:	4631      	mov	r1, r6
 800130a:	4628      	mov	r0, r5
 800130c:	f00a fb6e 	bl	800b9ec <strstr>
 8001310:	4604      	mov	r4, r0
 8001312:	bb18      	cbnz	r0, 800135c <first_check_SIM+0x110>
		osDelay(1000);
	}
	receive_response("Check enable result code\n");
 8001314:	481d      	ldr	r0, [pc, #116]	@ (800138c <first_check_SIM+0x140>)
 8001316:	f7ff fe9f 	bl	8001058 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800131a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800131e:	4621      	mov	r1, r4
 8001320:	4812      	ldr	r0, [pc, #72]	@ (800136c <first_check_SIM+0x120>)
 8001322:	f00a fb13 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001326:	f7ff fe7b 	bl	8001020 <SIM_UART_ReInitializeRxDMA>

	return 1;
}
 800132a:	2001      	movs	r0, #1
 800132c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 800132e:	4630      	mov	r0, r6
 8001330:	f7ff fe92 	bl	8001058 <receive_response>
		osDelay(1000);
 8001334:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001338:	f006 fd4c 	bl	8007dd4 <osDelay>
		osDelay(200);
 800133c:	20c8      	movs	r0, #200	@ 0xc8
 800133e:	f006 fd49 	bl	8007dd4 <osDelay>
 8001342:	e797      	b.n	8001274 <first_check_SIM+0x28>
		receive_response("First check SIM MODULE\n");
 8001344:	4638      	mov	r0, r7
 8001346:	f7ff fe87 	bl	8001058 <receive_response>
 800134a:	e7ae      	b.n	80012aa <first_check_SIM+0x5e>
		receive_response("Check status of SIM MODULE\n");
 800134c:	4638      	mov	r0, r7
 800134e:	f7ff fe83 	bl	8001058 <receive_response>
		osDelay(1000);
 8001352:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001356:	f006 fd3d 	bl	8007dd4 <osDelay>
 800135a:	e7be      	b.n	80012da <first_check_SIM+0x8e>
		receive_response("Check enable result code\n");
 800135c:	4638      	mov	r0, r7
 800135e:	f7ff fe7b 	bl	8001058 <receive_response>
		osDelay(1000);
 8001362:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001366:	f006 fd35 	bl	8007dd4 <osDelay>
 800136a:	e7cd      	b.n	8001308 <first_check_SIM+0xbc>
 800136c:	20000c38 	.word	0x20000c38
 8001370:	0800fa05 	.word	0x0800fa05
 8001374:	0800f9e1 	.word	0x0800f9e1
 8001378:	0800fa2a 	.word	0x0800fa2a
 800137c:	0800fa12 	.word	0x0800fa12
 8001380:	0800fa0d 	.word	0x0800fa0d
 8001384:	0800fa37 	.word	0x0800fa37
 8001388:	0800fa2d 	.word	0x0800fa2d
 800138c:	0800fa5f 	.word	0x0800fa5f
 8001390:	0800fa53 	.word	0x0800fa53

08001394 <extract_last_12_digits_bcd>:


void extract_last_12_digits_bcd(const uint8_t *response, uint8_t *output) {
 8001394:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001396:	460d      	mov	r5, r1
	uint8_t output_buffer[10];
	const uint8_t *start = response;
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 8001398:	4604      	mov	r4, r0
 800139a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800139e:	b1cb      	cbz	r3, 80013d4 <extract_last_12_digits_bcd+0x40>
 80013a0:	2b41      	cmp	r3, #65	@ 0x41
 80013a2:	d1f9      	bne.n	8001398 <extract_last_12_digits_bcd+0x4>
 80013a4:	7803      	ldrb	r3, [r0, #0]
 80013a6:	2b54      	cmp	r3, #84	@ 0x54
 80013a8:	d1f6      	bne.n	8001398 <extract_last_12_digits_bcd+0x4>
 80013aa:	7843      	ldrb	r3, [r0, #1]
 80013ac:	2b2b      	cmp	r3, #43	@ 0x2b
 80013ae:	d1f3      	bne.n	8001398 <extract_last_12_digits_bcd+0x4>
 80013b0:	7883      	ldrb	r3, [r0, #2]
 80013b2:	2b43      	cmp	r3, #67	@ 0x43
 80013b4:	d1f0      	bne.n	8001398 <extract_last_12_digits_bcd+0x4>
					   start[3] == 'C' && start[4] == 'G' && start[5] == 'S' &&
 80013b6:	78c3      	ldrb	r3, [r0, #3]
 80013b8:	2b47      	cmp	r3, #71	@ 0x47
 80013ba:	d1ed      	bne.n	8001398 <extract_last_12_digits_bcd+0x4>
 80013bc:	7903      	ldrb	r3, [r0, #4]
 80013be:	2b53      	cmp	r3, #83	@ 0x53
 80013c0:	d1ea      	bne.n	8001398 <extract_last_12_digits_bcd+0x4>
 80013c2:	7943      	ldrb	r3, [r0, #5]
 80013c4:	2b4e      	cmp	r3, #78	@ 0x4e
 80013c6:	d1e7      	bne.n	8001398 <extract_last_12_digits_bcd+0x4>
					   start[6] == 'N' && start[7] == '=' && start[8] == '1')) {
 80013c8:	7983      	ldrb	r3, [r0, #6]
 80013ca:	2b3d      	cmp	r3, #61	@ 0x3d
 80013cc:	d1e4      	bne.n	8001398 <extract_last_12_digits_bcd+0x4>
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 80013ce:	79c3      	ldrb	r3, [r0, #7]
 80013d0:	2b31      	cmp	r3, #49	@ 0x31
 80013d2:	d1e1      	bne.n	8001398 <extract_last_12_digits_bcd+0x4>
		start++;
	}
	uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number: ");
 80013d4:	4922      	ldr	r1, [pc, #136]	@ (8001460 <extract_last_12_digits_bcd+0xcc>)
 80013d6:	4823      	ldr	r0, [pc, #140]	@ (8001464 <extract_last_12_digits_bcd+0xd0>)
 80013d8:	f003 fba4 	bl	8004b24 <uart_transmit_string>
	uart_transmit_string( &huart1,(uint8_t *) start);
 80013dc:	4821      	ldr	r0, [pc, #132]	@ (8001464 <extract_last_12_digits_bcd+0xd0>)
 80013de:	4621      	mov	r1, r4
 80013e0:	f003 fba0 	bl	8004b24 <uart_transmit_string>
	// If "AT+CGSN=1" is found, move to the start of the number (skip "AT+CGSN=1 ")
	if (*start) {
 80013e4:	7823      	ldrb	r3, [r4, #0]
 80013e6:	b96b      	cbnz	r3, 8001404 <extract_last_12_digits_bcd+0x70>
			for (int i = 0; i < 6; i++) {
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
			}
		}
	}
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number-0: ");
 80013e8:	491f      	ldr	r1, [pc, #124]	@ (8001468 <extract_last_12_digits_bcd+0xd4>)
 80013ea:	481e      	ldr	r0, [pc, #120]	@ (8001464 <extract_last_12_digits_bcd+0xd0>)
 80013ec:	f003 fb9a 	bl	8004b24 <uart_transmit_string>
	uart_transmit_string(&huart1, output);
 80013f0:	4629      	mov	r1, r5
 80013f2:	481c      	ldr	r0, [pc, #112]	@ (8001464 <extract_last_12_digits_bcd+0xd0>)
 80013f4:	f003 fb96 	bl	8004b24 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 80013f8:	491c      	ldr	r1, [pc, #112]	@ (800146c <extract_last_12_digits_bcd+0xd8>)
 80013fa:	481a      	ldr	r0, [pc, #104]	@ (8001464 <extract_last_12_digits_bcd+0xd0>)
 80013fc:	f003 fb92 	bl	8004b24 <uart_transmit_string>
}
 8001400:	b004      	add	sp, #16
 8001402:	bd70      	pop	{r4, r5, r6, pc}
		start += 10;  // Move pointer past "AT+CGSN=1 "
 8001404:	340a      	adds	r4, #10
		while (*start && (*start < '0' || *start > '9')) {
 8001406:	7821      	ldrb	r1, [r4, #0]
 8001408:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800140c:	4623      	mov	r3, r4
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	3401      	adds	r4, #1
 8001412:	b109      	cbz	r1, 8001418 <extract_last_12_digits_bcd+0x84>
 8001414:	2a09      	cmp	r2, #9
 8001416:	d8f6      	bhi.n	8001406 <extract_last_12_digits_bcd+0x72>
 8001418:	461a      	mov	r2, r3
		while (*end && (*end >= '0' && *end <= '9')) {
 800141a:	4616      	mov	r6, r2
 800141c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001420:	3930      	subs	r1, #48	@ 0x30
 8001422:	2909      	cmp	r1, #9
 8001424:	d9f9      	bls.n	800141a <extract_last_12_digits_bcd+0x86>
 8001426:	1af4      	subs	r4, r6, r3
		uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number-2: LEN ");
 8001428:	4911      	ldr	r1, [pc, #68]	@ (8001470 <extract_last_12_digits_bcd+0xdc>)
 800142a:	480e      	ldr	r0, [pc, #56]	@ (8001464 <extract_last_12_digits_bcd+0xd0>)
 800142c:	f003 fb7a 	bl	8004b24 <uart_transmit_string>
		snprintf((char*)output_buffer, 10, "%d", digit_count);
 8001430:	4a10      	ldr	r2, [pc, #64]	@ (8001474 <extract_last_12_digits_bcd+0xe0>)
 8001432:	4623      	mov	r3, r4
 8001434:	210a      	movs	r1, #10
 8001436:	a801      	add	r0, sp, #4
 8001438:	f00a f98c 	bl	800b754 <sniprintf>
		if (digit_count >= 12) {
 800143c:	2c0b      	cmp	r4, #11
 800143e:	d9d3      	bls.n	80013e8 <extract_last_12_digits_bcd+0x54>
			const uint8_t *last_12 = end - 12;
 8001440:	f1a6 030c 	sub.w	r3, r6, #12
 8001444:	1e68      	subs	r0, r5, #1
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 8001446:	7819      	ldrb	r1, [r3, #0]
 8001448:	785a      	ldrb	r2, [r3, #1]
 800144a:	3930      	subs	r1, #48	@ 0x30
 800144c:	3a30      	subs	r2, #48	@ 0x30
			for (int i = 0; i < 6; i++) {
 800144e:	3302      	adds	r3, #2
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 8001450:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
			for (int i = 0; i < 6; i++) {
 8001454:	429e      	cmp	r6, r3
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 8001456:	f800 2f01 	strb.w	r2, [r0, #1]!
			for (int i = 0; i < 6; i++) {
 800145a:	d1f4      	bne.n	8001446 <extract_last_12_digits_bcd+0xb2>
 800145c:	e7c4      	b.n	80013e8 <extract_last_12_digits_bcd+0x54>
 800145e:	bf00      	nop
 8001460:	0800fa79 	.word	0x0800fa79
 8001464:	200011d0 	.word	0x200011d0
 8001468:	0800fa9b 	.word	0x0800fa9b
 800146c:	0801024b 	.word	0x0801024b
 8001470:	0800fab6 	.word	0x0800fab6
 8001474:	080100c5 	.word	0x080100c5

08001478 <check_SIM_ready>:
        }
    }
    return -1; // Failure
}

int check_SIM_ready(){
 8001478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const int TIME_LIMIT = 5;
	int count_check_sim = 0;
	//GET IMEI
	send_AT_command(GET_IMEI);
 800147a:	489c      	ldr	r0, [pc, #624]	@ (80016ec <check_SIM_ready+0x274>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800147c:	4d9c      	ldr	r5, [pc, #624]	@ (80016f0 <check_SIM_ready+0x278>)
 800147e:	4c9d      	ldr	r4, [pc, #628]	@ (80016f4 <check_SIM_ready+0x27c>)
		receive_response("Check IMEI-0:\n");
 8001480:	4e9d      	ldr	r6, [pc, #628]	@ (80016f8 <check_SIM_ready+0x280>)
	send_AT_command(GET_IMEI);
 8001482:	f7ff fdbd 	bl	8001000 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001486:	4629      	mov	r1, r5
 8001488:	4620      	mov	r0, r4
 800148a:	f00a faaf 	bl	800b9ec <strstr>
 800148e:	2800      	cmp	r0, #0
 8001490:	f000 80f8 	beq.w	8001684 <check_SIM_ready+0x20c>
		osDelay(1000);
	}
	receive_response("Check IMEI-0:\n");
 8001494:	4898      	ldr	r0, [pc, #608]	@ (80016f8 <check_SIM_ready+0x280>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	//GET MODEL IDENTIFICATION
	send_AT_command(GET_MODEL_IDENTI);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001496:	4d96      	ldr	r5, [pc, #600]	@ (80016f0 <check_SIM_ready+0x278>)
 8001498:	4c96      	ldr	r4, [pc, #600]	@ (80016f4 <check_SIM_ready+0x27c>)
		receive_response("Check MODEL IDENTIFICATION\n");
 800149a:	4e98      	ldr	r6, [pc, #608]	@ (80016fc <check_SIM_ready+0x284>)
	receive_response("Check IMEI-0:\n");
 800149c:	f7ff fddc 	bl	8001058 <receive_response>
	extract_last_12_digits_bcd(response, terminal_phone_number);
 80014a0:	4997      	ldr	r1, [pc, #604]	@ (8001700 <check_SIM_ready+0x288>)
 80014a2:	4894      	ldr	r0, [pc, #592]	@ (80016f4 <check_SIM_ready+0x27c>)
 80014a4:	f7ff ff76 	bl	8001394 <extract_last_12_digits_bcd>
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number: ");
 80014a8:	4996      	ldr	r1, [pc, #600]	@ (8001704 <check_SIM_ready+0x28c>)
 80014aa:	4897      	ldr	r0, [pc, #604]	@ (8001708 <check_SIM_ready+0x290>)
 80014ac:	f003 fb3a 	bl	8004b24 <uart_transmit_string>
	uart_transmit_string(&huart1, terminal_phone_number);
 80014b0:	4993      	ldr	r1, [pc, #588]	@ (8001700 <check_SIM_ready+0x288>)
 80014b2:	4895      	ldr	r0, [pc, #596]	@ (8001708 <check_SIM_ready+0x290>)
 80014b4:	f003 fb36 	bl	8004b24 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 80014b8:	4994      	ldr	r1, [pc, #592]	@ (800170c <check_SIM_ready+0x294>)
 80014ba:	4893      	ldr	r0, [pc, #588]	@ (8001708 <check_SIM_ready+0x290>)
 80014bc:	f003 fb32 	bl	8004b24 <uart_transmit_string>
	osDelay(100);
 80014c0:	2064      	movs	r0, #100	@ 0x64
 80014c2:	f006 fc87 	bl	8007dd4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80014c6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80014ca:	2100      	movs	r1, #0
 80014cc:	4889      	ldr	r0, [pc, #548]	@ (80016f4 <check_SIM_ready+0x27c>)
 80014ce:	f00a fa3d 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 80014d2:	f7ff fda5 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(GET_MODEL_IDENTI);
 80014d6:	488e      	ldr	r0, [pc, #568]	@ (8001710 <check_SIM_ready+0x298>)
 80014d8:	f7ff fd92 	bl	8001000 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80014dc:	4629      	mov	r1, r5
 80014de:	4620      	mov	r0, r4
 80014e0:	f00a fa84 	bl	800b9ec <strstr>
 80014e4:	2800      	cmp	r0, #0
 80014e6:	f000 80d5 	beq.w	8001694 <check_SIM_ready+0x21c>
		osDelay(1000);
	}
	receive_response("Check MODEL IDENTIFICATION\n");
 80014ea:	4884      	ldr	r0, [pc, #528]	@ (80016fc <check_SIM_ready+0x284>)


	// Check if SIM is ready
	send_AT_command(CHECK_SIM_READY);
	osDelay(100);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80014ec:	4e80      	ldr	r6, [pc, #512]	@ (80016f0 <check_SIM_ready+0x278>)
 80014ee:	4d81      	ldr	r5, [pc, #516]	@ (80016f4 <check_SIM_ready+0x27c>)
		receive_response("Check SIM\n");
 80014f0:	4f88      	ldr	r7, [pc, #544]	@ (8001714 <check_SIM_ready+0x29c>)
	receive_response("Check MODEL IDENTIFICATION\n");
 80014f2:	f7ff fdb1 	bl	8001058 <receive_response>
	osDelay(100);
 80014f6:	2064      	movs	r0, #100	@ 0x64
 80014f8:	f006 fc6c 	bl	8007dd4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80014fc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001500:	2100      	movs	r1, #0
 8001502:	487c      	ldr	r0, [pc, #496]	@ (80016f4 <check_SIM_ready+0x27c>)
 8001504:	f00a fa22 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001508:	f7ff fd8a 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIM_READY);
 800150c:	4882      	ldr	r0, [pc, #520]	@ (8001718 <check_SIM_ready+0x2a0>)
 800150e:	f7ff fd77 	bl	8001000 <send_AT_command>
	osDelay(100);
 8001512:	2064      	movs	r0, #100	@ 0x64
 8001514:	f006 fc5e 	bl	8007dd4 <osDelay>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001518:	2405      	movs	r4, #5
 800151a:	4631      	mov	r1, r6
 800151c:	4628      	mov	r0, r5
 800151e:	f00a fa65 	bl	800b9ec <strstr>
 8001522:	2800      	cmp	r0, #0
 8001524:	f000 80be 	beq.w	80016a4 <check_SIM_ready+0x22c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM\n");
 8001528:	487a      	ldr	r0, [pc, #488]	@ (8001714 <check_SIM_ready+0x29c>)
	count_check_sim = 0;


	//GET SIM CCID
	send_AT_command(GET_SIM_CCID);
	while(strstr((char *) response, "+QCCID:") == NULL){
 800152a:	4e7c      	ldr	r6, [pc, #496]	@ (800171c <check_SIM_ready+0x2a4>)
 800152c:	4d71      	ldr	r5, [pc, #452]	@ (80016f4 <check_SIM_ready+0x27c>)
		receive_response("Check SIM CCID\n");
 800152e:	4f7c      	ldr	r7, [pc, #496]	@ (8001720 <check_SIM_ready+0x2a8>)
	receive_response("Check SIM\n");
 8001530:	f7ff fd92 	bl	8001058 <receive_response>
	osDelay(100);
 8001534:	2064      	movs	r0, #100	@ 0x64
 8001536:	f006 fc4d 	bl	8007dd4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800153a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800153e:	2100      	movs	r1, #0
 8001540:	486c      	ldr	r0, [pc, #432]	@ (80016f4 <check_SIM_ready+0x27c>)
 8001542:	f00a fa03 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001546:	f7ff fd6b 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	osDelay(100);
 800154a:	2064      	movs	r0, #100	@ 0x64
 800154c:	f006 fc42 	bl	8007dd4 <osDelay>
	send_AT_command(GET_SIM_CCID);
 8001550:	4874      	ldr	r0, [pc, #464]	@ (8001724 <check_SIM_ready+0x2ac>)
 8001552:	f7ff fd55 	bl	8001000 <send_AT_command>
	while(strstr((char *) response, "+QCCID:") == NULL){
 8001556:	2405      	movs	r4, #5
 8001558:	4631      	mov	r1, r6
 800155a:	4628      	mov	r0, r5
 800155c:	f00a fa46 	bl	800b9ec <strstr>
 8001560:	2800      	cmp	r0, #0
 8001562:	f000 80b3 	beq.w	80016cc <check_SIM_ready+0x254>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM CCID\n");
 8001566:	486e      	ldr	r0, [pc, #440]	@ (8001720 <check_SIM_ready+0x2a8>)
	send_AT_command(CONFIGURE_CS_SERVICE);
	char *first_pointer = NULL;
	char *second_pointer = NULL;
	receive_response("Configuring Network Registration Status (CS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CREG?\r\n");
 8001568:	4d6f      	ldr	r5, [pc, #444]	@ (8001728 <check_SIM_ready+0x2b0>)
		osDelay(150);
		receive_response("Check Network Registration Status (CS Service)\n");
 800156a:	4e70      	ldr	r6, [pc, #448]	@ (800172c <check_SIM_ready+0x2b4>)
		osDelay(1000);
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 800156c:	4c60      	ldr	r4, [pc, #384]	@ (80016f0 <check_SIM_ready+0x278>)
	receive_response("Check SIM CCID\n");
 800156e:	f7ff fd73 	bl	8001058 <receive_response>
	osDelay(100);
 8001572:	2064      	movs	r0, #100	@ 0x64
 8001574:	f006 fc2e 	bl	8007dd4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001578:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800157c:	2100      	movs	r1, #0
 800157e:	485d      	ldr	r0, [pc, #372]	@ (80016f4 <check_SIM_ready+0x27c>)
 8001580:	f00a f9e4 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001584:	f7ff fd4c 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_CS_SERVICE);
 8001588:	4869      	ldr	r0, [pc, #420]	@ (8001730 <check_SIM_ready+0x2b8>)
 800158a:	f7ff fd39 	bl	8001000 <send_AT_command>
	receive_response("Configuring Network Registration Status (CS Service)");
 800158e:	4869      	ldr	r0, [pc, #420]	@ (8001734 <check_SIM_ready+0x2bc>)
 8001590:	f7ff fd62 	bl	8001058 <receive_response>
		send_AT_command("AT+CREG?\r\n");
 8001594:	4628      	mov	r0, r5
 8001596:	f7ff fd33 	bl	8001000 <send_AT_command>
		osDelay(150);
 800159a:	2096      	movs	r0, #150	@ 0x96
 800159c:	f006 fc1a 	bl	8007dd4 <osDelay>
		receive_response("Check Network Registration Status (CS Service)\n");
 80015a0:	4630      	mov	r0, r6
 80015a2:	f7ff fd59 	bl	8001058 <receive_response>
		osDelay(1000);
 80015a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015aa:	f006 fc13 	bl	8007dd4 <osDelay>
		osDelay(300);
 80015ae:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80015b2:	f006 fc0f 	bl	8007dd4 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80015b6:	484f      	ldr	r0, [pc, #316]	@ (80016f4 <check_SIM_ready+0x27c>)
 80015b8:	4621      	mov	r1, r4
 80015ba:	f00a fa17 	bl	800b9ec <strstr>
		if(first_pointer != NULL){
 80015be:	2800      	cmp	r0, #0
 80015c0:	d0e8      	beq.n	8001594 <check_SIM_ready+0x11c>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 80015c2:	4621      	mov	r1, r4
 80015c4:	3001      	adds	r0, #1
 80015c6:	f00a fa11 	bl	800b9ec <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 80015ca:	2800      	cmp	r0, #0
 80015cc:	d0e2      	beq.n	8001594 <check_SIM_ready+0x11c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 80015ce:	2064      	movs	r0, #100	@ 0x64
 80015d0:	f006 fc00 	bl	8007dd4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015d4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80015d8:	2100      	movs	r1, #0
 80015da:	4846      	ldr	r0, [pc, #280]	@ (80016f4 <check_SIM_ready+0x27c>)
	send_AT_command(CONFIGURE_PS_SERVICE);
	first_pointer = NULL;
	second_pointer = NULL;
	receive_response("Configuring Network Registration Status (PS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CGREG?\r\n");
 80015dc:	4d56      	ldr	r5, [pc, #344]	@ (8001738 <check_SIM_ready+0x2c0>)
		osDelay(150);
		receive_response("Check Network Registration Status (PS Service)\n");
 80015de:	4e57      	ldr	r6, [pc, #348]	@ (800173c <check_SIM_ready+0x2c4>)
		osDelay(1000);
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80015e0:	4c43      	ldr	r4, [pc, #268]	@ (80016f0 <check_SIM_ready+0x278>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015e2:	f00a f9b3 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 80015e6:	f7ff fd1b 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_PS_SERVICE);
 80015ea:	4855      	ldr	r0, [pc, #340]	@ (8001740 <check_SIM_ready+0x2c8>)
 80015ec:	f7ff fd08 	bl	8001000 <send_AT_command>
	receive_response("Configuring Network Registration Status (PS Service)");
 80015f0:	4854      	ldr	r0, [pc, #336]	@ (8001744 <check_SIM_ready+0x2cc>)
 80015f2:	f7ff fd31 	bl	8001058 <receive_response>
		send_AT_command("AT+CGREG?\r\n");
 80015f6:	4628      	mov	r0, r5
 80015f8:	f7ff fd02 	bl	8001000 <send_AT_command>
		osDelay(150);
 80015fc:	2096      	movs	r0, #150	@ 0x96
 80015fe:	f006 fbe9 	bl	8007dd4 <osDelay>
		receive_response("Check Network Registration Status (PS Service)\n");
 8001602:	4630      	mov	r0, r6
 8001604:	f7ff fd28 	bl	8001058 <receive_response>
		osDelay(1000);
 8001608:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800160c:	f006 fbe2 	bl	8007dd4 <osDelay>
		osDelay(300);
 8001610:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001614:	f006 fbde 	bl	8007dd4 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001618:	4836      	ldr	r0, [pc, #216]	@ (80016f4 <check_SIM_ready+0x27c>)
 800161a:	4621      	mov	r1, r4
 800161c:	f00a f9e6 	bl	800b9ec <strstr>
		if(first_pointer != NULL){
 8001620:	2800      	cmp	r0, #0
 8001622:	d0e8      	beq.n	80015f6 <check_SIM_ready+0x17e>
			second_pointer = strstr(first_pointer + 1, CHECK_RESPONSE);
 8001624:	4621      	mov	r1, r4
 8001626:	3001      	adds	r0, #1
 8001628:	f00a f9e0 	bl	800b9ec <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 800162c:	2800      	cmp	r0, #0
 800162e:	d0e2      	beq.n	80015f6 <check_SIM_ready+0x17e>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 8001630:	2064      	movs	r0, #100	@ 0x64
 8001632:	f006 fbcf 	bl	8007dd4 <osDelay>
	receive_response("Check Network Registration Status (PS Service)\n");
 8001636:	4841      	ldr	r0, [pc, #260]	@ (800173c <check_SIM_ready+0x2c4>)
	count_check_sim = 0;


	//CHECK SIGNAL QUALITY
	send_AT_command(CHECK_SIGNAL_QUALITY);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001638:	4d2d      	ldr	r5, [pc, #180]	@ (80016f0 <check_SIM_ready+0x278>)
 800163a:	4c2e      	ldr	r4, [pc, #184]	@ (80016f4 <check_SIM_ready+0x27c>)
		receive_response("Check Signal Quality Report\n");
 800163c:	4e42      	ldr	r6, [pc, #264]	@ (8001748 <check_SIM_ready+0x2d0>)
	receive_response("Check Network Registration Status (PS Service)\n");
 800163e:	f7ff fd0b 	bl	8001058 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001642:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001646:	2100      	movs	r1, #0
 8001648:	482a      	ldr	r0, [pc, #168]	@ (80016f4 <check_SIM_ready+0x27c>)
 800164a:	f00a f97f 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 800164e:	f7ff fce7 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIGNAL_QUALITY);
 8001652:	483e      	ldr	r0, [pc, #248]	@ (800174c <check_SIM_ready+0x2d4>)
 8001654:	f7ff fcd4 	bl	8001000 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001658:	4629      	mov	r1, r5
 800165a:	4620      	mov	r0, r4
 800165c:	f00a f9c6 	bl	800b9ec <strstr>
 8001660:	2800      	cmp	r0, #0
 8001662:	d03e      	beq.n	80016e2 <check_SIM_ready+0x26a>
	}
	receive_response("Check Signal Quality Report\n");
 8001664:	4838      	ldr	r0, [pc, #224]	@ (8001748 <check_SIM_ready+0x2d0>)
 8001666:	f7ff fcf7 	bl	8001058 <receive_response>
	osDelay(100);
 800166a:	2064      	movs	r0, #100	@ 0x64
 800166c:	f006 fbb2 	bl	8007dd4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001670:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001674:	2100      	movs	r1, #0
 8001676:	481f      	ldr	r0, [pc, #124]	@ (80016f4 <check_SIM_ready+0x27c>)
 8001678:	f00a f968 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 800167c:	f7ff fcd0 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	


	return 1;
 8001680:	2001      	movs	r0, #1
 8001682:	e022      	b.n	80016ca <check_SIM_ready+0x252>
		receive_response("Check IMEI-0:\n");
 8001684:	4630      	mov	r0, r6
 8001686:	f7ff fce7 	bl	8001058 <receive_response>
		osDelay(1000);
 800168a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800168e:	f006 fba1 	bl	8007dd4 <osDelay>
 8001692:	e6f8      	b.n	8001486 <check_SIM_ready+0xe>
		receive_response("Check MODEL IDENTIFICATION\n");
 8001694:	4630      	mov	r0, r6
 8001696:	f7ff fcdf 	bl	8001058 <receive_response>
		osDelay(1000);
 800169a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800169e:	f006 fb99 	bl	8007dd4 <osDelay>
 80016a2:	e71b      	b.n	80014dc <check_SIM_ready+0x64>
		receive_response("Check SIM\n");
 80016a4:	4638      	mov	r0, r7
 80016a6:	f7ff fcd7 	bl	8001058 <receive_response>
		osDelay(1000);
 80016aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016ae:	f006 fb91 	bl	8007dd4 <osDelay>
		if (count_check_sim >= 5){
 80016b2:	3c01      	subs	r4, #1
 80016b4:	f47f af31 	bne.w	800151a <check_SIM_ready+0xa2>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80016b8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80016bc:	2100      	movs	r1, #0
 80016be:	480d      	ldr	r0, [pc, #52]	@ (80016f4 <check_SIM_ready+0x27c>)
 80016c0:	f00a f944 	bl	800b94c <memset>
			SIM_UART_ReInitializeRxDMA();
 80016c4:	f7ff fcac 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
			return 0;
 80016c8:	2000      	movs	r0, #0
}
 80016ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("Check SIM CCID\n");
 80016cc:	4638      	mov	r0, r7
 80016ce:	f7ff fcc3 	bl	8001058 <receive_response>
		osDelay(1000);
 80016d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016d6:	f006 fb7d 	bl	8007dd4 <osDelay>
		if (count_check_sim >= TIME_LIMIT){
 80016da:	3c01      	subs	r4, #1
 80016dc:	f47f af3c 	bne.w	8001558 <check_SIM_ready+0xe0>
 80016e0:	e7ea      	b.n	80016b8 <check_SIM_ready+0x240>
		receive_response("Check Signal Quality Report\n");
 80016e2:	4630      	mov	r0, r6
 80016e4:	f7ff fcb8 	bl	8001058 <receive_response>
 80016e8:	e7b6      	b.n	8001658 <check_SIM_ready+0x1e0>
 80016ea:	bf00      	nop
 80016ec:	0800fade 	.word	0x0800fade
 80016f0:	0800fa2a 	.word	0x0800fa2a
 80016f4:	20000c38 	.word	0x20000c38
 80016f8:	0800faea 	.word	0x0800faea
 80016fc:	0800fb1c 	.word	0x0800fb1c
 8001700:	20000bb8 	.word	0x20000bb8
 8001704:	0800faf9 	.word	0x0800faf9
 8001708:	200011d0 	.word	0x200011d0
 800170c:	0801024b 	.word	0x0801024b
 8001710:	0800fb12 	.word	0x0800fb12
 8001714:	0800fb43 	.word	0x0800fb43
 8001718:	0800fb38 	.word	0x0800fb38
 800171c:	0800fb69 	.word	0x0800fb69
 8001720:	0800fb59 	.word	0x0800fb59
 8001724:	0800fb4e 	.word	0x0800fb4e
 8001728:	0800fbb2 	.word	0x0800fbb2
 800172c:	0800fbbd 	.word	0x0800fbbd
 8001730:	0800fb71 	.word	0x0800fb71
 8001734:	0800fb7d 	.word	0x0800fb7d
 8001738:	0800fc2f 	.word	0x0800fc2f
 800173c:	0800fc3b 	.word	0x0800fc3b
 8001740:	0800fbed 	.word	0x0800fbed
 8001744:	0800fbfa 	.word	0x0800fbfa
 8001748:	0800fc74 	.word	0x0800fc74
 800174c:	0800fc6b 	.word	0x0800fc6b

08001750 <check_configure_APN>:

void check_configure_APN(){
 8001750:	b508      	push	{r3, lr}
	send_AT_command(CHECK_CONFIGURE_APN);
 8001752:	4805      	ldr	r0, [pc, #20]	@ (8001768 <check_configure_APN+0x18>)
 8001754:	f7ff fc54 	bl	8001000 <send_AT_command>
	osDelay(150);
 8001758:	2096      	movs	r0, #150	@ 0x96
 800175a:	f006 fb3b 	bl	8007dd4 <osDelay>
	receive_response("Check Configuring APN\n");
}
 800175e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	receive_response("Check Configuring APN\n");
 8001762:	4802      	ldr	r0, [pc, #8]	@ (800176c <check_configure_APN+0x1c>)
 8001764:	f7ff bc78 	b.w	8001058 <receive_response>
 8001768:	0800fc91 	.word	0x0800fc91
 800176c:	0800fc9f 	.word	0x0800fc9f

08001770 <configure_APN>:

int configure_APN(int context_id){
 8001770:	b530      	push	{r4, r5, lr}
 8001772:	b0c7      	sub	sp, #284	@ 0x11c
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001774:	2200      	movs	r2, #0
 8001776:	9204      	str	r2, [sp, #16]
 8001778:	4a16      	ldr	r2, [pc, #88]	@ (80017d4 <configure_APN+0x64>)
	char *first_pointer = NULL;
	char *second_pointer = NULL; 	
	while (first_pointer == NULL || second_pointer == NULL){
		check_configure_APN();
		osDelay(1300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 800177a:	4c17      	ldr	r4, [pc, #92]	@ (80017d8 <configure_APN+0x68>)
 800177c:	4d17      	ldr	r5, [pc, #92]	@ (80017dc <configure_APN+0x6c>)
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 800177e:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8001782:	4a17      	ldr	r2, [pc, #92]	@ (80017e0 <configure_APN+0x70>)
 8001784:	9201      	str	r2, [sp, #4]
 8001786:	2201      	movs	r2, #1
int configure_APN(int context_id){
 8001788:	4603      	mov	r3, r0
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 800178a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800178e:	9200      	str	r2, [sp, #0]
 8001790:	a806      	add	r0, sp, #24
 8001792:	4a14      	ldr	r2, [pc, #80]	@ (80017e4 <configure_APN+0x74>)
 8001794:	f009 ffde 	bl	800b754 <sniprintf>
	send_AT_command((char*)command);
 8001798:	a806      	add	r0, sp, #24
 800179a:	f7ff fc31 	bl	8001000 <send_AT_command>
	osDelay(150);
 800179e:	2096      	movs	r0, #150	@ 0x96
 80017a0:	f006 fb18 	bl	8007dd4 <osDelay>
	receive_response("CONFIGURE APN\n");
 80017a4:	4810      	ldr	r0, [pc, #64]	@ (80017e8 <configure_APN+0x78>)
 80017a6:	f7ff fc57 	bl	8001058 <receive_response>
		check_configure_APN();
 80017aa:	f7ff ffd1 	bl	8001750 <check_configure_APN>
		osDelay(1300);
 80017ae:	f240 5014 	movw	r0, #1300	@ 0x514
 80017b2:	f006 fb0f 	bl	8007dd4 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80017b6:	4908      	ldr	r1, [pc, #32]	@ (80017d8 <configure_APN+0x68>)
 80017b8:	4628      	mov	r0, r5
 80017ba:	f00a f917 	bl	800b9ec <strstr>
		if(first_pointer != NULL){
 80017be:	2800      	cmp	r0, #0
 80017c0:	d0f3      	beq.n	80017aa <configure_APN+0x3a>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 80017c2:	4621      	mov	r1, r4
 80017c4:	3001      	adds	r0, #1
 80017c6:	f00a f911 	bl	800b9ec <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 80017ca:	2800      	cmp	r0, #0
 80017cc:	d0ed      	beq.n	80017aa <configure_APN+0x3a>
		}
	}
	return 1;
}
 80017ce:	2001      	movs	r0, #1
 80017d0:	b047      	add	sp, #284	@ 0x11c
 80017d2:	bd30      	pop	{r4, r5, pc}
 80017d4:	080109db 	.word	0x080109db
 80017d8:	0800fa2a 	.word	0x0800fa2a
 80017dc:	20000c38 	.word	0x20000c38
 80017e0:	0800fcdc 	.word	0x0800fcdc
 80017e4:	0800fcb6 	.word	0x0800fcb6
 80017e8:	0800fce6 	.word	0x0800fce6

080017ec <check_activate_context>:

void check_activate_context(){
 80017ec:	b500      	push	{lr}
 80017ee:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), CHECK_ACTIVATE_CONTEXT);
 80017f0:	4906      	ldr	r1, [pc, #24]	@ (800180c <check_activate_context+0x20>)
 80017f2:	4668      	mov	r0, sp
 80017f4:	f00a fef6 	bl	800c5e4 <strcpy>
	send_AT_command((char*)command);
 80017f8:	4668      	mov	r0, sp
 80017fa:	f7ff fc01 	bl	8001000 <send_AT_command>
	receive_response("CHECK Activate CONTEXT\n");
 80017fe:	4804      	ldr	r0, [pc, #16]	@ (8001810 <check_activate_context+0x24>)
 8001800:	f7ff fc2a 	bl	8001058 <receive_response>
}
 8001804:	b021      	add	sp, #132	@ 0x84
 8001806:	f85d fb04 	ldr.w	pc, [sp], #4
 800180a:	bf00      	nop
 800180c:	0800fcf5 	.word	0x0800fcf5
 8001810:	0800fd01 	.word	0x0800fd01

08001814 <activate_context>:
//		// Wait until the counter reaches 1000
//		while (__HAL_TIM_GET_COUNTER(&htim3) < 1000);
//	}
//	is_40s = 1;
//}
int activate_context(int context_id){
 8001814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001818:	b0a0      	sub	sp, #128	@ 0x80
 800181a:	4603      	mov	r3, r0
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 800181c:	4a2c      	ldr	r2, [pc, #176]	@ (80018d0 <activate_context+0xbc>)
		if(count_check >= 50){
			count_check = 0;
//			return 0;
			break;
		}
		if (strstr((char*)response, "ERROR") != NULL){
 800181e:	4f2d      	ldr	r7, [pc, #180]	@ (80018d4 <activate_context+0xc0>)
 8001820:	4e2d      	ldr	r6, [pc, #180]	@ (80018d8 <activate_context+0xc4>)
			count_error = 0;
//			return 0;
			break;
		}

		receive_response("Check Activate Context\r\n");
 8001822:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 80018e4 <activate_context+0xd0>
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 8001826:	2180      	movs	r1, #128	@ 0x80
 8001828:	4668      	mov	r0, sp
 800182a:	f009 ff93 	bl	800b754 <sniprintf>
	send_AT_command((char*)command);
 800182e:	4668      	mov	r0, sp
 8001830:	f7ff fbe6 	bl	8001000 <send_AT_command>
	osDelay(150);
 8001834:	2096      	movs	r0, #150	@ 0x96
 8001836:	f006 facd 	bl	8007dd4 <osDelay>
	receive_response("Activate Context\r\n");
 800183a:	4828      	ldr	r0, [pc, #160]	@ (80018dc <activate_context+0xc8>)
 800183c:	f7ff fc0c 	bl	8001058 <receive_response>
 8001840:	2533      	movs	r5, #51	@ 0x33
	int count_error = 0;
 8001842:	2400      	movs	r4, #0
		check_activate_context();
 8001844:	f7ff ffd2 	bl	80017ec <check_activate_context>
		osDelay(300);
 8001848:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800184c:	f006 fac2 	bl	8007dd4 <osDelay>
		if(count_check >= 50){
 8001850:	3d01      	subs	r5, #1
 8001852:	d021      	beq.n	8001898 <activate_context+0x84>
		if (strstr((char*)response, "ERROR") != NULL){
 8001854:	4639      	mov	r1, r7
 8001856:	4630      	mov	r0, r6
 8001858:	f00a f8c8 	bl	800b9ec <strstr>
 800185c:	b340      	cbz	r0, 80018b0 <activate_context+0x9c>
			osDelay(500);
 800185e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001862:	f006 fab7 	bl	8007dd4 <osDelay>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001866:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800186a:	2100      	movs	r1, #0
 800186c:	4630      	mov	r0, r6
 800186e:	f00a f86d 	bl	800b94c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001872:	f7ff fbd5 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
			send_AT_command((char *) command);
 8001876:	4668      	mov	r0, sp
 8001878:	f7ff fbc2 	bl	8001000 <send_AT_command>
			count_error++;
 800187c:	3401      	adds	r4, #1
			osDelay(200);
 800187e:	20c8      	movs	r0, #200	@ 0xc8
 8001880:	f006 faa8 	bl	8007dd4 <osDelay>
		if(count_error >= 3){
 8001884:	2c03      	cmp	r4, #3
 8001886:	d113      	bne.n	80018b0 <activate_context+0x9c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001888:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800188c:	2100      	movs	r1, #0
 800188e:	4812      	ldr	r0, [pc, #72]	@ (80018d8 <activate_context+0xc4>)
 8001890:	f00a f85c 	bl	800b94c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001894:	f7ff fbc4 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
		}
		count_check++;
	}
//	HAL_TIM_Base_Start(&htim3);
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001898:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800189c:	2100      	movs	r1, #0
 800189e:	480e      	ldr	r0, [pc, #56]	@ (80018d8 <activate_context+0xc4>)
 80018a0:	f00a f854 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 80018a4:	f7ff fbbc 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	return 1;
}
 80018a8:	2001      	movs	r0, #1
 80018aa:	b020      	add	sp, #128	@ 0x80
 80018ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		receive_response("Check Activate Context\r\n");
 80018b0:	4640      	mov	r0, r8
 80018b2:	f7ff fbd1 	bl	8001058 <receive_response>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80018b6:	490a      	ldr	r1, [pc, #40]	@ (80018e0 <activate_context+0xcc>)
 80018b8:	4630      	mov	r0, r6
 80018ba:	f00a f897 	bl	800b9ec <strstr>
		if(first_pointer != NULL){
 80018be:	2800      	cmp	r0, #0
 80018c0:	d0c0      	beq.n	8001844 <activate_context+0x30>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 80018c2:	4907      	ldr	r1, [pc, #28]	@ (80018e0 <activate_context+0xcc>)
 80018c4:	3001      	adds	r0, #1
 80018c6:	f00a f891 	bl	800b9ec <strstr>
	while ((first_pointer == NULL || second_pointer == NULL)){
 80018ca:	2800      	cmp	r0, #0
 80018cc:	d0ba      	beq.n	8001844 <activate_context+0x30>
 80018ce:	e7e3      	b.n	8001898 <activate_context+0x84>
 80018d0:	0800fd19 	.word	0x0800fd19
 80018d4:	0800fd27 	.word	0x0800fd27
 80018d8:	20000c38 	.word	0x20000c38
 80018dc:	0800fd33 	.word	0x0800fd33
 80018e0:	0800fa2a 	.word	0x0800fa2a
 80018e4:	0800fd2d 	.word	0x0800fd2d

080018e8 <deactivate_context>:

int deactivate_context(int context_id){
 80018e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ea:	4604      	mov	r4, r0
 80018ec:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	int count_check = 0;
	osDelay(100);
 80018ee:	2064      	movs	r0, #100	@ 0x64
 80018f0:	f006 fa70 	bl	8007dd4 <osDelay>
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 80018f4:	4623      	mov	r3, r4
 80018f6:	4a1d      	ldr	r2, [pc, #116]	@ (800196c <deactivate_context+0x84>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80018f8:	4e1d      	ldr	r6, [pc, #116]	@ (8001970 <deactivate_context+0x88>)
 80018fa:	4d1e      	ldr	r5, [pc, #120]	@ (8001974 <deactivate_context+0x8c>)
		receive_response("DEACTIVATE CONTEXT\n");
 80018fc:	4f1e      	ldr	r7, [pc, #120]	@ (8001978 <deactivate_context+0x90>)
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 80018fe:	2180      	movs	r1, #128	@ 0x80
 8001900:	4668      	mov	r0, sp
 8001902:	f009 ff27 	bl	800b754 <sniprintf>
	send_AT_command((char*)command);
 8001906:	4668      	mov	r0, sp
 8001908:	f7ff fb7a 	bl	8001000 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800190c:	2415      	movs	r4, #21
 800190e:	4631      	mov	r1, r6
 8001910:	4628      	mov	r0, r5
 8001912:	f00a f86b 	bl	800b9ec <strstr>
 8001916:	b178      	cbz	r0, 8001938 <deactivate_context+0x50>
			return 0;
		}
		count_check++;
		osDelay(1200);
	}
	receive_response("DEACTIVATE CONTEXT\n");
 8001918:	4817      	ldr	r0, [pc, #92]	@ (8001978 <deactivate_context+0x90>)
 800191a:	f7ff fb9d 	bl	8001058 <receive_response>
	osDelay(100);
 800191e:	2064      	movs	r0, #100	@ 0x64
 8001920:	f006 fa58 	bl	8007dd4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001924:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001928:	2100      	movs	r1, #0
 800192a:	4812      	ldr	r0, [pc, #72]	@ (8001974 <deactivate_context+0x8c>)
 800192c:	f00a f80e 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001930:	f7ff fb76 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001934:	2001      	movs	r0, #1
 8001936:	e010      	b.n	800195a <deactivate_context+0x72>
		receive_response("DEACTIVATE CONTEXT\n");
 8001938:	4638      	mov	r0, r7
 800193a:	f7ff fb8d 	bl	8001058 <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 800193e:	490f      	ldr	r1, [pc, #60]	@ (800197c <deactivate_context+0x94>)
 8001940:	4628      	mov	r0, r5
 8001942:	f00a f853 	bl	800b9ec <strstr>
 8001946:	b150      	cbz	r0, 800195e <deactivate_context+0x76>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001948:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800194c:	2100      	movs	r1, #0
 800194e:	4809      	ldr	r0, [pc, #36]	@ (8001974 <deactivate_context+0x8c>)
 8001950:	f009 fffc 	bl	800b94c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001954:	f7ff fb64 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001958:	2000      	movs	r0, #0
}
 800195a:	b021      	add	sp, #132	@ 0x84
 800195c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >= 20){
 800195e:	3c01      	subs	r4, #1
 8001960:	d0f2      	beq.n	8001948 <deactivate_context+0x60>
		osDelay(1200);
 8001962:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001966:	f006 fa35 	bl	8007dd4 <osDelay>
 800196a:	e7d0      	b.n	800190e <deactivate_context+0x26>
 800196c:	0800fd46 	.word	0x0800fd46
 8001970:	0800fa2a 	.word	0x0800fa2a
 8001974:	20000c38 	.word	0x20000c38
 8001978:	0800fd56 	.word	0x0800fd56
 800197c:	0800fd27 	.word	0x0800fd27

08001980 <open_socket_service>:


int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001984:	b0e6      	sub	sp, #408	@ 0x198
	const int timeout_seconds = 50; // Receive response each second
	//TODO: CHANGE timeout to 150 after testing
	int elapsed_time_ms = 0;
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001986:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800198a:	f241 3397 	movw	r3, #5015	@ 0x1397
 800198e:	9303      	str	r3, [sp, #12]
 8001990:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac4 <open_socket_service+0x144>)
 8001992:	9302      	str	r3, [sp, #8]
 8001994:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac8 <open_socket_service+0x148>)
 8001996:	4a4d      	ldr	r2, [pc, #308]	@ (8001acc <open_socket_service+0x14c>)
	int count_error = 0;
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
//	while(elapsed_time_ms < timeout_seconds){
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
		char output_elapsed[128];
		receive_response("Check OPEN socket service: \r\n");
 8001998:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 8001ae4 <open_socket_service+0x164>
		if (strstr((char *) response, "ERROR") != NULL){
 800199c:	f8df a154 	ldr.w	sl, [pc, #340]	@ 8001af4 <open_socket_service+0x174>
 80019a0:	f8df 8134 	ldr.w	r8, [pc, #308]	@ 8001ad8 <open_socket_service+0x158>
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 80019a4:	e9cd 1300 	strd	r1, r3, [sp]
int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 80019a8:	460c      	mov	r4, r1
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 80019aa:	4603      	mov	r3, r0
 80019ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019b0:	a826      	add	r0, sp, #152	@ 0x98
 80019b2:	f009 fecf 	bl	800b754 <sniprintf>
	send_AT_command((char *) command);
 80019b6:	a826      	add	r0, sp, #152	@ 0x98
 80019b8:	f7ff fb22 	bl	8001000 <send_AT_command>
	osDelay(100);
 80019bc:	2064      	movs	r0, #100	@ 0x64
 80019be:	f006 fa09 	bl	8007dd4 <osDelay>
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
 80019c2:	4943      	ldr	r1, [pc, #268]	@ (8001ad0 <open_socket_service+0x150>)
 80019c4:	4843      	ldr	r0, [pc, #268]	@ (8001ad4 <open_socket_service+0x154>)
 80019c6:	f003 f8ad 	bl	8004b24 <uart_transmit_string>
	int count_error = 0;
 80019ca:	2700      	movs	r7, #0
	int elapsed_time_ms = 0;
 80019cc:	463e      	mov	r6, r7
		receive_response("Check OPEN socket service: \r\n");
 80019ce:	4648      	mov	r0, r9
 80019d0:	f7ff fb42 	bl	8001058 <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 80019d4:	4651      	mov	r1, sl
 80019d6:	4640      	mov	r0, r8
 80019d8:	f00a f808 	bl	800b9ec <strstr>
 80019dc:	b1e8      	cbz	r0, 8001a1a <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80019de:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80019e2:	2100      	movs	r1, #0
 80019e4:	4640      	mov	r0, r8
 80019e6:	f009 ffb1 	bl	800b94c <memset>
			SIM_UART_ReInitializeRxDMA();
 80019ea:	f7ff fb19 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
			count_error++;
			osDelay(500);
 80019ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019f2:	f006 f9ef 	bl	8007dd4 <osDelay>
			count_error++;
 80019f6:	3701      	adds	r7, #1
			send_AT_command((char *) command);
 80019f8:	a826      	add	r0, sp, #152	@ 0x98
 80019fa:	f7ff fb01 	bl	8001000 <send_AT_command>
		}
		if(count_error >= 6){
 80019fe:	2f06      	cmp	r7, #6
 8001a00:	d10b      	bne.n	8001a1a <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a02:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a06:	2100      	movs	r1, #0
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
		send_AT_command((char*) command);
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
			receive_response("Check SOCKET CONNECTION\n");
			if (strstr((char *) response, "ERROR") != NULL){
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a08:	4833      	ldr	r0, [pc, #204]	@ (8001ad8 <open_socket_service+0x158>)
 8001a0a:	f009 ff9f 	bl	800b94c <memset>
				SIM_UART_ReInitializeRxDMA();
 8001a0e:	f7ff fb07 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001a12:	2000      	movs	r0, #0
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
		SIM_UART_ReInitializeRxDMA();
		return 1;
	}
	else return 0;
}
 8001a14:	b066      	add	sp, #408	@ 0x198
 8001a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001a1a:	4930      	ldr	r1, [pc, #192]	@ (8001adc <open_socket_service+0x15c>)
 8001a1c:	4640      	mov	r0, r8
 8001a1e:	f009 ffe5 	bl	800b9ec <strstr>
		elapsed_time_ms++;
 8001a22:	3601      	adds	r6, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 8001a24:	4a2e      	ldr	r2, [pc, #184]	@ (8001ae0 <open_socket_service+0x160>)
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001a26:	4605      	mov	r5, r0
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 8001a28:	4633      	mov	r3, r6
 8001a2a:	2180      	movs	r1, #128	@ 0x80
 8001a2c:	a806      	add	r0, sp, #24
 8001a2e:	f009 fe91 	bl	800b754 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001a32:	4828      	ldr	r0, [pc, #160]	@ (8001ad4 <open_socket_service+0x154>)
 8001a34:	a906      	add	r1, sp, #24
 8001a36:	f003 f875 	bl	8004b24 <uart_transmit_string>
		osDelay(1000);
 8001a3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a3e:	f006 f9c9 	bl	8007dd4 <osDelay>
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
 8001a42:	b90d      	cbnz	r5, 8001a48 <open_socket_service+0xc8>
 8001a44:	2e32      	cmp	r6, #50	@ 0x32
 8001a46:	d1c2      	bne.n	80019ce <open_socket_service+0x4e>
	receive_response("Check OPEN socket service: \r\n");
 8001a48:	4826      	ldr	r0, [pc, #152]	@ (8001ae4 <open_socket_service+0x164>)
 8001a4a:	f7ff fb05 	bl	8001058 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a4e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a52:	2100      	movs	r1, #0
 8001a54:	4820      	ldr	r0, [pc, #128]	@ (8001ad8 <open_socket_service+0x158>)
 8001a56:	f009 ff79 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001a5a:	f7ff fae1 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	if(first_pointer != NULL)
 8001a5e:	2d00      	cmp	r5, #0
 8001a60:	d0d7      	beq.n	8001a12 <open_socket_service+0x92>
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 8001a62:	4a21      	ldr	r2, [pc, #132]	@ (8001ae8 <open_socket_service+0x168>)
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001a64:	4e21      	ldr	r6, [pc, #132]	@ (8001aec <open_socket_service+0x16c>)
 8001a66:	4d1c      	ldr	r5, [pc, #112]	@ (8001ad8 <open_socket_service+0x158>)
			receive_response("Check SOCKET CONNECTION\n");
 8001a68:	4f21      	ldr	r7, [pc, #132]	@ (8001af0 <open_socket_service+0x170>)
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 8001a6a:	4623      	mov	r3, r4
 8001a6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a70:	a826      	add	r0, sp, #152	@ 0x98
 8001a72:	f009 fe6f 	bl	800b754 <sniprintf>
		send_AT_command((char*) command);
 8001a76:	a826      	add	r0, sp, #152	@ 0x98
 8001a78:	f7ff fac2 	bl	8001000 <send_AT_command>
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001a7c:	4631      	mov	r1, r6
 8001a7e:	4628      	mov	r0, r5
 8001a80:	f009 ffb4 	bl	800b9ec <strstr>
 8001a84:	4604      	mov	r4, r0
 8001a86:	b160      	cbz	r0, 8001aa2 <open_socket_service+0x122>
		osDelay(100);
 8001a88:	2064      	movs	r0, #100	@ 0x64
 8001a8a:	f006 f9a3 	bl	8007dd4 <osDelay>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a8e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a92:	2100      	movs	r1, #0
 8001a94:	4810      	ldr	r0, [pc, #64]	@ (8001ad8 <open_socket_service+0x158>)
 8001a96:	f009 ff59 	bl	800b94c <memset>
		SIM_UART_ReInitializeRxDMA();
 8001a9a:	f7ff fac1 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
		return 1;
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	e7b8      	b.n	8001a14 <open_socket_service+0x94>
			receive_response("Check SOCKET CONNECTION\n");
 8001aa2:	4638      	mov	r0, r7
 8001aa4:	f7ff fad8 	bl	8001058 <receive_response>
			if (strstr((char *) response, "ERROR") != NULL){
 8001aa8:	4912      	ldr	r1, [pc, #72]	@ (8001af4 <open_socket_service+0x174>)
 8001aaa:	4628      	mov	r0, r5
 8001aac:	f009 ff9e 	bl	800b9ec <strstr>
 8001ab0:	b118      	cbz	r0, 8001aba <open_socket_service+0x13a>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ab2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	e7a6      	b.n	8001a08 <open_socket_service+0x88>
			osDelay(1000);
 8001aba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001abe:	f006 f989 	bl	8007dd4 <osDelay>
 8001ac2:	e7db      	b.n	8001a7c <open_socket_service+0xfc>
 8001ac4:	0800fd8f 	.word	0x0800fd8f
 8001ac8:	0800fd9d 	.word	0x0800fd9d
 8001acc:	0800fd6a 	.word	0x0800fd6a
 8001ad0:	0800fda1 	.word	0x0800fda1
 8001ad4:	200011d0 	.word	0x200011d0
 8001ad8:	20000c38 	.word	0x20000c38
 8001adc:	0800fdd0 	.word	0x0800fdd0
 8001ae0:	0800fdd9 	.word	0x0800fdd9
 8001ae4:	0800fdb2 	.word	0x0800fdb2
 8001ae8:	0800fdeb 	.word	0x0800fdeb
 8001aec:	0800fa2a 	.word	0x0800fa2a
 8001af0:	0800fdfd 	.word	0x0800fdfd
 8001af4:	0800fd27 	.word	0x0800fd27

08001af8 <formatToHexString>:
	SIM_UART_ReInitializeRxDMA();
	return 1;
}

// Function to format data into a hex string
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (int i = 0; i < length; i++) {
 8001afc:	9c08      	ldr	r4, [sp, #32]
        if (writeIndex + 2 >= max_len) {
            // Prevent buffer overflow
            return -1;
        }
        sprintf(output + writeIndex, "%02X", data[i]);
 8001afe:	f8df a034 	ldr.w	sl, [pc, #52]	@ 8001b34 <formatToHexString+0x3c>
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001b02:	4607      	mov	r7, r0
 8001b04:	460e      	mov	r6, r1
 8001b06:	4698      	mov	r8, r3
    for (int i = 0; i < length; i++) {
 8001b08:	2500      	movs	r5, #0
        sprintf(output + writeIndex, "%02X", data[i]);
 8001b0a:	f1a2 0902 	sub.w	r9, r2, #2
    for (int i = 0; i < length; i++) {
 8001b0e:	42b5      	cmp	r5, r6
 8001b10:	db02      	blt.n	8001b18 <formatToHexString+0x20>
        writeIndex += 2;
    }
    return writeIndex;
}
 8001b12:	4620      	mov	r0, r4
 8001b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (writeIndex + 2 >= max_len) {
 8001b18:	3402      	adds	r4, #2
 8001b1a:	4544      	cmp	r4, r8
 8001b1c:	da07      	bge.n	8001b2e <formatToHexString+0x36>
        sprintf(output + writeIndex, "%02X", data[i]);
 8001b1e:	5d7a      	ldrb	r2, [r7, r5]
 8001b20:	4651      	mov	r1, sl
 8001b22:	eb09 0004 	add.w	r0, r9, r4
 8001b26:	f009 fe49 	bl	800b7bc <siprintf>
    for (int i = 0; i < length; i++) {
 8001b2a:	3501      	adds	r5, #1
 8001b2c:	e7ef      	b.n	8001b0e <formatToHexString+0x16>
            return -1;
 8001b2e:	f04f 34ff 	mov.w	r4, #4294967295
 8001b32:	e7ee      	b.n	8001b12 <formatToHexString+0x1a>
 8001b34:	08010f04 	.word	0x08010f04

08001b38 <generateRegistrationMessage>:

int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001b38:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int writeIndex = 0;
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001b3a:	2300      	movs	r3, #0
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001b3c:	460c      	mov	r4, r1
 8001b3e:	4615      	mov	r5, r2
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	4613      	mov	r3, r2
 8001b44:	460a      	mov	r2, r1
 8001b46:	2101      	movs	r1, #1
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001b48:	4606      	mov	r6, r0
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001b4a:	f7ff ffd5 	bl	8001af8 <formatToHexString>
    writeIndex = formatToHexString(data->message_type, sizeof(data->message_type), hexString, max_len, writeIndex);
 8001b4e:	462b      	mov	r3, r5
 8001b50:	9000      	str	r0, [sp, #0]
 8001b52:	4622      	mov	r2, r4
 8001b54:	2102      	movs	r1, #2
 8001b56:	1c70      	adds	r0, r6, #1
 8001b58:	f7ff ffce 	bl	8001af8 <formatToHexString>
    writeIndex = formatToHexString(data->message_length, sizeof(data->message_length), hexString, max_len, writeIndex);
 8001b5c:	462b      	mov	r3, r5
 8001b5e:	9000      	str	r0, [sp, #0]
 8001b60:	4622      	mov	r2, r4
 8001b62:	2102      	movs	r1, #2
 8001b64:	1cf0      	adds	r0, r6, #3
 8001b66:	f7ff ffc7 	bl	8001af8 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_phone_number, sizeof(data->terminal_phone_number), hexString, max_len, writeIndex);
 8001b6a:	462b      	mov	r3, r5
 8001b6c:	9000      	str	r0, [sp, #0]
 8001b6e:	4622      	mov	r2, r4
 8001b70:	2106      	movs	r1, #6
 8001b72:	1d70      	adds	r0, r6, #5
 8001b74:	f7ff ffc0 	bl	8001af8 <formatToHexString>
    writeIndex = formatToHexString(data->message_serial_number, sizeof(data->message_serial_number), hexString, max_len, writeIndex);
 8001b78:	462b      	mov	r3, r5
 8001b7a:	9000      	str	r0, [sp, #0]
 8001b7c:	4622      	mov	r2, r4
 8001b7e:	2102      	movs	r1, #2
 8001b80:	f106 000b 	add.w	r0, r6, #11
 8001b84:	f7ff ffb8 	bl	8001af8 <formatToHexString>
    writeIndex = formatToHexString(data->province_ID, sizeof(data->province_ID), hexString, max_len, writeIndex);
 8001b88:	462b      	mov	r3, r5
 8001b8a:	9000      	str	r0, [sp, #0]
 8001b8c:	4622      	mov	r2, r4
 8001b8e:	2102      	movs	r1, #2
 8001b90:	f106 000d 	add.w	r0, r6, #13
 8001b94:	f7ff ffb0 	bl	8001af8 <formatToHexString>
    writeIndex = formatToHexString(data->city_ID, sizeof(data->city_ID), hexString, max_len, writeIndex);
 8001b98:	462b      	mov	r3, r5
 8001b9a:	9000      	str	r0, [sp, #0]
 8001b9c:	4622      	mov	r2, r4
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	f106 000f 	add.w	r0, r6, #15
 8001ba4:	f7ff ffa8 	bl	8001af8 <formatToHexString>
    writeIndex = formatToHexString(data->manufacturer_ID, sizeof(data->manufacturer_ID), hexString, max_len, writeIndex);
 8001ba8:	462b      	mov	r3, r5
 8001baa:	9000      	str	r0, [sp, #0]
 8001bac:	4622      	mov	r2, r4
 8001bae:	2105      	movs	r1, #5
 8001bb0:	f106 0011 	add.w	r0, r6, #17
 8001bb4:	f7ff ffa0 	bl	8001af8 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_type, sizeof(data->terminal_type), hexString, max_len, writeIndex);
 8001bb8:	462b      	mov	r3, r5
 8001bba:	9000      	str	r0, [sp, #0]
 8001bbc:	4622      	mov	r2, r4
 8001bbe:	2108      	movs	r1, #8
 8001bc0:	f106 0016 	add.w	r0, r6, #22
 8001bc4:	f7ff ff98 	bl	8001af8 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_ID, sizeof(data->terminal_ID), hexString, max_len, writeIndex);
 8001bc8:	462b      	mov	r3, r5
 8001bca:	9000      	str	r0, [sp, #0]
 8001bcc:	4622      	mov	r2, r4
 8001bce:	2107      	movs	r1, #7
 8001bd0:	f106 001e 	add.w	r0, r6, #30
 8001bd4:	f7ff ff90 	bl	8001af8 <formatToHexString>
    writeIndex = formatToHexString(&(data->plate_color), sizeof(data->plate_color), hexString, max_len, writeIndex);
 8001bd8:	462b      	mov	r3, r5
 8001bda:	9000      	str	r0, [sp, #0]
 8001bdc:	4622      	mov	r2, r4
 8001bde:	2101      	movs	r1, #1
 8001be0:	f106 0025 	add.w	r0, r6, #37	@ 0x25
 8001be4:	f7ff ff88 	bl	8001af8 <formatToHexString>
    writeIndex = formatToHexString(data->plate_no, sizeof(data->plate_no), hexString, max_len, writeIndex);
 8001be8:	462b      	mov	r3, r5
 8001bea:	9000      	str	r0, [sp, #0]
 8001bec:	4622      	mov	r2, r4
 8001bee:	2114      	movs	r1, #20
 8001bf0:	f106 0026 	add.w	r0, r6, #38	@ 0x26
 8001bf4:	f7ff ff80 	bl	8001af8 <formatToHexString>
    writeIndex = formatToHexString(&(data->check_sum), sizeof(data->check_sum), hexString, max_len, writeIndex);
 8001bf8:	462b      	mov	r3, r5
 8001bfa:	9000      	str	r0, [sp, #0]
 8001bfc:	4622      	mov	r2, r4
 8001bfe:	2101      	movs	r1, #1
 8001c00:	f106 003a 	add.w	r0, r6, #58	@ 0x3a
 8001c04:	f7ff ff78 	bl	8001af8 <formatToHexString>
    writeIndex = formatToHexString(&(data->end_mask), sizeof(data->end_mask), hexString, max_len, writeIndex);
 8001c08:	462b      	mov	r3, r5
 8001c0a:	9000      	str	r0, [sp, #0]
 8001c0c:	4622      	mov	r2, r4
 8001c0e:	2101      	movs	r1, #1
 8001c10:	f106 003b 	add.w	r0, r6, #59	@ 0x3b
 8001c14:	f7ff ff70 	bl	8001af8 <formatToHexString>
    if (writeIndex < 0) {
        // Handle error in formatting
        return -1;
    }
    return writeIndex;
}
 8001c18:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8001c1c:	b002      	add	sp, #8
 8001c1e:	bd70      	pop	{r4, r5, r6, pc}

08001c20 <generateLocationInfoMessage>:

int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8001c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c24:	b0aa      	sub	sp, #168	@ 0xa8
   const uint8_t* fields[] = {
        &(report->start_mask), report->message_type, report->message_length,
 8001c26:	1c43      	adds	r3, r0, #1
   const uint8_t* fields[] = {
 8001c28:	9303      	str	r3, [sp, #12]
        &(report->start_mask), report->message_type, report->message_length,
 8001c2a:	1cc3      	adds	r3, r0, #3
   const uint8_t* fields[] = {
 8001c2c:	9304      	str	r3, [sp, #16]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001c2e:	1d43      	adds	r3, r0, #5
   const uint8_t* fields[] = {
 8001c30:	9305      	str	r3, [sp, #20]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001c32:	f100 030b 	add.w	r3, r0, #11
   const uint8_t* fields[] = {
 8001c36:	9306      	str	r3, [sp, #24]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001c38:	f100 030d 	add.w	r3, r0, #13
   const uint8_t* fields[] = {
 8001c3c:	9307      	str	r3, [sp, #28]
        report->status, report->latitude, report->longitude, report->altitude,
 8001c3e:	f100 0311 	add.w	r3, r0, #17
   const uint8_t* fields[] = {
 8001c42:	9308      	str	r3, [sp, #32]
        report->status, report->latitude, report->longitude, report->altitude,
 8001c44:	f100 0315 	add.w	r3, r0, #21
   const uint8_t* fields[] = {
 8001c48:	9309      	str	r3, [sp, #36]	@ 0x24
        report->status, report->latitude, report->longitude, report->altitude,
 8001c4a:	f100 0319 	add.w	r3, r0, #25
   const uint8_t* fields[] = {
 8001c4e:	930a      	str	r3, [sp, #40]	@ 0x28
        report->status, report->latitude, report->longitude, report->altitude,
 8001c50:	f100 031d 	add.w	r3, r0, #29
   const uint8_t* fields[] = {
 8001c54:	930b      	str	r3, [sp, #44]	@ 0x2c
        report->speed, report->direction, report->timestamp, report->mileage,
 8001c56:	f100 031f 	add.w	r3, r0, #31
   const uint8_t* fields[] = {
 8001c5a:	930c      	str	r3, [sp, #48]	@ 0x30
        report->speed, report->direction, report->timestamp, report->mileage,
 8001c5c:	f100 0321 	add.w	r3, r0, #33	@ 0x21
   const uint8_t* fields[] = {
 8001c60:	930d      	str	r3, [sp, #52]	@ 0x34
        report->speed, report->direction, report->timestamp, report->mileage,
 8001c62:	f100 0323 	add.w	r3, r0, #35	@ 0x23
   const uint8_t* fields[] = {
 8001c66:	930e      	str	r3, [sp, #56]	@ 0x38
        report->speed, report->direction, report->timestamp, report->mileage,
 8001c68:	f100 0329 	add.w	r3, r0, #41	@ 0x29
   const uint8_t* fields[] = {
 8001c6c:	930f      	str	r3, [sp, #60]	@ 0x3c
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001c6e:	f100 032f 	add.w	r3, r0, #47	@ 0x2f
   const uint8_t* fields[] = {
 8001c72:	9310      	str	r3, [sp, #64]	@ 0x40
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001c74:	f100 0331 	add.w	r3, r0, #49	@ 0x31
   const uint8_t* fields[] = {
 8001c78:	9311      	str	r3, [sp, #68]	@ 0x44
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001c7a:	f100 0333 	add.w	r3, r0, #51	@ 0x33
   const uint8_t* fields[] = {
 8001c7e:	9312      	str	r3, [sp, #72]	@ 0x48
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001c80:	f100 0336 	add.w	r3, r0, #54	@ 0x36
   const uint8_t* fields[] = {
 8001c84:	9002      	str	r0, [sp, #8]
 8001c86:	9313      	str	r3, [sp, #76]	@ 0x4c
        report->additional, &(report->end_mask)
    };
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001c88:	af16      	add	r7, sp, #88	@ 0x58
        report->additional, &(report->end_mask)
 8001c8a:	f100 0337 	add.w	r3, r0, #55	@ 0x37
 8001c8e:	3040      	adds	r0, #64	@ 0x40
   const uint8_t* fields[] = {
 8001c90:	9015      	str	r0, [sp, #84]	@ 0x54
int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8001c92:	460d      	mov	r5, r1
 8001c94:	4616      	mov	r6, r2
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001c96:	490f      	ldr	r1, [pc, #60]	@ (8001cd4 <generateLocationInfoMessage+0xb4>)
   const uint8_t* fields[] = {
 8001c98:	9314      	str	r3, [sp, #80]	@ 0x50
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001c9a:	2250      	movs	r2, #80	@ 0x50
 8001c9c:	4638      	mov	r0, r7

    int writeIndex = 0;
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001c9e:	2400      	movs	r4, #0
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001ca0:	f00a fca8 	bl	800c5f4 <memcpy>
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001ca4:	f10d 0808 	add.w	r8, sp, #8
    int writeIndex = 0;
 8001ca8:	4620      	mov	r0, r4
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001caa:	9000      	str	r0, [sp, #0]
 8001cac:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8001cb0:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8001cb4:	4633      	mov	r3, r6
 8001cb6:	462a      	mov	r2, r5
 8001cb8:	f7ff ff1e 	bl	8001af8 <formatToHexString>
        if (writeIndex < 0) return -1;
 8001cbc:	2800      	cmp	r0, #0
 8001cbe:	db05      	blt.n	8001ccc <generateLocationInfoMessage+0xac>
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001cc0:	3401      	adds	r4, #1
 8001cc2:	2c14      	cmp	r4, #20
 8001cc4:	d1f1      	bne.n	8001caa <generateLocationInfoMessage+0x8a>
    }
    return writeIndex;
}
 8001cc6:	b02a      	add	sp, #168	@ 0xa8
 8001cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (writeIndex < 0) return -1;
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	e7f9      	b.n	8001cc6 <generateLocationInfoMessage+0xa6>
 8001cd2:	bf00      	nop
 8001cd4:	0800f7d8 	.word	0x0800f7d8

08001cd8 <login_to_server>:



int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cda:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
	uint8_t command[256];  // Increased buffer size
	char hexString[128] = {0};
 8001cde:	2400      	movs	r4, #0
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001ce0:	460f      	mov	r7, r1
	char hexString[128] = {0};
 8001ce2:	ae02      	add	r6, sp, #8
 8001ce4:	227c      	movs	r2, #124	@ 0x7c
 8001ce6:	4621      	mov	r1, r4
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001ce8:	4605      	mov	r5, r0
	char hexString[128] = {0};
 8001cea:	a803      	add	r0, sp, #12
 8001cec:	6034      	str	r4, [r6, #0]
 8001cee:	f009 fe2d 	bl	800b94c <memset>
	int count_check = 0;
	int result = generateRegistrationMessage(reg_msg, hexString, 128);
 8001cf2:	2280      	movs	r2, #128	@ 0x80
 8001cf4:	4631      	mov	r1, r6
 8001cf6:	4638      	mov	r0, r7
 8001cf8:	f7ff ff1e 	bl	8001b38 <generateRegistrationMessage>
	if (result < 0) {
 8001cfc:	42a0      	cmp	r0, r4
 8001cfe:	da05      	bge.n	8001d0c <login_to_server+0x34>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 8001d00:	4926      	ldr	r1, [pc, #152]	@ (8001d9c <login_to_server+0xc4>)
 8001d02:	4827      	ldr	r0, [pc, #156]	@ (8001da0 <login_to_server+0xc8>)
 8001d04:	f002 ff0e 	bl	8004b24 <uart_transmit_string>
		return 1;
 8001d08:	2001      	movs	r0, #1
 8001d0a:	e02c      	b.n	8001d66 <login_to_server+0x8e>
	}

	// Format the AT command with the hex message
	snprintf((char*)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8001d0c:	462b      	mov	r3, r5
 8001d0e:	4a25      	ldr	r2, [pc, #148]	@ (8001da4 <login_to_server+0xcc>)
 8001d10:	9600      	str	r6, [sp, #0]
 8001d12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d16:	a842      	add	r0, sp, #264	@ 0x108
 8001d18:	f009 fd1c 	bl	800b754 <sniprintf>
	//snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message);
	send_AT_command((char*)command);
 8001d1c:	a842      	add	r0, sp, #264	@ 0x108
 8001d1e:	f7ff f96f 	bl	8001000 <send_AT_command>

//	while(1){
	while(strstr((char *) response, "+QIURC") == NULL){
 8001d22:	4e21      	ldr	r6, [pc, #132]	@ (8001da8 <login_to_server+0xd0>)
 8001d24:	4d21      	ldr	r5, [pc, #132]	@ (8001dac <login_to_server+0xd4>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		if (strstr((char*) response, "ERROR") != NULL){
 8001d26:	4f22      	ldr	r7, [pc, #136]	@ (8001db0 <login_to_server+0xd8>)
	while(strstr((char *) response, "+QIURC") == NULL){
 8001d28:	4631      	mov	r1, r6
 8001d2a:	4628      	mov	r0, r5
 8001d2c:	f009 fe5e 	bl	800b9ec <strstr>
 8001d30:	b170      	cbz	r0, 8001d50 <login_to_server+0x78>
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		receive_response("Check sending to server\n");
		osDelay(100);
	}
	receive_response("Check sending to server\n");
 8001d32:	4820      	ldr	r0, [pc, #128]	@ (8001db4 <login_to_server+0xdc>)
 8001d34:	f7ff f990 	bl	8001058 <receive_response>
	osDelay(100);
 8001d38:	2064      	movs	r0, #100	@ 0x64
 8001d3a:	f006 f84b 	bl	8007dd4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001d3e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d42:	2100      	movs	r1, #0
 8001d44:	4819      	ldr	r0, [pc, #100]	@ (8001dac <login_to_server+0xd4>)
 8001d46:	f009 fe01 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001d4a:	f7ff f969 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001d4e:	e7db      	b.n	8001d08 <login_to_server+0x30>
		if(count_check >= 50){
 8001d50:	2c32      	cmp	r4, #50	@ 0x32
 8001d52:	d10b      	bne.n	8001d6c <login_to_server+0x94>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001d54:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4814      	ldr	r0, [pc, #80]	@ (8001dac <login_to_server+0xd4>)
 8001d5c:	f009 fdf6 	bl	800b94c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001d60:	f7ff f95e 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001d64:	2000      	movs	r0, #0
}
 8001d66:	f50d 7d03 	add.w	sp, sp, #524	@ 0x20c
 8001d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 8001d6c:	4639      	mov	r1, r7
 8001d6e:	4628      	mov	r0, r5
 8001d70:	f009 fe3c 	bl	800b9ec <strstr>
 8001d74:	2800      	cmp	r0, #0
 8001d76:	d1ed      	bne.n	8001d54 <login_to_server+0x7c>
		count_check++;
 8001d78:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001db8 <login_to_server+0xe0>)
 8001d7c:	4623      	mov	r3, r4
 8001d7e:	2180      	movs	r1, #128	@ 0x80
 8001d80:	a822      	add	r0, sp, #136	@ 0x88
 8001d82:	f009 fce7 	bl	800b754 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001d86:	a922      	add	r1, sp, #136	@ 0x88
 8001d88:	4805      	ldr	r0, [pc, #20]	@ (8001da0 <login_to_server+0xc8>)
 8001d8a:	f002 fecb 	bl	8004b24 <uart_transmit_string>
		receive_response("Check sending to server\n");
 8001d8e:	4809      	ldr	r0, [pc, #36]	@ (8001db4 <login_to_server+0xdc>)
 8001d90:	f7ff f962 	bl	8001058 <receive_response>
		osDelay(100);
 8001d94:	2064      	movs	r0, #100	@ 0x64
 8001d96:	f006 f81d 	bl	8007dd4 <osDelay>
 8001d9a:	e7c5      	b.n	8001d28 <login_to_server+0x50>
 8001d9c:	0800fe16 	.word	0x0800fe16
 8001da0:	200011d0 	.word	0x200011d0
 8001da4:	0800fe40 	.word	0x0800fe40
 8001da8:	0800fe6f 	.word	0x0800fe6f
 8001dac:	20000c38 	.word	0x20000c38
 8001db0:	0800fd27 	.word	0x0800fd27
 8001db4:	0800fe56 	.word	0x0800fe56
 8001db8:	0800fdd9 	.word	0x0800fdd9

08001dbc <send_location_to_server>:

int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dbe:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
	uint8_t command[256];  // Increased buffer size
	char hexString[131] = {0};
 8001dc2:	2400      	movs	r4, #0
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001dc4:	460f      	mov	r7, r1
	char hexString[131] = {0};
 8001dc6:	ae23      	add	r6, sp, #140	@ 0x8c
 8001dc8:	227f      	movs	r2, #127	@ 0x7f
 8001dca:	4621      	mov	r1, r4
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001dcc:	4605      	mov	r5, r0
	char hexString[131] = {0};
 8001dce:	a824      	add	r0, sp, #144	@ 0x90
 8001dd0:	6034      	str	r4, [r6, #0]
 8001dd2:	f009 fdbb 	bl	800b94c <memset>
	int count_check = 0;

	int count_resend = 0;
	int result = generateLocationInfoMessage(location_info, hexString, 131);
 8001dd6:	2283      	movs	r2, #131	@ 0x83
 8001dd8:	4631      	mov	r1, r6
 8001dda:	4638      	mov	r0, r7
 8001ddc:	f7ff ff20 	bl	8001c20 <generateLocationInfoMessage>
	if (result < 0) {
 8001de0:	42a0      	cmp	r0, r4
 8001de2:	da05      	bge.n	8001df0 <send_location_to_server+0x34>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 8001de4:	4925      	ldr	r1, [pc, #148]	@ (8001e7c <send_location_to_server+0xc0>)
 8001de6:	4826      	ldr	r0, [pc, #152]	@ (8001e80 <send_location_to_server+0xc4>)
 8001de8:	f002 fe9c 	bl	8004b24 <uart_transmit_string>
		return 1;
 8001dec:	2001      	movs	r0, #1
 8001dee:	e02c      	b.n	8001e4a <send_location_to_server+0x8e>
	}

		// Format the AT command with the hex message
	snprintf((char *) command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8001df0:	462b      	mov	r3, r5
 8001df2:	4a24      	ldr	r2, [pc, #144]	@ (8001e84 <send_location_to_server+0xc8>)
 8001df4:	9600      	str	r6, [sp, #0]
 8001df6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dfa:	a844      	add	r0, sp, #272	@ 0x110
 8001dfc:	f009 fcaa 	bl	800b754 <sniprintf>
	send_AT_command((char*)command);
 8001e00:	a844      	add	r0, sp, #272	@ 0x110
 8001e02:	f7ff f8fd 	bl	8001000 <send_AT_command>
	while(strstr((char *) response, "+QIURC") == NULL){
 8001e06:	4e20      	ldr	r6, [pc, #128]	@ (8001e88 <send_location_to_server+0xcc>)
 8001e08:	4d20      	ldr	r5, [pc, #128]	@ (8001e8c <send_location_to_server+0xd0>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		if (strstr((char*) response, "ERROR") != NULL){
 8001e0a:	4f21      	ldr	r7, [pc, #132]	@ (8001e90 <send_location_to_server+0xd4>)
	while(strstr((char *) response, "+QIURC") == NULL){
 8001e0c:	4631      	mov	r1, r6
 8001e0e:	4628      	mov	r0, r5
 8001e10:	f009 fdec 	bl	800b9ec <strstr>
 8001e14:	b158      	cbz	r0, 8001e2e <send_location_to_server+0x72>
		count_check++;
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		receive_response("Check sending to server\n");
	}
	receive_response("Check sending to server\n");
 8001e16:	481f      	ldr	r0, [pc, #124]	@ (8001e94 <send_location_to_server+0xd8>)
 8001e18:	f7ff f91e 	bl	8001058 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e1c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e20:	2100      	movs	r1, #0
 8001e22:	481a      	ldr	r0, [pc, #104]	@ (8001e8c <send_location_to_server+0xd0>)
 8001e24:	f009 fd92 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001e28:	f7ff f8fa 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001e2c:	e7de      	b.n	8001dec <send_location_to_server+0x30>
		osDelay(100);
 8001e2e:	2064      	movs	r0, #100	@ 0x64
 8001e30:	f005 ffd0 	bl	8007dd4 <osDelay>
		if(count_check >= 50){
 8001e34:	2c32      	cmp	r4, #50	@ 0x32
 8001e36:	d10b      	bne.n	8001e50 <send_location_to_server+0x94>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e38:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4813      	ldr	r0, [pc, #76]	@ (8001e8c <send_location_to_server+0xd0>)
 8001e40:	f009 fd84 	bl	800b94c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001e44:	f7ff f8ec 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001e48:	2000      	movs	r0, #0
}
 8001e4a:	f50d 7d05 	add.w	sp, sp, #532	@ 0x214
 8001e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 8001e50:	4639      	mov	r1, r7
 8001e52:	4628      	mov	r0, r5
 8001e54:	f009 fdca 	bl	800b9ec <strstr>
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	d1ed      	bne.n	8001e38 <send_location_to_server+0x7c>
		count_check++;
 8001e5c:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8001e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e98 <send_location_to_server+0xdc>)
 8001e60:	4623      	mov	r3, r4
 8001e62:	2180      	movs	r1, #128	@ 0x80
 8001e64:	a803      	add	r0, sp, #12
 8001e66:	f009 fc75 	bl	800b754 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001e6a:	4805      	ldr	r0, [pc, #20]	@ (8001e80 <send_location_to_server+0xc4>)
 8001e6c:	a903      	add	r1, sp, #12
 8001e6e:	f002 fe59 	bl	8004b24 <uart_transmit_string>
		receive_response("Check sending to server\n");
 8001e72:	4808      	ldr	r0, [pc, #32]	@ (8001e94 <send_location_to_server+0xd8>)
 8001e74:	f7ff f8f0 	bl	8001058 <receive_response>
 8001e78:	e7c8      	b.n	8001e0c <send_location_to_server+0x50>
 8001e7a:	bf00      	nop
 8001e7c:	0800fe16 	.word	0x0800fe16
 8001e80:	200011d0 	.word	0x200011d0
 8001e84:	0800fe40 	.word	0x0800fe40
 8001e88:	0800fe6f 	.word	0x0800fe6f
 8001e8c:	20000c38 	.word	0x20000c38
 8001e90:	0800fd27 	.word	0x0800fd27
 8001e94:	0800fe56 	.word	0x0800fe56
 8001e98:	0800fdd9 	.word	0x0800fdd9

08001e9c <check_data_sent_to_server>:


int check_data_sent_to_server(int connect_id){
 8001e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
	int count_check = 0;
	uint8_t output[128];
	int count_resend = 0;
	int is_sent_ok = 0;

	Debug_printf("\n\n---------------- IN QIRD: 0X1500h ------------------\n\n");
 8001ea6:	4886      	ldr	r0, [pc, #536]	@ (80020c0 <check_data_sent_to_server+0x224>)
	while(count_resend < 5){
		snprintf((char *)command, sizeof(command), "AT+QIRD=%d,100\r\n", connect_id);
 8001ea8:	f8df 925c 	ldr.w	r9, [pc, #604]	@ 8002108 <check_data_sent_to_server+0x26c>
		send_AT_command((char*)command);
		Debug_printf("\n\n---------------- IN QIRD:0X100 SENDING COUNT: %d ------------------\n\n", count_resend);
 8001eac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800210c <check_data_sent_to_server+0x270>
	Debug_printf("\n\n---------------- IN QIRD: 0X1500h ------------------\n\n");
 8001eb0:	f002 fe48 	bl	8004b44 <Debug_printf>
 8001eb4:	2501      	movs	r5, #1
		snprintf((char *)command, sizeof(command), "AT+QIRD=%d,100\r\n", connect_id);
 8001eb6:	4623      	mov	r3, r4
 8001eb8:	464a      	mov	r2, r9
 8001eba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ebe:	a844      	add	r0, sp, #272	@ 0x110
 8001ec0:	f009 fc48 	bl	800b754 <sniprintf>
		send_AT_command((char*)command);
 8001ec4:	a844      	add	r0, sp, #272	@ 0x110
 8001ec6:	f7ff f89b 	bl	8001000 <send_AT_command>
		Debug_printf("\n\n---------------- IN QIRD:0X100 SENDING COUNT: %d ------------------\n\n", count_resend);
 8001eca:	1e69      	subs	r1, r5, #1
 8001ecc:	4650      	mov	r0, sl
 8001ece:	f002 fe39 	bl	8004b44 <Debug_printf>
		is_sent_ok = 1;
		while(strstr((char *) response, "+QIRD") == NULL){
 8001ed2:	f8df 81fc 	ldr.w	r8, [pc, #508]	@ 80020d0 <check_data_sent_to_server+0x234>
			char output_elapsed[128];
			if (strstr((char*)response, "ERROR") != NULL){
 8001ed6:	f8df b238 	ldr.w	fp, [pc, #568]	@ 8002110 <check_data_sent_to_server+0x274>
		while(strstr((char *) response, "+QIRD") == NULL){
 8001eda:	2700      	movs	r7, #0
 8001edc:	4979      	ldr	r1, [pc, #484]	@ (80020c4 <check_data_sent_to_server+0x228>)
 8001ede:	4640      	mov	r0, r8
 8001ee0:	f009 fd84 	bl	800b9ec <strstr>
 8001ee4:	4606      	mov	r6, r0
 8001ee6:	b338      	cbz	r0, 8001f38 <check_data_sent_to_server+0x9c>
			count_resend++;
			count_check = 0;
			osDelay(100);
			continue;
		}
		receive_response("Check received data from server\n");
 8001ee8:	4877      	ldr	r0, [pc, #476]	@ (80020c8 <check_data_sent_to_server+0x22c>)
 8001eea:	f7ff f8b5 	bl	8001058 <receive_response>
		char *token = strstr((char*)response, "+QIRD: ");
 8001eee:	4977      	ldr	r1, [pc, #476]	@ (80020cc <check_data_sent_to_server+0x230>)
 8001ef0:	4877      	ldr	r0, [pc, #476]	@ (80020d0 <check_data_sent_to_server+0x234>)
 8001ef2:	f009 fd7b 	bl	800b9ec <strstr>
		int value = 0;

		if (token != NULL) {
 8001ef6:	b110      	cbz	r0, 8001efe <check_data_sent_to_server+0x62>
			value = atoi(token + 7);  // Move past "+QIRD: " and convert to integer
 8001ef8:	3007      	adds	r0, #7
 8001efa:	f007 fdab 	bl	8009a54 <atoi>
		}
		snprintf((char*)output, 128, "\nNumber of character received: %d\n", value);
 8001efe:	4603      	mov	r3, r0
 8001f00:	4a74      	ldr	r2, [pc, #464]	@ (80020d4 <check_data_sent_to_server+0x238>)
		int value = 0;
 8001f02:	4606      	mov	r6, r0
		snprintf((char*)output, 128, "\nNumber of character received: %d\n", value);
 8001f04:	2180      	movs	r1, #128	@ 0x80
 8001f06:	a804      	add	r0, sp, #16
 8001f08:	f009 fc24 	bl	800b754 <sniprintf>
		uart_transmit_string(&huart1, output);
 8001f0c:	4872      	ldr	r0, [pc, #456]	@ (80020d8 <check_data_sent_to_server+0x23c>)
 8001f0e:	a904      	add	r1, sp, #16
 8001f10:	f002 fe08 	bl	8004b24 <uart_transmit_string>

		uart_transmit_string(&huart1, (uint8_t*) "OUT OF receive data from server\n");
 8001f14:	4971      	ldr	r1, [pc, #452]	@ (80020dc <check_data_sent_to_server+0x240>)
 8001f16:	4870      	ldr	r0, [pc, #448]	@ (80020d8 <check_data_sent_to_server+0x23c>)
 8001f18:	f002 fe04 	bl	8004b24 <uart_transmit_string>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f1c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001f20:	2100      	movs	r1, #0
 8001f22:	486b      	ldr	r0, [pc, #428]	@ (80020d0 <check_data_sent_to_server+0x234>)
 8001f24:	f009 fd12 	bl	800b94c <memset>
		SIM_UART_ReInitializeRxDMA();
 8001f28:	f7ff f87a 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
		if(value == 0) {
 8001f2c:	bb1e      	cbnz	r6, 8001f76 <check_data_sent_to_server+0xda>
			count_resend++;
			count_check = 0;
			osDelay(100);
 8001f2e:	2064      	movs	r0, #100	@ 0x64
 8001f30:	f005 ff50 	bl	8007dd4 <osDelay>
		is_sent_ok = 1;
 8001f34:	2601      	movs	r6, #1
 8001f36:	e018      	b.n	8001f6a <check_data_sent_to_server+0xce>
			if (strstr((char*)response, "ERROR") != NULL){
 8001f38:	4659      	mov	r1, fp
 8001f3a:	4640      	mov	r0, r8
 8001f3c:	f009 fd56 	bl	800b9ec <strstr>
 8001f40:	4601      	mov	r1, r0
 8001f42:	2800      	cmp	r0, #0
 8001f44:	d066      	beq.n	8002014 <check_data_sent_to_server+0x178>
				Debug_printf("\n\n---------------- IN QIRD: 0X1500h: ERROR ------------------\n\n");
 8001f46:	4866      	ldr	r0, [pc, #408]	@ (80020e0 <check_data_sent_to_server+0x244>)
 8001f48:	f002 fdfc 	bl	8004b44 <Debug_printf>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f4c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001f50:	4631      	mov	r1, r6
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f52:	485f      	ldr	r0, [pc, #380]	@ (80020d0 <check_data_sent_to_server+0x234>)
 8001f54:	f009 fcfa 	bl	800b94c <memset>
				SIM_UART_ReInitializeRxDMA();
 8001f58:	f7ff f862 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
				send_AT_command((char*)command);
 8001f5c:	a844      	add	r0, sp, #272	@ 0x110
 8001f5e:	f7ff f84f 	bl	8001000 <send_AT_command>
			osDelay(100);
 8001f62:	2064      	movs	r0, #100	@ 0x64
 8001f64:	f005 ff36 	bl	8007dd4 <osDelay>
			continue;
 8001f68:	2600      	movs	r6, #0
	while(count_resend < 5){
 8001f6a:	3501      	adds	r5, #1
 8001f6c:	2d06      	cmp	r5, #6
 8001f6e:	d1a2      	bne.n	8001eb6 <check_data_sent_to_server+0x1a>
		}
		else break;
	}
//	osDelay(50);
// --------------------------------------------------------------End of  QIRD ------------------------------------------------------------
	if(is_sent_ok == 1){
 8001f70:	2e00      	cmp	r6, #0
 8001f72:	f000 80a1 	beq.w	80020b8 <check_data_sent_to_server+0x21c>
//		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
//		SIM_UART_ReInitializeRxDMA();
	//Reset value
		count_check = 0;
		count_resend = 0;
		Debug_printf("\n\n---------------- IN QISEND: 0X0 ------------------\n\n");
 8001f76:	485b      	ldr	r0, [pc, #364]	@ (80020e4 <check_data_sent_to_server+0x248>)

		while(count_resend < 3){
			is_sent_ok = 1;
			snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001f78:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8002114 <check_data_sent_to_server+0x278>
			send_AT_command((char*)command);
			Debug_printf("\n\n---------------- IN QISEND:0X0 SENDING COUNT: %d ------------------\n\n", count_resend);
 8001f7c:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8002118 <check_data_sent_to_server+0x27c>
		Debug_printf("\n\n---------------- IN QISEND: 0X0 ------------------\n\n");
 8001f80:	f002 fde0 	bl	8004b44 <Debug_printf>
		count_resend = 0;
 8001f84:	2500      	movs	r5, #0
		count_check = 0;
 8001f86:	462f      	mov	r7, r5
			snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001f88:	4623      	mov	r3, r4
 8001f8a:	464a      	mov	r2, r9
 8001f8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f90:	a844      	add	r0, sp, #272	@ 0x110
 8001f92:	f009 fbdf 	bl	800b754 <sniprintf>
			send_AT_command((char*)command);
 8001f96:	a844      	add	r0, sp, #272	@ 0x110
 8001f98:	f7ff f832 	bl	8001000 <send_AT_command>
			Debug_printf("\n\n---------------- IN QISEND:0X0 SENDING COUNT: %d ------------------\n\n", count_resend);
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	4650      	mov	r0, sl
 8001fa0:	f002 fdd0 	bl	8004b44 <Debug_printf>
			while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001fa4:	f8df 8128 	ldr.w	r8, [pc, #296]	@ 80020d0 <check_data_sent_to_server+0x234>
					SIM_UART_ReInitializeRxDMA();
					send_AT_command((char*)command);
					is_sent_ok = 0;
					break;
				}
				if (strstr((char*) response, "ERROR") != NULL){
 8001fa8:	f8df b164 	ldr.w	fp, [pc, #356]	@ 8002110 <check_data_sent_to_server+0x274>
			while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001fac:	494e      	ldr	r1, [pc, #312]	@ (80020e8 <check_data_sent_to_server+0x24c>)
 8001fae:	4640      	mov	r0, r8
 8001fb0:	f009 fd1c 	bl	800b9ec <strstr>
 8001fb4:	4606      	mov	r6, r0
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	d043      	beq.n	8002042 <check_data_sent_to_server+0x1a6>

			if(is_sent_ok == 0) {
				count_resend++;
				continue;
			}
			receive_response("Check sending to server\n");
 8001fba:	484c      	ldr	r0, [pc, #304]	@ (80020ec <check_data_sent_to_server+0x250>)
			int sentBytes, ackedBytes, unackedBytes;

			int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8001fbc:	ae24      	add	r6, sp, #144	@ 0x90
			receive_response("Check sending to server\n");
 8001fbe:	f7ff f84b 	bl	8001058 <receive_response>
			int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8001fc2:	494b      	ldr	r1, [pc, #300]	@ (80020f0 <check_data_sent_to_server+0x254>)
 8001fc4:	4842      	ldr	r0, [pc, #264]	@ (80020d0 <check_data_sent_to_server+0x234>)
 8001fc6:	9600      	str	r6, [sp, #0]
 8001fc8:	ab03      	add	r3, sp, #12
 8001fca:	aa02      	add	r2, sp, #8
 8001fcc:	f009 fc16 	bl	800b7fc <siscanf>
			snprintf((char *)output, 128, "Lost Transmit BYTES: %d\n", unackedBytes);
 8001fd0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8001fd2:	4a48      	ldr	r2, [pc, #288]	@ (80020f4 <check_data_sent_to_server+0x258>)
			int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8001fd4:	4680      	mov	r8, r0
			snprintf((char *)output, 128, "Lost Transmit BYTES: %d\n", unackedBytes);
 8001fd6:	2180      	movs	r1, #128	@ 0x80
 8001fd8:	a804      	add	r0, sp, #16
 8001fda:	f009 fbbb 	bl	800b754 <sniprintf>
			uart_transmit_string(&huart1, output);
 8001fde:	483e      	ldr	r0, [pc, #248]	@ (80020d8 <check_data_sent_to_server+0x23c>)
 8001fe0:	a904      	add	r1, sp, #16
 8001fe2:	f002 fd9f 	bl	8004b24 <uart_transmit_string>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001fe6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001fea:	2100      	movs	r1, #0
 8001fec:	4838      	ldr	r0, [pc, #224]	@ (80020d0 <check_data_sent_to_server+0x234>)
 8001fee:	f009 fcad 	bl	800b94c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001ff2:	f7ff f815 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
			if (result == 3) {
 8001ff6:	f1b8 0f03 	cmp.w	r8, #3
 8001ffa:	d15b      	bne.n	80020b4 <check_data_sent_to_server+0x218>
				if (unackedBytes > 0) {
 8001ffc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	dc30      	bgt.n	8002064 <check_data_sent_to_server+0x1c8>
					count_resend++;
					is_sent_ok = 0;
				}
				else{
					Debug_printf("NO DATA LOSS\n");
 8002002:	483d      	ldr	r0, [pc, #244]	@ (80020f8 <check_data_sent_to_server+0x25c>)
 8002004:	f002 fd9e 	bl	8004b44 <Debug_printf>
					break;
 8002008:	2601      	movs	r6, #1
	}
	else{
		Debug_printf("\n\n------------------QIRD ERROR SKIP QISEND0X0 ----------------------\n\n");
	}
	return is_sent_ok;
}
 800200a:	4630      	mov	r0, r6
 800200c:	f50d 7d05 	add.w	sp, sp, #532	@ 0x214
 8002010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(count_check >= 10){
 8002014:	2f0a      	cmp	r7, #10
 8002016:	d102      	bne.n	800201e <check_data_sent_to_server+0x182>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002018:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800201c:	e799      	b.n	8001f52 <check_data_sent_to_server+0xb6>
			osDelay(100);
 800201e:	2064      	movs	r0, #100	@ 0x64
 8002020:	f005 fed8 	bl	8007dd4 <osDelay>
			snprintf(output_elapsed, 128, "Elapsed Time +QISEND: 0,0: %d\n", count_check);
 8002024:	463b      	mov	r3, r7
 8002026:	4a35      	ldr	r2, [pc, #212]	@ (80020fc <check_data_sent_to_server+0x260>)
 8002028:	2180      	movs	r1, #128	@ 0x80
 800202a:	a824      	add	r0, sp, #144	@ 0x90
 800202c:	f009 fb92 	bl	800b754 <sniprintf>
			uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8002030:	4829      	ldr	r0, [pc, #164]	@ (80020d8 <check_data_sent_to_server+0x23c>)
 8002032:	a924      	add	r1, sp, #144	@ 0x90
 8002034:	f002 fd76 	bl	8004b24 <uart_transmit_string>
			receive_response("Check received data from server\n");
 8002038:	4823      	ldr	r0, [pc, #140]	@ (80020c8 <check_data_sent_to_server+0x22c>)
			count_check++;
 800203a:	3701      	adds	r7, #1
			receive_response("Check received data from server\n");
 800203c:	f7ff f80c 	bl	8001058 <receive_response>
 8002040:	e74c      	b.n	8001edc <check_data_sent_to_server+0x40>
				osDelay(100);
 8002042:	2064      	movs	r0, #100	@ 0x64
 8002044:	f005 fec6 	bl	8007dd4 <osDelay>
				if(count_check >= 50){
 8002048:	2f31      	cmp	r7, #49	@ 0x31
 800204a:	dd10      	ble.n	800206e <check_data_sent_to_server+0x1d2>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800204c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002050:	4631      	mov	r1, r6
 8002052:	481f      	ldr	r0, [pc, #124]	@ (80020d0 <check_data_sent_to_server+0x234>)
 8002054:	f009 fc7a 	bl	800b94c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002058:	f7fe ffe2 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
					send_AT_command((char*)command);
 800205c:	a844      	add	r0, sp, #272	@ 0x110
 800205e:	f7fe ffcf 	bl	8001000 <send_AT_command>
					count_check = 0;
 8002062:	4637      	mov	r7, r6
					count_resend++;
 8002064:	3501      	adds	r5, #1
					is_sent_ok = 0;
 8002066:	2600      	movs	r6, #0
		while(count_resend < 3){
 8002068:	2d03      	cmp	r5, #3
 800206a:	d18d      	bne.n	8001f88 <check_data_sent_to_server+0xec>
 800206c:	e7cd      	b.n	800200a <check_data_sent_to_server+0x16e>
				if (strstr((char*) response, "ERROR") != NULL){
 800206e:	4659      	mov	r1, fp
 8002070:	4640      	mov	r0, r8
 8002072:	f009 fcbb 	bl	800b9ec <strstr>
 8002076:	b170      	cbz	r0, 8002096 <check_data_sent_to_server+0x1fa>
					Debug_printf("\n\n---------------- IN QISEND: 0X0: ERROR ------------------\n\n");
 8002078:	4821      	ldr	r0, [pc, #132]	@ (8002100 <check_data_sent_to_server+0x264>)
 800207a:	f002 fd63 	bl	8004b44 <Debug_printf>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800207e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002082:	4631      	mov	r1, r6
 8002084:	4812      	ldr	r0, [pc, #72]	@ (80020d0 <check_data_sent_to_server+0x234>)
 8002086:	f009 fc61 	bl	800b94c <memset>
					SIM_UART_ReInitializeRxDMA();
 800208a:	f7fe ffc9 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
					send_AT_command((char*)command);
 800208e:	a844      	add	r0, sp, #272	@ 0x110
 8002090:	f7fe ffb6 	bl	8001000 <send_AT_command>
					break;
 8002094:	e7e6      	b.n	8002064 <check_data_sent_to_server+0x1c8>
				count_check++;
 8002096:	3701      	adds	r7, #1
				snprintf(output_elapsed, 128, "Elapsed Time +QISEND: 0,0: %d\n", count_check);
 8002098:	4a18      	ldr	r2, [pc, #96]	@ (80020fc <check_data_sent_to_server+0x260>)
 800209a:	463b      	mov	r3, r7
 800209c:	2180      	movs	r1, #128	@ 0x80
 800209e:	a824      	add	r0, sp, #144	@ 0x90
 80020a0:	f009 fb58 	bl	800b754 <sniprintf>
				uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 80020a4:	480c      	ldr	r0, [pc, #48]	@ (80020d8 <check_data_sent_to_server+0x23c>)
 80020a6:	a924      	add	r1, sp, #144	@ 0x90
 80020a8:	f002 fd3c 	bl	8004b24 <uart_transmit_string>
				receive_response("Check sending to server\n");
 80020ac:	480f      	ldr	r0, [pc, #60]	@ (80020ec <check_data_sent_to_server+0x250>)
 80020ae:	f7fe ffd3 	bl	8001058 <receive_response>
 80020b2:	e77b      	b.n	8001fac <check_data_sent_to_server+0x110>
 80020b4:	2601      	movs	r6, #1
 80020b6:	e7d7      	b.n	8002068 <check_data_sent_to_server+0x1cc>
		Debug_printf("\n\n------------------QIRD ERROR SKIP QISEND0X0 ----------------------\n\n");
 80020b8:	4812      	ldr	r0, [pc, #72]	@ (8002104 <check_data_sent_to_server+0x268>)
 80020ba:	f002 fd43 	bl	8004b44 <Debug_printf>
	return is_sent_ok;
 80020be:	e7a4      	b.n	800200a <check_data_sent_to_server+0x16e>
 80020c0:	0800fe76 	.word	0x0800fe76
 80020c4:	0800ff88 	.word	0x0800ff88
 80020c8:	0800ff67 	.word	0x0800ff67
 80020cc:	0800ff8e 	.word	0x0800ff8e
 80020d0:	20000c38 	.word	0x20000c38
 80020d4:	0800ff96 	.word	0x0800ff96
 80020d8:	200011d0 	.word	0x200011d0
 80020dc:	0800ffb9 	.word	0x0800ffb9
 80020e0:	0800ff08 	.word	0x0800ff08
 80020e4:	0800ffda 	.word	0x0800ffda
 80020e8:	0800fa2a 	.word	0x0800fa2a
 80020ec:	0800fe56 	.word	0x0800fe56
 80020f0:	080100a8 	.word	0x080100a8
 80020f4:	080100c8 	.word	0x080100c8
 80020f8:	080100e1 	.word	0x080100e1
 80020fc:	0800ff48 	.word	0x0800ff48
 8002100:	0801006a 	.word	0x0801006a
 8002104:	080100ef 	.word	0x080100ef
 8002108:	0800feaf 	.word	0x0800feaf
 800210c:	0800fec0 	.word	0x0800fec0
 8002110:	0800fd27 	.word	0x0800fd27
 8002114:	08010011 	.word	0x08010011
 8002118:	08010022 	.word	0x08010022

0800211c <close_connection>:


int close_connection(int connect_id){
 800211c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211e:	b0c1      	sub	sp, #260	@ 0x104
 8002120:	4603      	mov	r3, r0
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 8002122:	4a1e      	ldr	r2, [pc, #120]	@ (800219c <close_connection+0x80>)
	send_AT_command((char*)command);
	int count_check = 0;
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002124:	4e1e      	ldr	r6, [pc, #120]	@ (80021a0 <close_connection+0x84>)
 8002126:	4d1f      	ldr	r5, [pc, #124]	@ (80021a4 <close_connection+0x88>)
		receive_response("Check CLOSING to server\n");
 8002128:	4f1f      	ldr	r7, [pc, #124]	@ (80021a8 <close_connection+0x8c>)
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 800212a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800212e:	4668      	mov	r0, sp
 8002130:	f009 fb10 	bl	800b754 <sniprintf>
	send_AT_command((char*)command);
 8002134:	4668      	mov	r0, sp
 8002136:	f7fe ff63 	bl	8001000 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800213a:	2406      	movs	r4, #6
 800213c:	4631      	mov	r1, r6
 800213e:	4628      	mov	r0, r5
 8002140:	f009 fc54 	bl	800b9ec <strstr>
 8002144:	b178      	cbz	r0, 8002166 <close_connection+0x4a>
			return 0;
		}
		osDelay(1000);
		count_check++;
	}
	receive_response("Check CLOSING to server\n");
 8002146:	4818      	ldr	r0, [pc, #96]	@ (80021a8 <close_connection+0x8c>)
 8002148:	f7fe ff86 	bl	8001058 <receive_response>
	osDelay(100);
 800214c:	2064      	movs	r0, #100	@ 0x64
 800214e:	f005 fe41 	bl	8007dd4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002152:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002156:	2100      	movs	r1, #0
 8002158:	4812      	ldr	r0, [pc, #72]	@ (80021a4 <close_connection+0x88>)
 800215a:	f009 fbf7 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 800215e:	f7fe ff5f 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8002162:	2001      	movs	r0, #1
 8002164:	e010      	b.n	8002188 <close_connection+0x6c>
		receive_response("Check CLOSING to server\n");
 8002166:	4638      	mov	r0, r7
 8002168:	f7fe ff76 	bl	8001058 <receive_response>
		if (strstr((char*)response, "ERROR") != NULL){
 800216c:	490f      	ldr	r1, [pc, #60]	@ (80021ac <close_connection+0x90>)
 800216e:	4628      	mov	r0, r5
 8002170:	f009 fc3c 	bl	800b9ec <strstr>
 8002174:	b150      	cbz	r0, 800218c <close_connection+0x70>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002176:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800217a:	2100      	movs	r1, #0
 800217c:	4809      	ldr	r0, [pc, #36]	@ (80021a4 <close_connection+0x88>)
 800217e:	f009 fbe5 	bl	800b94c <memset>
			SIM_UART_ReInitializeRxDMA();
 8002182:	f7fe ff4d 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8002186:	2000      	movs	r0, #0
}
 8002188:	b041      	add	sp, #260	@ 0x104
 800218a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >= 5){
 800218c:	3c01      	subs	r4, #1
 800218e:	d0f2      	beq.n	8002176 <close_connection+0x5a>
		osDelay(1000);
 8002190:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002194:	f005 fe1e 	bl	8007dd4 <osDelay>
		count_check++;
 8002198:	e7d0      	b.n	800213c <close_connection+0x20>
 800219a:	bf00      	nop
 800219c:	08010136 	.word	0x08010136
 80021a0:	0800fa2a 	.word	0x0800fa2a
 80021a4:	20000c38 	.word	0x20000c38
 80021a8:	08010146 	.word	0x08010146
 80021ac:	0800fd27 	.word	0x0800fd27

080021b0 <extract_time_CCLK>:


int extract_time_CCLK(uint8_t* message){
 80021b0:	b510      	push	{r4, lr}
 80021b2:	b0ae      	sub	sp, #184	@ 0xb8
	int year, month, day, hour, minute, second, timezone;
	uint8_t output_buffer[128];

	sscanf((char*) message, "AT+CCLK?\r\n+CCLK: \"%2d/%2d/%2d,%2d:%2d:%2d%2d\"",
 80021b4:	ab0d      	add	r3, sp, #52	@ 0x34
 80021b6:	9304      	str	r3, [sp, #16]
 80021b8:	ab0c      	add	r3, sp, #48	@ 0x30
 80021ba:	9303      	str	r3, [sp, #12]
 80021bc:	ab0b      	add	r3, sp, #44	@ 0x2c
 80021be:	9302      	str	r3, [sp, #8]
 80021c0:	ab0a      	add	r3, sp, #40	@ 0x28
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	ab09      	add	r3, sp, #36	@ 0x24
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	aa07      	add	r2, sp, #28
 80021ca:	ab08      	add	r3, sp, #32
 80021cc:	4925      	ldr	r1, [pc, #148]	@ (8002264 <extract_time_CCLK+0xb4>)
 80021ce:	f009 fb15 	bl	800b7fc <siscanf>
						&year, &month, &day, &hour, &minute, &second, &timezone);
	hour += 1;
 80021d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80021d4:	1c5a      	adds	r2, r3, #1
	if (hour >= 24) {
 80021d6:	2a17      	cmp	r2, #23
		hour -= 24;
 80021d8:	bfc3      	ittte	gt
 80021da:	3b17      	subgt	r3, #23
 80021dc:	930a      	strgt	r3, [sp, #40]	@ 0x28
		day += 1;
 80021de:	9b09      	ldrgt	r3, [sp, #36]	@ 0x24
	hour += 1;
 80021e0:	920a      	strle	r2, [sp, #40]	@ 0x28
		day += 1;
 80021e2:	bfc4      	itt	gt
 80021e4:	3301      	addgt	r3, #1
 80021e6:	9309      	strgt	r3, [sp, #36]	@ 0x24
		// Simplified example: Add code here to handle month/day overflow as needed
	}
	if(year < 24) return 0;
 80021e8:	9b07      	ldr	r3, [sp, #28]
 80021ea:	2b17      	cmp	r3, #23
 80021ec:	dd37      	ble.n	800225e <extract_time_CCLK+0xae>
	rmc_jt.date.Yr = year;
 80021ee:	4c1e      	ldr	r4, [pc, #120]	@ (8002268 <extract_time_CCLK+0xb8>)
	rmc_jt.date.Mon = month;
	rmc_jt.date.Day = day;
	rmc_jt.tim.hour = hour;
 80021f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
	rmc_jt.tim.min = minute;
 80021f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
	rmc_jt.tim.sec = second;
 80021f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	rmc_jt.date.Yr = year;
 80021f6:	61a3      	str	r3, [r4, #24]
	rmc_jt.date.Mon = month;
 80021f8:	9b08      	ldr	r3, [sp, #32]
 80021fa:	6163      	str	r3, [r4, #20]
	rmc_jt.tim.hour = hour;
 80021fc:	6020      	str	r0, [r4, #0]
	rmc_jt.date.Day = day;
 80021fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	rmc_jt.tim.min = minute;
 8002200:	6061      	str	r1, [r4, #4]
	rmc_jt.tim.sec = second;
 8002202:	60a2      	str	r2, [r4, #8]
	set_time(hour, minute, second);
 8002204:	b2c9      	uxtb	r1, r1
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	b2c0      	uxtb	r0, r0
	rmc_jt.date.Day = day;
 800220a:	6123      	str	r3, [r4, #16]
	set_time(hour, minute, second);
 800220c:	f000 ff0c 	bl	8003028 <set_time>
	set_date(year, month, day);
 8002210:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8002214:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8002218:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800221c:	f000 ff22 	bl	8003064 <set_date>
	snprintf((char*)output_buffer, 128, "Adjusted time to GMT+8: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc_jt.date.Yr, rmc_jt.date.Mon, rmc_jt.date.Day, rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 8002220:	68a3      	ldr	r3, [r4, #8]
 8002222:	9304      	str	r3, [sp, #16]
 8002224:	6863      	ldr	r3, [r4, #4]
 8002226:	9303      	str	r3, [sp, #12]
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	9302      	str	r3, [sp, #8]
 800222c:	6923      	ldr	r3, [r4, #16]
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	6963      	ldr	r3, [r4, #20]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	69a3      	ldr	r3, [r4, #24]
 8002236:	4a0d      	ldr	r2, [pc, #52]	@ (800226c <extract_time_CCLK+0xbc>)
 8002238:	2180      	movs	r1, #128	@ 0x80
 800223a:	a80e      	add	r0, sp, #56	@ 0x38
 800223c:	f009 fa8a 	bl	800b754 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) "RTC Time: ");
 8002240:	490b      	ldr	r1, [pc, #44]	@ (8002270 <extract_time_CCLK+0xc0>)
 8002242:	480c      	ldr	r0, [pc, #48]	@ (8002274 <extract_time_CCLK+0xc4>)
 8002244:	f002 fc6e 	bl	8004b24 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t*) "\n");
 8002248:	490b      	ldr	r1, [pc, #44]	@ (8002278 <extract_time_CCLK+0xc8>)
 800224a:	480a      	ldr	r0, [pc, #40]	@ (8002274 <extract_time_CCLK+0xc4>)
 800224c:	f002 fc6a 	bl	8004b24 <uart_transmit_string>
	uart_transmit_string(&huart1, output_buffer);
 8002250:	4808      	ldr	r0, [pc, #32]	@ (8002274 <extract_time_CCLK+0xc4>)
 8002252:	a90e      	add	r1, sp, #56	@ 0x38
 8002254:	f002 fc66 	bl	8004b24 <uart_transmit_string>
	return 1;
 8002258:	2001      	movs	r0, #1
}
 800225a:	b02e      	add	sp, #184	@ 0xb8
 800225c:	bd10      	pop	{r4, pc}
	if(year < 24) return 0;
 800225e:	2000      	movs	r0, #0
 8002260:	e7fb      	b.n	800225a <extract_time_CCLK+0xaa>
 8002262:	bf00      	nop
 8002264:	0801015f 	.word	0x0801015f
 8002268:	20000bc0 	.word	0x20000bc0
 800226c:	0801018d 	.word	0x0801018d
 8002270:	080101c7 	.word	0x080101c7
 8002274:	200011d0 	.word	0x200011d0
 8002278:	080109da 	.word	0x080109da

0800227c <getCurrentTime>:


int getCurrentTime(){
 800227c:	b570      	push	{r4, r5, r6, lr}
	int count_check = 0;
	send_AT_command("AT+CCLK?\r\n");
 800227e:	4818      	ldr	r0, [pc, #96]	@ (80022e0 <getCurrentTime+0x64>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002280:	4d18      	ldr	r5, [pc, #96]	@ (80022e4 <getCurrentTime+0x68>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		receive_response("Get time\n");
 8002282:	4e19      	ldr	r6, [pc, #100]	@ (80022e8 <getCurrentTime+0x6c>)
	send_AT_command("AT+CCLK?\r\n");
 8002284:	f7fe febc 	bl	8001000 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002288:	2404      	movs	r4, #4
 800228a:	4818      	ldr	r0, [pc, #96]	@ (80022ec <getCurrentTime+0x70>)
 800228c:	4629      	mov	r1, r5
 800228e:	f009 fbad 	bl	800b9ec <strstr>
 8002292:	b190      	cbz	r0, 80022ba <getCurrentTime+0x3e>
		osDelay(100);
		count_check++;
	}
	receive_response("Get time\n");
 8002294:	4814      	ldr	r0, [pc, #80]	@ (80022e8 <getCurrentTime+0x6c>)
 8002296:	f7fe fedf 	bl	8001058 <receive_response>
	int result_extract = extract_time_CCLK(response);
 800229a:	4814      	ldr	r0, [pc, #80]	@ (80022ec <getCurrentTime+0x70>)
 800229c:	f7ff ff88 	bl	80021b0 <extract_time_CCLK>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80022a0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
	int result_extract = extract_time_CCLK(response);
 80022a4:	4604      	mov	r4, r0
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80022a6:	2100      	movs	r1, #0
 80022a8:	4810      	ldr	r0, [pc, #64]	@ (80022ec <getCurrentTime+0x70>)
 80022aa:	f009 fb4f 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 80022ae:	f7fe feb7 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	if(result_extract)
 80022b2:	1e20      	subs	r0, r4, #0
 80022b4:	bf18      	it	ne
 80022b6:	2001      	movne	r0, #1
 80022b8:	e00a      	b.n	80022d0 <getCurrentTime+0x54>
		if(count_check >= 3 ){
 80022ba:	3c01      	subs	r4, #1
 80022bc:	d109      	bne.n	80022d2 <getCurrentTime+0x56>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80022be:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80022c2:	4621      	mov	r1, r4
 80022c4:	4809      	ldr	r0, [pc, #36]	@ (80022ec <getCurrentTime+0x70>)
 80022c6:	f009 fb41 	bl	800b94c <memset>
			SIM_UART_ReInitializeRxDMA();
 80022ca:	f7fe fea9 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
			return 0;
 80022ce:	4620      	mov	r0, r4
		return 1;
	else return 0;
}
 80022d0:	bd70      	pop	{r4, r5, r6, pc}
		receive_response("Get time\n");
 80022d2:	4630      	mov	r0, r6
 80022d4:	f7fe fec0 	bl	8001058 <receive_response>
		osDelay(100);
 80022d8:	2064      	movs	r0, #100	@ 0x64
 80022da:	f005 fd7b 	bl	8007dd4 <osDelay>
		count_check++;
 80022de:	e7d4      	b.n	800228a <getCurrentTime+0xe>
 80022e0:	080101d2 	.word	0x080101d2
 80022e4:	0800fa2a 	.word	0x0800fa2a
 80022e8:	080101dd 	.word	0x080101dd
 80022ec:	20000c38 	.word	0x20000c38

080022f0 <receiveRMCDataWithAddrGSM>:


void receiveRMCDataWithAddrGSM(){
 80022f0:	b530      	push	{r4, r5, lr}
	uint8_t output_buffer[70];
	uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
 80022f2:	495b      	ldr	r1, [pc, #364]	@ (8002460 <receiveRMCDataWithAddrGSM+0x170>)
 80022f4:	485b      	ldr	r0, [pc, #364]	@ (8002464 <receiveRMCDataWithAddrGSM+0x174>)
	osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 80022f6:	4d5c      	ldr	r5, [pc, #368]	@ (8002468 <receiveRMCDataWithAddrGSM+0x178>)
void receiveRMCDataWithAddrGSM(){
 80022f8:	b09b      	sub	sp, #108	@ 0x6c
	uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
 80022fa:	f002 fc13 	bl	8004b24 <uart_transmit_string>
	osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 80022fe:	485b      	ldr	r0, [pc, #364]	@ (800246c <receiveRMCDataWithAddrGSM+0x17c>)
 8002300:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002304:	6800      	ldr	r0, [r0, #0]
 8002306:	2200      	movs	r2, #0
 8002308:	4629      	mov	r1, r5
 800230a:	f005 fe4d 	bl	8007fa8 <osMessageQueueGet>
	if(status == osOK){
 800230e:	2800      	cmp	r0, #0
 8002310:	f040 8094 	bne.w	800243c <receiveRMCDataWithAddrGSM+0x14c>
		uart_transmit_string(&huart1, (uint8_t*)"\n\nReceived  ADDRESS Data at GSM: \n");
 8002314:	4956      	ldr	r1, [pc, #344]	@ (8002470 <receiveRMCDataWithAddrGSM+0x180>)
 8002316:	4853      	ldr	r0, [pc, #332]	@ (8002464 <receiveRMCDataWithAddrGSM+0x174>)
		uart_transmit_string(&huart1, (uint8_t*)"Address received from MAIL QUEUE: \n");
		current_addr_gsm = receivedDataGSM.address;
 8002318:	4c56      	ldr	r4, [pc, #344]	@ (8002474 <receiveRMCDataWithAddrGSM+0x184>)
		uart_transmit_string(&huart1, (uint8_t*)"\n\nReceived  ADDRESS Data at GSM: \n");
 800231a:	f002 fc03 	bl	8004b24 <uart_transmit_string>
		uart_transmit_string(&huart1, (uint8_t*)"Address received from MAIL QUEUE: \n");
 800231e:	4956      	ldr	r1, [pc, #344]	@ (8002478 <receiveRMCDataWithAddrGSM+0x188>)
 8002320:	4850      	ldr	r0, [pc, #320]	@ (8002464 <receiveRMCDataWithAddrGSM+0x174>)
 8002322:	f002 fbff 	bl	8004b24 <uart_transmit_string>
		current_addr_gsm = receivedDataGSM.address;
 8002326:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002328:	6023      	str	r3, [r4, #0]
		if(checkAddrExistInQueue(current_addr_gsm, &result_addr_queue) == 0 || (current_addr_gsm >= end_addr_disconnect && current_addr_gsm <= (FLASH_END_ADDRESS - 0x100))){
 800232a:	6820      	ldr	r0, [r4, #0]
 800232c:	4953      	ldr	r1, [pc, #332]	@ (800247c <receiveRMCDataWithAddrGSM+0x18c>)
 800232e:	f000 fdfd 	bl	8002f2c <checkAddrExistInQueue>
 8002332:	b140      	cbz	r0, 8002346 <receiveRMCDataWithAddrGSM+0x56>
 8002334:	4b52      	ldr	r3, [pc, #328]	@ (8002480 <receiveRMCDataWithAddrGSM+0x190>)
 8002336:	6822      	ldr	r2, [r4, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d377      	bcc.n	800242e <receiveRMCDataWithAddrGSM+0x13e>
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8002344:	d873      	bhi.n	800242e <receiveRMCDataWithAddrGSM+0x13e>
//			current_addr_gsm = receivedDataGSM->address;
			Debug_printf("Saving data to variable to send to the server\n");
 8002346:	484f      	ldr	r0, [pc, #316]	@ (8002484 <receiveRMCDataWithAddrGSM+0x194>)
 8002348:	f002 fbfc 	bl	8004b44 <Debug_printf>
			Debug_printf("\n---------- Current data accepted at address: %08lx----------\n", current_addr_gsm);
 800234c:	6821      	ldr	r1, [r4, #0]
 800234e:	484e      	ldr	r0, [pc, #312]	@ (8002488 <receiveRMCDataWithAddrGSM+0x198>)
			rmc_jt.lcation.latitude = receivedDataGSM.rmc.lcation.latitude;
 8002350:	4c4e      	ldr	r4, [pc, #312]	@ (800248c <receiveRMCDataWithAddrGSM+0x19c>)
			Debug_printf("\n---------- Current data accepted at address: %08lx----------\n", current_addr_gsm);
 8002352:	f002 fbf7 	bl	8004b44 <Debug_printf>
			rmc_jt.lcation.latitude = receivedDataGSM.rmc.lcation.latitude;
 8002356:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 800235a:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
			rmc_jt.lcation.longitude = receivedDataGSM.rmc.lcation.longitude;
 800235e:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8002362:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
			rmc_jt.speed = receivedDataGSM.rmc.speed;
 8002366:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002368:	62a3      	str	r3, [r4, #40]	@ 0x28
			rmc_jt.course = receivedDataGSM.rmc.course;
 800236a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800236c:	62e3      	str	r3, [r4, #44]	@ 0x2c
			rmc_jt.lcation.NS = receivedDataGSM.rmc.lcation.NS;
 800236e:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8002372:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			rmc_jt.lcation.EW = receivedDataGSM.rmc.lcation.EW;
 8002376:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 800237a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
			rmc_jt.isValid = receivedDataGSM.rmc.isValid;
 800237e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002380:	6323      	str	r3, [r4, #48]	@ 0x30
			rmc_jt.date.Yr = receivedDataGSM.rmc.date.Yr;
 8002382:	69ab      	ldr	r3, [r5, #24]
 8002384:	61a3      	str	r3, [r4, #24]
			rmc_jt.date.Mon = receivedDataGSM.rmc.date.Mon;
 8002386:	696b      	ldr	r3, [r5, #20]
			rmc_jt.date.Day = receivedDataGSM.rmc.date.Day;
			rmc_jt.tim.hour = receivedDataGSM.rmc.tim.hour;
			rmc_jt.tim.min = receivedDataGSM.rmc.tim.min;
 8002388:	686a      	ldr	r2, [r5, #4]
			rmc_jt.tim.sec = receivedDataGSM.rmc.tim.sec;
 800238a:	68a9      	ldr	r1, [r5, #8]
			rmc_jt.date.Mon = receivedDataGSM.rmc.date.Mon;
 800238c:	6163      	str	r3, [r4, #20]
			rmc_jt.date.Day = receivedDataGSM.rmc.date.Day;
 800238e:	692b      	ldr	r3, [r5, #16]
 8002390:	6123      	str	r3, [r4, #16]
			rmc_jt.tim.hour = receivedDataGSM.rmc.tim.hour;
 8002392:	682b      	ldr	r3, [r5, #0]
 8002394:	6023      	str	r3, [r4, #0]
			rmc_jt.tim.min = receivedDataGSM.rmc.tim.min;
 8002396:	6062      	str	r2, [r4, #4]
			rmc_jt.tim.sec = receivedDataGSM.rmc.tim.sec;
 8002398:	60a1      	str	r1, [r4, #8]

			snprintf((char *)output_buffer, sizeof(output_buffer), "Time SENDING TO SERVER at GSM: %d:%d:%d\n", rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 800239a:	a808      	add	r0, sp, #32
 800239c:	e9cd 2100 	strd	r2, r1, [sp]
 80023a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002490 <receiveRMCDataWithAddrGSM+0x1a0>)
 80023a2:	2146      	movs	r1, #70	@ 0x46
 80023a4:	f009 f9d6 	bl	800b754 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 80023a8:	482e      	ldr	r0, [pc, #184]	@ (8002464 <receiveRMCDataWithAddrGSM+0x174>)
 80023aa:	a908      	add	r1, sp, #32
 80023ac:	f002 fbba 	bl	8004b24 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer), "Date SENDING TO SERVER at GSM: %d/%d/%d\n", rmc_jt.date.Day, rmc_jt.date.Mon, rmc_jt.date.Yr);
 80023b0:	69a3      	ldr	r3, [r4, #24]
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	6963      	ldr	r3, [r4, #20]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	6923      	ldr	r3, [r4, #16]
 80023ba:	4a36      	ldr	r2, [pc, #216]	@ (8002494 <receiveRMCDataWithAddrGSM+0x1a4>)
 80023bc:	2146      	movs	r1, #70	@ 0x46
 80023be:	a808      	add	r0, sp, #32
 80023c0:	f009 f9c8 	bl	800b754 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 80023c4:	4827      	ldr	r0, [pc, #156]	@ (8002464 <receiveRMCDataWithAddrGSM+0x174>)
 80023c6:	a908      	add	r1, sp, #32
 80023c8:	f002 fbac 	bl	8004b24 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer), "Location SENDING TO SERVER at GSM: %.6f %c, %.6f %c\n", rmc_jt.lcation.latitude, rmc_jt.lcation.NS, rmc_jt.lcation.longitude, receivedDataGSM.rmc.lcation.EW);
 80023cc:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 80023d0:	9306      	str	r3, [sp, #24]
 80023d2:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 80023d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023da:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80023de:	9302      	str	r3, [sp, #8]
 80023e0:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80023e4:	2146      	movs	r1, #70	@ 0x46
 80023e6:	e9cd 2300 	strd	r2, r3, [sp]
 80023ea:	a808      	add	r0, sp, #32
 80023ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002498 <receiveRMCDataWithAddrGSM+0x1a8>)
 80023ee:	f009 f9b1 	bl	800b754 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 80023f2:	481c      	ldr	r0, [pc, #112]	@ (8002464 <receiveRMCDataWithAddrGSM+0x174>)
 80023f4:	a908      	add	r1, sp, #32
 80023f6:	f002 fb95 	bl	8004b24 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer),"Speed SENDING TO SERVER at GSM: %.2f, Course: %.2f, Valid: %d\n", rmc_jt.speed, rmc_jt.course, rmc_jt.isValid);
 80023fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80023fc:	9304      	str	r3, [sp, #16]
 80023fe:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002400:	f7fe f8b2 	bl	8000568 <__aeabi_f2d>
 8002404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002408:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800240a:	f7fe f8ad 	bl	8000568 <__aeabi_f2d>
 800240e:	4a23      	ldr	r2, [pc, #140]	@ (800249c <receiveRMCDataWithAddrGSM+0x1ac>)
 8002410:	e9cd 0100 	strd	r0, r1, [sp]
 8002414:	2146      	movs	r1, #70	@ 0x46
 8002416:	a808      	add	r0, sp, #32
 8002418:	f009 f99c 	bl	800b754 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 800241c:	4811      	ldr	r0, [pc, #68]	@ (8002464 <receiveRMCDataWithAddrGSM+0x174>)
 800241e:	a908      	add	r1, sp, #32
 8002420:	f002 fb80 	bl	8004b24 <uart_transmit_string>

			received_RMC = 1;
 8002424:	4b1e      	ldr	r3, [pc, #120]	@ (80024a0 <receiveRMCDataWithAddrGSM+0x1b0>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]
		if(is_disconnect == 0 && is_using_flash == 1 && is_keep_up == 0) {
			Debug_printf("----------------------KEEP UP WITH THE MOST CURRENT DATA ---------------------------");
			is_keep_up = 1;
		}
	}
}
 800242a:	b01b      	add	sp, #108	@ 0x6c
 800242c:	bd30      	pop	{r4, r5, pc}
			Debug_printf("\n----------------Have sent data in this address successfully already: %08lx ----------------\n", receivedDataGSM.address);
 800242e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8002430:	481c      	ldr	r0, [pc, #112]	@ (80024a4 <receiveRMCDataWithAddrGSM+0x1b4>)
}
 8002432:	b01b      	add	sp, #108	@ 0x6c
 8002434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			Debug_printf("\n----------------Have sent data in this address successfully already: %08lx ----------------\n", receivedDataGSM.address);
 8002438:	f002 bb84 	b.w	8004b44 <Debug_printf>
		Debug_printf("There is no address mail left\n");
 800243c:	481a      	ldr	r0, [pc, #104]	@ (80024a8 <receiveRMCDataWithAddrGSM+0x1b8>)
 800243e:	f002 fb81 	bl	8004b44 <Debug_printf>
		if(is_disconnect == 0 && is_using_flash == 1 && is_keep_up == 0) {
 8002442:	4b1a      	ldr	r3, [pc, #104]	@ (80024ac <receiveRMCDataWithAddrGSM+0x1bc>)
 8002444:	681d      	ldr	r5, [r3, #0]
 8002446:	2d01      	cmp	r5, #1
 8002448:	d1ef      	bne.n	800242a <receiveRMCDataWithAddrGSM+0x13a>
 800244a:	4c19      	ldr	r4, [pc, #100]	@ (80024b0 <receiveRMCDataWithAddrGSM+0x1c0>)
 800244c:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <receiveRMCDataWithAddrGSM+0x1c4>)
 800244e:	6822      	ldr	r2, [r4, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	d1e9      	bne.n	800242a <receiveRMCDataWithAddrGSM+0x13a>
			Debug_printf("----------------------KEEP UP WITH THE MOST CURRENT DATA ---------------------------");
 8002456:	4818      	ldr	r0, [pc, #96]	@ (80024b8 <receiveRMCDataWithAddrGSM+0x1c8>)
 8002458:	f002 fb74 	bl	8004b44 <Debug_printf>
			is_keep_up = 1;
 800245c:	6025      	str	r5, [r4, #0]
}
 800245e:	e7e4      	b.n	800242a <receiveRMCDataWithAddrGSM+0x13a>
 8002460:	080101e7 	.word	0x080101e7
 8002464:	200011d0 	.word	0x200011d0
 8002468:	20000b58 	.word	0x20000b58
 800246c:	200016d4 	.word	0x200016d4
 8002470:	08010207 	.word	0x08010207
 8002474:	20000dbc 	.word	0x20000dbc
 8002478:	0801022a 	.word	0x0801022a
 800247c:	20000ddc 	.word	0x20000ddc
 8002480:	20000db8 	.word	0x20000db8
 8002484:	0801024e 	.word	0x0801024e
 8002488:	0801027d 	.word	0x0801027d
 800248c:	20000bc0 	.word	0x20000bc0
 8002490:	080102bc 	.word	0x080102bc
 8002494:	080102e5 	.word	0x080102e5
 8002498:	0801030e 	.word	0x0801030e
 800249c:	08010343 	.word	0x08010343
 80024a0:	20000c24 	.word	0x20000c24
 80024a4:	08010382 	.word	0x08010382
 80024a8:	080103e0 	.word	0x080103e0
 80024ac:	20000dd4 	.word	0x20000dd4
 80024b0:	20000dd0 	.word	0x20000dd0
 80024b4:	20000dd8 	.word	0x20000dd8
 80024b8:	080103ff 	.word	0x080103ff

080024bc <processUploadDataToServer>:

int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 80024bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int count_resend = 0;
	int count_check = 0;
	int result_send_location = 1;
	while(count_resend < 3){
		uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 80024c0:	4f39      	ldr	r7, [pc, #228]	@ (80025a8 <processUploadDataToServer+0xec>)
		Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 80024c2:	f8df 8110 	ldr.w	r8, [pc, #272]	@ 80025d4 <processUploadDataToServer+0x118>
		Debug_printf(" \n\n--------------------------- GOING TO SEND DATA TO SERVER: RESEND COUNT %d -----------------------\n\n", count_resend);
 80024c6:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 80025d8 <processUploadDataToServer+0x11c>
int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 80024ca:	4606      	mov	r6, r0
 80024cc:	2401      	movs	r4, #1
		uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 80024ce:	6838      	ldr	r0, [r7, #0]
 80024d0:	f005 fc6c 	bl	8007dac <osThreadGetStackSpace>
		Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 80024d4:	6839      	ldr	r1, [r7, #0]
		uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 80024d6:	4602      	mov	r2, r0
		Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 80024d8:	4640      	mov	r0, r8
 80024da:	f002 fb33 	bl	8004b44 <Debug_printf>
		Debug_printf(" \n\n--------------------------- GOING TO SEND DATA TO SERVER: RESEND COUNT %d -----------------------\n\n", count_resend);
 80024de:	1e61      	subs	r1, r4, #1
 80024e0:	4648      	mov	r0, r9
 80024e2:	f002 fb2f 	bl	8004b44 <Debug_printf>
		result_send_location = send_location_to_server(0, location_info);
 80024e6:	4631      	mov	r1, r6
 80024e8:	2000      	movs	r0, #0
 80024ea:	f7ff fc67 	bl	8001dbc <send_location_to_server>

		if(result_send_location){
 80024ee:	4605      	mov	r5, r0
 80024f0:	2800      	cmp	r0, #0
 80024f2:	d042      	beq.n	800257a <processUploadDataToServer+0xbe>
			uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Sending Location Report\r\n");
 80024f4:	492d      	ldr	r1, [pc, #180]	@ (80025ac <processUploadDataToServer+0xf0>)
 80024f6:	482e      	ldr	r0, [pc, #184]	@ (80025b0 <processUploadDataToServer+0xf4>)
 80024f8:	f002 fb14 	bl	8004b24 <uart_transmit_string>
			int result_check = check_data_sent_to_server(0);
 80024fc:	2000      	movs	r0, #0
 80024fe:	f7ff fccd 	bl	8001e9c <check_data_sent_to_server>
			if(result_check){
 8002502:	4605      	mov	r5, r0
 8002504:	b170      	cbz	r0, 8002524 <processUploadDataToServer+0x68>
				uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002506:	492b      	ldr	r1, [pc, #172]	@ (80025b4 <processUploadDataToServer+0xf8>)
 8002508:	4829      	ldr	r0, [pc, #164]	@ (80025b0 <processUploadDataToServer+0xf4>)
 800250a:	f002 fb0b 	bl	8004b24 <uart_transmit_string>
//				receive_response("Check location report\n");
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800250e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002512:	2100      	movs	r1, #0
 8002514:	4828      	ldr	r0, [pc, #160]	@ (80025b8 <processUploadDataToServer+0xfc>)
 8002516:	f009 fa19 	bl	800b94c <memset>
				SIM_UART_ReInitializeRxDMA();
 800251a:	f7fe fd81 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
				return 1;
 800251e:	2001      	movs	r0, #1
	}
	receive_response("First check SIM MODULE\n");
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	return 0;
}
 8002520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR (CHECKING SENDING RESULT ERROR)\n");
 8002524:	4925      	ldr	r1, [pc, #148]	@ (80025bc <processUploadDataToServer+0x100>)
			uart_transmit_string(&huart1, (uint8_t *)"\n\n---------------------  Sending ERROR (SENDING ERROR)  -------------------\n\n");
 8002526:	4822      	ldr	r0, [pc, #136]	@ (80025b0 <processUploadDataToServer+0xf4>)
 8002528:	f002 fafc 	bl	8004b24 <uart_transmit_string>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800252c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002530:	4629      	mov	r1, r5
 8002532:	4821      	ldr	r0, [pc, #132]	@ (80025b8 <processUploadDataToServer+0xfc>)
 8002534:	f009 fa0a 	bl	800b94c <memset>
	while(count_resend < 3){
 8002538:	3401      	adds	r4, #1
			SIM_UART_ReInitializeRxDMA();
 800253a:	f7fe fd71 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
		osDelay(200);
 800253e:	20c8      	movs	r0, #200	@ 0xc8
 8002540:	f005 fc48 	bl	8007dd4 <osDelay>
	while(count_resend < 3){
 8002544:	2c04      	cmp	r4, #4
 8002546:	d1c2      	bne.n	80024ce <processUploadDataToServer+0x12>
	send_AT_command(FIRST_CHECK);
 8002548:	481d      	ldr	r0, [pc, #116]	@ (80025c0 <processUploadDataToServer+0x104>)
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 800254a:	4e1e      	ldr	r6, [pc, #120]	@ (80025c4 <processUploadDataToServer+0x108>)
		receive_response("First check SIM MODULE\n");
 800254c:	4f1e      	ldr	r7, [pc, #120]	@ (80025c8 <processUploadDataToServer+0x10c>)
	send_AT_command(FIRST_CHECK);
 800254e:	f7fe fd57 	bl	8001000 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8002552:	250c      	movs	r5, #12
 8002554:	4818      	ldr	r0, [pc, #96]	@ (80025b8 <processUploadDataToServer+0xfc>)
 8002556:	4631      	mov	r1, r6
 8002558:	f009 fa48 	bl	800b9ec <strstr>
 800255c:	4604      	mov	r4, r0
 800255e:	b970      	cbnz	r0, 800257e <processUploadDataToServer+0xc2>
	receive_response("First check SIM MODULE\n");
 8002560:	4819      	ldr	r0, [pc, #100]	@ (80025c8 <processUploadDataToServer+0x10c>)
 8002562:	f7fe fd79 	bl	8001058 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002566:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800256a:	4621      	mov	r1, r4
 800256c:	4812      	ldr	r0, [pc, #72]	@ (80025b8 <processUploadDataToServer+0xfc>)
 800256e:	f009 f9ed 	bl	800b94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8002572:	f7fe fd55 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
	return 0;
 8002576:	4620      	mov	r0, r4
 8002578:	e7d2      	b.n	8002520 <processUploadDataToServer+0x64>
			uart_transmit_string(&huart1, (uint8_t *)"\n\n---------------------  Sending ERROR (SENDING ERROR)  -------------------\n\n");
 800257a:	4914      	ldr	r1, [pc, #80]	@ (80025cc <processUploadDataToServer+0x110>)
 800257c:	e7d3      	b.n	8002526 <processUploadDataToServer+0x6a>
		receive_response("First check SIM MODULE\n");
 800257e:	4638      	mov	r0, r7
 8002580:	f7fe fd6a 	bl	8001058 <receive_response>
		if(count_check > 10){
 8002584:	3d01      	subs	r5, #1
 8002586:	d10a      	bne.n	800259e <processUploadDataToServer+0xe2>
			Debug_printf("SIM MODULE BUG");
 8002588:	4811      	ldr	r0, [pc, #68]	@ (80025d0 <processUploadDataToServer+0x114>)
 800258a:	f002 fadb 	bl	8004b44 <Debug_printf>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800258e:	480a      	ldr	r0, [pc, #40]	@ (80025b8 <processUploadDataToServer+0xfc>)
 8002590:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002594:	4629      	mov	r1, r5
 8002596:	f009 f9d9 	bl	800b94c <memset>
			return 2;
 800259a:	2002      	movs	r0, #2
 800259c:	e7c0      	b.n	8002520 <processUploadDataToServer+0x64>
		osDelay(100);
 800259e:	2064      	movs	r0, #100	@ 0x64
 80025a0:	f005 fc18 	bl	8007dd4 <osDelay>
 80025a4:	e7d6      	b.n	8002554 <processUploadDataToServer+0x98>
 80025a6:	bf00      	nop
 80025a8:	20000fe8 	.word	0x20000fe8
 80025ac:	08010514 	.word	0x08010514
 80025b0:	200011d0 	.word	0x200011d0
 80025b4:	08010544 	.word	0x08010544
 80025b8:	20000c38 	.word	0x20000c38
 80025bc:	08010555 	.word	0x08010555
 80025c0:	0800fa0d 	.word	0x0800fa0d
 80025c4:	0800fa2a 	.word	0x0800fa2a
 80025c8:	0800fa12 	.word	0x0800fa12
 80025cc:	08010584 	.word	0x08010584
 80025d0:	080105d2 	.word	0x080105d2
 80025d4:	08010454 	.word	0x08010454
 80025d8:	080104ad 	.word	0x080104ad

080025dc <StartGSM>:

void StartGSM(void const * argument)
{
 80025dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* USER CODE BEGIN StartGSM */
	Debug_printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 80025e0:	4878      	ldr	r0, [pc, #480]	@ (80027c4 <StartGSM+0x1e8>)
 80025e2:	4c79      	ldr	r4, [pc, #484]	@ (80027c8 <StartGSM+0x1ec>)
					if(received_RMC == 1){
						received_RMC = 0;
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
						save_rmc_to_location_info(&location_info);
						Debug_printf("Current stack address to be sent to the server: \n");
						Debug_printf("Address going to send to server at GSM:(STACK FROM MAIL QUEUE)  %08lx\n", current_addr_gsm);
 80025e4:	4e79      	ldr	r6, [pc, #484]	@ (80027cc <StartGSM+0x1f0>)
{
 80025e6:	b0a1      	sub	sp, #132	@ 0x84
	Debug_printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 80025e8:	f002 faac 	bl	8004b44 <Debug_printf>
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 80025ec:	4a78      	ldr	r2, [pc, #480]	@ (80027d0 <StartGSM+0x1f4>)
 80025ee:	4979      	ldr	r1, [pc, #484]	@ (80027d4 <StartGSM+0x1f8>)
 80025f0:	4879      	ldr	r0, [pc, #484]	@ (80027d8 <StartGSM+0x1fc>)
 80025f2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80025f6:	f000 fd09 	bl	800300c <RingBufferDmaU8_initUSARTRx>
	JT808_TerminalRegistration reg_msg = create_terminal_registration();
 80025fa:	4668      	mov	r0, sp
 80025fc:	f7fe fcae 	bl	8000f5c <create_terminal_registration>
	JT808_LocationInfoReport location_info = create_location_info_report();
 8002600:	a80f      	add	r0, sp, #60	@ 0x3c
 8002602:	f7fe fcd1 	bl	8000fa8 <create_location_info_report>
	initQueue_GSM(&result_addr_queue);
 8002606:	4875      	ldr	r0, [pc, #468]	@ (80027dc <StartGSM+0x200>)
 8002608:	f000 fc24 	bl	8002e54 <initQueue_GSM>
	init_SIM_module();
 800260c:	f7fe fd4a 	bl	80010a4 <init_SIM_module>
	int is_set_uniqueID = 0;
 8002610:	2500      	movs	r5, #0
	int process = 0;
 8002612:	462f      	mov	r7, r5
		osDelay(300);
 8002614:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002618:	f005 fbdc 	bl	8007dd4 <osDelay>
		switch(process){
 800261c:	2f08      	cmp	r7, #8
 800261e:	d868      	bhi.n	80026f2 <StartGSM+0x116>
 8002620:	e8df f017 	tbh	[pc, r7, lsl #1]
 8002624:	00210009 	.word	0x00210009
 8002628:	0071004f 	.word	0x0071004f
 800262c:	00b400a0 	.word	0x00b400a0
 8002630:	00fc00c1 	.word	0x00fc00c1
 8002634:	03c1      	.short	0x03c1
				uart_transmit_string(&huart1, (uint8_t *)"First CHECK\r\n");
 8002636:	496a      	ldr	r1, [pc, #424]	@ (80027e0 <StartGSM+0x204>)
 8002638:	486a      	ldr	r0, [pc, #424]	@ (80027e4 <StartGSM+0x208>)
 800263a:	f002 fa73 	bl	8004b24 <uart_transmit_string>
				isReady = first_check_SIM();
 800263e:	f7fe fe05 	bl	800124c <first_check_SIM>
				if(isReady) process++;
 8002642:	4601      	mov	r1, r0
 8002644:	2800      	cmp	r0, #0
 8002646:	f040 808b 	bne.w	8002760 <StartGSM+0x184>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800264a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
						uart_transmit_string(&huart1,(uint8_t*) "REOPEN CONNECTION TO SERVER\n");
						process = 4;
					}
				}
				else{
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800264e:	4860      	ldr	r0, [pc, #384]	@ (80027d0 <StartGSM+0x1f4>)
 8002650:	f009 f97c 	bl	800b94c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002654:	f7fe fce4 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 8002658:	4963      	ldr	r1, [pc, #396]	@ (80027e8 <StartGSM+0x20c>)
 800265a:	4862      	ldr	r0, [pc, #392]	@ (80027e4 <StartGSM+0x208>)
 800265c:	f002 fa62 	bl	8004b24 <uart_transmit_string>
					reboot_SIM_module();
 8002660:	f7fe fd3a 	bl	80010d8 <reboot_SIM_module>
					process = 0;
 8002664:	e02b      	b.n	80026be <StartGSM+0xe2>
				uart_transmit_string(&huart1, (uint8_t *)"Check EVERYTHING READY\r\n");
 8002666:	4961      	ldr	r1, [pc, #388]	@ (80027ec <StartGSM+0x210>)
 8002668:	485e      	ldr	r0, [pc, #376]	@ (80027e4 <StartGSM+0x208>)
 800266a:	f002 fa5b 	bl	8004b24 <uart_transmit_string>
				osDelay(100);
 800266e:	2064      	movs	r0, #100	@ 0x64
 8002670:	f005 fbb0 	bl	8007dd4 <osDelay>
				int check_SIM = check_SIM_ready();
 8002674:	f7fe ff00 	bl	8001478 <check_SIM_ready>
 8002678:	4680      	mov	r8, r0
				if(is_set_uniqueID == 0){
 800267a:	b955      	cbnz	r5, 8002692 <StartGSM+0xb6>
					memcpy(reg_msg.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 800267c:	4b5c      	ldr	r3, [pc, #368]	@ (80027f0 <StartGSM+0x214>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	889b      	ldrh	r3, [r3, #4]
 8002682:	f8cd 2005 	str.w	r2, [sp, #5]
 8002686:	f8ad 3009 	strh.w	r3, [sp, #9]
					memcpy(location_info.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 800268a:	f8cd 2041 	str.w	r2, [sp, #65]	@ 0x41
 800268e:	f8ad 3045 	strh.w	r3, [sp, #69]	@ 0x45
				osDelay(150);
 8002692:	2096      	movs	r0, #150	@ 0x96
 8002694:	f005 fb9e 	bl	8007dd4 <osDelay>
				if (check_SIM == 0){
 8002698:	f1b8 0f00 	cmp.w	r8, #0
 800269c:	f040 83a0 	bne.w	8002de0 <StartGSM+0x804>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80026a0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80026a4:	4641      	mov	r1, r8
 80026a6:	484a      	ldr	r0, [pc, #296]	@ (80027d0 <StartGSM+0x1f4>)
 80026a8:	f009 f950 	bl	800b94c <memset>
					SIM_UART_ReInitializeRxDMA();
 80026ac:	f7fe fcb8 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module");
 80026b0:	4950      	ldr	r1, [pc, #320]	@ (80027f4 <StartGSM+0x218>)
 80026b2:	484c      	ldr	r0, [pc, #304]	@ (80027e4 <StartGSM+0x208>)
 80026b4:	f002 fa36 	bl	8004b24 <uart_transmit_string>
					reboot_SIM_module();
 80026b8:	f7fe fd0e 	bl	80010d8 <reboot_SIM_module>
					process = 0;
 80026bc:	463d      	mov	r5, r7
									process++;
 80026be:	2700      	movs	r7, #0
 80026c0:	e017      	b.n	80026f2 <StartGSM+0x116>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Configure PDP context\r\n");
 80026c2:	494d      	ldr	r1, [pc, #308]	@ (80027f8 <StartGSM+0x21c>)
 80026c4:	4847      	ldr	r0, [pc, #284]	@ (80027e4 <StartGSM+0x208>)
 80026c6:	f002 fa2d 	bl	8004b24 <uart_transmit_string>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80026ca:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80026ce:	2100      	movs	r1, #0
 80026d0:	483f      	ldr	r0, [pc, #252]	@ (80027d0 <StartGSM+0x1f4>)
 80026d2:	f009 f93b 	bl	800b94c <memset>
				SIM_UART_ReInitializeRxDMA();
 80026d6:	f7fe fca3 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
				configure_APN(1);
 80026da:	2001      	movs	r0, #1
 80026dc:	f7ff f848 	bl	8001770 <configure_APN>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80026e0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80026e4:	2100      	movs	r1, #0
 80026e6:	483a      	ldr	r0, [pc, #232]	@ (80027d0 <StartGSM+0x1f4>)
 80026e8:	f009 f930 	bl	800b94c <memset>
				SIM_UART_ReInitializeRxDMA();
 80026ec:	f7fe fc98 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
				process++;
 80026f0:	2703      	movs	r7, #3
				}
				break;
		}
		if(is_in_sending == 0){
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	b90b      	cbnz	r3, 80026fa <StartGSM+0x11e>
			receiveRMCDataWithAddrGSM();
 80026f6:	f7ff fdfb 	bl	80022f0 <receiveRMCDataWithAddrGSM>
		}
		if(is_in_sending == 1){
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d189      	bne.n	8002614 <StartGSM+0x38>
			is_in_sending = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	6023      	str	r3, [r4, #0]
 8002704:	e786      	b.n	8002614 <StartGSM+0x38>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Activate PDP context\r\n");
 8002706:	493d      	ldr	r1, [pc, #244]	@ (80027fc <StartGSM+0x220>)
 8002708:	4836      	ldr	r0, [pc, #216]	@ (80027e4 <StartGSM+0x208>)
 800270a:	f002 fa0b 	bl	8004b24 <uart_transmit_string>
				int receive_activate = activate_context(1);
 800270e:	2001      	movs	r0, #1
 8002710:	f7ff f880 	bl	8001814 <activate_context>
				if(receive_activate){
 8002714:	4680      	mov	r8, r0
 8002716:	b190      	cbz	r0, 800273e <StartGSM+0x162>
					getCurrentTime();
 8002718:	f7ff fdb0 	bl	800227c <getCurrentTime>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP context successfully\n");
 800271c:	4938      	ldr	r1, [pc, #224]	@ (8002800 <StartGSM+0x224>)
 800271e:	4831      	ldr	r0, [pc, #196]	@ (80027e4 <StartGSM+0x208>)
 8002720:	f002 fa00 	bl	8004b24 <uart_transmit_string>
					osDelay(200);
 8002724:	20c8      	movs	r0, #200	@ 0xc8
 8002726:	f005 fb55 	bl	8007dd4 <osDelay>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800272a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800272e:	2100      	movs	r1, #0
 8002730:	4827      	ldr	r0, [pc, #156]	@ (80027d0 <StartGSM+0x1f4>)
 8002732:	f009 f90b 	bl	800b94c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002736:	f7fe fc73 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
					process++;
 800273a:	2704      	movs	r7, #4
 800273c:	e7d9      	b.n	80026f2 <StartGSM+0x116>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP Context Failed\n");
 800273e:	4931      	ldr	r1, [pc, #196]	@ (8002804 <StartGSM+0x228>)
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 8002740:	4828      	ldr	r0, [pc, #160]	@ (80027e4 <StartGSM+0x208>)
 8002742:	f002 f9ef 	bl	8004b24 <uart_transmit_string>
					int receive_deactivate = deactivate_context(1);
 8002746:	2001      	movs	r0, #1
 8002748:	f7ff f8ce 	bl	80018e8 <deactivate_context>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800274c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
					int receive_deactivate = deactivate_context(1);
 8002750:	4607      	mov	r7, r0
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002752:	4641      	mov	r1, r8
 8002754:	481e      	ldr	r0, [pc, #120]	@ (80027d0 <StartGSM+0x1f4>)
 8002756:	f009 f8f9 	bl	800b94c <memset>
					SIM_UART_ReInitializeRxDMA();
 800275a:	f7fe fc61 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
					if (receive_deactivate) process = 1;
 800275e:	b18f      	cbz	r7, 8002784 <StartGSM+0x1a8>
					if (receive_deactivate) process = 1;
 8002760:	2701      	movs	r7, #1
 8002762:	e7c6      	b.n	80026f2 <StartGSM+0x116>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: OPEN SOCKET SERVICE\r\n");
 8002764:	4928      	ldr	r1, [pc, #160]	@ (8002808 <StartGSM+0x22c>)
 8002766:	481f      	ldr	r0, [pc, #124]	@ (80027e4 <StartGSM+0x208>)
 8002768:	f002 f9dc 	bl	8004b24 <uart_transmit_string>
				int received_res = open_socket_service(1, 0, 0, 0);
 800276c:	2300      	movs	r3, #0
 800276e:	461a      	mov	r2, r3
 8002770:	4619      	mov	r1, r3
 8002772:	2001      	movs	r0, #1
 8002774:	f7ff f904 	bl	8001980 <open_socket_service>
				if(received_res){
 8002778:	4680      	mov	r8, r0
 800277a:	2800      	cmp	r0, #0
 800277c:	f040 8333 	bne.w	8002de6 <StartGSM+0x80a>
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 8002780:	4922      	ldr	r1, [pc, #136]	@ (800280c <StartGSM+0x230>)
 8002782:	e7dd      	b.n	8002740 <StartGSM+0x164>
						memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002784:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002788:	4639      	mov	r1, r7
 800278a:	e760      	b.n	800264e <StartGSM+0x72>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Register/Login to the server.\r\n");
 800278c:	4920      	ldr	r1, [pc, #128]	@ (8002810 <StartGSM+0x234>)
 800278e:	4815      	ldr	r0, [pc, #84]	@ (80027e4 <StartGSM+0x208>)
 8002790:	f002 f9c8 	bl	8004b24 <uart_transmit_string>
				int result_send_login = login_to_server(0,&reg_msg);
 8002794:	4669      	mov	r1, sp
 8002796:	2000      	movs	r0, #0
 8002798:	f7ff fa9e 	bl	8001cd8 <login_to_server>
				if(result_send_login){
 800279c:	2800      	cmp	r0, #0
 800279e:	f040 8324 	bne.w	8002dea <StartGSM+0x80e>
				else process = 8;
 80027a2:	2708      	movs	r7, #8
 80027a4:	e7a5      	b.n	80026f2 <StartGSM+0x116>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Register/Login\r\n");
 80027a6:	480f      	ldr	r0, [pc, #60]	@ (80027e4 <StartGSM+0x208>)
 80027a8:	491a      	ldr	r1, [pc, #104]	@ (8002814 <StartGSM+0x238>)
 80027aa:	f002 f9bb 	bl	8004b24 <uart_transmit_string>
				int result_check_login = check_data_sent_to_server(0);
 80027ae:	2000      	movs	r0, #0
 80027b0:	f7ff fb74 	bl	8001e9c <check_data_sent_to_server>
				if(result_check_login){
 80027b4:	2800      	cmp	r0, #0
 80027b6:	d0f4      	beq.n	80027a2 <StartGSM+0x1c6>
					receive_response("Check terminal register\n");
 80027b8:	4817      	ldr	r0, [pc, #92]	@ (8002818 <StartGSM+0x23c>)
 80027ba:	f7fe fc4d 	bl	8001058 <receive_response>
					process++;
 80027be:	2707      	movs	r7, #7
 80027c0:	e797      	b.n	80026f2 <StartGSM+0x116>
 80027c2:	bf00      	nop
 80027c4:	080105e1 	.word	0x080105e1
 80027c8:	20000c20 	.word	0x20000c20
 80027cc:	20000dbc 	.word	0x20000dbc
 80027d0:	20000c38 	.word	0x20000c38
 80027d4:	200010c0 	.word	0x200010c0
 80027d8:	20000c28 	.word	0x20000c28
 80027dc:	20000ddc 	.word	0x20000ddc
 80027e0:	08010638 	.word	0x08010638
 80027e4:	200011d0 	.word	0x200011d0
 80027e8:	08010646 	.word	0x08010646
 80027ec:	0801065c 	.word	0x0801065c
 80027f0:	20000bb8 	.word	0x20000bb8
 80027f4:	08010675 	.word	0x08010675
 80027f8:	0801068a 	.word	0x0801068a
 80027fc:	080106b2 	.word	0x080106b2
 8002800:	080106d9 	.word	0x080106d9
 8002804:	080106fc 	.word	0x080106fc
 8002808:	08010719 	.word	0x08010719
 800280c:	0801073f 	.word	0x0801073f
 8002810:	08010759 	.word	0x08010759
 8002814:	08010789 	.word	0x08010789
 8002818:	080107b0 	.word	0x080107b0
				is_in_sending = 1;
 800281c:	2301      	movs	r3, #1
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 800281e:	49b7      	ldr	r1, [pc, #732]	@ (8002afc <StartGSM+0x520>)
 8002820:	48b7      	ldr	r0, [pc, #732]	@ (8002b00 <StartGSM+0x524>)
				is_in_sending = 1;
 8002822:	6023      	str	r3, [r4, #0]
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8002824:	f002 f97e 	bl	8004b24 <uart_transmit_string>
				int result_get_current = getCurrentTime();
 8002828:	f7ff fd28 	bl	800227c <getCurrentTime>
				if(result_get_current == 0){
 800282c:	2800      	cmp	r0, #0
 800282e:	d0b8      	beq.n	80027a2 <StartGSM+0x1c6>
					if(received_RMC == 1){
 8002830:	f8df 934c 	ldr.w	r9, [pc, #844]	@ 8002b80 <StartGSM+0x5a4>
					receiveRMCDataWithAddrGSM();
 8002834:	f7ff fd5c 	bl	80022f0 <receiveRMCDataWithAddrGSM>
					if(received_RMC == 1){
 8002838:	f8d9 3000 	ldr.w	r3, [r9]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d1f9      	bne.n	8002834 <StartGSM+0x258>
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8002840:	49b0      	ldr	r1, [pc, #704]	@ (8002b04 <StartGSM+0x528>)
 8002842:	48af      	ldr	r0, [pc, #700]	@ (8002b00 <StartGSM+0x524>)
						HAL_TIM_Base_Start(&htim3);
 8002844:	f8df 833c 	ldr.w	r8, [pc, #828]	@ 8002b84 <StartGSM+0x5a8>
							result_final = processUploadDataToServer(&location_info);
 8002848:	f8df a33c 	ldr.w	sl, [pc, #828]	@ 8002b88 <StartGSM+0x5ac>
 800284c:	4fae      	ldr	r7, [pc, #696]	@ (8002b08 <StartGSM+0x52c>)
						received_RMC = 0;
 800284e:	f04f 0b00 	mov.w	fp, #0
 8002852:	f8c9 b000 	str.w	fp, [r9]
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8002856:	f002 f965 	bl	8004b24 <uart_transmit_string>
						save_rmc_to_location_info(&location_info);
 800285a:	a80f      	add	r0, sp, #60	@ 0x3c
 800285c:	f7fe fc6c 	bl	8001138 <save_rmc_to_location_info>
						Debug_printf("Current stack address to be sent to the server: \n");
 8002860:	48aa      	ldr	r0, [pc, #680]	@ (8002b0c <StartGSM+0x530>)
 8002862:	f002 f96f 	bl	8004b44 <Debug_printf>
						Debug_printf("Address going to send to server at GSM:(STACK FROM MAIL QUEUE)  %08lx\n", current_addr_gsm);
 8002866:	6831      	ldr	r1, [r6, #0]
 8002868:	48a9      	ldr	r0, [pc, #676]	@ (8002b10 <StartGSM+0x534>)
 800286a:	f002 f96b 	bl	8004b44 <Debug_printf>
						HAL_TIM_Base_Start(&htim3);
 800286e:	4640      	mov	r0, r8
 8002870:	f004 fba2 	bl	8006fb8 <HAL_TIM_Base_Start>
						__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002874:	f8d8 3000 	ldr.w	r3, [r8]
							result_final = processUploadDataToServer(&location_info);
 8002878:	a80f      	add	r0, sp, #60	@ 0x3c
						__HAL_TIM_SET_COUNTER(&htim3, 0);
 800287a:	f8c3 b024 	str.w	fp, [r3, #36]	@ 0x24
							result_final = processUploadDataToServer(&location_info);
 800287e:	f7ff fe1d 	bl	80024bc <processUploadDataToServer>
							if(result_final == 1){
 8002882:	2801      	cmp	r0, #1
							result_final = processUploadDataToServer(&location_info);
 8002884:	f8ca 0000 	str.w	r0, [sl]
							if(result_final == 1){
 8002888:	f040 80e6 	bne.w	8002a58 <StartGSM+0x47c>
								uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 800288c:	49a1      	ldr	r1, [pc, #644]	@ (8002b14 <StartGSM+0x538>)
 800288e:	489c      	ldr	r0, [pc, #624]	@ (8002b00 <StartGSM+0x524>)
 8002890:	f002 f948 	bl	8004b24 <uart_transmit_string>
								receive_response("Check location report\n");
 8002894:	48a0      	ldr	r0, [pc, #640]	@ (8002b18 <StartGSM+0x53c>)
 8002896:	f7fe fbdf 	bl	8001058 <receive_response>
								memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800289a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800289e:	4659      	mov	r1, fp
 80028a0:	489e      	ldr	r0, [pc, #632]	@ (8002b1c <StartGSM+0x540>)
 80028a2:	f009 f853 	bl	800b94c <memset>
								SIM_UART_ReInitializeRxDMA();
 80028a6:	f7fe fbbb 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
								if(is_disconnect == 1 || is_using_flash == 1){
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	2a01      	cmp	r2, #1
 80028ae:	d05c      	beq.n	800296a <StartGSM+0x38e>
 80028b0:	4b9b      	ldr	r3, [pc, #620]	@ (8002b20 <StartGSM+0x544>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	f040 80b8 	bne.w	8002a2a <StartGSM+0x44e>
									enqueue_GSM(&result_addr_queue, current_addr_gsm);
 80028ba:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8002b34 <StartGSM+0x558>
									Debug_printf("\n-----------ADDING current address to the result queue----------\n");
 80028be:	4899      	ldr	r0, [pc, #612]	@ (8002b24 <StartGSM+0x548>)
 80028c0:	f002 f940 	bl	8004b44 <Debug_printf>
									enqueue_GSM(&result_addr_queue, current_addr_gsm);
 80028c4:	6831      	ldr	r1, [r6, #0]
 80028c6:	4650      	mov	r0, sl
 80028c8:	f000 facc 	bl	8002e64 <enqueue_GSM>
									if(is_keep_up == 0) num_in_mail_sent++;
 80028cc:	4b96      	ldr	r3, [pc, #600]	@ (8002b28 <StartGSM+0x54c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d154      	bne.n	800297e <StartGSM+0x3a2>
 80028d4:	4a95      	ldr	r2, [pc, #596]	@ (8002b2c <StartGSM+0x550>)
 80028d6:	6813      	ldr	r3, [r2, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	6013      	str	r3, [r2, #0]
									Debug_printf("\n--------------RESULT ADDRESS QUEUE----------------\n");
 80028dc:	4894      	ldr	r0, [pc, #592]	@ (8002b30 <StartGSM+0x554>)
									if(start_addr_disconnect >= end_addr_disconnect - 128 && checkAddrExistInQueue(end_addr_disconnect - 128, &result_addr_queue)){
 80028de:	f8df a270 	ldr.w	sl, [pc, #624]	@ 8002b50 <StartGSM+0x574>
 80028e2:	f8df b294 	ldr.w	fp, [pc, #660]	@ 8002b78 <StartGSM+0x59c>
									Debug_printf("\n--------------RESULT ADDRESS QUEUE----------------\n");
 80028e6:	f002 f92d 	bl	8004b44 <Debug_printf>
									printQueue_GSM(&result_addr_queue);
 80028ea:	4892      	ldr	r0, [pc, #584]	@ (8002b34 <StartGSM+0x558>)
 80028ec:	f000 faea 	bl	8002ec4 <printQueue_GSM>
									if(start_addr_disconnect >= end_addr_disconnect - 128 && checkAddrExistInQueue(end_addr_disconnect - 128, &result_addr_queue)){
 80028f0:	f8da 3000 	ldr.w	r3, [sl]
 80028f4:	f8db 1000 	ldr.w	r1, [fp]
 80028f8:	3b80      	subs	r3, #128	@ 0x80
 80028fa:	428b      	cmp	r3, r1
 80028fc:	f200 80a5 	bhi.w	8002a4a <StartGSM+0x46e>
 8002900:	f8da 0000 	ldr.w	r0, [sl]
 8002904:	498b      	ldr	r1, [pc, #556]	@ (8002b34 <StartGSM+0x558>)
 8002906:	3880      	subs	r0, #128	@ 0x80
 8002908:	f000 fb10 	bl	8002f2c <checkAddrExistInQueue>
 800290c:	2800      	cmp	r0, #0
 800290e:	f000 809c 	beq.w	8002a4a <StartGSM+0x46e>
										Debug_printf("\n\n\n\n---------------END GETTING FROM FLASH-------------\n\n\n\n");
 8002912:	4889      	ldr	r0, [pc, #548]	@ (8002b38 <StartGSM+0x55c>)
 8002914:	f002 f916 	bl	8004b44 <Debug_printf>
										is_using_flash = 0;
 8002918:	4a81      	ldr	r2, [pc, #516]	@ (8002b20 <StartGSM+0x544>)
										clearQueue_GSM(&result_addr_queue);
 800291a:	4886      	ldr	r0, [pc, #536]	@ (8002b34 <StartGSM+0x558>)
										is_using_flash = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	6013      	str	r3, [r2, #0]
										clearQueue_GSM(&result_addr_queue);
 8002920:	f000 fac0 	bl	8002ea4 <clearQueue_GSM>
										count_shiftleft = 0;
 8002924:	4a85      	ldr	r2, [pc, #532]	@ (8002b3c <StartGSM+0x560>)
										Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002926:	4886      	ldr	r0, [pc, #536]	@ (8002b40 <StartGSM+0x564>)
										start_addr_disconnect = 0;
 8002928:	2300      	movs	r3, #0
										count_shiftleft = 0;
 800292a:	7013      	strb	r3, [r2, #0]
										is_keep_up = 0;
 800292c:	4a7e      	ldr	r2, [pc, #504]	@ (8002b28 <StartGSM+0x54c>)
										start_addr_disconnect = 0;
 800292e:	f8cb 3000 	str.w	r3, [fp]
										is_keep_up = 0;
 8002932:	6013      	str	r3, [r2, #0]
										end_addr_disconnect = 0;
 8002934:	f8ca 3000 	str.w	r3, [sl]
										Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002938:	f002 f904 	bl	8004b44 <Debug_printf>
											osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 800293c:	f8df a208 	ldr.w	sl, [pc, #520]	@ 8002b48 <StartGSM+0x56c>
 8002940:	f8df b248 	ldr.w	fp, [pc, #584]	@ 8002b8c <StartGSM+0x5b0>
											Debug_printf("Receiving MAIL\n");
 8002944:	487f      	ldr	r0, [pc, #508]	@ (8002b44 <StartGSM+0x568>)
 8002946:	f002 f8fd 	bl	8004b44 <Debug_printf>
											osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 800294a:	497f      	ldr	r1, [pc, #508]	@ (8002b48 <StartGSM+0x56c>)
 800294c:	f8db 0000 	ldr.w	r0, [fp]
 8002950:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002954:	2200      	movs	r2, #0
 8002956:	f005 fb27 	bl	8007fa8 <osMessageQueueGet>
											if(status == osOK){
 800295a:	2800      	cmp	r0, #0
 800295c:	d160      	bne.n	8002a20 <StartGSM+0x444>
												Debug_printf("Receiving MAIL For CLEARING: %08lx\n", receivedDataGSM.address);
 800295e:	f8da 1058 	ldr.w	r1, [sl, #88]	@ 0x58
 8002962:	487a      	ldr	r0, [pc, #488]	@ (8002b4c <StartGSM+0x570>)
 8002964:	f002 f8ee 	bl	8004b44 <Debug_printf>
										while(1){
 8002968:	e7ec      	b.n	8002944 <StartGSM+0x368>
										end_addr_disconnect = current_addr_gsm;
 800296a:	4b79      	ldr	r3, [pc, #484]	@ (8002b50 <StartGSM+0x574>)
 800296c:	6831      	ldr	r1, [r6, #0]
 800296e:	6019      	str	r1, [r3, #0]
										in_getting_mail_stack = 1;
 8002970:	4978      	ldr	r1, [pc, #480]	@ (8002b54 <StartGSM+0x578>)
										Debug_printf("End address of network outage. RECONNECTED SUCCESSFULLY: %08x\n", end_addr_disconnect);
 8002972:	4879      	ldr	r0, [pc, #484]	@ (8002b58 <StartGSM+0x57c>)
										in_getting_mail_stack = 1;
 8002974:	600a      	str	r2, [r1, #0]
										Debug_printf("End address of network outage. RECONNECTED SUCCESSFULLY: %08x\n", end_addr_disconnect);
 8002976:	6819      	ldr	r1, [r3, #0]
 8002978:	f002 f8e4 	bl	8004b44 <Debug_printf>
 800297c:	e79d      	b.n	80028ba <StartGSM+0x2de>
									if(is_keep_up == 1 && in_getting_mail_stack == 1){
 800297e:	2b01      	cmp	r3, #1
 8002980:	d1ac      	bne.n	80028dc <StartGSM+0x300>
 8002982:	4b74      	ldr	r3, [pc, #464]	@ (8002b54 <StartGSM+0x578>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d1a8      	bne.n	80028dc <StartGSM+0x300>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 800298a:	f8da 0208 	ldr.w	r0, [sl, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 800298e:	f8da c200 	ldr.w	ip, [sl, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002992:	f04f 0e00 	mov.w	lr, #0
 8002996:	3801      	subs	r0, #1
										int count_stack = 0;
 8002998:	4672      	mov	r2, lr
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 800299a:	4570      	cmp	r0, lr
 800299c:	dc0a      	bgt.n	80029b4 <StartGSM+0x3d8>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 800299e:	f04f 0e00 	mov.w	lr, #0
 80029a2:	4570      	cmp	r0, lr
 80029a4:	dc1e      	bgt.n	80029e4 <StartGSM+0x408>
										in_getting_mail_stack = 0;
 80029a6:	4b6b      	ldr	r3, [pc, #428]	@ (8002b54 <StartGSM+0x578>)
										Debug_printf("\n\n-------------- HAVE SENT ALL THE STACKED DATA IN MAIL QUEUE ----------------\n\n");
 80029a8:	486c      	ldr	r0, [pc, #432]	@ (8002b5c <StartGSM+0x580>)
										in_getting_mail_stack = 0;
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
										Debug_printf("\n\n-------------- HAVE SENT ALL THE STACKED DATA IN MAIL QUEUE ----------------\n\n");
 80029ae:	f002 f8c9 	bl	8004b44 <Debug_printf>
 80029b2:	e793      	b.n	80028dc <StartGSM+0x300>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 80029b4:	eb0c 030e 	add.w	r3, ip, lr
 80029b8:	4259      	negs	r1, r3
 80029ba:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80029be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029c2:	bf58      	it	pl
 80029c4:	424b      	negpl	r3, r1
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 80029c6:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 80029ca:	f5b1 4f9e 	cmp.w	r1, #20224	@ 0x4f00
 80029ce:	d106      	bne.n	80029de <StartGSM+0x402>
 80029d0:	3301      	adds	r3, #1
 80029d2:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80029d6:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												count_stack++;
 80029da:	bf08      	it	eq
 80029dc:	3201      	addeq	r2, #1
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 80029de:	f10e 0e01 	add.w	lr, lr, #1
 80029e2:	e7da      	b.n	800299a <StartGSM+0x3be>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 80029e4:	eb0e 010c 	add.w	r1, lr, ip
 80029e8:	424b      	negs	r3, r1
 80029ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029ee:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80029f2:	bf58      	it	pl
 80029f4:	4259      	negpl	r1, r3
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 80029f6:	f85a 3021 	ldr.w	r3, [sl, r1, lsl #2]
 80029fa:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 80029fe:	d10c      	bne.n	8002a1a <StartGSM+0x43e>
 8002a00:	1c4b      	adds	r3, r1, #1
 8002a02:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8002a06:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_stack;
 8002a0a:	bf01      	itttt	eq
 8002a0c:	01d3      	lsleq	r3, r2, #7
 8002a0e:	f5c3 439e 	rsbeq	r3, r3, #20224	@ 0x4f00
 8002a12:	f84a 3021 	streq.w	r3, [sl, r1, lsl #2]
												count_stack--;
 8002a16:	f102 32ff 	addeq.w	r2, r2, #4294967295
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002a1a:	f10e 0e01 	add.w	lr, lr, #1
 8002a1e:	e7c0      	b.n	80029a2 <StartGSM+0x3c6>
												Debug_printf("Have cleared out all mail queue\n");
 8002a20:	484f      	ldr	r0, [pc, #316]	@ (8002b60 <StartGSM+0x584>)
 8002a22:	f002 f88f 	bl	8004b44 <Debug_printf>
									is_disconnect = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	603b      	str	r3, [r7, #0]
								is_pushing_data = 0;
 8002a2a:	4b4e      	ldr	r3, [pc, #312]	@ (8002b64 <StartGSM+0x588>)
							Debug_printf("\n--------------------Sending to SERVER takes %d -----------------------\n\n",period);
 8002a2c:	484e      	ldr	r0, [pc, #312]	@ (8002b68 <StartGSM+0x58c>)
								is_pushing_data = 0;
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
							int period = __HAL_TIM_GET_COUNTER(&htim3);
 8002a32:	f8d8 3000 	ldr.w	r3, [r8]
 8002a36:	6a59      	ldr	r1, [r3, #36]	@ 0x24
							Debug_printf("\n--------------------Sending to SERVER takes %d -----------------------\n\n",period);
 8002a38:	f002 f884 	bl	8004b44 <Debug_printf>
							Debug_printf("\n--------------------END OF SENDING SERVER --------------------------\n\n");
 8002a3c:	484b      	ldr	r0, [pc, #300]	@ (8002b6c <StartGSM+0x590>)
 8002a3e:	f002 f881 	bl	8004b44 <Debug_printf>
							osDelay(200);
 8002a42:	20c8      	movs	r0, #200	@ 0xc8
 8002a44:	f005 f9c6 	bl	8007dd4 <osDelay>
 8002a48:	e6f4      	b.n	8002834 <StartGSM+0x258>
										Debug_printf("\n\n------------------ USING FLASH TO PUSH TO SERVER -----------------\n\n");
 8002a4a:	4849      	ldr	r0, [pc, #292]	@ (8002b70 <StartGSM+0x594>)
 8002a4c:	f002 f87a 	bl	8004b44 <Debug_printf>
										is_using_flash = 1;
 8002a50:	4a33      	ldr	r2, [pc, #204]	@ (8002b20 <StartGSM+0x544>)
 8002a52:	2301      	movs	r3, #1
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e7e6      	b.n	8002a26 <StartGSM+0x44a>
								uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR\n");
 8002a58:	4946      	ldr	r1, [pc, #280]	@ (8002b74 <StartGSM+0x598>)
 8002a5a:	4829      	ldr	r0, [pc, #164]	@ (8002b00 <StartGSM+0x524>)
 8002a5c:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8002b20 <StartGSM+0x544>
 8002a60:	f002 f860 	bl	8004b24 <uart_transmit_string>
								memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002a64:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002a68:	4659      	mov	r1, fp
 8002a6a:	482c      	ldr	r0, [pc, #176]	@ (8002b1c <StartGSM+0x540>)
 8002a6c:	f008 ff6e 	bl	800b94c <memset>
								SIM_UART_ReInitializeRxDMA();
 8002a70:	f7fe fad6 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
								if(is_disconnect == 0){
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	b95b      	cbnz	r3, 8002a90 <StartGSM+0x4b4>
									if(is_using_flash == 0){
 8002a78:	f8d8 3000 	ldr.w	r3, [r8]
 8002a7c:	b933      	cbnz	r3, 8002a8c <StartGSM+0x4b0>
										start_addr_disconnect = current_addr_gsm;
 8002a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b78 <StartGSM+0x59c>)
 8002a80:	6832      	ldr	r2, [r6, #0]
 8002a82:	601a      	str	r2, [r3, #0]
										Debug_printf("Saving start address of connection outage: %08x\n", start_addr_disconnect);
 8002a84:	6819      	ldr	r1, [r3, #0]
 8002a86:	483d      	ldr	r0, [pc, #244]	@ (8002b7c <StartGSM+0x5a0>)
 8002a88:	f002 f85c 	bl	8004b44 <Debug_printf>
									is_disconnect = 1;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	603b      	str	r3, [r7, #0]
								if(is_using_flash == 1){
 8002a90:	f8d8 3000 	ldr.w	r3, [r8]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	f040 815c 	bne.w	8002d52 <StartGSM+0x776>
									if(is_keep_up){
 8002a9a:	4b23      	ldr	r3, [pc, #140]	@ (8002b28 <StartGSM+0x54c>)
 8002a9c:	4f25      	ldr	r7, [pc, #148]	@ (8002b34 <StartGSM+0x558>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2a00      	cmp	r2, #0
 8002aa2:	d175      	bne.n	8002b90 <StartGSM+0x5b4>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002aa4:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002aa8:	f8d7 e200 	ldr.w	lr, [r7, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002aac:	f103 3cff 	add.w	ip, r3, #4294967295
 8002ab0:	4691      	mov	r9, r2
										int count_stack = 0;
 8002ab2:	4611      	mov	r1, r2
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002ab4:	45cc      	cmp	ip, r9
 8002ab6:	f300 810e 	bgt.w	8002cd6 <StartGSM+0x6fa>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002aba:	4594      	cmp	ip, r2
 8002abc:	f340 8083 	ble.w	8002bc6 <StartGSM+0x5ea>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002ac0:	eb02 000e 	add.w	r0, r2, lr
 8002ac4:	4243      	negs	r3, r0
 8002ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002aca:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8002ace:	bf58      	it	pl
 8002ad0:	4258      	negpl	r0, r3
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002ad2:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
 8002ad6:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8002ada:	d10c      	bne.n	8002af6 <StartGSM+0x51a>
 8002adc:	1c43      	adds	r3, r0, #1
 8002ade:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8002ae2:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_stack;
 8002ae6:	bf01      	itttt	eq
 8002ae8:	01cb      	lsleq	r3, r1, #7
 8002aea:	f5c3 439e 	rsbeq	r3, r3, #20224	@ 0x4f00
 8002aee:	f847 3020 	streq.w	r3, [r7, r0, lsl #2]
												count_stack--;
 8002af2:	f101 31ff 	addeq.w	r1, r1, #4294967295
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002af6:	3201      	adds	r2, #1
 8002af8:	e7df      	b.n	8002aba <StartGSM+0x4de>
 8002afa:	bf00      	nop
 8002afc:	080107c9 	.word	0x080107c9
 8002b00:	200011d0 	.word	0x200011d0
 8002b04:	080107e9 	.word	0x080107e9
 8002b08:	20000dd8 	.word	0x20000dd8
 8002b0c:	0801080a 	.word	0x0801080a
 8002b10:	0801083c 	.word	0x0801083c
 8002b14:	08010544 	.word	0x08010544
 8002b18:	08010883 	.word	0x08010883
 8002b1c:	20000c38 	.word	0x20000c38
 8002b20:	20000dd4 	.word	0x20000dd4
 8002b24:	080108d9 	.word	0x080108d9
 8002b28:	20000dd0 	.word	0x20000dd0
 8002b2c:	20000c18 	.word	0x20000c18
 8002b30:	0801096c 	.word	0x0801096c
 8002b34:	20000ddc 	.word	0x20000ddc
 8002b38:	080109a1 	.word	0x080109a1
 8002b3c:	20000dcc 	.word	0x20000dcc
 8002b40:	080109dc 	.word	0x080109dc
 8002b44:	08010a1c 	.word	0x08010a1c
 8002b48:	20000b58 	.word	0x20000b58
 8002b4c:	08010a2c 	.word	0x08010a2c
 8002b50:	20000db8 	.word	0x20000db8
 8002b54:	20000c1c 	.word	0x20000c1c
 8002b58:	0801089a 	.word	0x0801089a
 8002b5c:	0801091b 	.word	0x0801091b
 8002b60:	08010a50 	.word	0x08010a50
 8002b64:	20000dc8 	.word	0x20000dc8
 8002b68:	08010ab8 	.word	0x08010ab8
 8002b6c:	08010b02 	.word	0x08010b02
 8002b70:	08010a71 	.word	0x08010a71
 8002b74:	08010b4a 	.word	0x08010b4a
 8002b78:	20000dc0 	.word	0x20000dc0
 8002b7c:	08010b59 	.word	0x08010b59
 8002b80:	20000c24 	.word	0x20000c24
 8002b84:	20001258 	.word	0x20001258
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	200016d4 	.word	0x200016d4
										Debug_printf("\n-----------------BEFORE update the result address data: GSM --------------\n");
 8002b90:	4897      	ldr	r0, [pc, #604]	@ (8002df0 <StartGSM+0x814>)
 8002b92:	f001 ffd7 	bl	8004b44 <Debug_printf>
										printQueue_GSM(&result_addr_queue);
 8002b96:	4638      	mov	r0, r7
 8002b98:	f000 f994 	bl	8002ec4 <printQueue_GSM>
										Debug_printf("\n--------------- Update the result address data: GSM --------------\n");
 8002b9c:	4895      	ldr	r0, [pc, #596]	@ (8002df4 <StartGSM+0x818>)
 8002b9e:	f001 ffd1 	bl	8004b44 <Debug_printf>
											if(result_addr_queue.data[idx] < start_addr_disconnect){
 8002ba2:	4b95      	ldr	r3, [pc, #596]	@ (8002df8 <StartGSM+0x81c>)
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002ba4:	f04f 0b00 	mov.w	fp, #0
 8002ba8:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002bac:	f8d7 1200 	ldr.w	r1, [r7, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002bb0:	4558      	cmp	r0, fp
 8002bb2:	dc59      	bgt.n	8002c68 <StartGSM+0x68c>
										int count_shiftleft_dub = count_shiftleft;
 8002bb4:	4b91      	ldr	r3, [pc, #580]	@ (8002dfc <StartGSM+0x820>)
 8002bb6:	f893 e000 	ldrb.w	lr, [r3]
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002bba:	f04f 0c00 	mov.w	ip, #0
												result_addr_queue.data[idx] -= 128 * count_shiftleft;
 8002bbe:	ea4f 19ce 	mov.w	r9, lr, lsl #7
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002bc2:	4560      	cmp	r0, ip
 8002bc4:	dc6b      	bgt.n	8002c9e <StartGSM+0x6c2>
									printQueue_GSM(&result_addr_queue);
 8002bc6:	488e      	ldr	r0, [pc, #568]	@ (8002e00 <StartGSM+0x824>)
 8002bc8:	f000 f97c 	bl	8002ec4 <printQueue_GSM>
									start_addr_disconnect -= 128 * count_shiftleft;
 8002bcc:	4b8a      	ldr	r3, [pc, #552]	@ (8002df8 <StartGSM+0x81c>)
 8002bce:	498b      	ldr	r1, [pc, #556]	@ (8002dfc <StartGSM+0x820>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	7808      	ldrb	r0, [r1, #0]
 8002bd4:	eba2 12c0 	sub.w	r2, r2, r0, lsl #7
 8002bd8:	601a      	str	r2, [r3, #0]
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
									start_addr_disconnect -= 128 * count_shiftleft;
 8002be0:	ea4f 1cc0 	mov.w	ip, r0, lsl #7
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 8002be4:	f0c0 808f 	bcc.w	8002d06 <StartGSM+0x72a>
									end_addr_disconnect -= 128 *count_shiftleft;
 8002be8:	4a86      	ldr	r2, [pc, #536]	@ (8002e04 <StartGSM+0x828>)
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002bea:	4887      	ldr	r0, [pc, #540]	@ (8002e08 <StartGSM+0x82c>)
									end_addr_disconnect -= 128 *count_shiftleft;
 8002bec:	6813      	ldr	r3, [r2, #0]
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 8002bee:	f8df 9220 	ldr.w	r9, [pc, #544]	@ 8002e10 <StartGSM+0x834>
 8002bf2:	f8df b25c 	ldr.w	fp, [pc, #604]	@ 8002e50 <StartGSM+0x874>
									end_addr_disconnect -= 128 *count_shiftleft;
 8002bf6:	eba3 030c 	sub.w	r3, r3, ip
 8002bfa:	6013      	str	r3, [r2, #0]
									count_shiftleft = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	700b      	strb	r3, [r1, #0]
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002c00:	f001 ffa0 	bl	8004b44 <Debug_printf>
										Debug_printf("Receiving MAIL\n");
 8002c04:	4881      	ldr	r0, [pc, #516]	@ (8002e0c <StartGSM+0x830>)
 8002c06:	f001 ff9d 	bl	8004b44 <Debug_printf>
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 8002c0a:	4981      	ldr	r1, [pc, #516]	@ (8002e10 <StartGSM+0x834>)
 8002c0c:	f8db 0000 	ldr.w	r0, [fp]
 8002c10:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002c14:	2200      	movs	r2, #0
 8002c16:	f005 f9c7 	bl	8007fa8 <osMessageQueueGet>
										if(status == osOK){
 8002c1a:	2800      	cmp	r0, #0
 8002c1c:	d177      	bne.n	8002d0e <StartGSM+0x732>
											Debug_printf("Receiving MAIL: %08lx\n", receivedDataGSM.address);
 8002c1e:	f8d9 1058 	ldr.w	r1, [r9, #88]	@ 0x58
 8002c22:	487c      	ldr	r0, [pc, #496]	@ (8002e14 <StartGSM+0x838>)
 8002c24:	f001 ff8e 	bl	8004b44 <Debug_printf>
											if(is_keep_up == 0 && receivedDataGSM.address == 0x4F00){
 8002c28:	4b7b      	ldr	r3, [pc, #492]	@ (8002e18 <StartGSM+0x83c>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	2a00      	cmp	r2, #0
 8002c2e:	d1e9      	bne.n	8002c04 <StartGSM+0x628>
 8002c30:	f8d9 3058 	ldr.w	r3, [r9, #88]	@ 0x58
 8002c34:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8002c38:	d1e4      	bne.n	8002c04 <StartGSM+0x628>
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002c3a:	4b78      	ldr	r3, [pc, #480]	@ (8002e1c <StartGSM+0x840>)
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 8002c3c:	f8d7 1204 	ldr.w	r1, [r7, #516]	@ 0x204
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002c40:	f8d3 c000 	ldr.w	ip, [r3]
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 8002c44:	3180      	adds	r1, #128	@ 0x80
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002c46:	4594      	cmp	ip, r2
 8002c48:	dddc      	ble.n	8002c04 <StartGSM+0x628>
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 8002c4a:	1a8b      	subs	r3, r1, r2
 8002c4c:	4258      	negs	r0, r3
 8002c4e:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8002c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c56:	bf58      	it	pl
 8002c58:	4243      	negpl	r3, r0
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002c5a:	3201      	adds	r2, #1
													result_addr_queue.data[idx] -= 128;
 8002c5c:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8002c60:	3880      	subs	r0, #128	@ 0x80
 8002c62:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002c66:	e7ee      	b.n	8002c46 <StartGSM+0x66a>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002c68:	4459      	add	r1, fp
 8002c6a:	4248      	negs	r0, r1
 8002c6c:	f001 097f 	and.w	r9, r1, #127	@ 0x7f
 8002c70:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 8002c74:	bf58      	it	pl
 8002c76:	f1c1 0900 	rsbpl	r9, r1, #0
											if(result_addr_queue.data[idx] < start_addr_disconnect){
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	f857 1029 	ldr.w	r1, [r7, r9, lsl #2]
 8002c80:	4281      	cmp	r1, r0
 8002c82:	d209      	bcs.n	8002c98 <StartGSM+0x6bc>
												Debug_printf("CURRENT INDEX TO CHECK DELETING: %08lx", result_addr_queue.data[idx]);
 8002c84:	4866      	ldr	r0, [pc, #408]	@ (8002e20 <StartGSM+0x844>)
 8002c86:	f001 ff5d 	bl	8004b44 <Debug_printf>
												deleteMiddle_GSM(&result_addr_queue, idx);
 8002c8a:	4649      	mov	r1, r9
 8002c8c:	4638      	mov	r0, r7
 8002c8e:	f000 f973 	bl	8002f78 <deleteMiddle_GSM>
												i--;
 8002c92:	4b59      	ldr	r3, [pc, #356]	@ (8002df8 <StartGSM+0x81c>)
 8002c94:	f10b 3bff 	add.w	fp, fp, #4294967295
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002c98:	f10b 0b01 	add.w	fp, fp, #1
 8002c9c:	e784      	b.n	8002ba8 <StartGSM+0x5cc>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002c9e:	eb0c 0301 	add.w	r3, ip, r1
 8002ca2:	425a      	negs	r2, r3
 8002ca4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ca8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cac:	bf58      	it	pl
 8002cae:	4253      	negpl	r3, r2
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002cb0:	f10c 0c01 	add.w	ip, ip, #1
											if(result_addr_queue.data[idx] == FLASH_END_ADDRESS-0x100){
 8002cb4:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8002cb8:	f5b2 4f9e 	cmp.w	r2, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_shiftleft_dub;
 8002cbc:	bf06      	itte	eq
 8002cbe:	ea4f 12ce 	moveq.w	r2, lr, lsl #7
 8002cc2:	f5c2 429e 	rsbeq	r2, r2, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_shiftleft;
 8002cc6:	eba2 0209 	subne.w	r2, r2, r9
 8002cca:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
												count_shiftleft_dub -= 1;
 8002cce:	bf08      	it	eq
 8002cd0:	f10e 3eff 	addeq.w	lr, lr, #4294967295
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002cd4:	e775      	b.n	8002bc2 <StartGSM+0x5e6>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002cd6:	eb09 030e 	add.w	r3, r9, lr
 8002cda:	4258      	negs	r0, r3
 8002cdc:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8002ce0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ce4:	bf58      	it	pl
 8002ce6:	4243      	negpl	r3, r0
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002ce8:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8002cec:	f5b0 4f9e 	cmp.w	r0, #20224	@ 0x4f00
 8002cf0:	d106      	bne.n	8002d00 <StartGSM+0x724>
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8002cf8:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												count_stack++;
 8002cfc:	bf08      	it	eq
 8002cfe:	3101      	addeq	r1, #1
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002d00:	f109 0901 	add.w	r9, r9, #1
 8002d04:	e6d6      	b.n	8002ab4 <StartGSM+0x4d8>
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 8002d06:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e76c      	b.n	8002be8 <StartGSM+0x60c>
											Debug_printf("Have cleared out all mail queue\n");
 8002d0e:	4845      	ldr	r0, [pc, #276]	@ (8002e24 <StartGSM+0x848>)
 8002d10:	f001 ff18 	bl	8004b44 <Debug_printf>
									is_using_flash = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f8c8 3000 	str.w	r3, [r8]
								is_pushing_data = 0;
 8002d1a:	4b43      	ldr	r3, [pc, #268]	@ (8002e28 <StartGSM+0x84c>)
 8002d1c:	2700      	movs	r7, #0
 8002d1e:	601f      	str	r7, [r3, #0]
								if(result_final == 2){
 8002d20:	f8da 3000 	ldr.w	r3, [sl]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d139      	bne.n	8002d9c <StartGSM+0x7c0>
									Debug_printf("---------------------SIM ERROR ----------------------\n");
 8002d28:	4840      	ldr	r0, [pc, #256]	@ (8002e2c <StartGSM+0x850>)
 8002d2a:	f001 ff0b 	bl	8004b44 <Debug_printf>
									memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002d2e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002d32:	4639      	mov	r1, r7
 8002d34:	483e      	ldr	r0, [pc, #248]	@ (8002e30 <StartGSM+0x854>)
 8002d36:	f008 fe09 	bl	800b94c <memset>
									SIM_UART_ReInitializeRxDMA();
 8002d3a:	f7fe f971 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
									uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 8002d3e:	493d      	ldr	r1, [pc, #244]	@ (8002e34 <StartGSM+0x858>)
 8002d40:	483d      	ldr	r0, [pc, #244]	@ (8002e38 <StartGSM+0x85c>)
 8002d42:	f001 feef 	bl	8004b24 <uart_transmit_string>
									reboot_SIM_module();
 8002d46:	f7fe f9c7 	bl	80010d8 <reboot_SIM_module>
				Debug_printf("\n--------------------END OF CASE 7 --------------------------\n\n");
 8002d4a:	483c      	ldr	r0, [pc, #240]	@ (8002e3c <StartGSM+0x860>)
 8002d4c:	f001 fefa 	bl	8004b44 <Debug_printf>
				break;
 8002d50:	e4cf      	b.n	80026f2 <StartGSM+0x116>
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002d52:	482d      	ldr	r0, [pc, #180]	@ (8002e08 <StartGSM+0x82c>)
										Debug_printf("Receiving MAIL\n");
 8002d54:	f8df 90b4 	ldr.w	r9, [pc, #180]	@ 8002e0c <StartGSM+0x830>
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 8002d58:	4f2d      	ldr	r7, [pc, #180]	@ (8002e10 <StartGSM+0x834>)
 8002d5a:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 8002e50 <StartGSM+0x874>
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002d5e:	f001 fef1 	bl	8004b44 <Debug_printf>
										Debug_printf("Receiving MAIL\n");
 8002d62:	4648      	mov	r0, r9
 8002d64:	f001 feee 	bl	8004b44 <Debug_printf>
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 8002d68:	4929      	ldr	r1, [pc, #164]	@ (8002e10 <StartGSM+0x834>)
 8002d6a:	f8d8 0000 	ldr.w	r0, [r8]
 8002d6e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002d72:	2200      	movs	r2, #0
 8002d74:	f005 f918 	bl	8007fa8 <osMessageQueueGet>
										if(status == osOK){
 8002d78:	b960      	cbnz	r0, 8002d94 <StartGSM+0x7b8>
											Debug_printf("Receiving MAIL: %08lx\n", receivedDataGSM.address);
 8002d7a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002d7c:	4825      	ldr	r0, [pc, #148]	@ (8002e14 <StartGSM+0x838>)
 8002d7e:	f001 fee1 	bl	8004b44 <Debug_printf>
											if(receivedDataGSM.address == 0x4F00){
 8002d82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d84:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8002d88:	d1eb      	bne.n	8002d62 <StartGSM+0x786>
												start_addr_disconnect -= 128;
 8002d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002df8 <StartGSM+0x81c>)
 8002d8c:	6813      	ldr	r3, [r2, #0]
 8002d8e:	3b80      	subs	r3, #128	@ 0x80
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e7e6      	b.n	8002d62 <StartGSM+0x786>
											Debug_printf("Have cleared out all mail queue\n");
 8002d94:	4823      	ldr	r0, [pc, #140]	@ (8002e24 <StartGSM+0x848>)
 8002d96:	f001 fed5 	bl	8004b44 <Debug_printf>
											break;
 8002d9a:	e7be      	b.n	8002d1a <StartGSM+0x73e>
									Debug_printf("\n--------------------SENDING ERROR -----------------------\n");
 8002d9c:	4828      	ldr	r0, [pc, #160]	@ (8002e40 <StartGSM+0x864>)
 8002d9e:	f001 fed1 	bl	8004b44 <Debug_printf>
									process++;
 8002da2:	2708      	movs	r7, #8
									break;
 8002da4:	e7d1      	b.n	8002d4a <StartGSM+0x76e>
				uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 8002da6:	4f27      	ldr	r7, [pc, #156]	@ (8002e44 <StartGSM+0x868>)
 8002da8:	6838      	ldr	r0, [r7, #0]
 8002daa:	f004 ffff 	bl	8007dac <osThreadGetStackSpace>
				Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 8002dae:	6839      	ldr	r1, [r7, #0]
				uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 8002db0:	4602      	mov	r2, r0
				Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 8002db2:	4825      	ldr	r0, [pc, #148]	@ (8002e48 <StartGSM+0x86c>)
 8002db4:	f001 fec6 	bl	8004b44 <Debug_printf>
				int result_close = close_connection(0);
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7ff f9af 	bl	800211c <close_connection>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002dbe:	f44f 72c0 	mov.w	r2, #384	@ 0x180
				if(result_close){
 8002dc2:	4601      	mov	r1, r0
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	f43f ac42 	beq.w	800264e <StartGSM+0x72>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4818      	ldr	r0, [pc, #96]	@ (8002e30 <StartGSM+0x854>)
 8002dce:	f008 fdbd 	bl	800b94c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002dd2:	f7fe f925 	bl	8001020 <SIM_UART_ReInitializeRxDMA>
						uart_transmit_string(&huart1,(uint8_t*) "REOPEN CONNECTION TO SERVER\n");
 8002dd6:	491d      	ldr	r1, [pc, #116]	@ (8002e4c <StartGSM+0x870>)
 8002dd8:	4817      	ldr	r0, [pc, #92]	@ (8002e38 <StartGSM+0x85c>)
 8002dda:	f001 fea3 	bl	8004b24 <uart_transmit_string>
						process = 4;
 8002dde:	e4ac      	b.n	800273a <StartGSM+0x15e>
 8002de0:	463d      	mov	r5, r7
				else process++;
 8002de2:	2702      	movs	r7, #2
 8002de4:	e485      	b.n	80026f2 <StartGSM+0x116>
						process++;
 8002de6:	2705      	movs	r7, #5
 8002de8:	e483      	b.n	80026f2 <StartGSM+0x116>
					process++;
 8002dea:	2706      	movs	r7, #6
 8002dec:	e481      	b.n	80026f2 <StartGSM+0x116>
 8002dee:	bf00      	nop
 8002df0:	08010b8a 	.word	0x08010b8a
 8002df4:	08010bd7 	.word	0x08010bd7
 8002df8:	20000dc0 	.word	0x20000dc0
 8002dfc:	20000dcc 	.word	0x20000dcc
 8002e00:	20000ddc 	.word	0x20000ddc
 8002e04:	20000db8 	.word	0x20000db8
 8002e08:	080109dc 	.word	0x080109dc
 8002e0c:	08010a1c 	.word	0x08010a1c
 8002e10:	20000b58 	.word	0x20000b58
 8002e14:	08010c43 	.word	0x08010c43
 8002e18:	20000dd0 	.word	0x20000dd0
 8002e1c:	20000c18 	.word	0x20000c18
 8002e20:	08010c1c 	.word	0x08010c1c
 8002e24:	08010a50 	.word	0x08010a50
 8002e28:	20000dc8 	.word	0x20000dc8
 8002e2c:	08010c5a 	.word	0x08010c5a
 8002e30:	20000c38 	.word	0x20000c38
 8002e34:	08010646 	.word	0x08010646
 8002e38:	200011d0 	.word	0x200011d0
 8002e3c:	08010ccd 	.word	0x08010ccd
 8002e40:	08010c91 	.word	0x08010c91
 8002e44:	20000fe8 	.word	0x20000fe8
 8002e48:	08010454 	.word	0x08010454
 8002e4c:	08010d0d 	.word	0x08010d0d
 8002e50:	200016d4 	.word	0x200016d4

08002e54 <initQueue_GSM>:


// Function to initialize the Queue_GSM
void initQueue_GSM(Queue_GSM* q) {
    q->front = 0;
    q->rear = -1;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5a:	e9c0 3280 	strd	r3, r2, [r0, #512]	@ 0x200
    q->size = 0;
 8002e5e:	f8c0 3208 	str.w	r3, [r0, #520]	@ 0x208
}
 8002e62:	4770      	bx	lr

08002e64 <enqueue_GSM>:
    return q->size == 0;
}

// Function to check if the Queue_GSM is full
int isFull_GSM(Queue_GSM* q) {
    return q->size == MAX_SIZE;
 8002e64:	f8d0 2208 	ldr.w	r2, [r0, #520]	@ 0x208
}

// Function to enqueue (add) a uint32_t value to the Queue_GSM
void enqueue_GSM(Queue_GSM* q, uint32_t value) {
    if (isFull_GSM(q)) {
 8002e68:	2a80      	cmp	r2, #128	@ 0x80
void enqueue_GSM(Queue_GSM* q, uint32_t value) {
 8002e6a:	b410      	push	{r4}
    if (isFull_GSM(q)) {
 8002e6c:	d104      	bne.n	8002e78 <enqueue_GSM+0x14>
        Debug_printf("Queue_GSM is full\n");
 8002e6e:	480c      	ldr	r0, [pc, #48]	@ (8002ea0 <enqueue_GSM+0x3c>)
        return;
    }
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
    q->data[q->rear] = value;
    q->size++;
}
 8002e70:	f85d 4b04 	ldr.w	r4, [sp], #4
        Debug_printf("Queue_GSM is full\n");
 8002e74:	f001 be66 	b.w	8004b44 <Debug_printf>
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
 8002e78:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	425c      	negs	r4, r3
 8002e80:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8002e84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e88:	bf58      	it	pl
 8002e8a:	4263      	negpl	r3, r4
    q->size++;
 8002e8c:	3201      	adds	r2, #1
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
 8002e8e:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
}
 8002e92:	f85d 4b04 	ldr.w	r4, [sp], #4
    q->data[q->rear] = value;
 8002e96:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    q->size++;
 8002e9a:	f8c0 2208 	str.w	r2, [r0, #520]	@ 0x208
}
 8002e9e:	4770      	bx	lr
 8002ea0:	08010d2a 	.word	0x08010d2a

08002ea4 <clearQueue_GSM>:
    }
    return q->data[q->front];
}

// Function to clear the entire Queue_GSM
void clearQueue_GSM(Queue_GSM* q) {
 8002ea4:	b510      	push	{r4, lr}
	for (int i = 0; i < MAX_SIZE; i++) {
		q->data[i] = 0; // Clear the data explicitly
 8002ea6:	f44f 7200 	mov.w	r2, #512	@ 0x200
void clearQueue_GSM(Queue_GSM* q) {
 8002eaa:	4604      	mov	r4, r0
		q->data[i] = 0; // Clear the data explicitly
 8002eac:	2100      	movs	r1, #0
 8002eae:	f008 fd4d 	bl	800b94c <memset>
	}
    q->front = 0;
    q->rear = -1;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb8:	e9c4 3280 	strd	r3, r2, [r4, #512]	@ 0x200
    q->size = 0;
 8002ebc:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
}
 8002ec0:	bd10      	pop	{r4, pc}
	...

08002ec4 <printQueue_GSM>:

// Function to print the Queue_GSM contents (for debugging)
int printQueue_GSM(Queue_GSM* q) {
 8002ec4:	b570      	push	{r4, r5, r6, lr}
    return q->size == 0;
 8002ec6:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
int printQueue_GSM(Queue_GSM* q) {
 8002eca:	4604      	mov	r4, r0
    if (isEmpty_GSM(q)) {
 8002ecc:	b925      	cbnz	r5, 8002ed8 <printQueue_GSM+0x14>
        Debug_printf("Queue_GSM is empty\n");
 8002ece:	4813      	ldr	r0, [pc, #76]	@ (8002f1c <printQueue_GSM+0x58>)
 8002ed0:	f001 fe38 	bl	8004b44 <Debug_printf>
        int idx = (q->front + i) % MAX_SIZE;
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
    }
    Debug_printf("\n");
    return q->size;
}
 8002ed4:	4628      	mov	r0, r5
 8002ed6:	bd70      	pop	{r4, r5, r6, pc}
    Debug_printf("Queue_GSM contents: \n");
 8002ed8:	4811      	ldr	r0, [pc, #68]	@ (8002f20 <printQueue_GSM+0x5c>)
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
 8002eda:	4e12      	ldr	r6, [pc, #72]	@ (8002f24 <printQueue_GSM+0x60>)
    Debug_printf("Queue_GSM contents: \n");
 8002edc:	f001 fe32 	bl	8004b44 <Debug_printf>
    for (int i = 0; i < q->size; i++) {
 8002ee0:	2500      	movs	r5, #0
 8002ee2:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 8002ee6:	42ab      	cmp	r3, r5
 8002ee8:	dc05      	bgt.n	8002ef6 <printQueue_GSM+0x32>
    Debug_printf("\n");
 8002eea:	480f      	ldr	r0, [pc, #60]	@ (8002f28 <printQueue_GSM+0x64>)
 8002eec:	f001 fe2a 	bl	8004b44 <Debug_printf>
    return q->size;
 8002ef0:	f8d4 5208 	ldr.w	r5, [r4, #520]	@ 0x208
 8002ef4:	e7ee      	b.n	8002ed4 <printQueue_GSM+0x10>
        int idx = (q->front + i) % MAX_SIZE;
 8002ef6:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 8002efa:	442b      	add	r3, r5
 8002efc:	425a      	negs	r2, r3
 8002efe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f06:	bf58      	it	pl
 8002f08:	4253      	negpl	r3, r2
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8002f10:	4630      	mov	r0, r6
 8002f12:	f001 fe17 	bl	8004b44 <Debug_printf>
    for (int i = 0; i < q->size; i++) {
 8002f16:	3501      	adds	r5, #1
 8002f18:	e7e3      	b.n	8002ee2 <printQueue_GSM+0x1e>
 8002f1a:	bf00      	nop
 8002f1c:	08010d3d 	.word	0x08010d3d
 8002f20:	08010d51 	.word	0x08010d51
 8002f24:	08010d67 	.word	0x08010d67
 8002f28:	080109da 	.word	0x080109da

08002f2c <checkAddrExistInQueue>:

// Function to check if an address exists in the Queue_GSM
int checkAddrExistInQueue(uint32_t addr, Queue_GSM* q) {
 8002f2c:	b538      	push	{r3, r4, r5, lr}
    for (int i = 0; i < q->size; i++) {
 8002f2e:	f8d1 5208 	ldr.w	r5, [r1, #520]	@ 0x208
 8002f32:	2200      	movs	r2, #0
 8002f34:	4295      	cmp	r5, r2
 8002f36:	dc05      	bgt.n	8002f44 <checkAddrExistInQueue+0x18>
        }
//        if(addr > q->data[idx] && addr < end_addr){
//        	Debug_printf("INVALID ADDRESS: %08lx\n", addr);
//        }
    }
    Debug_printf("NOT FOUND ADDRESS: %08lx\n", addr);
 8002f38:	4601      	mov	r1, r0
 8002f3a:	480d      	ldr	r0, [pc, #52]	@ (8002f70 <checkAddrExistInQueue+0x44>)
 8002f3c:	f001 fe02 	bl	8004b44 <Debug_printf>
    return 0;
 8002f40:	2000      	movs	r0, #0
 8002f42:	e012      	b.n	8002f6a <checkAddrExistInQueue+0x3e>
        int idx = (q->front + i) % MAX_SIZE;
 8002f44:	f8d1 3200 	ldr.w	r3, [r1, #512]	@ 0x200
 8002f48:	4413      	add	r3, r2
 8002f4a:	425c      	negs	r4, r3
 8002f4c:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8002f50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f54:	bf58      	it	pl
 8002f56:	4263      	negpl	r3, r4
        if (q->data[idx] == addr) {
 8002f58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f5c:	4283      	cmp	r3, r0
 8002f5e:	d105      	bne.n	8002f6c <checkAddrExistInQueue+0x40>
            Debug_printf("FOUND ADDRESS: %08lx\n", addr);
 8002f60:	4601      	mov	r1, r0
 8002f62:	4804      	ldr	r0, [pc, #16]	@ (8002f74 <checkAddrExistInQueue+0x48>)
 8002f64:	f001 fdee 	bl	8004b44 <Debug_printf>
            return 1;
 8002f68:	2001      	movs	r0, #1
}
 8002f6a:	bd38      	pop	{r3, r4, r5, pc}
    for (int i = 0; i < q->size; i++) {
 8002f6c:	3201      	adds	r2, #1
 8002f6e:	e7e1      	b.n	8002f34 <checkAddrExistInQueue+0x8>
 8002f70:	08010d77 	.word	0x08010d77
 8002f74:	08010d7b 	.word	0x08010d7b

08002f78 <deleteMiddle_GSM>:

// Function to delete a parameter in the middle of the Queue_GSM
void deleteMiddle_GSM(Queue_GSM* q, int indexToDelete) {
 8002f78:	b4f0      	push	{r4, r5, r6, r7}
    return q->size == 0;
 8002f7a:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
    if (isEmpty_GSM(q)) {
 8002f7e:	b91d      	cbnz	r5, 8002f88 <deleteMiddle_GSM+0x10>
        Debug_printf("Queue_GSM is empty. Nothing to delete.\n");
 8002f80:	481f      	ldr	r0, [pc, #124]	@ (8003000 <deleteMiddle_GSM+0x88>)

    // Update rear and size
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
    q->size--;
    Debug_printf("Element at index %d deleted successfully.\n", indexToDelete);
}
 8002f82:	bcf0      	pop	{r4, r5, r6, r7}
        Debug_printf("Invalid index. Cannot delete.\n");
 8002f84:	f001 bdde 	b.w	8004b44 <Debug_printf>
    if (indexToDelete < 0 || indexToDelete >= q->size) {
 8002f88:	2900      	cmp	r1, #0
 8002f8a:	db01      	blt.n	8002f90 <deleteMiddle_GSM+0x18>
 8002f8c:	428d      	cmp	r5, r1
 8002f8e:	dc01      	bgt.n	8002f94 <deleteMiddle_GSM+0x1c>
        Debug_printf("Invalid index. Cannot delete.\n");
 8002f90:	481c      	ldr	r0, [pc, #112]	@ (8003004 <deleteMiddle_GSM+0x8c>)
 8002f92:	e7f6      	b.n	8002f82 <deleteMiddle_GSM+0xa>
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 8002f94:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 8002f98:	440b      	add	r3, r1
 8002f9a:	425a      	negs	r2, r3
 8002f9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    for (int i = 0; i < q->size - 1; i++) {
 8002fa4:	f04f 0600 	mov.w	r6, #0
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 8002fa8:	bf58      	it	pl
 8002faa:	4253      	negpl	r3, r2
    for (int i = 0; i < q->size - 1; i++) {
 8002fac:	3d01      	subs	r5, #1
 8002fae:	42b5      	cmp	r5, r6
 8002fb0:	dc0f      	bgt.n	8002fd2 <deleteMiddle_GSM+0x5a>
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
 8002fb2:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 8002fb6:	337f      	adds	r3, #127	@ 0x7f
 8002fb8:	425a      	negs	r2, r3
 8002fba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fc2:	bf58      	it	pl
 8002fc4:	4253      	negpl	r3, r2
    q->size--;
 8002fc6:	e9c0 3581 	strd	r3, r5, [r0, #516]	@ 0x204
}
 8002fca:	bcf0      	pop	{r4, r5, r6, r7}
    Debug_printf("Element at index %d deleted successfully.\n", indexToDelete);
 8002fcc:	480e      	ldr	r0, [pc, #56]	@ (8003008 <deleteMiddle_GSM+0x90>)
 8002fce:	f001 bdb9 	b.w	8004b44 <Debug_printf>
        int currentIdx = (actualIndex + i) % MAX_SIZE;
 8002fd2:	199a      	adds	r2, r3, r6
 8002fd4:	4254      	negs	r4, r2
 8002fd6:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8002fda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fde:	bf58      	it	pl
 8002fe0:	4262      	negpl	r2, r4
        int nextIdx = (currentIdx + 1) % MAX_SIZE;
 8002fe2:	1c54      	adds	r4, r2, #1
 8002fe4:	4267      	negs	r7, r4
 8002fe6:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8002fea:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8002fee:	bf58      	it	pl
 8002ff0:	427c      	negpl	r4, r7
    for (int i = 0; i < q->size - 1; i++) {
 8002ff2:	3601      	adds	r6, #1
        q->data[currentIdx] = q->data[nextIdx];
 8002ff4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8002ff8:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
    for (int i = 0; i < q->size - 1; i++) {
 8002ffc:	e7d7      	b.n	8002fae <deleteMiddle_GSM+0x36>
 8002ffe:	bf00      	nop
 8003000:	08010d91 	.word	0x08010d91
 8003004:	08010db9 	.word	0x08010db9
 8003008:	08010dd8 	.word	0x08010dd8

0800300c <RingBufferDmaU8_initUSARTRx>:
// int daychange = 0;

uint8_t message1[] = "Hello from DSS\n";

void RingBufferDmaU8_initUSARTRx(RingBufferDmaU8_TypeDef* ring, UART_HandleTypeDef* husart, uint8_t* buffer, uint16_t size) // cai dat dma
{
 800300c:	b410      	push	{r4}
 800300e:	4604      	mov	r4, r0
 8003010:	4608      	mov	r0, r1
  ring->buffer = buffer;
  ring->size = size;
 8003012:	80a3      	strh	r3, [r4, #4]
{
 8003014:	4611      	mov	r1, r2
 8003016:	461a      	mov	r2, r3
  ring->tailPtr = buffer;
  ring->dmaHandle = husart->hdmarx;
 8003018:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  ring->buffer = buffer;
 800301a:	6021      	str	r1, [r4, #0]
  ring->tailPtr = buffer;
 800301c:	60a1      	str	r1, [r4, #8]
  ring->dmaHandle = husart->hdmarx;
 800301e:	60e3      	str	r3, [r4, #12]
  HAL_UART_Receive_DMA(husart, buffer, size);
}
 8003020:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_DMA(husart, buffer, size);
 8003024:	f004 be0c 	b.w	8007c40 <HAL_UART_Receive_DMA>

08003028 <set_time>:
#include "RTC.h"
#include "system_management.h"
#include "spi_flash.h"

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 8003028:	b570      	push	{r4, r5, r6, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	4606      	mov	r6, r0
 800302e:	460d      	mov	r5, r1
 8003030:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 8003032:	2100      	movs	r1, #0
 8003034:	2211      	movs	r2, #17
 8003036:	f10d 0007 	add.w	r0, sp, #7
 800303a:	f008 fc87 	bl	800b94c <memset>
	sTime.Hours = hr;
	sTime.Minutes = min;
	sTime.Seconds = sec;
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800303e:	4808      	ldr	r0, [pc, #32]	@ (8003060 <set_time+0x38>)
	sTime.Hours = hr;
 8003040:	f88d 6004 	strb.w	r6, [sp, #4]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003044:	2200      	movs	r2, #0
 8003046:	a901      	add	r1, sp, #4
	sTime.Minutes = min;
 8003048:	f88d 5005 	strb.w	r5, [sp, #5]
	sTime.Seconds = sec;
 800304c:	f88d 4006 	strb.w	r4, [sp, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003050:	f003 fa9a 	bl	8006588 <HAL_RTC_SetTime>
 8003054:	b108      	cbz	r0, 800305a <set_time+0x32>
	{
		Error_Handler();
 8003056:	f000 fb22 	bl	800369e <Error_Handler>
	}
}
 800305a:	b006      	add	sp, #24
 800305c:	bd70      	pop	{r4, r5, r6, pc}
 800305e:	bf00      	nop
 8003060:	2000136c 	.word	0x2000136c

08003064 <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date)  // monday = 1
{
 8003064:	b507      	push	{r0, r1, r2, lr}
	RTC_DateTypeDef sDate = {0};
 8003066:	2300      	movs	r3, #0
	sDate.Month = month;
 8003068:	f88d 1005 	strb.w	r1, [sp, #5]
	sDate.Date = date;
 800306c:	f88d 2006 	strb.w	r2, [sp, #6]
	sDate.Year = year;
 8003070:	f88d 0007 	strb.w	r0, [sp, #7]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003074:	461a      	mov	r2, r3
 8003076:	4806      	ldr	r0, [pc, #24]	@ (8003090 <set_date+0x2c>)
	RTC_DateTypeDef sDate = {0};
 8003078:	f88d 3004 	strb.w	r3, [sp, #4]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800307c:	a901      	add	r1, sp, #4
 800307e:	f003 fadd 	bl	800663c <HAL_RTC_SetDate>
 8003082:	b108      	cbz	r0, 8003088 <set_date+0x24>
	{
		Error_Handler();
 8003084:	f000 fb0b 	bl	800369e <Error_Handler>
	}
}
 8003088:	b003      	add	sp, #12
 800308a:	f85d fb04 	ldr.w	pc, [sp], #4
 800308e:	bf00      	nop
 8003090:	2000136c 	.word	0x2000136c

08003094 <get_RTC_time_date>:

void get_RTC_time_date(RMCSTRUCT *rmc)
{
 8003094:	b5f0      	push	{r4, r5, r6, r7, lr}
	char date[12]; // "YYYY-MM-DD" format, 10 characters + null terminator
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	  /* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8003096:	4d29      	ldr	r5, [pc, #164]	@ (800313c <get_RTC_time_date+0xa8>)
{
 8003098:	b0b3      	sub	sp, #204	@ 0xcc
 800309a:	4604      	mov	r4, r0
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800309c:	a90d      	add	r1, sp, #52	@ 0x34
 800309e:	2200      	movs	r2, #0
 80030a0:	4628      	mov	r0, r5
 80030a2:	f003 fb1b 	bl	80066dc <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80030a6:	a906      	add	r1, sp, #24
 80030a8:	2200      	movs	r2, #0
 80030aa:	4628      	mov	r0, r5
 80030ac:	f003 fb39 	bl	8006722 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  /* Format time as "HH:MM:SS" */
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 80030b0:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
	uart_transmit_string(&huart1,(uint8_t*) time);
 80030b4:	4d22      	ldr	r5, [pc, #136]	@ (8003140 <get_RTC_time_date+0xac>)
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 80030b6:	9301      	str	r3, [sp, #4]
 80030b8:	f89d 3035 	ldrb.w	r3, [sp, #53]	@ 0x35
 80030bc:	4a21      	ldr	r2, [pc, #132]	@ (8003144 <get_RTC_time_date+0xb0>)
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	210a      	movs	r1, #10
 80030c2:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 80030c6:	a807      	add	r0, sp, #28
 80030c8:	f008 fb44 	bl	800b754 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) time);
 80030cc:	a907      	add	r1, sp, #28
 80030ce:	4628      	mov	r0, r5
 80030d0:	f001 fd28 	bl	8004b24 <uart_transmit_string>

	/* Format date as "YYYY-MM-DD" */
	snprintf(date, sizeof(date), "20%02d-%02d-%02d\n", gDate.Year, gDate.Month, gDate.Date);
 80030d4:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80030de:	4a1a      	ldr	r2, [pc, #104]	@ (8003148 <get_RTC_time_date+0xb4>)
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	210c      	movs	r1, #12
 80030e4:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80030e8:	a80a      	add	r0, sp, #40	@ 0x28
 80030ea:	f008 fb33 	bl	800b754 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) date);
 80030ee:	a90a      	add	r1, sp, #40	@ 0x28
 80030f0:	4628      	mov	r0, r5
 80030f2:	f001 fd17 	bl	8004b24 <uart_transmit_string>

	rmc->date.Yr = gDate.Year;
	rmc->date.Mon = gDate.Month;
	rmc->date.Day = gDate.Date;
 80030f6:	f89d 101a 	ldrb.w	r1, [sp, #26]
	rmc->tim.hour = gTime.Hours;
 80030fa:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
	rmc->tim.min = gTime.Minutes;
 80030fe:	f89d 6035 	ldrb.w	r6, [sp, #53]	@ 0x35
	rmc->tim.sec = gTime.Seconds;
 8003102:	f89d 7036 	ldrb.w	r7, [sp, #54]	@ 0x36
	rmc->date.Mon = gDate.Month;
 8003106:	f89d 2019 	ldrb.w	r2, [sp, #25]
	rmc->date.Yr = gDate.Year;
 800310a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800310e:	61a3      	str	r3, [r4, #24]
	rmc->date.Mon = gDate.Month;
 8003110:	6162      	str	r2, [r4, #20]
	rmc->date.Day = gDate.Date;
 8003112:	6121      	str	r1, [r4, #16]
	rmc->tim.hour = gTime.Hours;
 8003114:	6020      	str	r0, [r4, #0]
	rmc->tim.min = gTime.Minutes;
 8003116:	6066      	str	r6, [r4, #4]
	rmc->tim.sec = gTime.Seconds;
 8003118:	60a7      	str	r7, [r4, #8]

	//save_rmc_to_location_info(location_info);
	snprintf((char*)output_buffer, 128, "Time to GMT+8 saved to RMC: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc->date.Yr, rmc->date.Mon, rmc->date.Day, rmc->tim.hour, rmc->tim.min, rmc->tim.sec);
 800311a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800311e:	9200      	str	r2, [sp, #0]
 8003120:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8003124:	4a09      	ldr	r2, [pc, #36]	@ (800314c <get_RTC_time_date+0xb8>)
 8003126:	2180      	movs	r1, #128	@ 0x80
 8003128:	a812      	add	r0, sp, #72	@ 0x48
 800312a:	f008 fb13 	bl	800b754 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) output_buffer);
 800312e:	a912      	add	r1, sp, #72	@ 0x48
 8003130:	4628      	mov	r0, r5
 8003132:	f001 fcf7 	bl	8004b24 <uart_transmit_string>
}
 8003136:	b033      	add	sp, #204	@ 0xcc
 8003138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800313a:	bf00      	nop
 800313c:	2000136c 	.word	0x2000136c
 8003140:	200011d0 	.word	0x200011d0
 8003144:	080101b7 	.word	0x080101b7
 8003148:	08010e03 	.word	0x08010e03
 800314c:	08010e15 	.word	0x08010e15

08003150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003150:	b500      	push	{lr}
 8003152:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003154:	2228      	movs	r2, #40	@ 0x28
 8003156:	2100      	movs	r1, #0
 8003158:	a805      	add	r0, sp, #20
 800315a:	f008 fbf7 	bl	800b94c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800315e:	2214      	movs	r2, #20
 8003160:	2100      	movs	r1, #0
 8003162:	4668      	mov	r0, sp
 8003164:	f008 fbf2 	bl	800b94c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003168:	223c      	movs	r2, #60	@ 0x3c
 800316a:	2100      	movs	r1, #0
 800316c:	eb0d 0002 	add.w	r0, sp, r2
 8003170:	f008 fbec 	bl	800b94c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003174:	f002 fcec 	bl	8005b50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003178:	4a1d      	ldr	r2, [pc, #116]	@ (80031f0 <SystemClock_Config+0xa0>)
 800317a:	6a13      	ldr	r3, [r2, #32]
 800317c:	f023 0318 	bic.w	r3, r3, #24
 8003180:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003182:	2306      	movs	r3, #6
 8003184:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003186:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003188:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800318c:	2310      	movs	r3, #16
 800318e:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003190:	2002      	movs	r0, #2
 8003192:	2300      	movs	r3, #0
 8003194:	e9cd 030c 	strd	r0, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8003198:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800319c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800319e:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031a0:	f002 fcde 	bl	8005b60 <HAL_RCC_OscConfig>
 80031a4:	4601      	mov	r1, r0
 80031a6:	b108      	cbz	r0, 80031ac <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031a8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031aa:	e7fe      	b.n	80031aa <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031ac:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80031ae:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031b2:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031b6:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80031b8:	4668      	mov	r0, sp
 80031ba:	f002 ff51 	bl	8006060 <HAL_RCC_ClockConfig>
 80031be:	b108      	cbz	r0, 80031c4 <SystemClock_Config+0x74>
 80031c0:	b672      	cpsid	i
  while (1)
 80031c2:	e7fe      	b.n	80031c2 <SystemClock_Config+0x72>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <SystemClock_Config+0xa4>)
 80031c6:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80031c8:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80031cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80031d0:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80031d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031d6:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80031d8:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80031dc:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031de:	f003 f835 	bl	800624c <HAL_RCCEx_PeriphCLKConfig>
 80031e2:	b108      	cbz	r0, 80031e8 <SystemClock_Config+0x98>
 80031e4:	b672      	cpsid	i
  while (1)
 80031e6:	e7fe      	b.n	80031e6 <SystemClock_Config+0x96>
}
 80031e8:	b01f      	add	sp, #124	@ 0x7c
 80031ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000
 80031f4:	00010187 	.word	0x00010187

080031f8 <main>:
{
 80031f8:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031fa:	4db8      	ldr	r5, [pc, #736]	@ (80034dc <main+0x2e4>)
{
 80031fc:	b08e      	sub	sp, #56	@ 0x38
  HAL_Init();
 80031fe:	f001 fd43 	bl	8004c88 <HAL_Init>
  SystemClock_Config();
 8003202:	f7ff ffa5 	bl	8003150 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003206:	2214      	movs	r2, #20
 8003208:	2100      	movs	r1, #0
 800320a:	a808      	add	r0, sp, #32
 800320c:	f008 fb9e 	bl	800b94c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003210:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003212:	48b3      	ldr	r0, [pc, #716]	@ (80034e0 <main+0x2e8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003214:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003218:	616b      	str	r3, [r5, #20]
 800321a:	696b      	ldr	r3, [r5, #20]
 800321c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003220:	9302      	str	r3, [sp, #8]
 8003222:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003224:	696b      	ldr	r3, [r5, #20]
 8003226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800322a:	616b      	str	r3, [r5, #20]
 800322c:	696b      	ldr	r3, [r5, #20]
 800322e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003232:	9303      	str	r3, [sp, #12]
 8003234:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003236:	696b      	ldr	r3, [r5, #20]
 8003238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800323c:	616b      	str	r3, [r5, #20]
 800323e:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003240:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003246:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003248:	9304      	str	r3, [sp, #16]
 800324a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800324c:	f002 fc7a 	bl	8005b44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6
 8003250:	48a3      	ldr	r0, [pc, #652]	@ (80034e0 <main+0x2e8>)
 8003252:	2200      	movs	r2, #0
 8003254:	f240 2156 	movw	r1, #598	@ 0x256
 8003258:	f002 fc74 	bl	8005b44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800325c:	48a1      	ldr	r0, [pc, #644]	@ (80034e4 <main+0x2ec>)
 800325e:	2200      	movs	r2, #0
 8003260:	2104      	movs	r1, #4
 8003262:	f002 fc6f 	bl	8005b44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003266:	489f      	ldr	r0, [pc, #636]	@ (80034e4 <main+0x2ec>)
 8003268:	2201      	movs	r2, #1
 800326a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800326e:	f002 fc69 	bl	8005b44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8003272:	2201      	movs	r2, #1
 8003274:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003278:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327c:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800327e:	f002 fc61 	bl	8005b44 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003282:	2701      	movs	r7, #1
 8003284:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003288:	4895      	ldr	r0, [pc, #596]	@ (80034e0 <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800328a:	970a      	str	r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800328c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800328e:	e9cd 3708 	strd	r3, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003292:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003294:	f002 fb92 	bl	80059bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8003298:	2354      	movs	r3, #84	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800329a:	4891      	ldr	r0, [pc, #580]	@ (80034e0 <main+0x2e8>)
 800329c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800329e:	e9cd 3708 	strd	r3, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a2:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a6:	f002 fb89 	bl	80059bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80032aa:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ac:	488d      	ldr	r0, [pc, #564]	@ (80034e4 <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b0:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032b2:	e9cd 3408 	strd	r3, r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b6:	f002 fb81 	bl	80059bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032ba:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032bc:	4889      	ldr	r0, [pc, #548]	@ (80034e4 <main+0x2ec>)
 80032be:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c0:	e9cd 3708 	strd	r3, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032c4:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c8:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80032cc:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d0:	f002 fb74 	bl	80059bc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d4:	4883      	ldr	r0, [pc, #524]	@ (80034e4 <main+0x2ec>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032d6:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032da:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032dc:	e9cd 6708 	strd	r6, r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032e0:	970a      	str	r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e2:	f002 fb6b 	bl	80059bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80032e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ea:	a908      	add	r1, sp, #32
 80032ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032f0:	e9cd 3708 	strd	r3, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032f4:	e9cd 780a 	strd	r7, r8, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f8:	f002 fb60 	bl	80059bc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032fc:	696b      	ldr	r3, [r5, #20]
 80032fe:	433b      	orrs	r3, r7
 8003300:	616b      	str	r3, [r5, #20]
 8003302:	696b      	ldr	r3, [r5, #20]
 8003304:	403b      	ands	r3, r7
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800330a:	696b      	ldr	r3, [r5, #20]
 800330c:	f043 0302 	orr.w	r3, r3, #2
 8003310:	616b      	str	r3, [r5, #20]
 8003312:	696b      	ldr	r3, [r5, #20]
  hrtc.Instance = RTC;
 8003314:	4d74      	ldr	r5, [pc, #464]	@ (80034e8 <main+0x2f0>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003316:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800331a:	4622      	mov	r2, r4
 800331c:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 800331e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003320:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003322:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003324:	f002 fa26 	bl	8005774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003328:	200d      	movs	r0, #13
 800332a:	f002 fa55 	bl	80057d8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800332e:	4622      	mov	r2, r4
 8003330:	2105      	movs	r1, #5
 8003332:	200f      	movs	r0, #15
 8003334:	f002 fa1e 	bl	8005774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003338:	200f      	movs	r0, #15
 800333a:	f002 fa4d 	bl	80057d8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800333e:	4622      	mov	r2, r4
 8003340:	2105      	movs	r1, #5
 8003342:	2010      	movs	r0, #16
 8003344:	f002 fa16 	bl	8005774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003348:	2010      	movs	r0, #16
 800334a:	f002 fa45 	bl	80057d8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 800334e:	4622      	mov	r2, r4
 8003350:	2105      	movs	r1, #5
 8003352:	2038      	movs	r0, #56	@ 0x38
 8003354:	f002 fa0e 	bl	8005774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003358:	2038      	movs	r0, #56	@ 0x38
 800335a:	f002 fa3d 	bl	80057d8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 800335e:	4622      	mov	r2, r4
 8003360:	2105      	movs	r1, #5
 8003362:	203c      	movs	r0, #60	@ 0x3c
 8003364:	f002 fa06 	bl	8005774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8003368:	203c      	movs	r0, #60	@ 0x3c
 800336a:	f002 fa35 	bl	80057d8 <HAL_NVIC_EnableIRQ>
  RTC_TimeTypeDef sTime = {0};
 800336e:	2214      	movs	r2, #20
 8003370:	4621      	mov	r1, r4
 8003372:	a808      	add	r0, sp, #32
 8003374:	f008 faea 	bl	800b94c <memset>
  hrtc.Instance = RTC;
 8003378:	4b5c      	ldr	r3, [pc, #368]	@ (80034ec <main+0x2f4>)
  RTC_DateTypeDef sDate = {0};
 800337a:	9405      	str	r4, [sp, #20]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800337c:	e9c5 3400 	strd	r3, r4, [r5]
  hrtc.Init.SynchPrediv = 255;
 8003380:	f04f 087f 	mov.w	r8, #127	@ 0x7f
 8003384:	23ff      	movs	r3, #255	@ 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003386:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 8003388:	e9c5 8302 	strd	r8, r3, [r5, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800338c:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003390:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003392:	f003 f8a6 	bl	80064e2 <HAL_RTC_Init>
 8003396:	4602      	mov	r2, r0
 8003398:	b108      	cbz	r0, 800339e <main+0x1a6>
 800339a:	b672      	cpsid	i
  while (1)
 800339c:	e7fe      	b.n	800339c <main+0x1a4>
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800339e:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  sTime.Hours = 0;
 80033a2:	f8ad 0020 	strh.w	r0, [sp, #32]
  sTime.Seconds = 0;
 80033a6:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80033aa:	a908      	add	r1, sp, #32
 80033ac:	4628      	mov	r0, r5
 80033ae:	f003 f8eb 	bl	8006588 <HAL_RTC_SetTime>
 80033b2:	4602      	mov	r2, r0
 80033b4:	b108      	cbz	r0, 80033ba <main+0x1c2>
 80033b6:	b672      	cpsid	i
  while (1)
 80033b8:	e7fe      	b.n	80033b8 <main+0x1c0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80033ba:	4b4d      	ldr	r3, [pc, #308]	@ (80034f0 <main+0x2f8>)
 80033bc:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80033be:	a905      	add	r1, sp, #20
 80033c0:	4628      	mov	r0, r5
 80033c2:	f003 f93b 	bl	800663c <HAL_RTC_SetDate>
 80033c6:	4603      	mov	r3, r0
 80033c8:	b108      	cbz	r0, 80033ce <main+0x1d6>
 80033ca:	b672      	cpsid	i
  while (1)
 80033cc:	e7fe      	b.n	80033cc <main+0x1d4>
  hspi1.Instance = SPI1;
 80033ce:	4849      	ldr	r0, [pc, #292]	@ (80034f4 <main+0x2fc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033d0:	f8df e140 	ldr.w	lr, [pc, #320]	@ 8003514 <main+0x31c>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033d4:	6083      	str	r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033d6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80033da:	e9c0 e200 	strd	lr, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033de:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033e2:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80033e6:	2510      	movs	r5, #16
 80033e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033ec:	e9c0 2506 	strd	r2, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 80033f0:	2207      	movs	r2, #7
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033f2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80033f6:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033fa:	6143      	str	r3, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033fc:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80033fe:	2308      	movs	r3, #8
 8003400:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003402:	f003 faba 	bl	800697a <HAL_SPI_Init>
 8003406:	4603      	mov	r3, r0
 8003408:	b108      	cbz	r0, 800340e <main+0x216>
 800340a:	b672      	cpsid	i
  while (1)
 800340c:	e7fe      	b.n	800340c <main+0x214>
  huart1.Instance = USART1;
 800340e:	483a      	ldr	r0, [pc, #232]	@ (80034f8 <main+0x300>)
  huart1.Init.BaudRate = 115200;
 8003410:	4a3a      	ldr	r2, [pc, #232]	@ (80034fc <main+0x304>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8003412:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 8003414:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003418:	270c      	movs	r7, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800341a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800341e:	e9c0 7305 	strd	r7, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003422:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003426:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 8003428:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800342c:	f004 fb8c 	bl	8007b48 <HAL_UART_Init>
 8003430:	4603      	mov	r3, r0
 8003432:	b108      	cbz	r0, 8003438 <main+0x240>
 8003434:	b672      	cpsid	i
  while (1)
 8003436:	e7fe      	b.n	8003436 <main+0x23e>
  huart2.Instance = USART2;
 8003438:	4831      	ldr	r0, [pc, #196]	@ (8003500 <main+0x308>)
  huart2.Init.BaudRate = 9600;
 800343a:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 8003518 <main+0x320>
 800343e:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003442:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003446:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800344a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800344e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 8003452:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003456:	f004 fb77 	bl	8007b48 <HAL_UART_Init>
 800345a:	4603      	mov	r3, r0
 800345c:	b108      	cbz	r0, 8003462 <main+0x26a>
 800345e:	b672      	cpsid	i
  while (1)
 8003460:	e7fe      	b.n	8003460 <main+0x268>
  huart3.Instance = USART3;
 8003462:	4828      	ldr	r0, [pc, #160]	@ (8003504 <main+0x30c>)
 8003464:	4a28      	ldr	r2, [pc, #160]	@ (8003508 <main+0x310>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003466:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 800346a:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800346e:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003472:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003476:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800347a:	f004 fb65 	bl	8007b48 <HAL_UART_Init>
 800347e:	4604      	mov	r4, r0
 8003480:	b108      	cbz	r0, 8003486 <main+0x28e>
 8003482:	b672      	cpsid	i
  while (1)
 8003484:	e7fe      	b.n	8003484 <main+0x28c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003486:	462a      	mov	r2, r5
 8003488:	4601      	mov	r1, r0
 800348a:	a808      	add	r0, sp, #32
 800348c:	f008 fa5e 	bl	800b94c <memset>
  htim3.Instance = TIM3;
 8003490:	4d1e      	ldr	r5, [pc, #120]	@ (800350c <main+0x314>)
  htim3.Init.Prescaler = 8000;
 8003492:	481f      	ldr	r0, [pc, #124]	@ (8003510 <main+0x318>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003494:	9407      	str	r4, [sp, #28]
  htim3.Init.Prescaler = 8000;
 8003496:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800349a:	e9c5 0300 	strd	r0, r3, [r5]
  htim3.Init.Period = 65535;
 800349e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034a2:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034a4:	e9cd 4405 	strd	r4, r4, [sp, #20]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a8:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ac:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ae:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034b0:	f003 fef2 	bl	8007298 <HAL_TIM_Base_Init>
 80034b4:	b108      	cbz	r0, 80034ba <main+0x2c2>
 80034b6:	b672      	cpsid	i
  while (1)
 80034b8:	e7fe      	b.n	80034b8 <main+0x2c0>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034ba:	a908      	add	r1, sp, #32
 80034bc:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034be:	9608      	str	r6, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034c0:	f003 ff24 	bl	800730c <HAL_TIM_ConfigClockSource>
 80034c4:	b108      	cbz	r0, 80034ca <main+0x2d2>
 80034c6:	b672      	cpsid	i
  while (1)
 80034c8:	e7fe      	b.n	80034c8 <main+0x2d0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ca:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034cc:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034ce:	a905      	add	r1, sp, #20
 80034d0:	4628      	mov	r0, r5
 80034d2:	f003 ffb5 	bl	8007440 <HAL_TIMEx_MasterConfigSynchronization>
 80034d6:	b308      	cbz	r0, 800351c <main+0x324>
 80034d8:	b672      	cpsid	i
  while (1)
 80034da:	e7fe      	b.n	80034da <main+0x2e2>
 80034dc:	40021000 	.word	0x40021000
 80034e0:	48000800 	.word	0x48000800
 80034e4:	48000400 	.word	0x48000400
 80034e8:	2000136c 	.word	0x2000136c
 80034ec:	40002800 	.word	0x40002800
 80034f0:	00010101 	.word	0x00010101
 80034f4:	20001308 	.word	0x20001308
 80034f8:	200011d0 	.word	0x200011d0
 80034fc:	40013800 	.word	0x40013800
 8003500:	20001148 	.word	0x20001148
 8003504:	200010c0 	.word	0x200010c0
 8003508:	40004800 	.word	0x40004800
 800350c:	20001258 	.word	0x20001258
 8003510:	40000400 	.word	0x40000400
 8003514:	40013000 	.word	0x40013000
 8003518:	40004400 	.word	0x40004400
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800351c:	4c4d      	ldr	r4, [pc, #308]	@ (8003654 <main+0x45c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800351e:	2218      	movs	r2, #24
 8003520:	2100      	movs	r1, #0
 8003522:	a808      	add	r0, sp, #32
 8003524:	f008 fa12 	bl	800b94c <memset>
  hadc2.Instance = ADC2;
 8003528:	4a4b      	ldr	r2, [pc, #300]	@ (8003658 <main+0x460>)
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800352a:	2300      	movs	r3, #0
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800352c:	2601      	movs	r6, #1
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800352e:	2704      	movs	r7, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003530:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003532:	e9c4 2300 	strd	r2, r3, [r4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003536:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800353a:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800353e:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003540:	62a6      	str	r6, [r4, #40]	@ 0x28
  hadc2.Init.NbrOfConversion = 1;
 8003542:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003544:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003548:	6123      	str	r3, [r4, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800354a:	6167      	str	r7, [r4, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800354c:	8323      	strh	r3, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800354e:	6363      	str	r3, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003550:	f001 fbf4 	bl	8004d3c <HAL_ADC_Init>
 8003554:	b108      	cbz	r0, 800355a <main+0x362>
 8003556:	b672      	cpsid	i
  while (1)
 8003558:	e7fe      	b.n	8003558 <main+0x360>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800355a:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  sConfig.Offset = 0;
 800355e:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  sConfig.Channel = ADC_CHANNEL_2;
 8003562:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003564:	a908      	add	r1, sp, #32
 8003566:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003568:	e9cd 3608 	strd	r3, r6, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800356c:	f001 fee8 	bl	8005340 <HAL_ADC_ConfigChannel>
 8003570:	4605      	mov	r5, r0
 8003572:	b108      	cbz	r0, 8003578 <main+0x380>
 8003574:	b672      	cpsid	i
  while (1)
 8003576:	e7fe      	b.n	8003576 <main+0x37e>
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003578:	4c38      	ldr	r4, [pc, #224]	@ (800365c <main+0x464>)
  ADC_MultiModeTypeDef multimode = {0};
 800357a:	9007      	str	r0, [sp, #28]
 800357c:	e9cd 0005 	strd	r0, r0, [sp, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003580:	4601      	mov	r1, r0
 8003582:	2218      	movs	r2, #24
 8003584:	a808      	add	r0, sp, #32
 8003586:	f008 f9e1 	bl	800b94c <memset>
  hadc3.Instance = ADC3;
 800358a:	4b35      	ldr	r3, [pc, #212]	@ (8003660 <main+0x468>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800358c:	f884 5020 	strb.w	r5, [r4, #32]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003590:	4620      	mov	r0, r4
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003592:	e9c4 650a 	strd	r6, r5, [r4, #40]	@ 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003596:	e9c4 3500 	strd	r3, r5, [r4]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800359a:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800359e:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hadc3.Init.NbrOfConversion = 1;
 80035a2:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80035a4:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80035a8:	8325      	strh	r5, [r4, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80035aa:	6365      	str	r5, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80035ac:	f001 fbc6 	bl	8004d3c <HAL_ADC_Init>
 80035b0:	b108      	cbz	r0, 80035b6 <main+0x3be>
 80035b2:	b672      	cpsid	i
  while (1)
 80035b4:	e7fe      	b.n	80035b4 <main+0x3bc>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80035b6:	9005      	str	r0, [sp, #20]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80035b8:	a905      	add	r1, sp, #20
 80035ba:	4620      	mov	r0, r4
 80035bc:	f002 f844 	bl	8005648 <HAL_ADCEx_MultiModeConfigChannel>
 80035c0:	b108      	cbz	r0, 80035c6 <main+0x3ce>
 80035c2:	b672      	cpsid	i
  while (1)
 80035c4:	e7fe      	b.n	80035c4 <main+0x3cc>
  sConfig.Channel = ADC_CHANNEL_12;
 80035c6:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80035c8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  sConfig.Offset = 0;
 80035cc:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80035d0:	a908      	add	r1, sp, #32
 80035d2:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80035d4:	e9cd 3608 	strd	r3, r6, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80035d8:	f001 feb2 	bl	8005340 <HAL_ADC_ConfigChannel>
 80035dc:	4603      	mov	r3, r0
 80035de:	b108      	cbz	r0, 80035e4 <main+0x3ec>
 80035e0:	b672      	cpsid	i
  while (1)
 80035e2:	e7fe      	b.n	80035e2 <main+0x3ea>
  hspi2.Instance = SPI2;
 80035e4:	481f      	ldr	r0, [pc, #124]	@ (8003664 <main+0x46c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80035e6:	4920      	ldr	r1, [pc, #128]	@ (8003668 <main+0x470>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80035e8:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80035ea:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80035ee:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80035f2:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035f6:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80035fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035fe:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 8003602:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003604:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003608:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800360c:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800360e:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003610:	2308      	movs	r3, #8
 8003612:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003614:	f003 f9b1 	bl	800697a <HAL_SPI_Init>
 8003618:	4604      	mov	r4, r0
 800361a:	b108      	cbz	r0, 8003620 <main+0x428>
 800361c:	b672      	cpsid	i
  while (1)
 800361e:	e7fe      	b.n	800361e <main+0x426>
  osKernelInitialize();
 8003620:	f004 fb2c 	bl	8007c7c <osKernelInitialize>
  GPSHandle = osThreadNew(StartGPS, NULL, &GPS_attributes);
 8003624:	4a11      	ldr	r2, [pc, #68]	@ (800366c <main+0x474>)
 8003626:	4812      	ldr	r0, [pc, #72]	@ (8003670 <main+0x478>)
 8003628:	4621      	mov	r1, r4
 800362a:	f004 fb63 	bl	8007cf4 <osThreadNew>
 800362e:	4b11      	ldr	r3, [pc, #68]	@ (8003674 <main+0x47c>)
  SpiFlashHandle = osThreadNew(StartSpiFlash, NULL, &SpiFlash_attributes);
 8003630:	4a11      	ldr	r2, [pc, #68]	@ (8003678 <main+0x480>)
  GPSHandle = osThreadNew(StartGPS, NULL, &GPS_attributes);
 8003632:	6018      	str	r0, [r3, #0]
  SpiFlashHandle = osThreadNew(StartSpiFlash, NULL, &SpiFlash_attributes);
 8003634:	4621      	mov	r1, r4
 8003636:	4811      	ldr	r0, [pc, #68]	@ (800367c <main+0x484>)
 8003638:	f004 fb5c 	bl	8007cf4 <osThreadNew>
 800363c:	4b10      	ldr	r3, [pc, #64]	@ (8003680 <main+0x488>)
  GSMHandle = osThreadNew(StartGSM, NULL, &GSM_attributes);
 800363e:	4a11      	ldr	r2, [pc, #68]	@ (8003684 <main+0x48c>)
  SpiFlashHandle = osThreadNew(StartSpiFlash, NULL, &SpiFlash_attributes);
 8003640:	6018      	str	r0, [r3, #0]
  GSMHandle = osThreadNew(StartGSM, NULL, &GSM_attributes);
 8003642:	4621      	mov	r1, r4
 8003644:	4810      	ldr	r0, [pc, #64]	@ (8003688 <main+0x490>)
 8003646:	f004 fb55 	bl	8007cf4 <osThreadNew>
 800364a:	4b10      	ldr	r3, [pc, #64]	@ (800368c <main+0x494>)
 800364c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800364e:	f004 fb31 	bl	8007cb4 <osKernelStart>
  while (1)
 8003652:	e7fe      	b.n	8003652 <main+0x45a>
 8003654:	20001464 	.word	0x20001464
 8003658:	50000100 	.word	0x50000100
 800365c:	20001414 	.word	0x20001414
 8003660:	50000400 	.word	0x50000400
 8003664:	200012a4 	.word	0x200012a4
 8003668:	40003800 	.word	0x40003800
 800366c:	08010eb0 	.word	0x08010eb0
 8003670:	08000e91 	.word	0x08000e91
 8003674:	20000fec 	.word	0x20000fec
 8003678:	08010ed4 	.word	0x08010ed4
 800367c:	08004455 	.word	0x08004455
 8003680:	20000ff0 	.word	0x20000ff0
 8003684:	08010e8c 	.word	0x08010e8c
 8003688:	080025dd 	.word	0x080025dd
 800368c:	20000fe8 	.word	0x20000fe8

08003690 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 8003690:	6803      	ldr	r3, [r0, #0]
 8003692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003696:	d101      	bne.n	800369c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003698:	f001 bb08 	b.w	8004cac <HAL_IncTick>
}
 800369c:	4770      	bx	lr

0800369e <Error_Handler>:
 800369e:	b672      	cpsid	i
  while (1)
 80036a0:	e7fe      	b.n	80036a0 <Error_Handler+0x2>
	...

080036a4 <W25_ReadStatusReg1>:
	W25_CS_DISABLE();
	W25_DelayWhileBusy(CHIP_ERASE_TIMEOUT);
	return retval;
} // W25_ChipErase()

uint8_t W25_ReadStatusReg1(void) {
 80036a4:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 80036a6:	2305      	movs	r3, #5
	uint8_t status_reg1;
	int retval;
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80036a8:	2200      	movs	r2, #0
 80036aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 80036b2:	f88d 3006 	strb.w	r3, [sp, #6]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80036b6:	f002 fa45 	bl	8005b44 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Read Status Reg 1 command
 80036ba:	4810      	ldr	r0, [pc, #64]	@ (80036fc <W25_ReadStatusReg1+0x58>)
 80036bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036c0:	2201      	movs	r2, #1
 80036c2:	f10d 0106 	add.w	r1, sp, #6
 80036c6:	f003 f9c6 	bl	8006a56 <HAL_SPI_Transmit>
	if(retval == HAL_OK)
 80036ca:	4604      	mov	r4, r0
 80036cc:	b940      	cbnz	r0, 80036e0 <W25_ReadStatusReg1+0x3c>
	retval = HAL_SPI_Receive(&hspi1, &status_reg1, sizeof(status_reg1), TIMEOUT);
 80036ce:	480b      	ldr	r0, [pc, #44]	@ (80036fc <W25_ReadStatusReg1+0x58>)
 80036d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036d4:	2201      	movs	r2, #1
 80036d6:	f10d 0107 	add.w	r1, sp, #7
 80036da:	f003 fbb6 	bl	8006e4a <HAL_SPI_Receive>
 80036de:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 80036e0:	2201      	movs	r2, #1
 80036e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036ea:	f002 fa2b 	bl	8005b44 <HAL_GPIO_WritePin>
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 80036ee:	b91c      	cbnz	r4, 80036f8 <W25_ReadStatusReg1+0x54>
 80036f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
} // W25_ReadStatusReg1()
 80036f4:	b002      	add	sp, #8
 80036f6:	bd10      	pop	{r4, pc}
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 80036f8:	20ff      	movs	r0, #255	@ 0xff
 80036fa:	e7fb      	b.n	80036f4 <W25_ReadStatusReg1+0x50>
 80036fc:	20001308 	.word	0x20001308

08003700 <W25_Busy>:

int W25_Busy(void)
{
 8003700:	b508      	push	{r3, lr}
	return (W25_ReadStatusReg1() & W25_STATUS1_BUSY);
 8003702:	f7ff ffcf 	bl	80036a4 <W25_ReadStatusReg1>
}
 8003706:	f000 0001 	and.w	r0, r0, #1
 800370a:	bd08      	pop	{r3, pc}

0800370c <W25_DelayWhileBusy>:

int W25_DelayWhileBusy(uint32_t msTimeout)
{
 800370c:	b570      	push	{r4, r5, r6, lr}
 800370e:	4605      	mov	r5, r0
	uint32_t initial_count = HAL_GetTick();
 8003710:	f001 fad8 	bl	8004cc4 <HAL_GetTick>
 8003714:	4606      	mov	r6, r0
	int busy;
	uint32_t deltaticks;
	uint32_t count = 0;
	do {
	busy = W25_Busy();
 8003716:	f7ff fff3 	bl	8003700 <W25_Busy>
 800371a:	4604      	mov	r4, r0
	deltaticks = HAL_GetTick() - initial_count;
 800371c:	f001 fad2 	bl	8004cc4 <HAL_GetTick>
 8003720:	1b83      	subs	r3, r0, r6
	count++;
	} while(busy && deltaticks < msTimeout);
 8003722:	b114      	cbz	r4, 800372a <W25_DelayWhileBusy+0x1e>
 8003724:	42ab      	cmp	r3, r5
 8003726:	d3f6      	bcc.n	8003716 <W25_DelayWhileBusy+0xa>
	int retval = busy ? HAL_TIMEOUT:HAL_OK;
 8003728:	2403      	movs	r4, #3
	return retval;
}
 800372a:	4620      	mov	r0, r4
 800372c:	bd70      	pop	{r4, r5, r6, pc}

0800372e <W25_Reset>:
void W25_Reset(){
 800372e:	b508      	push	{r3, lr}
	W25_CS_ENABLE();
 8003730:	2200      	movs	r2, #0
 8003732:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800373a:	f002 fa03 	bl	8005b44 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 800373e:	2201      	movs	r2, #1
 8003740:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003744:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003748:	f002 f9fc 	bl	8005b44 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 800374c:	2200      	movs	r2, #0
 800374e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003752:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003756:	f002 f9f5 	bl	8005b44 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 800375a:	2201      	movs	r2, #1
 800375c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003760:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003764:	f002 f9ee 	bl	8005b44 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8003768:	2200      	movs	r2, #0
 800376a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800376e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003772:	f002 f9e7 	bl	8005b44 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
}
 8003776:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	W25_CS_DISABLE();
 800377a:	2201      	movs	r2, #1
 800377c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003784:	f002 b9de 	b.w	8005b44 <HAL_GPIO_WritePin>

08003788 <W25_ReadJedecID>:

int W25_ReadJedecID() {
 8003788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800378a:	b08d      	sub	sp, #52	@ 0x34
	int retval;
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 800378c:	239f      	movs	r3, #159	@ 0x9f
	uint8_t jdec_id[4];
	char result[11];
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800378e:	2200      	movs	r2, #0
 8003790:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003794:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8003798:	f88d 300b 	strb.w	r3, [sp, #11]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800379c:	f002 f9d2 	bl	8005b44 <HAL_GPIO_WritePin>
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 80037a0:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	aa03      	add	r2, sp, #12
 80037a8:	2304      	movs	r3, #4
 80037aa:	f10d 010b 	add.w	r1, sp, #11
 80037ae:	4820      	ldr	r0, [pc, #128]	@ (8003830 <W25_ReadJedecID+0xa8>)
 80037b0:	f003 fa1b 	bl	8006bea <HAL_SPI_TransmitReceive>
	W25_CS_DISABLE();
 80037b4:	2201      	movs	r2, #1
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 80037b6:	4605      	mov	r5, r0
	W25_CS_DISABLE();
 80037b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037c0:	f002 f9c0 	bl	8005b44 <HAL_GPIO_WritePin>
	char spi_flash_intro[] = "Flash ID received: ";
 80037c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003834 <W25_ReadJedecID+0xac>)
 80037c6:	aa07      	add	r2, sp, #28
 80037c8:	f103 0710 	add.w	r7, r3, #16
 80037cc:	4616      	mov	r6, r2
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	6859      	ldr	r1, [r3, #4]
 80037d2:	4614      	mov	r4, r2
 80037d4:	c403      	stmia	r4!, {r0, r1}
 80037d6:	3308      	adds	r3, #8
 80037d8:	42bb      	cmp	r3, r7
 80037da:	4622      	mov	r2, r4
 80037dc:	d1f7      	bne.n	80037ce <W25_ReadJedecID+0x46>
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	6020      	str	r0, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_intro, strlen(spi_flash_intro), 1000);
 80037e2:	4630      	mov	r0, r6
 80037e4:	f7fc fd54 	bl	8000290 <strlen>
 80037e8:	4631      	mov	r1, r6
 80037ea:	b282      	uxth	r2, r0
 80037ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037f0:	4811      	ldr	r0, [pc, #68]	@ (8003838 <W25_ReadJedecID+0xb0>)
 80037f2:	f004 f8ff 	bl	80079f4 <HAL_UART_Transmit>

	sprintf(result, "%02X, %02X, %02X", jdec_id[1], jdec_id[2], jdec_id[3]);
 80037f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80037fa:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	490e      	ldr	r1, [pc, #56]	@ (800383c <W25_ReadJedecID+0xb4>)
 8003802:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8003806:	a804      	add	r0, sp, #16
 8003808:	f007 ffd8 	bl	800b7bc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) result, 11, 1000);
 800380c:	a904      	add	r1, sp, #16
 800380e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003812:	220b      	movs	r2, #11
 8003814:	4808      	ldr	r0, [pc, #32]	@ (8003838 <W25_ReadJedecID+0xb0>)
 8003816:	f004 f8ed 	bl	80079f4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r", 1, 1000);
 800381a:	4909      	ldr	r1, [pc, #36]	@ (8003840 <W25_ReadJedecID+0xb8>)
 800381c:	4806      	ldr	r0, [pc, #24]	@ (8003838 <W25_ReadJedecID+0xb0>)
 800381e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003822:	2201      	movs	r2, #1
 8003824:	f004 f8e6 	bl	80079f4 <HAL_UART_Transmit>
	return retval;
} // W25_ReadJEDECID()
 8003828:	4628      	mov	r0, r5
 800382a:	b00d      	add	sp, #52	@ 0x34
 800382c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800382e:	bf00      	nop
 8003830:	20001308 	.word	0x20001308
 8003834:	08010f0b 	.word	0x08010f0b
 8003838:	200011d0 	.word	0x200011d0
 800383c:	08010ef8 	.word	0x08010ef8
 8003840:	08010f09 	.word	0x08010f09

08003844 <W25_WriteEnable>:

	return retval;
} // W25_ReadUniqueID()


int W25_WriteEnable(void) {
 8003844:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8003846:	2306      	movs	r3, #6
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003848:	2200      	movs	r2, #0
 800384a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800384e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8003852:	f88d 3007 	strb.w	r3, [sp, #7]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003856:	f002 f975 	bl	8005b44 <HAL_GPIO_WritePin>
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 800385a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800385e:	f10d 0107 	add.w	r1, sp, #7
 8003862:	2201      	movs	r2, #1
 8003864:	4806      	ldr	r0, [pc, #24]	@ (8003880 <W25_WriteEnable+0x3c>)
 8003866:	f003 f8f6 	bl	8006a56 <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 800386a:	2201      	movs	r2, #1
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 800386c:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 800386e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003876:	f002 f965 	bl	8005b44 <HAL_GPIO_WritePin>
	return retval;
} // W25_WriteEnable()
 800387a:	4620      	mov	r0, r4
 800387c:	b002      	add	sp, #8
 800387e:	bd10      	pop	{r4, pc}
 8003880:	20001308 	.word	0x20001308

08003884 <W25_SectorErase>:

int W25_SectorErase(uint32_t address)
{
 8003884:	b513      	push	{r0, r1, r4, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_SECTOR_ERASE,address>>16,address>>8,address};
 8003886:	2320      	movs	r3, #32
 8003888:	f88d 3004 	strb.w	r3, [sp, #4]
 800388c:	0c03      	lsrs	r3, r0, #16
 800388e:	ba40      	rev16	r0, r0
 8003890:	f88d 3005 	strb.w	r3, [sp, #5]
 8003894:	f8ad 0006 	strh.w	r0, [sp, #6]
	W25_WriteEnable(); // Make sure we can write...
 8003898:	f7ff ffd4 	bl	8003844 <W25_WriteEnable>
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800389c:	2200      	movs	r2, #0
 800389e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038a6:	f002 f94d 	bl	8005b44 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 80038aa:	2204      	movs	r2, #4
 80038ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038b0:	eb0d 0102 	add.w	r1, sp, r2
 80038b4:	4808      	ldr	r0, [pc, #32]	@ (80038d8 <W25_SectorErase+0x54>)
 80038b6:	f003 f8ce 	bl	8006a56 <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 80038ba:	2201      	movs	r2, #1
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 80038bc:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 80038be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038c6:	f002 f93d 	bl	8005b44 <HAL_GPIO_WritePin>
	W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 80038ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80038ce:	f7ff ff1d 	bl	800370c <W25_DelayWhileBusy>
	return retval;
} // W25_SectorErase()
 80038d2:	4620      	mov	r0, r4
 80038d4:	b002      	add	sp, #8
 80038d6:	bd10      	pop	{r4, pc}
 80038d8:	20001308 	.word	0x20001308

080038dc <W25_PageProgram>:

int W25_PageProgram(uint32_t address, uint8_t *buf, uint32_t count)
{
 80038dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80038e0:	4606      	mov	r6, r0
 80038e2:	4688      	mov	r8, r1
 80038e4:	4617      	mov	r7, r2
	int retval = HAL_OK;
	W25_WriteEnable(); // Make sure we can write...
 80038e6:	f7ff ffad 	bl	8003844 <W25_WriteEnable>
	while(count) {
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 80038ea:	f8df a080 	ldr.w	sl, [pc, #128]	@ 800396c <W25_PageProgram+0x90>
	int retval = HAL_OK;
 80038ee:	2400      	movs	r4, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80038f0:	f04f 0902 	mov.w	r9, #2
	while(count) {
 80038f4:	b91f      	cbnz	r7, 80038fe <W25_PageProgram+0x22>
		address += count_this_pass;
		buf += count_this_pass;
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
	}
	return retval;
} 
 80038f6:	4620      	mov	r0, r4
 80038f8:	b002      	add	sp, #8
 80038fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 80038fe:	b2f5      	uxtb	r5, r6
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003900:	0c33      	lsrs	r3, r6, #16
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8003902:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8003906:	42bd      	cmp	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003908:	f88d 3005 	strb.w	r3, [sp, #5]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800390c:	f04f 0200 	mov.w	r2, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003910:	ba73      	rev16	r3, r6
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003912:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 800391a:	f8ad 3006 	strh.w	r3, [sp, #6]
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 800391e:	bf28      	it	cs
 8003920:	463d      	movcs	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003922:	f88d 9004 	strb.w	r9, [sp, #4]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003926:	f002 f90d 	bl	8005b44 <HAL_GPIO_WritePin>
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 800392a:	2204      	movs	r2, #4
 800392c:	480f      	ldr	r0, [pc, #60]	@ (800396c <W25_PageProgram+0x90>)
 800392e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003932:	eb0d 0102 	add.w	r1, sp, r2
 8003936:	f003 f88e 	bl	8006a56 <HAL_SPI_Transmit>
		if(retval == HAL_OK)
 800393a:	4604      	mov	r4, r0
 800393c:	b938      	cbnz	r0, 800394e <W25_PageProgram+0x72>
		  retval = HAL_SPI_Transmit(&hspi1, buf, count_this_pass, TIMEOUT); // Write page data
 800393e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003942:	b2aa      	uxth	r2, r5
 8003944:	4641      	mov	r1, r8
 8003946:	4650      	mov	r0, sl
 8003948:	f003 f885 	bl	8006a56 <HAL_SPI_Transmit>
 800394c:	4604      	mov	r4, r0
		W25_CS_DISABLE();
 800394e:	2201      	movs	r2, #1
 8003950:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003958:	f002 f8f4 	bl	8005b44 <HAL_GPIO_WritePin>
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 800395c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		count -= count_this_pass;
 8003960:	1b7f      	subs	r7, r7, r5
		address += count_this_pass;
 8003962:	442e      	add	r6, r5
		buf += count_this_pass;
 8003964:	44a8      	add	r8, r5
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8003966:	f7ff fed1 	bl	800370c <W25_DelayWhileBusy>
 800396a:	e7c3      	b.n	80038f4 <W25_PageProgram+0x18>
 800396c:	20001308 	.word	0x20001308

08003970 <W25_ReadData>:

// Winbond 8.2.6 Read Data (03h)
// The only limit for quantity of data is memory / device size
int W25_ReadData(uint32_t address, uint8_t *buf, int bufSize)
{
 8003970:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8003972:	2303      	movs	r3, #3
 8003974:	f88d 3004 	strb.w	r3, [sp, #4]
 8003978:	0c03      	lsrs	r3, r0, #16
 800397a:	ba40      	rev16	r0, r0
 800397c:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 8003980:	460d      	mov	r5, r1
	//printf("+%s(Addr 0x%06X, buf 0x%08X, Len 0x%04X)\r\n",__func__,address,buf,bufSize);
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003982:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003986:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
{
 800398a:	4616      	mov	r6, r2
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800398c:	2200      	movs	r2, #0
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 800398e:	f88d 3005 	strb.w	r3, [sp, #5]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003992:	f002 f8d7 	bl	8005b44 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), 500); // Send Read Data command with address
 8003996:	2204      	movs	r2, #4
 8003998:	480d      	ldr	r0, [pc, #52]	@ (80039d0 <W25_ReadData+0x60>)
 800399a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800399e:	eb0d 0102 	add.w	r1, sp, r2
 80039a2:	f003 f858 	bl	8006a56 <HAL_SPI_Transmit>
	if(retval != HAL_OK) {
 80039a6:	4604      	mov	r4, r0
 80039a8:	b978      	cbnz	r0, 80039ca <W25_ReadData+0x5a>
		return retval;
	}
	//memset(buf,0,bufSize); // Buffer is transmitted during receive
	retval = HAL_SPI_Receive(&hspi1, buf, bufSize, 2000); // need longer time-outs when using slow SPI clock
 80039aa:	4809      	ldr	r0, [pc, #36]	@ (80039d0 <W25_ReadData+0x60>)
 80039ac:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80039b0:	b2b2      	uxth	r2, r6
 80039b2:	4629      	mov	r1, r5
 80039b4:	f003 fa49 	bl	8006e4a <HAL_SPI_Receive>
	if(retval != HAL_OK)
 80039b8:	4604      	mov	r4, r0
 80039ba:	b130      	cbz	r0, 80039ca <W25_ReadData+0x5a>

	W25_CS_DISABLE();
 80039bc:	2201      	movs	r2, #1
 80039be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039c6:	f002 f8bd 	bl	8005b44 <HAL_GPIO_WritePin>

	return retval;
} // W25_ReadData()
 80039ca:	4620      	mov	r0, r4
 80039cc:	b002      	add	sp, #8
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
 80039d0:	20001308 	.word	0x20001308

080039d4 <IsPageValid>:


// Function to check if a page contains valid data
int IsPageValid(uint8_t *page) {
 80039d4:	b510      	push	{r4, lr}
    char *last_semicolon = strrchr((char *)page, ';'); // Find the last semicolon
 80039d6:	213b      	movs	r1, #59	@ 0x3b
 80039d8:	f007 fff2 	bl	800b9c0 <strrchr>
    if (!last_semicolon) {
 80039dc:	4604      	mov	r4, r0
 80039de:	b190      	cbz	r0, 8003a06 <IsPageValid+0x32>
        return 0; // No semicolon found, invalid page
    }

    char *last_param = last_semicolon + 1; // Last parameter starts after the last semicolon
    size_t len = strlen(last_param);
 80039e0:	3001      	adds	r0, #1
 80039e2:	f7fc fc55 	bl	8000290 <strlen>

    // Ensure the last parameter is exactly 6 characters and numeric
    if (len < 6) {
 80039e6:	2805      	cmp	r0, #5
 80039e8:	d90d      	bls.n	8003a06 <IsPageValid+0x32>
 80039ea:	1da2      	adds	r2, r4, #6
        return 0; // Too short to be valid
    }

    for (int i = 0; i < 6; ++i) {
        if ((last_param[i] < '0' || last_param[i] > '9' ) &&
 80039ec:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80039f0:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80039f4:	2909      	cmp	r1, #9
 80039f6:	d902      	bls.n	80039fe <IsPageValid+0x2a>
 80039f8:	3b61      	subs	r3, #97	@ 0x61
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d803      	bhi.n	8003a06 <IsPageValid+0x32>
    for (int i = 0; i < 6; ++i) {
 80039fe:	4294      	cmp	r4, r2
 8003a00:	d1f4      	bne.n	80039ec <IsPageValid+0x18>
                (last_param[i] < 'a' || last_param[i] > 'f')) {
            return 0; // Not numeric
        }
    }

    return 1; // Page contains valid data
 8003a02:	2001      	movs	r0, #1
}
 8003a04:	bd10      	pop	{r4, pc}
        return 0; // No semicolon found, invalid page
 8003a06:	2000      	movs	r0, #0
 8003a08:	e7fc      	b.n	8003a04 <IsPageValid+0x30>
	...

08003a0c <UpdatePageAddress>:


// Function to update the last parameter of the page (address)
void UpdatePageAddress(uint8_t *page, uint32_t new_address) {
 8003a0c:	b513      	push	{r0, r1, r4, lr}
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4604      	mov	r4, r0
    char new_address_str[7];
    snprintf(new_address_str, sizeof(new_address_str), "%06lx", new_address);
 8003a12:	4a08      	ldr	r2, [pc, #32]	@ (8003a34 <UpdatePageAddress+0x28>)
 8003a14:	2107      	movs	r1, #7
 8003a16:	4668      	mov	r0, sp
 8003a18:	f007 fe9c 	bl	800b754 <sniprintf>
    memcpy(page + strlen((char *)page) - 6, new_address_str, 6); // Overwrite last 6 characters
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	f7fc fc37 	bl	8000290 <strlen>
 8003a22:	1f83      	subs	r3, r0, #6
 8003a24:	9800      	ldr	r0, [sp, #0]
 8003a26:	50e0      	str	r0, [r4, r3]
 8003a28:	18e2      	adds	r2, r4, r3
 8003a2a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003a2e:	8093      	strh	r3, [r2, #4]
}
 8003a30:	b002      	add	sp, #8
 8003a32:	bd10      	pop	{r4, pc}
 8003a34:	08010f1f 	.word	0x08010f1f

08003a38 <W25_ShiftLeftFlashDataByPage>:

int W25_ShiftLeftFlashDataByPage(void) {
 8003a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a3c:	f5ad 5d85 	sub.w	sp, sp, #4256	@ 0x10a0
	uint8_t current_sector_buffer[SECTOR_SIZE];
	uint8_t next_page_buffer[PAGE_SIZE];
    uint32_t current_sector_start = FLASH_START_ADDRESS;

    Debug_printf("\n\n ------------------------------ IN SHIFT LEFT: ----------------------------\n\n");
 8003a40:	4899      	ldr	r0, [pc, #612]	@ (8003ca8 <W25_ShiftLeftFlashDataByPage+0x270>)
int W25_ShiftLeftFlashDataByPage(void) {
 8003a42:	b087      	sub	sp, #28
    Debug_printf("\n\n ------------------------------ IN SHIFT LEFT: ----------------------------\n\n");
 8003a44:	f001 f87e 	bl	8004b44 <Debug_printf>
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 8003a48:	f44f 5540 	mov.w	r5, #12288	@ 0x3000
    while (current_sector_start < FLASH_END_ADDRESS) {
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;

        W25_Reset();
 8003a4c:	f7ff fe6f 	bl	800372e <W25_Reset>
        // Step 1: Read the entire current sector into the buffer
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8003a50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a54:	a92e      	add	r1, sp, #184	@ 0xb8
 8003a56:	4628      	mov	r0, r5
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 8003a58:	f505 5880 	add.w	r8, r5, #4096	@ 0x1000
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8003a5c:	f7ff ff88 	bl	8003970 <W25_ReadData>
 8003a60:	b148      	cbz	r0, 8003a76 <W25_ShiftLeftFlashDataByPage+0x3e>
        	Debug_printf("READING ALL THE SECTOR: ERROR\n");
 8003a62:	4892      	ldr	r0, [pc, #584]	@ (8003cac <W25_ShiftLeftFlashDataByPage+0x274>)

        // Step 2: Read the first page of the next sector (if exists)
        if (next_sector_start < FLASH_END_ADDRESS) {
        	W25_Reset();
            if (W25_ReadData(next_sector_start, next_page_buffer, PAGE_SIZE) != HAL_OK) {
            	Debug_printf("\nREADING FIRST PAGE OF THE NEXT SECTOR: ERROR\n");
 8003a64:	f001 f86e 	bl	8004b44 <Debug_printf>
            return HAL_ERROR; // Exit if read fails
 8003a68:	2401      	movs	r4, #1
        current_sector_start = next_sector_start;
    }

    Debug_printf("\n\n ----------------------END OF SHIFT LEFT -----------------------------\n\n");
    return HAL_OK;
}
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	f50d 5d85 	add.w	sp, sp, #4256	@ 0x10a0
 8003a70:	b007      	add	sp, #28
 8003a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        	char spi_flash_data_intro[] = "\nFirst page of Flash DATA at Reading All Sector: \n";
 8003a76:	4b8e      	ldr	r3, [pc, #568]	@ (8003cb0 <W25_ShiftLeftFlashDataByPage+0x278>)
 8003a78:	aa01      	add	r2, sp, #4
 8003a7a:	f103 0630 	add.w	r6, r3, #48	@ 0x30
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	6859      	ldr	r1, [r3, #4]
 8003a82:	4614      	mov	r4, r2
 8003a84:	c403      	stmia	r4!, {r0, r1}
 8003a86:	3308      	adds	r3, #8
 8003a88:	42b3      	cmp	r3, r6
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	d1f7      	bne.n	8003a7e <W25_ShiftLeftFlashDataByPage+0x46>
 8003a8e:	8819      	ldrh	r1, [r3, #0]
 8003a90:	789b      	ldrb	r3, [r3, #2]
 8003a92:	8021      	strh	r1, [r4, #0]
 8003a94:	70a3      	strb	r3, [r4, #2]
			HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8003a96:	a801      	add	r0, sp, #4
 8003a98:	f7fc fbfa 	bl	8000290 <strlen>
 8003a9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003aa0:	b282      	uxth	r2, r0
 8003aa2:	a901      	add	r1, sp, #4
 8003aa4:	4883      	ldr	r0, [pc, #524]	@ (8003cb4 <W25_ShiftLeftFlashDataByPage+0x27c>)
 8003aa6:	f003 ffa5 	bl	80079f4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, current_sector_buffer, 128, 1000);
 8003aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003aae:	2280      	movs	r2, #128	@ 0x80
 8003ab0:	a92e      	add	r1, sp, #184	@ 0xb8
 8003ab2:	4880      	ldr	r0, [pc, #512]	@ (8003cb4 <W25_ShiftLeftFlashDataByPage+0x27c>)
 8003ab4:	f003 ff9e 	bl	80079f4 <HAL_UART_Transmit>
			Debug_printf("\n\n");
 8003ab8:	487f      	ldr	r0, [pc, #508]	@ (8003cb8 <W25_ShiftLeftFlashDataByPage+0x280>)
 8003aba:	f001 f843 	bl	8004b44 <Debug_printf>
        if (next_sector_start < FLASH_END_ADDRESS) {
 8003abe:	f5b8 4fa0 	cmp.w	r8, #20480	@ 0x5000
 8003ac2:	d02e      	beq.n	8003b22 <W25_ShiftLeftFlashDataByPage+0xea>
        	W25_Reset();
 8003ac4:	f7ff fe33 	bl	800372e <W25_Reset>
            if (W25_ReadData(next_sector_start, next_page_buffer, PAGE_SIZE) != HAL_OK) {
 8003ac8:	2280      	movs	r2, #128	@ 0x80
 8003aca:	a90e      	add	r1, sp, #56	@ 0x38
 8003acc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003ad0:	f7ff ff4e 	bl	8003970 <W25_ReadData>
 8003ad4:	b108      	cbz	r0, 8003ada <W25_ShiftLeftFlashDataByPage+0xa2>
            	Debug_printf("\nREADING FIRST PAGE OF THE NEXT SECTOR: ERROR\n");
 8003ad6:	4879      	ldr	r0, [pc, #484]	@ (8003cbc <W25_ShiftLeftFlashDataByPage+0x284>)
 8003ad8:	e7c4      	b.n	8003a64 <W25_ShiftLeftFlashDataByPage+0x2c>
            	char spi_flash_data_intro[] = "First page of Flash DATA at reading NEXT SECTOR: \n";
 8003ada:	4b79      	ldr	r3, [pc, #484]	@ (8003cc0 <W25_ShiftLeftFlashDataByPage+0x288>)
 8003adc:	aa01      	add	r2, sp, #4
 8003ade:	f103 0630 	add.w	r6, r3, #48	@ 0x30
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	6859      	ldr	r1, [r3, #4]
 8003ae6:	4614      	mov	r4, r2
 8003ae8:	c403      	stmia	r4!, {r0, r1}
 8003aea:	3308      	adds	r3, #8
 8003aec:	42b3      	cmp	r3, r6
 8003aee:	4622      	mov	r2, r4
 8003af0:	d1f7      	bne.n	8003ae2 <W25_ShiftLeftFlashDataByPage+0xaa>
 8003af2:	8819      	ldrh	r1, [r3, #0]
 8003af4:	789b      	ldrb	r3, [r3, #2]
 8003af6:	8021      	strh	r1, [r4, #0]
 8003af8:	70a3      	strb	r3, [r4, #2]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8003afa:	a801      	add	r0, sp, #4
 8003afc:	f7fc fbc8 	bl	8000290 <strlen>
 8003b00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b04:	b282      	uxth	r2, r0
 8003b06:	a901      	add	r1, sp, #4
 8003b08:	486a      	ldr	r0, [pc, #424]	@ (8003cb4 <W25_ShiftLeftFlashDataByPage+0x27c>)
 8003b0a:	f003 ff73 	bl	80079f4 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, next_page_buffer, 128, 1000);
 8003b0e:	4869      	ldr	r0, [pc, #420]	@ (8003cb4 <W25_ShiftLeftFlashDataByPage+0x27c>)
 8003b10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b14:	2280      	movs	r2, #128	@ 0x80
 8003b16:	a90e      	add	r1, sp, #56	@ 0x38
 8003b18:	f003 ff6c 	bl	80079f4 <HAL_UART_Transmit>
				Debug_printf("\n\n");
 8003b1c:	4866      	ldr	r0, [pc, #408]	@ (8003cb8 <W25_ShiftLeftFlashDataByPage+0x280>)
 8003b1e:	f001 f811 	bl	8004b44 <Debug_printf>
            	Debug_printf("\n-------INVALID PAGE at %08lx-------\n", offset+PAGE_SIZE);
 8003b22:	f8df b1b8 	ldr.w	fp, [pc, #440]	@ 8003cdc <W25_ShiftLeftFlashDataByPage+0x2a4>
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8003b26:	4f63      	ldr	r7, [pc, #396]	@ (8003cb4 <W25_ShiftLeftFlashDataByPage+0x27c>)
				Debug_printf("\n\n");
 8003b28:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8003cb8 <W25_ShiftLeftFlashDataByPage+0x280>
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 8003b2c:	ac2e      	add	r4, sp, #184	@ 0xb8
 8003b2e:	2600      	movs	r6, #0
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 8003b30:	46a1      	mov	r9, r4
 8003b32:	3480      	adds	r4, #128	@ 0x80
 8003b34:	4620      	mov	r0, r4
 8003b36:	f7ff ff4d 	bl	80039d4 <IsPageValid>
 8003b3a:	3680      	adds	r6, #128	@ 0x80
            	Debug_printf("\n\n------VALID PAGE at %08lx-------\n", offset+PAGE_SIZE);
 8003b3c:	4631      	mov	r1, r6
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	d057      	beq.n	8003bf2 <W25_ShiftLeftFlashDataByPage+0x1ba>
            	Debug_printf("\n\n------VALID PAGE at %08lx-------\n", offset+PAGE_SIZE);
 8003b42:	4860      	ldr	r0, [pc, #384]	@ (8003cc4 <W25_ShiftLeftFlashDataByPage+0x28c>)
 8003b44:	f000 fffe 	bl	8004b44 <Debug_printf>
            	char spi_flash_data_intro[] = "Valid Page Data: \n";
 8003b48:	4b5f      	ldr	r3, [pc, #380]	@ (8003cc8 <W25_ShiftLeftFlashDataByPage+0x290>)
 8003b4a:	aa01      	add	r2, sp, #4
 8003b4c:	f103 0e10 	add.w	lr, r3, #16
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	4694      	mov	ip, r2
 8003b56:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	4573      	cmp	r3, lr
 8003b5e:	4662      	mov	r2, ip
 8003b60:	d1f6      	bne.n	8003b50 <W25_ShiftLeftFlashDataByPage+0x118>
 8003b62:	8819      	ldrh	r1, [r3, #0]
 8003b64:	789b      	ldrb	r3, [r3, #2]
 8003b66:	f8ac 1000 	strh.w	r1, [ip]
 8003b6a:	f88c 3002 	strb.w	r3, [ip, #2]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8003b6e:	a801      	add	r0, sp, #4
 8003b70:	f7fc fb8e 	bl	8000290 <strlen>
 8003b74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b78:	b282      	uxth	r2, r0
 8003b7a:	a901      	add	r1, sp, #4
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	f003 ff39 	bl	80079f4 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, current_sector_buffer + offset+ PAGE_SIZE, 128, 1000);
 8003b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b86:	2280      	movs	r2, #128	@ 0x80
 8003b88:	4621      	mov	r1, r4
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	f003 ff32 	bl	80079f4 <HAL_UART_Transmit>
				Debug_printf("\n\n");
 8003b90:	4650      	mov	r0, sl
 8003b92:	f000 ffd7 	bl	8004b44 <Debug_printf>
                memcpy(current_sector_buffer + offset, current_sector_buffer + offset + PAGE_SIZE, PAGE_SIZE);
 8003b96:	4621      	mov	r1, r4
 8003b98:	2280      	movs	r2, #128	@ 0x80
 8003b9a:	4648      	mov	r0, r9
 8003b9c:	f008 fd2a 	bl	800c5f4 <memcpy>
                UpdatePageAddress(current_sector_buffer + offset, current_sector_start + offset);
 8003ba0:	f1a5 0180 	sub.w	r1, r5, #128	@ 0x80
 8003ba4:	4431      	add	r1, r6
 8003ba6:	4648      	mov	r0, r9
 8003ba8:	f7ff ff30 	bl	8003a0c <UpdatePageAddress>
        for (uint32_t offset = 0; offset < SECTOR_SIZE - PAGE_SIZE; offset += PAGE_SIZE) {
 8003bac:	f5b6 6f78 	cmp.w	r6, #3968	@ 0xf80
 8003bb0:	d1be      	bne.n	8003b30 <W25_ShiftLeftFlashDataByPage+0xf8>
        if (next_sector_start < FLASH_END_ADDRESS && IsPageValid(next_page_buffer)) {
 8003bb2:	f5b8 4fa0 	cmp.w	r8, #20480	@ 0x5000
 8003bb6:	d04c      	beq.n	8003c52 <W25_ShiftLeftFlashDataByPage+0x21a>
 8003bb8:	a80e      	add	r0, sp, #56	@ 0x38
 8003bba:	f7ff ff0b 	bl	80039d4 <IsPageValid>
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	d047      	beq.n	8003c52 <W25_ShiftLeftFlashDataByPage+0x21a>
            memcpy(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), next_page_buffer, PAGE_SIZE);
 8003bc2:	f50d 5081 	add.w	r0, sp, #4128	@ 0x1020
 8003bc6:	a90e      	add	r1, sp, #56	@ 0x38
 8003bc8:	2280      	movs	r2, #128	@ 0x80
 8003bca:	3018      	adds	r0, #24
 8003bcc:	f008 fd12 	bl	800c5f4 <memcpy>
            UpdatePageAddress(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), current_sector_start + (SECTOR_SIZE - PAGE_SIZE));
 8003bd0:	f50d 5081 	add.w	r0, sp, #4128	@ 0x1020
 8003bd4:	f44f 517e 	mov.w	r1, #16256	@ 0x3f80
 8003bd8:	3018      	adds	r0, #24
 8003bda:	f7ff ff17 	bl	8003a0c <UpdatePageAddress>
        W25_Reset();
 8003bde:	f7ff fda6 	bl	800372e <W25_Reset>
        if (W25_SectorErase(current_sector_start) != HAL_OK) {
 8003be2:	4628      	mov	r0, r5
 8003be4:	f7ff fe4e 	bl	8003884 <W25_SectorErase>
 8003be8:	4604      	mov	r4, r0
 8003bea:	2800      	cmp	r0, #0
 8003bec:	d039      	beq.n	8003c62 <W25_ShiftLeftFlashDataByPage+0x22a>
        	Debug_printf("Erase ALL CURRENT SECTOR: ERROR\n");
 8003bee:	4837      	ldr	r0, [pc, #220]	@ (8003ccc <W25_ShiftLeftFlashDataByPage+0x294>)
 8003bf0:	e738      	b.n	8003a64 <W25_ShiftLeftFlashDataByPage+0x2c>
            	Debug_printf("\n-------INVALID PAGE at %08lx-------\n", offset+PAGE_SIZE);
 8003bf2:	4658      	mov	r0, fp
 8003bf4:	f000 ffa6 	bl	8004b44 <Debug_printf>
            	char spi_flash_data_intro[] = "Invalid Page Data: \n";
 8003bf8:	4b35      	ldr	r3, [pc, #212]	@ (8003cd0 <W25_ShiftLeftFlashDataByPage+0x298>)
 8003bfa:	aa01      	add	r2, sp, #4
 8003bfc:	f103 0e10 	add.w	lr, r3, #16
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	4694      	mov	ip, r2
 8003c06:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	4573      	cmp	r3, lr
 8003c0e:	4662      	mov	r2, ip
 8003c10:	d1f6      	bne.n	8003c00 <W25_ShiftLeftFlashDataByPage+0x1c8>
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	791b      	ldrb	r3, [r3, #4]
 8003c16:	f8cc 0000 	str.w	r0, [ip]
 8003c1a:	f88c 3004 	strb.w	r3, [ip, #4]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8003c1e:	a801      	add	r0, sp, #4
 8003c20:	f7fc fb36 	bl	8000290 <strlen>
 8003c24:	a901      	add	r1, sp, #4
 8003c26:	b282      	uxth	r2, r0
 8003c28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c2c:	4638      	mov	r0, r7
 8003c2e:	f003 fee1 	bl	80079f4 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, current_sector_buffer + offset +PAGE_SIZE, 128, 1000);
 8003c32:	4621      	mov	r1, r4
 8003c34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c38:	2280      	movs	r2, #128	@ 0x80
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	f003 feda 	bl	80079f4 <HAL_UART_Transmit>
				Debug_printf("\n\n");
 8003c40:	4650      	mov	r0, sl
 8003c42:	f000 ff7f 	bl	8004b44 <Debug_printf>
                memset(current_sector_buffer + offset, 0xFF, PAGE_SIZE); // Invalidate the page
 8003c46:	2280      	movs	r2, #128	@ 0x80
 8003c48:	21ff      	movs	r1, #255	@ 0xff
 8003c4a:	4648      	mov	r0, r9
 8003c4c:	f007 fe7e 	bl	800b94c <memset>
 8003c50:	e7ac      	b.n	8003bac <W25_ShiftLeftFlashDataByPage+0x174>
        	memset(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), 0xFF, PAGE_SIZE); // Invalidate the last page
 8003c52:	f50d 5081 	add.w	r0, sp, #4128	@ 0x1020
 8003c56:	2280      	movs	r2, #128	@ 0x80
 8003c58:	21ff      	movs	r1, #255	@ 0xff
 8003c5a:	3018      	adds	r0, #24
 8003c5c:	f007 fe76 	bl	800b94c <memset>
 8003c60:	e7bd      	b.n	8003bde <W25_ShiftLeftFlashDataByPage+0x1a6>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 8003c62:	4606      	mov	r6, r0
        	W25_Reset();
 8003c64:	f7ff fd63 	bl	800372e <W25_Reset>
        	uint8_t *page_data = current_sector_buffer + offset;
 8003c68:	ab2e      	add	r3, sp, #184	@ 0xb8
 8003c6a:	199f      	adds	r7, r3, r6
        	if (IsPageValid(page_data)) {
 8003c6c:	4638      	mov	r0, r7
 8003c6e:	f7ff feb1 	bl	80039d4 <IsPageValid>
 8003c72:	b150      	cbz	r0, 8003c8a <W25_ShiftLeftFlashDataByPage+0x252>
        		if (W25_PageProgram(current_sector_start + offset, current_sector_buffer + offset, PAGE_SIZE) != HAL_OK) {
 8003c74:	2280      	movs	r2, #128	@ 0x80
 8003c76:	4639      	mov	r1, r7
 8003c78:	1970      	adds	r0, r6, r5
 8003c7a:	f7ff fe2f 	bl	80038dc <W25_PageProgram>
 8003c7e:	b120      	cbz	r0, 8003c8a <W25_ShiftLeftFlashDataByPage+0x252>
					Debug_printf("PAGE PROGRAM: ERROR at page offset %08lx\n", offset);
 8003c80:	4814      	ldr	r0, [pc, #80]	@ (8003cd4 <W25_ShiftLeftFlashDataByPage+0x29c>)
 8003c82:	4631      	mov	r1, r6
 8003c84:	f000 ff5e 	bl	8004b44 <Debug_printf>
					return HAL_ERROR; // Exit if write fails
 8003c88:	e6ee      	b.n	8003a68 <W25_ShiftLeftFlashDataByPage+0x30>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 8003c8a:	3680      	adds	r6, #128	@ 0x80
 8003c8c:	f5b6 5f80 	cmp.w	r6, #4096	@ 0x1000
 8003c90:	d1e8      	bne.n	8003c64 <W25_ShiftLeftFlashDataByPage+0x22c>
    while (current_sector_start < FLASH_END_ADDRESS) {
 8003c92:	f5b8 4fa0 	cmp.w	r8, #20480	@ 0x5000
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 8003c96:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
    while (current_sector_start < FLASH_END_ADDRESS) {
 8003c9a:	f47f aed7 	bne.w	8003a4c <W25_ShiftLeftFlashDataByPage+0x14>
    Debug_printf("\n\n ----------------------END OF SHIFT LEFT -----------------------------\n\n");
 8003c9e:	480e      	ldr	r0, [pc, #56]	@ (8003cd8 <W25_ShiftLeftFlashDataByPage+0x2a0>)
 8003ca0:	f000 ff50 	bl	8004b44 <Debug_printf>
    return HAL_OK;
 8003ca4:	e6e1      	b.n	8003a6a <W25_ShiftLeftFlashDataByPage+0x32>
 8003ca6:	bf00      	nop
 8003ca8:	08010f25 	.word	0x08010f25
 8003cac:	08010f75 	.word	0x08010f75
 8003cb0:	080110a3 	.word	0x080110a3
 8003cb4:	200011d0 	.word	0x200011d0
 8003cb8:	080109d9 	.word	0x080109d9
 8003cbc:	08010f94 	.word	0x08010f94
 8003cc0:	080110d6 	.word	0x080110d6
 8003cc4:	08010fc3 	.word	0x08010fc3
 8003cc8:	08011109 	.word	0x08011109
 8003ccc:	0801100d 	.word	0x0801100d
 8003cd0:	0801111c 	.word	0x0801111c
 8003cd4:	0801102e 	.word	0x0801102e
 8003cd8:	08011058 	.word	0x08011058
 8003cdc:	08010fe7 	.word	0x08010fe7

08003ce0 <calculate_epoch_time_utc>:
		osDelay(1000);
		memset(flashBufferTaxReceived, 0x00,128);
	}
}

uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8003ce0:	b500      	push	{lr}
    struct tm timeinfo;
    // Set up time structure
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8003ce2:	6883      	ldr	r3, [r0, #8]
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8003ce4:	b08b      	sub	sp, #44	@ 0x2c
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8003ce6:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8003cea:	9306      	str	r3, [sp, #24]
    timeinfo.tm_mon = date->Mon - 1;
 8003cec:	6843      	ldr	r3, [r0, #4]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	9305      	str	r3, [sp, #20]
    timeinfo.tm_mday = date->Day;
 8003cf2:	6803      	ldr	r3, [r0, #0]
 8003cf4:	9304      	str	r3, [sp, #16]
    timeinfo.tm_hour = time->hour;
 8003cf6:	680b      	ldr	r3, [r1, #0]
 8003cf8:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = time->min;
 8003cfa:	684b      	ldr	r3, [r1, #4]
 8003cfc:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = time->sec;
 8003cfe:	688b      	ldr	r3, [r1, #8]
 8003d00:	9301      	str	r3, [sp, #4]
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary

    // Get the local epoch time and then adjust for timezone offset
    time_t local_epoch = mktime(&timeinfo);
 8003d02:	a801      	add	r0, sp, #4
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary
 8003d04:	f04f 33ff 	mov.w	r3, #4294967295
 8003d08:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t local_epoch = mktime(&timeinfo);
 8003d0a:	f007 ff59 	bl	800bbc0 <mktime>
    return (uint32_t)(local_epoch + 25200); // Subtract timezone offset
}
 8003d0e:	f500 40c4 	add.w	r0, r0, #25088	@ 0x6200
 8003d12:	3070      	adds	r0, #112	@ 0x70
 8003d14:	b00b      	add	sp, #44	@ 0x2c
 8003d16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003d1c <format_rmc_data>:

void format_rmc_data(RMCSTRUCT *rmc_data, char *output_buffer, size_t buffer_size) {
 8003d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d20:	ed2d 8b04 	vpush	{d8-d9}
 8003d24:	4604      	mov	r4, r0
 8003d26:	b09b      	sub	sp, #108	@ 0x6c
 8003d28:	e9cd 1218 	strd	r1, r2, [sp, #96]	@ 0x60
	//uart_transmit_string(&huart1, (uint8_t*) "Format RMC data");
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8003d2c:	4601      	mov	r1, r0
 8003d2e:	3010      	adds	r0, #16
 8003d30:	f7ff ffd6 	bl	8003ce0 <calculate_epoch_time_utc>

    // Format all fields in a single line with semicolon separation, including date
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8003d34:	69a3      	ldr	r3, [r4, #24]
 8003d36:	9314      	str	r3, [sp, #80]	@ 0x50
 8003d38:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8003d3c:	4607      	mov	r7, r0
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8003d3e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003d40:	9315      	str	r3, [sp, #84]	@ 0x54
 8003d42:	f7fc fc11 	bl	8000568 <__aeabi_f2d>
 8003d46:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8003d4a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003d4c:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8003d50:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
 8003d54:	f894 8050 	ldrb.w	r8, [r4, #80]	@ 0x50
 8003d58:	f7fc fc06 	bl	8000568 <__aeabi_f2d>
 8003d5c:	e9d4 9a00 	ldrd	r9, sl, [r4]
 8003d60:	ed94 8b0e 	vldr	d8, [r4, #56]	@ 0x38
 8003d64:	ed94 9b12 	vldr	d9, [r4, #72]	@ 0x48
 8003d68:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
 8003d6c:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8003d6e:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4811      	ldr	r0, [pc, #68]	@ (8003dbc <format_rmc_data+0xa0>)
 8003d78:	4911      	ldr	r1, [pc, #68]	@ (8003dc0 <format_rmc_data+0xa4>)
 8003d7a:	9608      	str	r6, [sp, #32]
 8003d7c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003d80:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003d82:	4a10      	ldr	r2, [pc, #64]	@ (8003dc4 <format_rmc_data+0xa8>)
 8003d84:	f8cd 9008 	str.w	r9, [sp, #8]
 8003d88:	2c00      	cmp	r4, #0
 8003d8a:	bf08      	it	eq
 8003d8c:	4601      	moveq	r1, r0
 8003d8e:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003d92:	e9cd 5300 	strd	r5, r3, [sp]
 8003d96:	e9cd 1712 	strd	r1, r7, [sp, #72]	@ 0x48
 8003d9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003d9c:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 8003da0:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003da4:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8003da8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8003dac:	f007 fcd2 	bl	800b754 <sniprintf>
}
 8003db0:	b01b      	add	sp, #108	@ 0x6c
 8003db2:	ecbd 8b04 	vpop	{d8-d9}
 8003db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dba:	bf00      	nop
 8003dbc:	0801116a 	.word	0x0801116a
 8003dc0:	08011164 	.word	0x08011164
 8003dc4:	08011172 	.word	0x08011172

08003dc8 <saveRMC>:


void saveRMC(){
 8003dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
	int k = 0;
	int j = 0;
	W25_Reset();
	if (is_erased_rmc == 0){
 8003dcc:	4c8a      	ldr	r4, [pc, #552]	@ (8003ff8 <saveRMC+0x230>)
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 8003dce:	488b      	ldr	r0, [pc, #556]	@ (8003ffc <saveRMC+0x234>)
void saveRMC(){
 8003dd0:	b085      	sub	sp, #20
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 8003dd2:	f000 feb7 	bl	8004b44 <Debug_printf>
	W25_Reset();
 8003dd6:	f7ff fcaa 	bl	800372e <W25_Reset>
	if (is_erased_rmc == 0){
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	b92b      	cbnz	r3, 8003dea <saveRMC+0x22>
		W25_SectorErase(address_rmc);
 8003dde:	4b88      	ldr	r3, [pc, #544]	@ (8004000 <saveRMC+0x238>)
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	f7ff fd4f 	bl	8003884 <W25_SectorErase>
		is_erased_rmc = 1;
 8003de6:	2301      	movs	r3, #1
 8003de8:	6023      	str	r3, [r4, #0]
	}
	
	for(size_t i = 0; i < 128; i++){
 8003dea:	4a86      	ldr	r2, [pc, #536]	@ (8004004 <saveRMC+0x23c>)
 8003dec:	2300      	movs	r3, #0
 8003dee:	4616      	mov	r6, r2
		if(rmcBufferDemo[i] != 0x00 && rmcBufferDemo[i+1] == 0x00){
 8003df0:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003df4:	461d      	mov	r5, r3
 8003df6:	3301      	adds	r3, #1
 8003df8:	b109      	cbz	r1, 8003dfe <saveRMC+0x36>
 8003dfa:	7811      	ldrb	r1, [r2, #0]
 8003dfc:	b111      	cbz	r1, 8003e04 <saveRMC+0x3c>
	for(size_t i = 0; i < 128; i++){
 8003dfe:	2b80      	cmp	r3, #128	@ 0x80
 8003e00:	d1f6      	bne.n	8003df0 <saveRMC+0x28>
	int k = 0;
 8003e02:	2500      	movs	r5, #0
			k = i;
			break;
		}
	}
	char addr_out[10];
	sprintf(addr_out, "%08lx", address_rmc);
 8003e04:	4c7e      	ldr	r4, [pc, #504]	@ (8004000 <saveRMC+0x238>)
 8003e06:	4980      	ldr	r1, [pc, #512]	@ (8004008 <saveRMC+0x240>)
 8003e08:	6822      	ldr	r2, [r4, #0]
 8003e0a:	a801      	add	r0, sp, #4
 8003e0c:	f007 fcd6 	bl	800b7bc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 8, 1000);
 8003e10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e14:	2208      	movs	r2, #8
 8003e16:	a901      	add	r1, sp, #4
 8003e18:	487c      	ldr	r0, [pc, #496]	@ (800400c <saveRMC+0x244>)
 8003e1a:	f003 fdeb 	bl	80079f4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8003e1e:	497c      	ldr	r1, [pc, #496]	@ (8004010 <saveRMC+0x248>)
 8003e20:	487a      	ldr	r0, [pc, #488]	@ (800400c <saveRMC+0x244>)
 8003e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e26:	2201      	movs	r2, #1
 8003e28:	f003 fde4 	bl	80079f4 <HAL_UART_Transmit>
	
	k++;
	rmcBufferDemo[k] = ';';
 8003e2c:	1973      	adds	r3, r6, r5
 8003e2e:	223b      	movs	r2, #59	@ 0x3b
 8003e30:	705a      	strb	r2, [r3, #1]
	for(size_t idx = 6; idx > 0 ; idx--){
		k++;
		rmcBufferDemo[k] = addr_out[8 - idx];
 8003e32:	1cab      	adds	r3, r5, #2
 8003e34:	f8dd 1006 	ldr.w	r1, [sp, #6]
 8003e38:	50f1      	str	r1, [r6, r3]
 8003e3a:	18f2      	adds	r2, r6, r3
 8003e3c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8003e40:	8093      	strh	r3, [r2, #4]
	}
	
	for (j=0;j<110-k-1;j++)
	{
		rmcBufferDemo[j+k+1]=0x00;
 8003e42:	f105 0008 	add.w	r0, r5, #8
 8003e46:	f1c5 0266 	rsb	r2, r5, #102	@ 0x66
 8003e4a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8003e4e:	2100      	movs	r1, #0
 8003e50:	4430      	add	r0, r6
 8003e52:	f007 fd7b 	bl	800b94c <memset>
	}

	if(address_rmc % 0x1000 == 0x0000){
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5c:	b92b      	cbnz	r3, 8003e6a <saveRMC+0xa2>
		Debug_printf("\n\nErasing SECTOR IN ADVANCE\n");
 8003e5e:	486d      	ldr	r0, [pc, #436]	@ (8004014 <saveRMC+0x24c>)
 8003e60:	f000 fe70 	bl	8004b44 <Debug_printf>
		W25_SectorErase(address_rmc);
 8003e64:	6820      	ldr	r0, [r4, #0]
 8003e66:	f7ff fd0d 	bl	8003884 <W25_SectorErase>
	}

	W25_Reset();
 8003e6a:	f7ff fc60 	bl	800372e <W25_Reset>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8003e6e:	2280      	movs	r2, #128	@ 0x80
 8003e70:	4964      	ldr	r1, [pc, #400]	@ (8004004 <saveRMC+0x23c>)
 8003e72:	6820      	ldr	r0, [r4, #0]
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
	uart_transmit_string(&huart1, rmcBufferDemo);
	current_addr = address_rmc;
 8003e74:	4e68      	ldr	r6, [pc, #416]	@ (8004018 <saveRMC+0x250>)
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8003e76:	f7ff fd31 	bl	80038dc <W25_PageProgram>
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
 8003e7a:	4968      	ldr	r1, [pc, #416]	@ (800401c <saveRMC+0x254>)
 8003e7c:	4863      	ldr	r0, [pc, #396]	@ (800400c <saveRMC+0x244>)
 8003e7e:	f000 fe51 	bl	8004b24 <uart_transmit_string>
	uart_transmit_string(&huart1, rmcBufferDemo);
 8003e82:	4960      	ldr	r1, [pc, #384]	@ (8004004 <saveRMC+0x23c>)
 8003e84:	4861      	ldr	r0, [pc, #388]	@ (800400c <saveRMC+0x244>)
 8003e86:	f000 fe4d 	bl	8004b24 <uart_transmit_string>
	current_addr = address_rmc;
 8003e8a:	6821      	ldr	r1, [r4, #0]
 8003e8c:	4b64      	ldr	r3, [pc, #400]	@ (8004020 <saveRMC+0x258>)
 8003e8e:	6031      	str	r1, [r6, #0]
	if(address_rmc == FLASH_END_ADDRESS-128){
 8003e90:	f5b1 4f9f 	cmp.w	r1, #20352	@ 0x4f80
 8003e94:	f040 80ad 	bne.w	8003ff2 <saveRMC+0x22a>
		is_flash_overflow = 1;
 8003e98:	2201      	movs	r2, #1
		Debug_printf(" ADDRESS RMC before SHIFT LEFT BY ONE PAGE: %08lx", address_rmc);
 8003e9a:	4862      	ldr	r0, [pc, #392]	@ (8004024 <saveRMC+0x25c>)
		is_flash_overflow = 1;
 8003e9c:	601a      	str	r2, [r3, #0]
		Debug_printf(" ADDRESS RMC before SHIFT LEFT BY ONE PAGE: %08lx", address_rmc);
 8003e9e:	f000 fe51 	bl	8004b44 <Debug_printf>
		W25_Reset();
 8003ea2:	f7ff fc44 	bl	800372e <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 8003ea6:	4960      	ldr	r1, [pc, #384]	@ (8004028 <saveRMC+0x260>)
 8003ea8:	6820      	ldr	r0, [r4, #0]
 8003eaa:	4f60      	ldr	r7, [pc, #384]	@ (800402c <saveRMC+0x264>)
 8003eac:	2280      	movs	r2, #128	@ 0x80
 8003eae:	f7ff fd5f 	bl	8003970 <W25_ReadData>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8003eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eb6:	495c      	ldr	r1, [pc, #368]	@ (8004028 <saveRMC+0x260>)
 8003eb8:	4854      	ldr	r0, [pc, #336]	@ (800400c <saveRMC+0x244>)
 8003eba:	2280      	movs	r2, #128	@ 0x80
 8003ebc:	f003 fd9a 	bl	80079f4 <HAL_UART_Transmit>

		W25_ShiftLeftFlashDataByPage();
 8003ec0:	f7ff fdba 	bl	8003a38 <W25_ShiftLeftFlashDataByPage>
		address_rmc -= 128;
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	3b80      	subs	r3, #128	@ 0x80
 8003ec8:	6023      	str	r3, [r4, #0]
		if(is_using_flash == 0){
 8003eca:	4b59      	ldr	r3, [pc, #356]	@ (8004030 <saveRMC+0x268>)
 8003ecc:	f8d3 8000 	ldr.w	r8, [r3]
 8003ed0:	f1b8 0f00 	cmp.w	r8, #0
 8003ed4:	f040 8088 	bne.w	8003fe8 <saveRMC+0x220>
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 8003ed8:	683b      	ldr	r3, [r7, #0]
				start_addr_disconnect -= 128;
			Debug_printf("\n-----------------BEFORE update the result address data --------------\n");
			printQueue_GSM(&result_addr_queue);
 8003eda:	4d56      	ldr	r5, [pc, #344]	@ (8004034 <saveRMC+0x26c>)
			Debug_printf("\n-----------------BEFORE update the result address data --------------\n");
 8003edc:	4856      	ldr	r0, [pc, #344]	@ (8004038 <saveRMC+0x270>)
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 8003ede:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
				start_addr_disconnect -= 128;
 8003ee2:	bf82      	ittt	hi
 8003ee4:	683b      	ldrhi	r3, [r7, #0]
 8003ee6:	3b80      	subhi	r3, #128	@ 0x80
 8003ee8:	603b      	strhi	r3, [r7, #0]
			Debug_printf("\n-----------------BEFORE update the result address data --------------\n");
 8003eea:	f000 fe2b 	bl	8004b44 <Debug_printf>
			printQueue_GSM(&result_addr_queue);
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f7fe ffe8 	bl	8002ec4 <printQueue_GSM>
			Debug_printf("\n---------------Update the result address data--------------\n");
 8003ef4:	4851      	ldr	r0, [pc, #324]	@ (800403c <saveRMC+0x274>)
 8003ef6:	f000 fe25 	bl	8004b44 <Debug_printf>
			for (int i = 0; i < result_addr_queue.size; i++) {
 8003efa:	f8d5 0208 	ldr.w	r0, [r5, #520]	@ 0x208
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8003efe:	f8d5 c200 	ldr.w	ip, [r5, #512]	@ 0x200
			for (int i = 0; i < result_addr_queue.size; i++) {
 8003f02:	2200      	movs	r2, #0
 8003f04:	4290      	cmp	r0, r2
 8003f06:	dc47      	bgt.n	8003f98 <saveRMC+0x1d0>
					result_addr_queue.data[idx] -= 128;
			}
			for (int i = 0; i < result_addr_queue.size; i++) {
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
				if(result_addr_queue.data[idx] < 0x3000)
					deleteMiddle_GSM(&result_addr_queue, idx);
 8003f08:	f8df 9128 	ldr.w	r9, [pc, #296]	@ 8004034 <saveRMC+0x26c>
			for (int i = 0; i < result_addr_queue.size; i++) {
 8003f0c:	f8d5 3208 	ldr.w	r3, [r5, #520]	@ 0x208
 8003f10:	4543      	cmp	r3, r8
 8003f12:	dc54      	bgt.n	8003fbe <saveRMC+0x1f6>
			}
			printQueue_GSM(&result_addr_queue);
 8003f14:	4847      	ldr	r0, [pc, #284]	@ (8004034 <saveRMC+0x26c>)
 8003f16:	f7fe ffd5 	bl	8002ec4 <printQueue_GSM>
			if(end_addr_disconnect > start_addr_disconnect)
 8003f1a:	4b49      	ldr	r3, [pc, #292]	@ (8004040 <saveRMC+0x278>)
 8003f1c:	6819      	ldr	r1, [r3, #0]
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	4291      	cmp	r1, r2
 8003f22:	d902      	bls.n	8003f2a <saveRMC+0x162>
				end_addr_disconnect -= 128;
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	3a80      	subs	r2, #128	@ 0x80
 8003f28:	601a      	str	r2, [r3, #0]
		}
		else{
			count_shiftleft++;
		}
		Debug_printf("\n\n------------------ CURRENT START ADDRESS DISCONNECT: %08lx---------------\n\n", start_addr_disconnect);
 8003f2a:	6839      	ldr	r1, [r7, #0]
 8003f2c:	4845      	ldr	r0, [pc, #276]	@ (8004044 <saveRMC+0x27c>)
 8003f2e:	f000 fe09 	bl	8004b44 <Debug_printf>
		Debug_printf("\n--------------SHIFT LEFT COUNT: %d-------------\n", count_shiftleft);
 8003f32:	4b45      	ldr	r3, [pc, #276]	@ (8004048 <saveRMC+0x280>)
 8003f34:	4845      	ldr	r0, [pc, #276]	@ (800404c <saveRMC+0x284>)
 8003f36:	7819      	ldrb	r1, [r3, #0]
 8003f38:	f000 fe04 	bl	8004b44 <Debug_printf>
		current_addr -= 128;
 8003f3c:	6833      	ldr	r3, [r6, #0]
	    Debug_printf("\n");
 8003f3e:	4844      	ldr	r0, [pc, #272]	@ (8004050 <saveRMC+0x288>)
		current_addr -= 128;
 8003f40:	3b80      	subs	r3, #128	@ 0x80
 8003f42:	6033      	str	r3, [r6, #0]
	    Debug_printf("\n");
 8003f44:	f000 fdfe 	bl	8004b44 <Debug_printf>
		Debug_printf(" ADDRESS RMC after SHIFT LEFT BY ONE PAGE: %08lx", address_rmc);
 8003f48:	6821      	ldr	r1, [r4, #0]
 8003f4a:	4842      	ldr	r0, [pc, #264]	@ (8004054 <saveRMC+0x28c>)
 8003f4c:	f000 fdfa 	bl	8004b44 <Debug_printf>
		W25_Reset();
 8003f50:	f7ff fbed 	bl	800372e <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 8003f54:	4934      	ldr	r1, [pc, #208]	@ (8004028 <saveRMC+0x260>)
 8003f56:	6820      	ldr	r0, [r4, #0]
 8003f58:	2280      	movs	r2, #128	@ 0x80
 8003f5a:	f7ff fd09 	bl	8003970 <W25_ReadData>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8003f5e:	4932      	ldr	r1, [pc, #200]	@ (8004028 <saveRMC+0x260>)
 8003f60:	482a      	ldr	r0, [pc, #168]	@ (800400c <saveRMC+0x244>)
 8003f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f66:	2280      	movs	r2, #128	@ 0x80
 8003f68:	f003 fd44 	bl	80079f4 <HAL_UART_Transmit>
	}
	else {
		is_flash_overflow = 0;
	}
	if(address_rmc < FLASH_END_ADDRESS-128)
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	f5b3 4f9f 	cmp.w	r3, #20352	@ 0x4f80
		address_rmc += 128;
 8003f72:	bf38      	it	cc
 8003f74:	3380      	addcc	r3, #128	@ 0x80
	osDelay(1000);
 8003f76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		address_rmc += 128;
 8003f7a:	bf38      	it	cc
 8003f7c:	6023      	strcc	r3, [r4, #0]
	osDelay(1000);
 8003f7e:	f003 ff29 	bl	8007dd4 <osDelay>
	Debug_printf("\n");
 8003f82:	4833      	ldr	r0, [pc, #204]	@ (8004050 <saveRMC+0x288>)
 8003f84:	f000 fdde 	bl	8004b44 <Debug_printf>
	memset(flashBufferRMCReceived, 0x00,128);
 8003f88:	4827      	ldr	r0, [pc, #156]	@ (8004028 <saveRMC+0x260>)
 8003f8a:	2280      	movs	r2, #128	@ 0x80
 8003f8c:	2100      	movs	r1, #0
}
 8003f8e:	b005      	add	sp, #20
 8003f90:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memset(flashBufferRMCReceived, 0x00,128);
 8003f94:	f007 bcda 	b.w	800b94c <memset>
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8003f98:	eb02 030c 	add.w	r3, r2, ip
 8003f9c:	4259      	negs	r1, r3
 8003f9e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8003fa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fa6:	bf58      	it	pl
 8003fa8:	424b      	negpl	r3, r1
			for (int i = 0; i < result_addr_queue.size; i++) {
 8003faa:	3201      	adds	r2, #1
				if(result_addr_queue.data[idx] >= 0x3000)
 8003fac:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8003fb0:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
					result_addr_queue.data[idx] -= 128;
 8003fb4:	bf24      	itt	cs
 8003fb6:	3980      	subcs	r1, #128	@ 0x80
 8003fb8:	f845 1023 	strcs.w	r1, [r5, r3, lsl #2]
			for (int i = 0; i < result_addr_queue.size; i++) {
 8003fbc:	e7a2      	b.n	8003f04 <saveRMC+0x13c>
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8003fbe:	f8d5 1200 	ldr.w	r1, [r5, #512]	@ 0x200
 8003fc2:	4441      	add	r1, r8
 8003fc4:	424b      	negs	r3, r1
 8003fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fca:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8003fce:	bf58      	it	pl
 8003fd0:	4259      	negpl	r1, r3
				if(result_addr_queue.data[idx] < 0x3000)
 8003fd2:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 8003fd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003fda:	d202      	bcs.n	8003fe2 <saveRMC+0x21a>
					deleteMiddle_GSM(&result_addr_queue, idx);
 8003fdc:	4648      	mov	r0, r9
 8003fde:	f7fe ffcb 	bl	8002f78 <deleteMiddle_GSM>
			for (int i = 0; i < result_addr_queue.size; i++) {
 8003fe2:	f108 0801 	add.w	r8, r8, #1
 8003fe6:	e791      	b.n	8003f0c <saveRMC+0x144>
			count_shiftleft++;
 8003fe8:	4a17      	ldr	r2, [pc, #92]	@ (8004048 <saveRMC+0x280>)
 8003fea:	7813      	ldrb	r3, [r2, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	7013      	strb	r3, [r2, #0]
 8003ff0:	e79b      	b.n	8003f2a <saveRMC+0x162>
		is_flash_overflow = 0;
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	e7b9      	b.n	8003f6c <saveRMC+0x1a4>
 8003ff8:	200016d0 	.word	0x200016d0
 8003ffc:	080111a5 	.word	0x080111a5
 8004000:	20000008 	.word	0x20000008
 8004004:	200015d0 	.word	0x200015d0
 8004008:	0801122f 	.word	0x0801122f
 800400c:	200011d0 	.word	0x200011d0
 8004010:	0800fdcd 	.word	0x0800fdcd
 8004014:	080111c6 	.word	0x080111c6
 8004018:	20000004 	.word	0x20000004
 800401c:	080111e3 	.word	0x080111e3
 8004020:	20000dc4 	.word	0x20000dc4
 8004024:	08011203 	.word	0x08011203
 8004028:	20001650 	.word	0x20001650
 800402c:	20000dc0 	.word	0x20000dc0
 8004030:	20000dd4 	.word	0x20000dd4
 8004034:	20000ddc 	.word	0x20000ddc
 8004038:	08011235 	.word	0x08011235
 800403c:	0801127d 	.word	0x0801127d
 8004040:	20000db8 	.word	0x20000db8
 8004044:	080112bb 	.word	0x080112bb
 8004048:	20000dcc 	.word	0x20000dcc
 800404c:	08011309 	.word	0x08011309
 8004050:	080109da 	.word	0x080109da
 8004054:	0801133b 	.word	0x0801133b

08004058 <sendRMCDataWithAddrToGSM>:


void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
	if(mail_data->rmc.date.Yr >= 24){
 8004058:	6983      	ldr	r3, [r0, #24]
 800405a:	2b17      	cmp	r3, #23
void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
 800405c:	b510      	push	{r4, lr}
 800405e:	4604      	mov	r4, r0
	if(mail_data->rmc.date.Yr >= 24){
 8004060:	dd10      	ble.n	8004084 <sendRMCDataWithAddrToGSM+0x2c>
		HAL_UART_Transmit(&huart1, (uint8_t*) "\n\n\nSENDING RMC with Addr TO GSM\n\n",  strlen("\n\n\nSENDING RMC with Addr TO GSM\n\n") , HAL_MAX_DELAY);
 8004062:	4909      	ldr	r1, [pc, #36]	@ (8004088 <sendRMCDataWithAddrToGSM+0x30>)
 8004064:	4809      	ldr	r0, [pc, #36]	@ (800408c <sendRMCDataWithAddrToGSM+0x34>)
 8004066:	f04f 33ff 	mov.w	r3, #4294967295
 800406a:	2221      	movs	r2, #33	@ 0x21
 800406c:	f003 fcc2 	bl	80079f4 <HAL_UART_Transmit>
		osMessageQueuePut(RMC_MailQGSMId, mail_data, 0, 1000);
 8004070:	4807      	ldr	r0, [pc, #28]	@ (8004090 <sendRMCDataWithAddrToGSM+0x38>)
 8004072:	4621      	mov	r1, r4
 8004074:	6800      	ldr	r0, [r0, #0]
	}
}
 8004076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		osMessageQueuePut(RMC_MailQGSMId, mail_data, 0, 1000);
 800407a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800407e:	2200      	movs	r2, #0
 8004080:	f003 bf4e 	b.w	8007f20 <osMessageQueuePut>
}
 8004084:	bd10      	pop	{r4, pc}
 8004086:	bf00      	nop
 8004088:	0801136c 	.word	0x0801136c
 800408c:	200011d0 	.word	0x200011d0
 8004090:	200016d4 	.word	0x200016d4

08004094 <parseRMCString>:

void parseRMCString(uint8_t *str, RMCSTRUCT *rmc) {
 8004094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004098:	b0d4      	sub	sp, #336	@ 0x150
 800409a:	460c      	mov	r4, r1
    // Cast the uint8_t* to char* for string operations
    char buffer[256];
    strncpy(buffer, (char*)str, sizeof(buffer));
 800409c:	22ff      	movs	r2, #255	@ 0xff
 800409e:	4601      	mov	r1, r0
 80040a0:	a814      	add	r0, sp, #80	@ 0x50
 80040a2:	f007 fc7a 	bl	800b99a <strncpy>
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 80040a6:	2500      	movs	r5, #0

    // Remove the last parameter by locating the last ';'
    char *lastSemicolon = strrchr(buffer, ';');
 80040a8:	213b      	movs	r1, #59	@ 0x3b
 80040aa:	a814      	add	r0, sp, #80	@ 0x50
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 80040ac:	f88d 514f 	strb.w	r5, [sp, #335]	@ 0x14f
    char *lastSemicolon = strrchr(buffer, ';');
 80040b0:	f007 fc86 	bl	800b9c0 <strrchr>
    if (lastSemicolon) {
 80040b4:	b100      	cbz	r0, 80040b8 <parseRMCString+0x24>
        *lastSemicolon = '\0'; // Terminate the string here to exclude the last parameter
 80040b6:	7005      	strb	r5, [r0, #0]

    // Parse the string (now excluding the last parameter)
    char validStr[10];
   // unsigned long long epoch;
    int epoch0, epoch1, epoch2;
    sscanf(buffer, "%d;%d;%d;%d;%d;%d;%lf;%c;%lf;%c;%f;%f;%9[^;];%04d%04d%02d",
 80040b8:	f104 032c 	add.w	r3, r4, #44	@ 0x2c
 80040bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80040be:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80040c2:	9308      	str	r3, [sp, #32]
 80040c4:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 80040c8:	9307      	str	r3, [sp, #28]
 80040ca:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80040ce:	9306      	str	r3, [sp, #24]
 80040d0:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80040d4:	9305      	str	r3, [sp, #20]
 80040d6:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80040da:	9304      	str	r3, [sp, #16]
 80040dc:	f104 0308 	add.w	r3, r4, #8
 80040e0:	9303      	str	r3, [sp, #12]
 80040e2:	1d23      	adds	r3, r4, #4
 80040e4:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80040e8:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 80040ec:	f104 0310 	add.w	r3, r4, #16
 80040f0:	ad10      	add	r5, sp, #64	@ 0x40
 80040f2:	ae0f      	add	r6, sp, #60	@ 0x3c
 80040f4:	af0e      	add	r7, sp, #56	@ 0x38
 80040f6:	f104 0218 	add.w	r2, r4, #24
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	4911      	ldr	r1, [pc, #68]	@ (8004144 <parseRMCString+0xb0>)
 80040fe:	950d      	str	r5, [sp, #52]	@ 0x34
 8004100:	f104 0314 	add.w	r3, r4, #20
 8004104:	960c      	str	r6, [sp, #48]	@ 0x30
 8004106:	970b      	str	r7, [sp, #44]	@ 0x2c
 8004108:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800410c:	a814      	add	r0, sp, #80	@ 0x50
 800410e:	f007 fb75 	bl	800b7fc <siscanf>
		   &epoch1,
		   &epoch2// Epoch time
    );

    // Set validity as an integer (1 for "Valid", 0 for others)
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8004112:	490d      	ldr	r1, [pc, #52]	@ (8004148 <parseRMCString+0xb4>)
 8004114:	4640      	mov	r0, r8
 8004116:	f7fc f85b 	bl	80001d0 <strcmp>

    // Store the epoch value
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 800411a:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 800411e:	17d1      	asrs	r1, r2, #31
 8004120:	0409      	lsls	r1, r1, #16
 8004122:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004126:	430b      	orrs	r3, r1
 8004128:	9910      	ldr	r1, [sp, #64]	@ 0x40
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 800412a:	fab0 f080 	clz	r0, r0
 800412e:	0940      	lsrs	r0, r0, #5
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 8004130:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8004134:	ea43 73e1 	orr.w	r3, r3, r1, asr #31
 8004138:	e9c4 2308 	strd	r2, r3, [r4, #32]
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 800413c:	6320      	str	r0, [r4, #48]	@ 0x30
}
 800413e:	b054      	add	sp, #336	@ 0x150
 8004140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004144:	0801138e 	.word	0x0801138e
 8004148:	08011164 	.word	0x08011164

0800414c <readFlash>:

RMCSTRUCT readFlash(uint32_t addr){
 800414c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414e:	460d      	mov	r5, r1
 8004150:	b0a9      	sub	sp, #164	@ 0xa4
 8004152:	4604      	mov	r4, r0
//	char addr_out[10];
	Debug_printf("Address received from FLASH: %08lx \n", addr);
 8004154:	4835      	ldr	r0, [pc, #212]	@ (800422c <readFlash+0xe0>)
 8004156:	f000 fcf5 	bl	8004b44 <Debug_printf>
	W25_Reset();
 800415a:	f7ff fae8 	bl	800372e <W25_Reset>
	W25_ReadData(addr, flashBufferRMCReceived, 128);
 800415e:	2280      	movs	r2, #128	@ 0x80
 8004160:	4933      	ldr	r1, [pc, #204]	@ (8004230 <readFlash+0xe4>)
 8004162:	4628      	mov	r0, r5
 8004164:	f7ff fc04 	bl	8003970 <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA at CONTROLLING LED received: ";
 8004168:	4b32      	ldr	r3, [pc, #200]	@ (8004234 <readFlash+0xe8>)
 800416a:	aa07      	add	r2, sp, #28
 800416c:	f103 0728 	add.w	r7, r3, #40	@ 0x28
 8004170:	4616      	mov	r6, r2
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	6859      	ldr	r1, [r3, #4]
 8004176:	4615      	mov	r5, r2
 8004178:	c503      	stmia	r5!, {r0, r1}
 800417a:	3308      	adds	r3, #8
 800417c:	42bb      	cmp	r3, r7
 800417e:	462a      	mov	r2, r5
 8004180:	d1f7      	bne.n	8004172 <readFlash+0x26>
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	702b      	strb	r3, [r5, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004186:	4630      	mov	r0, r6
 8004188:	f7fc f882 	bl	8000290 <strlen>
 800418c:	4631      	mov	r1, r6
 800418e:	b282      	uxth	r2, r0
 8004190:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004194:	4828      	ldr	r0, [pc, #160]	@ (8004238 <readFlash+0xec>)
 8004196:	f003 fc2d 	bl	80079f4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 800419a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800419e:	2280      	movs	r2, #128	@ 0x80
 80041a0:	4923      	ldr	r1, [pc, #140]	@ (8004230 <readFlash+0xe4>)
 80041a2:	4825      	ldr	r0, [pc, #148]	@ (8004238 <readFlash+0xec>)
 80041a4:	f003 fc26 	bl	80079f4 <HAL_UART_Transmit>

	RMCSTRUCT rmc;
	parseRMCString(flashBufferRMCReceived, &rmc);
 80041a8:	a912      	add	r1, sp, #72	@ 0x48
 80041aa:	4821      	ldr	r0, [pc, #132]	@ (8004230 <readFlash+0xe4>)
 80041ac:	f7ff ff72 	bl	8004094 <parseRMCString>

	Debug_printf("Date: %02d-%02d-%02d\n", rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
 80041b0:	e9dd 3216 	ldrd	r3, r2, [sp, #88]	@ 0x58
 80041b4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80041b6:	4821      	ldr	r0, [pc, #132]	@ (800423c <readFlash+0xf0>)
 80041b8:	f000 fcc4 	bl	8004b44 <Debug_printf>

	Debug_printf("Time: %02d:%02d:%02d\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 80041bc:	e9dd 2313 	ldrd	r2, r3, [sp, #76]	@ 0x4c
 80041c0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80041c2:	481f      	ldr	r0, [pc, #124]	@ (8004240 <readFlash+0xf4>)
 80041c4:	f000 fcbe 	bl	8004b44 <Debug_printf>

	Debug_printf("Location: %.6f %c, %.6f %c\n", rmc.lcation.latitude, rmc.lcation.NS,
 80041c8:	f89d 3098 	ldrb.w	r3, [sp, #152]	@ 0x98
 80041cc:	9304      	str	r3, [sp, #16]
 80041ce:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
 80041d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041d6:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	4819      	ldr	r0, [pc, #100]	@ (8004244 <readFlash+0xf8>)
 80041de:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	@ 0x80
 80041e2:	f000 fcaf 	bl	8004b44 <Debug_printf>
		   rmc.lcation.longitude, rmc.lcation.EW);

	Debug_printf("Speed: %.2f\n", rmc.speed);
 80041e6:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80041e8:	f7fc f9be 	bl	8000568 <__aeabi_f2d>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4815      	ldr	r0, [pc, #84]	@ (8004248 <readFlash+0xfc>)
 80041f2:	f000 fca7 	bl	8004b44 <Debug_printf>

	Debug_printf("Course: %.2f\n", rmc.course);
 80041f6:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80041f8:	f7fc f9b6 	bl	8000568 <__aeabi_f2d>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4812      	ldr	r0, [pc, #72]	@ (800424c <readFlash+0x100>)
 8004202:	f000 fc9f 	bl	8004b44 <Debug_printf>

	Debug_printf("Validity: %s\n", rmc.isValid ? "Valid" : "Invalid");
 8004206:	4b12      	ldr	r3, [pc, #72]	@ (8004250 <readFlash+0x104>)
 8004208:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800420a:	4a12      	ldr	r2, [pc, #72]	@ (8004254 <readFlash+0x108>)
 800420c:	4812      	ldr	r0, [pc, #72]	@ (8004258 <readFlash+0x10c>)
 800420e:	2900      	cmp	r1, #0
 8004210:	bf0c      	ite	eq
 8004212:	4611      	moveq	r1, r2
 8004214:	4619      	movne	r1, r3
 8004216:	f000 fc95 	bl	8004b44 <Debug_printf>

	return rmc;
 800421a:	2258      	movs	r2, #88	@ 0x58
 800421c:	a912      	add	r1, sp, #72	@ 0x48
 800421e:	4620      	mov	r0, r4
 8004220:	f008 f9e8 	bl	800c5f4 <memcpy>
}
 8004224:	4620      	mov	r0, r4
 8004226:	b029      	add	sp, #164	@ 0xa4
 8004228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800422a:	bf00      	nop
 800422c:	080113c8 	.word	0x080113c8
 8004230:	20001650 	.word	0x20001650
 8004234:	0801145e 	.word	0x0801145e
 8004238:	200011d0 	.word	0x200011d0
 800423c:	080113ed 	.word	0x080113ed
 8004240:	08011403 	.word	0x08011403
 8004244:	08011419 	.word	0x08011419
 8004248:	08011435 	.word	0x08011435
 800424c:	08011442 	.word	0x08011442
 8004250:	08011164 	.word	0x08011164
 8004254:	0801116a 	.word	0x0801116a
 8004258:	08011450 	.word	0x08011450

0800425c <receiveRMCDataFromGPS>:


void receiveRMCDataFromGPS(void) {
 800425c:	b5f0      	push	{r4, r5, r6, r7, lr}
	static int countRMCReceived = 0;
//	uint8_t output_buffer[70];

	// Wait until there are at least 10 messages in the queue
//	Debug_printf("Inside Receiving RMC Data SPI FLASH\n");
	osStatus_t status = osMessageQueueGet(RMC_MailQFLASHId, &receivedDataRMCFLASH, NULL, 1000); // Wait for mail
 800425e:	4865      	ldr	r0, [pc, #404]	@ (80043f4 <receiveRMCDataFromGPS+0x198>)
 8004260:	4d65      	ldr	r5, [pc, #404]	@ (80043f8 <receiveRMCDataFromGPS+0x19c>)
 8004262:	6800      	ldr	r0, [r0, #0]
void receiveRMCDataFromGPS(void) {
 8004264:	b097      	sub	sp, #92	@ 0x5c
	osStatus_t status = osMessageQueueGet(RMC_MailQFLASHId, &receivedDataRMCFLASH, NULL, 1000); // Wait for mail
 8004266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800426a:	2200      	movs	r2, #0
 800426c:	4629      	mov	r1, r5
 800426e:	f003 fe9b 	bl	8007fa8 <osMessageQueueGet>
	if(status == osOK){
 8004272:	4606      	mov	r6, r0
 8004274:	2800      	cmp	r0, #0
 8004276:	f040 80b5 	bne.w	80043e4 <receiveRMCDataFromGPS+0x188>
		uart_transmit_string(&huart1, (uint8_t*)"\nReceived  RMC Data SPI FLASH: \n");
 800427a:	4960      	ldr	r1, [pc, #384]	@ (80043fc <receiveRMCDataFromGPS+0x1a0>)
 800427c:	4860      	ldr	r0, [pc, #384]	@ (8004400 <receiveRMCDataFromGPS+0x1a4>)
		//Sending DATA to GSM
		rmc_flash.lcation.latitude = receivedDataRMCFLASH.lcation.latitude;
 800427e:	4c61      	ldr	r4, [pc, #388]	@ (8004404 <receiveRMCDataFromGPS+0x1a8>)
		uart_transmit_string(&huart1, (uint8_t*)"\nReceived  RMC Data SPI FLASH: \n");
 8004280:	f000 fc50 	bl	8004b24 <uart_transmit_string>
		rmc_flash.lcation.latitude = receivedDataRMCFLASH.lcation.latitude;
 8004284:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 8004288:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_flash.lcation.longitude = receivedDataRMCFLASH.lcation.longitude;
 800428c:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8004290:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_flash.speed = receivedDataRMCFLASH.speed;
 8004294:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8004296:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_flash.course = receivedDataRMCFLASH.course;
 8004298:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800429a:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_flash.lcation.NS = receivedDataRMCFLASH.lcation.NS;
 800429c:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 80042a0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_flash.lcation.EW = receivedDataRMCFLASH.lcation.EW;
 80042a4:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 80042a8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_flash.isValid = receivedDataRMCFLASH.isValid;
 80042ac:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80042ae:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_flash.tim.hour = receivedDataRMCFLASH.tim.hour;
 80042b0:	682b      	ldr	r3, [r5, #0]
 80042b2:	6023      	str	r3, [r4, #0]
		rmc_flash.tim.min = receivedDataRMCFLASH.tim.min;
 80042b4:	686b      	ldr	r3, [r5, #4]
 80042b6:	6063      	str	r3, [r4, #4]
		rmc_flash.tim.sec = receivedDataRMCFLASH.tim.sec;
 80042b8:	68ab      	ldr	r3, [r5, #8]
 80042ba:	60a3      	str	r3, [r4, #8]
		rmc_flash.date.Yr = receivedDataRMCFLASH.date.Yr;
 80042bc:	69ab      	ldr	r3, [r5, #24]
		rmc_flash.date.Mon = receivedDataRMCFLASH.date.Mon;
 80042be:	696a      	ldr	r2, [r5, #20]
 80042c0:	6162      	str	r2, [r4, #20]
		rmc_flash.date.Day = receivedDataRMCFLASH.date.Day;

		if(rmc_flash.date.Yr >= 24){
 80042c2:	2b17      	cmp	r3, #23
		rmc_flash.date.Day = receivedDataRMCFLASH.date.Day;
 80042c4:	692a      	ldr	r2, [r5, #16]
		rmc_flash.date.Yr = receivedDataRMCFLASH.date.Yr;
 80042c6:	61a3      	str	r3, [r4, #24]
		rmc_flash.date.Day = receivedDataRMCFLASH.date.Day;
 80042c8:	6122      	str	r2, [r4, #16]
		if(rmc_flash.date.Yr >= 24){
 80042ca:	dd46      	ble.n	800435a <receiveRMCDataFromGPS+0xfe>
			countRMCReceived++;
 80042cc:	4f4e      	ldr	r7, [pc, #312]	@ (8004408 <receiveRMCDataFromGPS+0x1ac>)
			Debug_printf("\n\n--------------- COUNT RMC RECEIVED AT SPI FLASH is %d\n ---------------------\n", countRMCReceived);
 80042ce:	484f      	ldr	r0, [pc, #316]	@ (800440c <receiveRMCDataFromGPS+0x1b0>)
			countRMCReceived++;
 80042d0:	6839      	ldr	r1, [r7, #0]
 80042d2:	3101      	adds	r1, #1
 80042d4:	6039      	str	r1, [r7, #0]
			Debug_printf("\n\n--------------- COUNT RMC RECEIVED AT SPI FLASH is %d\n ---------------------\n", countRMCReceived);
 80042d6:	f000 fc35 	bl	8004b44 <Debug_printf>


			Debug_printf("Time Received from GPS AT SPI FLASH: %d:%d:%d\n", rmc_flash.tim.hour, rmc_flash.tim.min, rmc_flash.tim.sec);
 80042da:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80042de:	6821      	ldr	r1, [r4, #0]
 80042e0:	484b      	ldr	r0, [pc, #300]	@ (8004410 <receiveRMCDataFromGPS+0x1b4>)
 80042e2:	f000 fc2f 	bl	8004b44 <Debug_printf>
//
//		Debug_printf("Location Received FROM GPS AT SPI FLASH: %.6f %c, %.6f %c\n", rmc_flash.lcation.latitude, rmc_flash.lcation.NS, rmc_flash.lcation.longitude, rmc_flash.lcation.EW);
//
//		Debug_printf("Speed FROM GPS AT SPI FLASH: %.2f, Course: %.2f, Valid: %d\n\n\n", rmc_flash.speed, rmc_flash.course, rmc_flash.isValid);

			format_rmc_data(&rmc_flash,(char*) rmcBufferDemo, 128);
 80042e6:	494b      	ldr	r1, [pc, #300]	@ (8004414 <receiveRMCDataFromGPS+0x1b8>)
 80042e8:	2280      	movs	r2, #128	@ 0x80
 80042ea:	4620      	mov	r0, r4
 80042ec:	f7ff fd16 	bl	8003d1c <format_rmc_data>

			if(countRMCReceived == 29){
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b1d      	cmp	r3, #29
 80042f4:	d133      	bne.n	800435e <receiveRMCDataFromGPS+0x102>

				saveRMC();
 80042f6:	f7ff fd67 	bl	8003dc8 <saveRMC>
				Debug_printf("---------------------Sending the current data----------------");
 80042fa:	4847      	ldr	r0, [pc, #284]	@ (8004418 <receiveRMCDataFromGPS+0x1bc>)
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 80042fc:	4d47      	ldr	r5, [pc, #284]	@ (800441c <receiveRMCDataFromGPS+0x1c0>)
				Debug_printf("---------------------Sending the current data----------------");
 80042fe:	f000 fc21 	bl	8004b44 <Debug_printf>
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 8004302:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8004306:	e9c5 230e 	strd	r2, r3, [r5, #56]	@ 0x38
				mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
 800430a:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 800430e:	e9c5 2312 	strd	r2, r3, [r5, #72]	@ 0x48
				mail_gsm.rmc.speed = rmc_flash.speed;
 8004312:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004314:	62ab      	str	r3, [r5, #40]	@ 0x28
				mail_gsm.rmc.course = rmc_flash.course;
 8004316:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004318:	62eb      	str	r3, [r5, #44]	@ 0x2c
				mail_gsm.rmc.lcation.NS = rmc_flash.lcation.NS;
 800431a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800431e:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
				mail_gsm.rmc.lcation.EW = rmc_flash.lcation.EW;
 8004322:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8004326:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
				mail_gsm.rmc.isValid = rmc_flash.isValid;
 800432a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800432c:	632b      	str	r3, [r5, #48]	@ 0x30
				mail_gsm.rmc.tim.hour = rmc_flash.tim.hour;
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	602b      	str	r3, [r5, #0]
				mail_gsm.rmc.tim.min = rmc_flash.tim.min;
 8004332:	6863      	ldr	r3, [r4, #4]
 8004334:	606b      	str	r3, [r5, #4]
				mail_gsm.rmc.tim.sec = rmc_flash.tim.sec;
 8004336:	68a3      	ldr	r3, [r4, #8]
 8004338:	60ab      	str	r3, [r5, #8]
				mail_gsm.rmc.date.Yr = rmc_flash.date.Yr;
 800433a:	69a3      	ldr	r3, [r4, #24]
 800433c:	61ab      	str	r3, [r5, #24]
				mail_gsm.rmc.date.Mon = rmc_flash.date.Mon;
 800433e:	6963      	ldr	r3, [r4, #20]
 8004340:	616b      	str	r3, [r5, #20]
				mail_gsm.rmc.date.Day = rmc_flash.date.Day;
 8004342:	6923      	ldr	r3, [r4, #16]
 8004344:	612b      	str	r3, [r5, #16]
				mail_gsm.address = current_addr;
 8004346:	4b36      	ldr	r3, [pc, #216]	@ (8004420 <receiveRMCDataFromGPS+0x1c4>)
				Debug_printf("-------------------SENDING CURRENT ADDR DATA: %08lx----------------------", mail_gsm.address);
 8004348:	4836      	ldr	r0, [pc, #216]	@ (8004424 <receiveRMCDataFromGPS+0x1c8>)
				mail_gsm.address = current_addr;
 800434a:	6819      	ldr	r1, [r3, #0]
 800434c:	65a9      	str	r1, [r5, #88]	@ 0x58
				Debug_printf("-------------------SENDING CURRENT ADDR DATA: %08lx----------------------", mail_gsm.address);
 800434e:	f000 fbf9 	bl	8004b44 <Debug_printf>
				sendRMCDataWithAddrToGSM(&mail_gsm);
 8004352:	4628      	mov	r0, r5
 8004354:	f7ff fe80 	bl	8004058 <sendRMCDataWithAddrToGSM>
				countRMCReceived = 0;
 8004358:	603e      	str	r6, [r7, #0]
		// Free memory after use
	}
	else{
		Debug_printf("\n\n-------------------------- RECEIVED MAIL FROM GPS FAILED: %d ------------------------\n\n",status);
	}
}
 800435a:	b017      	add	sp, #92	@ 0x5c
 800435c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				Debug_printf("\n\n ---------------------------- There is no mail in SPI FLASH FROM GPS ------------------\n\n");
 800435e:	4832      	ldr	r0, [pc, #200]	@ (8004428 <receiveRMCDataFromGPS+0x1cc>)
 8004360:	f000 fbf0 	bl	8004b44 <Debug_printf>
				if(is_using_flash == 1 && is_disconnect == 0 && is_keep_up == 1){
 8004364:	4b31      	ldr	r3, [pc, #196]	@ (800442c <receiveRMCDataFromGPS+0x1d0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d1f6      	bne.n	800435a <receiveRMCDataFromGPS+0xfe>
 800436c:	4b30      	ldr	r3, [pc, #192]	@ (8004430 <receiveRMCDataFromGPS+0x1d4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1f2      	bne.n	800435a <receiveRMCDataFromGPS+0xfe>
 8004374:	4b2f      	ldr	r3, [pc, #188]	@ (8004434 <receiveRMCDataFromGPS+0x1d8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d1ee      	bne.n	800435a <receiveRMCDataFromGPS+0xfe>
					if(checkAddrExistInQueue(start_addr_disconnect, &result_addr_queue) && (start_addr_disconnect <= (FLASH_END_ADDRESS - 0x100))){
 800437c:	4c2e      	ldr	r4, [pc, #184]	@ (8004438 <receiveRMCDataFromGPS+0x1dc>)
 800437e:	492f      	ldr	r1, [pc, #188]	@ (800443c <receiveRMCDataFromGPS+0x1e0>)
 8004380:	6820      	ldr	r0, [r4, #0]
 8004382:	f7fe fdd3 	bl	8002f2c <checkAddrExistInQueue>
 8004386:	b158      	cbz	r0, 80043a0 <receiveRMCDataFromGPS+0x144>
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 800438e:	d807      	bhi.n	80043a0 <receiveRMCDataFromGPS+0x144>
						Debug_printf("\n-------SKIPPING address cause it was sent already: %08lx--------\n", start_addr_disconnect);
 8004390:	6821      	ldr	r1, [r4, #0]
 8004392:	482b      	ldr	r0, [pc, #172]	@ (8004440 <receiveRMCDataFromGPS+0x1e4>)
 8004394:	f000 fbd6 	bl	8004b44 <Debug_printf>
						start_addr_disconnect +=128;
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	3380      	adds	r3, #128	@ 0x80
 800439c:	6023      	str	r3, [r4, #0]
 800439e:	e7dc      	b.n	800435a <receiveRMCDataFromGPS+0xfe>
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 80043a0:	4a28      	ldr	r2, [pc, #160]	@ (8004444 <receiveRMCDataFromGPS+0x1e8>)
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	7812      	ldrb	r2, [r2, #0]
 80043a6:	4e28      	ldr	r6, [pc, #160]	@ (8004448 <receiveRMCDataFromGPS+0x1ec>)
						mail_gsm.rmc = readFlash(addr_to_get_from_FLASH);
 80043a8:	4d1c      	ldr	r5, [pc, #112]	@ (800441c <receiveRMCDataFromGPS+0x1c0>)
						Debug_printf("\n---------------- Sending data in disconnected phase to GSM: %08lx -------------------\n", start_addr_disconnect);
 80043aa:	6821      	ldr	r1, [r4, #0]
 80043ac:	4827      	ldr	r0, [pc, #156]	@ (800444c <receiveRMCDataFromGPS+0x1f0>)
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 80043ae:	eba3 13c2 	sub.w	r3, r3, r2, lsl #7
						if(addr_to_get_from_FLASH < FLASH_START_ADDRESS) addr_to_get_from_FLASH = FLASH_START_ADDRESS;
 80043b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80043b6:	bf38      	it	cc
 80043b8:	f44f 5340 	movcc.w	r3, #12288	@ 0x3000
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 80043bc:	6033      	str	r3, [r6, #0]
						Debug_printf("\n---------------- Sending data in disconnected phase to GSM: %08lx -------------------\n", start_addr_disconnect);
 80043be:	f000 fbc1 	bl	8004b44 <Debug_printf>
						mail_gsm.rmc = readFlash(addr_to_get_from_FLASH);
 80043c2:	6831      	ldr	r1, [r6, #0]
 80043c4:	4668      	mov	r0, sp
 80043c6:	f7ff fec1 	bl	800414c <readFlash>
 80043ca:	2258      	movs	r2, #88	@ 0x58
 80043cc:	4669      	mov	r1, sp
 80043ce:	4628      	mov	r0, r5
 80043d0:	f008 f910 	bl	800c5f4 <memcpy>
						mail_gsm.address = start_addr_disconnect;
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	65ab      	str	r3, [r5, #88]	@ 0x58
						sendRMCDataWithAddrToGSM(&mail_gsm);
 80043d8:	4628      	mov	r0, r5
}
 80043da:	b017      	add	sp, #92	@ 0x5c
 80043dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
						sendRMCDataWithAddrToGSM(&mail_gsm);
 80043e0:	f7ff be3a 	b.w	8004058 <sendRMCDataWithAddrToGSM>
		Debug_printf("\n\n-------------------------- RECEIVED MAIL FROM GPS FAILED: %d ------------------------\n\n",status);
 80043e4:	4601      	mov	r1, r0
 80043e6:	481a      	ldr	r0, [pc, #104]	@ (8004450 <receiveRMCDataFromGPS+0x1f4>)
}
 80043e8:	b017      	add	sp, #92	@ 0x5c
 80043ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		Debug_printf("\n\n-------------------------- RECEIVED MAIL FROM GPS FAILED: %d ------------------------\n\n",status);
 80043ee:	f000 bba9 	b.w	8004b44 <Debug_printf>
 80043f2:	bf00      	nop
 80043f4:	200016d8 	.word	0x200016d8
 80043f8:	200014c0 	.word	0x200014c0
 80043fc:	08011487 	.word	0x08011487
 8004400:	200011d0 	.word	0x200011d0
 8004404:	20001578 	.word	0x20001578
 8004408:	200014b8 	.word	0x200014b8
 800440c:	080114a8 	.word	0x080114a8
 8004410:	080114f8 	.word	0x080114f8
 8004414:	200015d0 	.word	0x200015d0
 8004418:	08011527 	.word	0x08011527
 800441c:	20001518 	.word	0x20001518
 8004420:	20000004 	.word	0x20000004
 8004424:	08011565 	.word	0x08011565
 8004428:	080115af 	.word	0x080115af
 800442c:	20000dd4 	.word	0x20000dd4
 8004430:	20000dd8 	.word	0x20000dd8
 8004434:	20000dd0 	.word	0x20000dd0
 8004438:	20000dc0 	.word	0x20000dc0
 800443c:	20000ddc 	.word	0x20000ddc
 8004440:	0801160b 	.word	0x0801160b
 8004444:	20000dcc 	.word	0x20000dcc
 8004448:	200016dc 	.word	0x200016dc
 800444c:	0801164e 	.word	0x0801164e
 8004450:	080116a6 	.word	0x080116a6

08004454 <StartSpiFlash>:


void StartSpiFlash(void const * argument)
{
 8004454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* USER CODE BEGIN StartSpiFlash */
  /* Infinite loop */
	Debug_printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 8004458:	483d      	ldr	r0, [pc, #244]	@ (8004550 <StartSpiFlash+0xfc>)
	current_addr = address_rmc;
 800445a:	4e3e      	ldr	r6, [pc, #248]	@ (8004554 <StartSpiFlash+0x100>)
{
 800445c:	b087      	sub	sp, #28
	Debug_printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 800445e:	f000 fb71 	bl	8004b44 <Debug_printf>
	current_addr = address_rmc;
 8004462:	4b3d      	ldr	r3, [pc, #244]	@ (8004558 <StartSpiFlash+0x104>)


	RMC_MailQFLASHId = osMessageQueueNew(3, sizeof(RMCSTRUCT), NULL);
 8004464:	2200      	movs	r2, #0
	current_addr = address_rmc;
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6033      	str	r3, [r6, #0]
	RMC_MailQFLASHId = osMessageQueueNew(3, sizeof(RMCSTRUCT), NULL);
 800446a:	2158      	movs	r1, #88	@ 0x58
 800446c:	2003      	movs	r0, #3
 800446e:	f003 fd0f 	bl	8007e90 <osMessageQueueNew>
 8004472:	4b3a      	ldr	r3, [pc, #232]	@ (800455c <StartSpiFlash+0x108>)
 8004474:	6018      	str	r0, [r3, #0]
	if (RMC_MailQFLASHId == NULL) {
 8004476:	2800      	cmp	r0, #0
 8004478:	d165      	bne.n	8004546 <StartSpiFlash+0xf2>
		Debug_printf("\n\n --------------------Failed to create message queue ----------------\n\n");
 800447a:	4839      	ldr	r0, [pc, #228]	@ (8004560 <StartSpiFlash+0x10c>)
 800447c:	f000 fb62 	bl	8004b44 <Debug_printf>
	}
	else{
		Debug_printf("\n\n --------------------Create MESSAGE QUEUE FROM GPS TO FLASH SUCCESSFULLY: %d ----------------\n\n", sizeof(RMC_MailQFLASHId));
	}

	RMC_MailQGSMId = osMessageQueueNew(64, sizeof(GSM_MAIL_STRUCT), NULL);
 8004480:	2200      	movs	r2, #0
 8004482:	2160      	movs	r1, #96	@ 0x60
 8004484:	2040      	movs	r0, #64	@ 0x40
 8004486:	f003 fd03 	bl	8007e90 <osMessageQueueNew>
 800448a:	4b36      	ldr	r3, [pc, #216]	@ (8004564 <StartSpiFlash+0x110>)
 800448c:	6018      	str	r0, [r3, #0]
	myMutex = osMutexNew(NULL);  // NULL means default attributes
 800448e:	2000      	movs	r0, #0
 8004490:	f003 fcba 	bl	8007e08 <osMutexNew>
 8004494:	4b34      	ldr	r3, [pc, #208]	@ (8004568 <StartSpiFlash+0x114>)
 8004496:	6018      	str	r0, [r3, #0]
	if (myMutex == NULL) {
 8004498:	b910      	cbnz	r0, 80044a0 <StartSpiFlash+0x4c>
		Debug_printf("\n\n ----------------- Failed to create mutex -----------------\n\n");
 800449a:	4834      	ldr	r0, [pc, #208]	@ (800456c <StartSpiFlash+0x118>)
 800449c:	f000 fb52 	bl	8004b44 <Debug_printf>
	}
	Debug_printf("\n\n --------------------Creating a MESSAGE QUEUE --------------------- \n\n");
 80044a0:	4833      	ldr	r0, [pc, #204]	@ (8004570 <StartSpiFlash+0x11c>)

	for(;;){
//		if(osMutexAcquire(myMutex, osWaitForever) == osOK) {

		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
 80044a2:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8004594 <StartSpiFlash+0x140>

		Debug_printf("\n\n --------------Thread SPI FLASH %p is running low on stack: %04d bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
		osDelay(125);
		uart_transmit_string(&huart1, (uint8_t*) "\n\n--------------------- INSIDE SPI FLASH ------------------------\n\n");
 80044a6:	4c33      	ldr	r4, [pc, #204]	@ (8004574 <StartSpiFlash+0x120>)
		W25_Reset();
		W25_ReadJedecID();
		W25_Reset();
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 80044a8:	4f33      	ldr	r7, [pc, #204]	@ (8004578 <StartSpiFlash+0x124>)
	Debug_printf("\n\n --------------------Creating a MESSAGE QUEUE --------------------- \n\n");
 80044aa:	f000 fb4b 	bl	8004b44 <Debug_printf>
		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
 80044ae:	f8d9 0000 	ldr.w	r0, [r9]
 80044b2:	f003 fc7b 	bl	8007dac <osThreadGetStackSpace>
		Debug_printf("\n\n --------------Thread SPI FLASH %p is running low on stack: %04d bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
 80044b6:	f8d9 1000 	ldr.w	r1, [r9]
		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
 80044ba:	4602      	mov	r2, r0
		Debug_printf("\n\n --------------Thread SPI FLASH %p is running low on stack: %04d bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
 80044bc:	482f      	ldr	r0, [pc, #188]	@ (800457c <StartSpiFlash+0x128>)
 80044be:	f000 fb41 	bl	8004b44 <Debug_printf>
		osDelay(125);
 80044c2:	207d      	movs	r0, #125	@ 0x7d
 80044c4:	f003 fc86 	bl	8007dd4 <osDelay>
		uart_transmit_string(&huart1, (uint8_t*) "\n\n--------------------- INSIDE SPI FLASH ------------------------\n\n");
 80044c8:	492d      	ldr	r1, [pc, #180]	@ (8004580 <StartSpiFlash+0x12c>)
 80044ca:	4620      	mov	r0, r4
 80044cc:	f000 fb2a 	bl	8004b24 <uart_transmit_string>
		W25_Reset();
 80044d0:	f7ff f92d 	bl	800372e <W25_Reset>
		W25_ReadJedecID();
 80044d4:	f7ff f958 	bl	8003788 <W25_ReadJedecID>
		W25_Reset();
 80044d8:	f7ff f929 	bl	800372e <W25_Reset>
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 80044dc:	2280      	movs	r2, #128	@ 0x80
 80044de:	6830      	ldr	r0, [r6, #0]
 80044e0:	4639      	mov	r1, r7
 80044e2:	f7ff fa45 	bl	8003970 <W25_ReadData>
		char spi_flash_data_intro[] = "Flash DATA received: ";
 80044e6:	4b27      	ldr	r3, [pc, #156]	@ (8004584 <StartSpiFlash+0x130>)
 80044e8:	466a      	mov	r2, sp
 80044ea:	f103 0c10 	add.w	ip, r3, #16
 80044ee:	4690      	mov	r8, r2
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	6859      	ldr	r1, [r3, #4]
 80044f4:	4615      	mov	r5, r2
 80044f6:	c503      	stmia	r5!, {r0, r1}
 80044f8:	3308      	adds	r3, #8
 80044fa:	4563      	cmp	r3, ip
 80044fc:	462a      	mov	r2, r5
 80044fe:	d1f7      	bne.n	80044f0 <StartSpiFlash+0x9c>
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	889b      	ldrh	r3, [r3, #4]
 8004504:	6028      	str	r0, [r5, #0]
 8004506:	80ab      	strh	r3, [r5, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004508:	4640      	mov	r0, r8
 800450a:	f7fb fec1 	bl	8000290 <strlen>
 800450e:	4641      	mov	r1, r8
 8004510:	b282      	uxth	r2, r0
 8004512:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004516:	4620      	mov	r0, r4
 8004518:	f003 fa6c 	bl	80079f4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 800451c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004520:	2280      	movs	r2, #128	@ 0x80
 8004522:	4639      	mov	r1, r7
 8004524:	4620      	mov	r0, r4
 8004526:	f003 fa65 	bl	80079f4 <HAL_UART_Transmit>
		Debug_printf("\n------------- Current address FLASH: %08lx -------------\n", current_addr);
 800452a:	6831      	ldr	r1, [r6, #0]
 800452c:	4816      	ldr	r0, [pc, #88]	@ (8004588 <StartSpiFlash+0x134>)
 800452e:	f000 fb09 	bl	8004b44 <Debug_printf>
		//receiveTaxData();
		receiveRMCDataFromGPS();
 8004532:	f7ff fe93 	bl	800425c <receiveRMCDataFromGPS>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 8004536:	4620      	mov	r0, r4
 8004538:	4914      	ldr	r1, [pc, #80]	@ (800458c <StartSpiFlash+0x138>)
 800453a:	f000 faf3 	bl	8004b24 <uart_transmit_string>
		osDelay(125);
 800453e:	207d      	movs	r0, #125	@ 0x7d
 8004540:	f003 fc48 	bl	8007dd4 <osDelay>
	for(;;){
 8004544:	e7b3      	b.n	80044ae <StartSpiFlash+0x5a>
		Debug_printf("\n\n --------------------Create MESSAGE QUEUE FROM GPS TO FLASH SUCCESSFULLY: %d ----------------\n\n", sizeof(RMC_MailQFLASHId));
 8004546:	4812      	ldr	r0, [pc, #72]	@ (8004590 <StartSpiFlash+0x13c>)
 8004548:	2104      	movs	r1, #4
 800454a:	f000 fafb 	bl	8004b44 <Debug_printf>
 800454e:	e797      	b.n	8004480 <StartSpiFlash+0x2c>
 8004550:	08011700 	.word	0x08011700
 8004554:	20000004 	.word	0x20000004
 8004558:	20000008 	.word	0x20000008
 800455c:	200016d8 	.word	0x200016d8
 8004560:	08011758 	.word	0x08011758
 8004564:	200016d4 	.word	0x200016d4
 8004568:	200014b4 	.word	0x200014b4
 800456c:	08011803 	.word	0x08011803
 8004570:	08011843 	.word	0x08011843
 8004574:	200011d0 	.word	0x200011d0
 8004578:	20001650 	.word	0x20001650
 800457c:	0801188c 	.word	0x0801188c
 8004580:	080118eb 	.word	0x080118eb
 8004584:	0801196a 	.word	0x0801196a
 8004588:	0801192f 	.word	0x0801192f
 800458c:	080109d9 	.word	0x080109d9
 8004590:	080117a1 	.word	0x080117a1
 8004594:	20000ff0 	.word	0x20000ff0

08004598 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004598:	4b0d      	ldr	r3, [pc, #52]	@ (80045d0 <HAL_MspInit+0x38>)
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	f042 0201 	orr.w	r2, r2, #1
 80045a0:	619a      	str	r2, [r3, #24]
 80045a2:	699a      	ldr	r2, [r3, #24]
{
 80045a4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045a6:	f002 0201 	and.w	r2, r2, #1
 80045aa:	9200      	str	r2, [sp, #0]
 80045ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80045b4:	61da      	str	r2, [r3, #28]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045bc:	9301      	str	r3, [sp, #4]
 80045be:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80045c0:	2200      	movs	r2, #0
 80045c2:	210f      	movs	r1, #15
 80045c4:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045c8:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80045ca:	f001 b8d3 	b.w	8005774 <HAL_NVIC_SetPriority>
 80045ce:	bf00      	nop
 80045d0:	40021000 	.word	0x40021000

080045d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80045d4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045d6:	2214      	movs	r2, #20
{
 80045d8:	b08a      	sub	sp, #40	@ 0x28
 80045da:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045dc:	2100      	movs	r1, #0
 80045de:	eb0d 0002 	add.w	r0, sp, r2
 80045e2:	f007 f9b3 	bl	800b94c <memset>
  if(hadc->Instance==ADC2)
 80045e6:	682b      	ldr	r3, [r5, #0]
 80045e8:	4a3d      	ldr	r2, [pc, #244]	@ (80046e0 <HAL_ADC_MspInit+0x10c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d137      	bne.n	800465e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80045ee:	4b3d      	ldr	r3, [pc, #244]	@ (80046e4 <HAL_ADC_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 80045f0:	4c3d      	ldr	r4, [pc, #244]	@ (80046e8 <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80045f2:	695a      	ldr	r2, [r3, #20]
 80045f4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80045f8:	615a      	str	r2, [r3, #20]
 80045fa:	695a      	ldr	r2, [r3, #20]
 80045fc:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8004600:	9201      	str	r2, [sp, #4]
 8004602:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800460a:	615a      	str	r2, [r3, #20]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004612:	9302      	str	r3, [sp, #8]
 8004614:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004616:	2620      	movs	r6, #32
 8004618:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800461a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800461e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004620:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004624:	f001 f9ca 	bl	80059bc <HAL_GPIO_Init>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004628:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800462c:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 80046fc <HAL_ADC_MspInit+0x128>
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004630:	f04f 0e80 	mov.w	lr, #128	@ 0x80
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004634:	2300      	movs	r3, #0
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004636:	e9c4 e203 	strd	lr, r2, [r4, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800463a:	4620      	mov	r0, r4
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800463c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004640:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004644:	e9c4 2605 	strd	r2, r6, [r4, #20]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004648:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800464a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800464c:	f001 f8f2 	bl	8005834 <HAL_DMA_Init>
 8004650:	b108      	cbz	r0, 8004656 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 8004652:	f7ff f824 	bl	800369e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004656:	63ac      	str	r4, [r5, #56]	@ 0x38
 8004658:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800465a:	b00a      	add	sp, #40	@ 0x28
 800465c:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC3)
 800465e:	4a23      	ldr	r2, [pc, #140]	@ (80046ec <HAL_ADC_MspInit+0x118>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d1fa      	bne.n	800465a <HAL_ADC_MspInit+0x86>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004664:	4b1f      	ldr	r3, [pc, #124]	@ (80046e4 <HAL_ADC_MspInit+0x110>)
    hdma_adc3.Instance = DMA2_Channel5;
 8004666:	4c22      	ldr	r4, [pc, #136]	@ (80046f0 <HAL_ADC_MspInit+0x11c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004668:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800466a:	4822      	ldr	r0, [pc, #136]	@ (80046f4 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 800466c:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004670:	615a      	str	r2, [r3, #20]
 8004672:	695a      	ldr	r2, [r3, #20]
 8004674:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8004678:	9203      	str	r2, [sp, #12]
 800467a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800467c:	695a      	ldr	r2, [r3, #20]
 800467e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004682:	615a      	str	r2, [r3, #20]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800468a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800468c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800468e:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004690:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004692:	2303      	movs	r3, #3
 8004694:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004698:	f001 f990 	bl	80059bc <HAL_GPIO_Init>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800469c:	2080      	movs	r0, #128	@ 0x80
 800469e:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046a2:	4915      	ldr	r1, [pc, #84]	@ (80046f8 <HAL_ADC_MspInit+0x124>)
 80046a4:	2300      	movs	r3, #0
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80046a6:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80046aa:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 80046ae:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80046b0:	4620      	mov	r0, r4
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046b2:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80046b6:	e9c4 6205 	strd	r6, r2, [r4, #20]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80046ba:	60a3      	str	r3, [r4, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80046bc:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80046be:	f001 f8b9 	bl	8005834 <HAL_DMA_Init>
 80046c2:	b108      	cbz	r0, 80046c8 <HAL_ADC_MspInit+0xf4>
      Error_Handler();
 80046c4:	f7fe ffeb 	bl	800369e <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80046c8:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 80046ca:	2200      	movs	r2, #0
 80046cc:	2105      	movs	r1, #5
 80046ce:	202f      	movs	r0, #47	@ 0x2f
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80046d0:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 80046d2:	f001 f84f 	bl	8005774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80046d6:	202f      	movs	r0, #47	@ 0x2f
 80046d8:	f001 f87e 	bl	80057d8 <HAL_NVIC_EnableIRQ>
}
 80046dc:	e7bd      	b.n	800465a <HAL_ADC_MspInit+0x86>
 80046de:	bf00      	nop
 80046e0:	50000100 	.word	0x50000100
 80046e4:	40021000 	.word	0x40021000
 80046e8:	200013d0 	.word	0x200013d0
 80046ec:	50000400 	.word	0x50000400
 80046f0:	2000138c 	.word	0x2000138c
 80046f4:	48000400 	.word	0x48000400
 80046f8:	40020458 	.word	0x40020458
 80046fc:	40020408 	.word	0x40020408

08004700 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8004700:	6802      	ldr	r2, [r0, #0]
 8004702:	4b07      	ldr	r3, [pc, #28]	@ (8004720 <HAL_RTC_MspInit+0x20>)
 8004704:	429a      	cmp	r2, r3
 8004706:	d10a      	bne.n	800471e <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004708:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800470c:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004710:	4b04      	ldr	r3, [pc, #16]	@ (8004724 <HAL_RTC_MspInit+0x24>)
 8004712:	fab2 f282 	clz	r2, r2
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	2201      	movs	r2, #1
 800471c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800471e:	4770      	bx	lr
 8004720:	40002800 	.word	0x40002800
 8004724:	10908100 	.word	0x10908100

08004728 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004728:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800472a:	2214      	movs	r2, #20
{
 800472c:	b08a      	sub	sp, #40	@ 0x28
 800472e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004730:	2100      	movs	r1, #0
 8004732:	eb0d 0002 	add.w	r0, sp, r2
 8004736:	f007 f909 	bl	800b94c <memset>
  if(hspi->Instance==SPI1)
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	4a1e      	ldr	r2, [pc, #120]	@ (80047b8 <HAL_SPI_MspInit+0x90>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d120      	bne.n	8004784 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004742:	4b1e      	ldr	r3, [pc, #120]	@ (80047bc <HAL_SPI_MspInit+0x94>)
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800474a:	619a      	str	r2, [r3, #24]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004752:	9201      	str	r2, [sp, #4]
 8004754:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004756:	695a      	ldr	r2, [r3, #20]
 8004758:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800475c:	615a      	str	r2, [r3, #20]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004764:	9302      	str	r3, [sp, #8]
 8004766:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004768:	2338      	movs	r3, #56	@ 0x38
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800476a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800476c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800476e:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004770:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004772:	2305      	movs	r3, #5
 8004774:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004778:	4811      	ldr	r0, [pc, #68]	@ (80047c0 <HAL_SPI_MspInit+0x98>)
 800477a:	a905      	add	r1, sp, #20
 800477c:	f001 f91e 	bl	80059bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004780:	b00a      	add	sp, #40	@ 0x28
 8004782:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8004784:	4a0f      	ldr	r2, [pc, #60]	@ (80047c4 <HAL_SPI_MspInit+0x9c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d1fa      	bne.n	8004780 <HAL_SPI_MspInit+0x58>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800478a:	4b0c      	ldr	r3, [pc, #48]	@ (80047bc <HAL_SPI_MspInit+0x94>)
 800478c:	69da      	ldr	r2, [r3, #28]
 800478e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004792:	61da      	str	r2, [r3, #28]
 8004794:	69da      	ldr	r2, [r3, #28]
 8004796:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800479a:	9203      	str	r2, [sp, #12]
 800479c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800479e:	695a      	ldr	r2, [r3, #20]
 80047a0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80047a4:	615a      	str	r2, [r3, #20]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047ac:	9304      	str	r3, [sp, #16]
 80047ae:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80047b0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80047b4:	e7d9      	b.n	800476a <HAL_SPI_MspInit+0x42>
 80047b6:	bf00      	nop
 80047b8:	40013000 	.word	0x40013000
 80047bc:	40021000 	.word	0x40021000
 80047c0:	48000400 	.word	0x48000400
 80047c4:	40003800 	.word	0x40003800

080047c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047c8:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 80047ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004804 <HAL_TIM_Base_MspInit+0x3c>)
 80047cc:	6802      	ldr	r2, [r0, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d115      	bne.n	80047fe <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047d2:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80047d6:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047d8:	69da      	ldr	r2, [r3, #28]
 80047da:	f042 0202 	orr.w	r2, r2, #2
 80047de:	61da      	str	r2, [r3, #28]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80047e8:	2200      	movs	r2, #0
 80047ea:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047ec:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80047ee:	f000 ffc1 	bl	8005774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80047f2:	201d      	movs	r0, #29

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80047f4:	b003      	add	sp, #12
 80047f6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80047fa:	f000 bfed 	b.w	80057d8 <HAL_NVIC_EnableIRQ>
}
 80047fe:	b003      	add	sp, #12
 8004800:	f85d fb04 	ldr.w	pc, [sp], #4
 8004804:	40000400 	.word	0x40000400

08004808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004808:	b530      	push	{r4, r5, lr}
 800480a:	4605      	mov	r5, r0
 800480c:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800480e:	2214      	movs	r2, #20
 8004810:	2100      	movs	r1, #0
 8004812:	a807      	add	r0, sp, #28
 8004814:	f007 f89a 	bl	800b94c <memset>
  if(huart->Instance==USART1)
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	4a4a      	ldr	r2, [pc, #296]	@ (8004944 <HAL_UART_MspInit+0x13c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d137      	bne.n	8004890 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004820:	4b49      	ldr	r3, [pc, #292]	@ (8004948 <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004822:	4c4a      	ldr	r4, [pc, #296]	@ (800494c <HAL_UART_MspInit+0x144>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800482a:	619a      	str	r2, [r3, #24]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004832:	9201      	str	r2, [sp, #4]
 8004834:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004836:	695a      	ldr	r2, [r3, #20]
 8004838:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800483c:	615a      	str	r2, [r3, #20]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004844:	9302      	str	r3, [sp, #8]
 8004846:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004848:	f44f 6ec0 	mov.w	lr, #1536	@ 0x600
 800484c:	2302      	movs	r3, #2
 800484e:	e9cd e307 	strd	lr, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004852:	2203      	movs	r2, #3
 8004854:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004856:	a907      	add	r1, sp, #28
 8004858:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800485c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004860:	f001 f8ac 	bl	80059bc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004864:	4b3a      	ldr	r3, [pc, #232]	@ (8004950 <HAL_UART_MspInit+0x148>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004866:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004868:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800486a:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800486c:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004870:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004874:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004876:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004878:	61a2      	str	r2, [r4, #24]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800487a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800487c:	4620      	mov	r0, r4
 800487e:	f000 ffd9 	bl	8005834 <HAL_DMA_Init>
 8004882:	b108      	cbz	r0, 8004888 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8004884:	f7fe ff0b 	bl	800369e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004888:	676c      	str	r4, [r5, #116]	@ 0x74
 800488a:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800488c:	b00d      	add	sp, #52	@ 0x34
 800488e:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 8004890:	4a30      	ldr	r2, [pc, #192]	@ (8004954 <HAL_UART_MspInit+0x14c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d123      	bne.n	80048de <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004896:	4b2c      	ldr	r3, [pc, #176]	@ (8004948 <HAL_UART_MspInit+0x140>)
 8004898:	69da      	ldr	r2, [r3, #28]
 800489a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800489e:	61da      	str	r2, [r3, #28]
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80048a6:	9203      	str	r2, [sp, #12]
 80048a8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048aa:	695a      	ldr	r2, [r3, #20]
 80048ac:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80048b0:	615a      	str	r2, [r3, #20]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b8:	9304      	str	r3, [sp, #16]
 80048ba:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048bc:	240c      	movs	r4, #12
 80048be:	2302      	movs	r3, #2
 80048c0:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048c4:	f04f 0c03 	mov.w	ip, #3
 80048c8:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ca:	a907      	add	r1, sp, #28
 80048cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048d0:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80048d4:	4c20      	ldr	r4, [pc, #128]	@ (8004958 <HAL_UART_MspInit+0x150>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d6:	f001 f871 	bl	80059bc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80048da:	4b20      	ldr	r3, [pc, #128]	@ (800495c <HAL_UART_MspInit+0x154>)
 80048dc:	e7c3      	b.n	8004866 <HAL_UART_MspInit+0x5e>
  else if(huart->Instance==USART3)
 80048de:	4a20      	ldr	r2, [pc, #128]	@ (8004960 <HAL_UART_MspInit+0x158>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d1d3      	bne.n	800488c <HAL_UART_MspInit+0x84>
    __HAL_RCC_USART3_CLK_ENABLE();
 80048e4:	4b18      	ldr	r3, [pc, #96]	@ (8004948 <HAL_UART_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048e6:	481f      	ldr	r0, [pc, #124]	@ (8004964 <HAL_UART_MspInit+0x15c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80048e8:	69da      	ldr	r2, [r3, #28]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80048ea:	4c1f      	ldr	r4, [pc, #124]	@ (8004968 <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80048ec:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80048f0:	61da      	str	r2, [r3, #28]
 80048f2:	69da      	ldr	r2, [r3, #28]
 80048f4:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80048f8:	9205      	str	r2, [sp, #20]
 80048fa:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004902:	615a      	str	r2, [r3, #20]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800490a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800490c:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004910:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004912:	2302      	movs	r3, #2
 8004914:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004918:	2103      	movs	r1, #3
 800491a:	2307      	movs	r3, #7
 800491c:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004920:	a907      	add	r1, sp, #28
 8004922:	f001 f84b 	bl	80059bc <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004926:	4811      	ldr	r0, [pc, #68]	@ (800496c <HAL_UART_MspInit+0x164>)
 8004928:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800492a:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800492c:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004930:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004934:	60a3      	str	r3, [r4, #8]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004936:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004938:	2320      	movs	r3, #32
 800493a:	61a3      	str	r3, [r4, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800493c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004940:	e79b      	b.n	800487a <HAL_UART_MspInit+0x72>
 8004942:	bf00      	nop
 8004944:	40013800 	.word	0x40013800
 8004948:	40021000 	.word	0x40021000
 800494c:	2000107c 	.word	0x2000107c
 8004950:	40020058 	.word	0x40020058
 8004954:	40004400 	.word	0x40004400
 8004958:	20001038 	.word	0x20001038
 800495c:	4002006c 	.word	0x4002006c
 8004960:	40004800 	.word	0x40004800
 8004964:	48000400 	.word	0x48000400
 8004968:	20000ff4 	.word	0x20000ff4
 800496c:	40020030 	.word	0x40020030

08004970 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004970:	4b21      	ldr	r3, [pc, #132]	@ (80049f8 <HAL_InitTick+0x88>)
{
 8004972:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004974:	69da      	ldr	r2, [r3, #28]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	61da      	str	r2, [r3, #28]
 800497c:	69db      	ldr	r3, [r3, #28]
{
 800497e:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	9302      	str	r3, [sp, #8]
{
 8004986:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004988:	a901      	add	r1, sp, #4
 800498a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 800498c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800498e:	f001 fc3f 	bl	8006210 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004992:	9b06      	ldr	r3, [sp, #24]
 8004994:	bb53      	cbnz	r3, 80049ec <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004996:	f001 fc0b 	bl	80061b0 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800499a:	4e18      	ldr	r6, [pc, #96]	@ (80049fc <HAL_InitTick+0x8c>)
 800499c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80049a0:	6033      	str	r3, [r6, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80049a2:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80049a6:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80049a8:	4b15      	ldr	r3, [pc, #84]	@ (8004a00 <HAL_InitTick+0x90>)
 80049aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ae:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 80049b0:	6073      	str	r3, [r6, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 80049b2:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049b8:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049ba:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 80049bc:	f002 fc6c 	bl	8007298 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80049c0:	4604      	mov	r4, r0
 80049c2:	b980      	cbnz	r0, 80049e6 <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80049c4:	4630      	mov	r0, r6
 80049c6:	f002 fb29 	bl	800701c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80049ca:	4604      	mov	r4, r0
 80049cc:	b958      	cbnz	r0, 80049e6 <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80049ce:	201c      	movs	r0, #28
 80049d0:	f000 ff02 	bl	80057d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049d4:	2d0f      	cmp	r5, #15
 80049d6:	d80d      	bhi.n	80049f4 <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80049d8:	4622      	mov	r2, r4
 80049da:	4629      	mov	r1, r5
 80049dc:	201c      	movs	r0, #28
 80049de:	f000 fec9 	bl	8005774 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049e2:	4b08      	ldr	r3, [pc, #32]	@ (8004a04 <HAL_InitTick+0x94>)
 80049e4:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80049e6:	4620      	mov	r0, r4
 80049e8:	b008      	add	sp, #32
 80049ea:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80049ec:	f001 fbe0 	bl	80061b0 <HAL_RCC_GetPCLK1Freq>
 80049f0:	0040      	lsls	r0, r0, #1
 80049f2:	e7d2      	b.n	800499a <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 80049f4:	2401      	movs	r4, #1
 80049f6:	e7f6      	b.n	80049e6 <HAL_InitTick+0x76>
 80049f8:	40021000 	.word	0x40021000
 80049fc:	200016e0 	.word	0x200016e0
 8004a00:	000f4240 	.word	0x000f4240
 8004a04:	20000018 	.word	0x20000018

08004a08 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a08:	e7fe      	b.n	8004a08 <NMI_Handler>

08004a0a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a0a:	e7fe      	b.n	8004a0a <HardFault_Handler>

08004a0c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a0c:	e7fe      	b.n	8004a0c <MemManage_Handler>

08004a0e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a0e:	e7fe      	b.n	8004a0e <BusFault_Handler>

08004a10 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a10:	e7fe      	b.n	8004a10 <UsageFault_Handler>

08004a12 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a12:	4770      	bx	lr

08004a14 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004a14:	4801      	ldr	r0, [pc, #4]	@ (8004a1c <DMA1_Channel3_IRQHandler+0x8>)
 8004a16:	f000 bf89 	b.w	800592c <HAL_DMA_IRQHandler>
 8004a1a:	bf00      	nop
 8004a1c:	20000ff4 	.word	0x20000ff4

08004a20 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004a20:	4801      	ldr	r0, [pc, #4]	@ (8004a28 <DMA1_Channel5_IRQHandler+0x8>)
 8004a22:	f000 bf83 	b.w	800592c <HAL_DMA_IRQHandler>
 8004a26:	bf00      	nop
 8004a28:	2000107c 	.word	0x2000107c

08004a2c <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004a2c:	4801      	ldr	r0, [pc, #4]	@ (8004a34 <DMA1_Channel6_IRQHandler+0x8>)
 8004a2e:	f000 bf7d 	b.w	800592c <HAL_DMA_IRQHandler>
 8004a32:	bf00      	nop
 8004a34:	20001038 	.word	0x20001038

08004a38 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a38:	4801      	ldr	r0, [pc, #4]	@ (8004a40 <TIM2_IRQHandler+0x8>)
 8004a3a:	f002 bb29 	b.w	8007090 <HAL_TIM_IRQHandler>
 8004a3e:	bf00      	nop
 8004a40:	200016e0 	.word	0x200016e0

08004a44 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a44:	4801      	ldr	r0, [pc, #4]	@ (8004a4c <TIM3_IRQHandler+0x8>)
 8004a46:	f002 bb23 	b.w	8007090 <HAL_TIM_IRQHandler>
 8004a4a:	bf00      	nop
 8004a4c:	20001258 	.word	0x20001258

08004a50 <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8004a50:	4801      	ldr	r0, [pc, #4]	@ (8004a58 <ADC3_IRQHandler+0x8>)
 8004a52:	f000 ba93 	b.w	8004f7c <HAL_ADC_IRQHandler>
 8004a56:	bf00      	nop
 8004a58:	20001414 	.word	0x20001414

08004a5c <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004a5c:	4801      	ldr	r0, [pc, #4]	@ (8004a64 <DMA2_Channel1_IRQHandler+0x8>)
 8004a5e:	f000 bf65 	b.w	800592c <HAL_DMA_IRQHandler>
 8004a62:	bf00      	nop
 8004a64:	200013d0 	.word	0x200013d0

08004a68 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004a68:	4801      	ldr	r0, [pc, #4]	@ (8004a70 <DMA2_Channel5_IRQHandler+0x8>)
 8004a6a:	f000 bf5f 	b.w	800592c <HAL_DMA_IRQHandler>
 8004a6e:	bf00      	nop
 8004a70:	2000138c 	.word	0x2000138c

08004a74 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004a74:	2001      	movs	r0, #1
 8004a76:	4770      	bx	lr

08004a78 <_kill>:

int _kill(int pid, int sig)
{
 8004a78:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004a7a:	f007 fd89 	bl	800c590 <__errno>
 8004a7e:	2316      	movs	r3, #22
 8004a80:	6003      	str	r3, [r0, #0]
  return -1;
}
 8004a82:	f04f 30ff 	mov.w	r0, #4294967295
 8004a86:	bd08      	pop	{r3, pc}

08004a88 <_exit>:

void _exit (int status)
{
 8004a88:	b508      	push	{r3, lr}
  errno = EINVAL;
 8004a8a:	f007 fd81 	bl	800c590 <__errno>
 8004a8e:	2316      	movs	r3, #22
 8004a90:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8004a92:	e7fe      	b.n	8004a92 <_exit+0xa>

08004a94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a94:	b570      	push	{r4, r5, r6, lr}
 8004a96:	460d      	mov	r5, r1
 8004a98:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a9a:	460e      	mov	r6, r1
 8004a9c:	1b73      	subs	r3, r6, r5
 8004a9e:	429c      	cmp	r4, r3
 8004aa0:	dc01      	bgt.n	8004aa6 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8004aa6:	f3af 8000 	nop.w
 8004aaa:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004aae:	e7f5      	b.n	8004a9c <_read+0x8>

08004ab0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ab0:	b570      	push	{r4, r5, r6, lr}
 8004ab2:	460d      	mov	r5, r1
 8004ab4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ab6:	460e      	mov	r6, r1
 8004ab8:	1b73      	subs	r3, r6, r5
 8004aba:	429c      	cmp	r4, r3
 8004abc:	dc01      	bgt.n	8004ac2 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8004abe:	4620      	mov	r0, r4
 8004ac0:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8004ac2:	f816 0b01 	ldrb.w	r0, [r6], #1
 8004ac6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004aca:	e7f5      	b.n	8004ab8 <_write+0x8>

08004acc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad0:	4770      	bx	lr

08004ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8004ad2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ad6:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004ad8:	2000      	movs	r0, #0
 8004ada:	4770      	bx	lr

08004adc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004adc:	2001      	movs	r0, #1
 8004ade:	4770      	bx	lr

08004ae0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	4770      	bx	lr

08004ae4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8004b14 <_sbrk+0x30>)
 8004ae6:	6811      	ldr	r1, [r2, #0]
{
 8004ae8:	b510      	push	{r4, lr}
 8004aea:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8004aec:	b909      	cbnz	r1, 8004af2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8004aee:	490a      	ldr	r1, [pc, #40]	@ (8004b18 <_sbrk+0x34>)
 8004af0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004af2:	6810      	ldr	r0, [r2, #0]
 8004af4:	4909      	ldr	r1, [pc, #36]	@ (8004b1c <_sbrk+0x38>)
 8004af6:	4c0a      	ldr	r4, [pc, #40]	@ (8004b20 <_sbrk+0x3c>)
 8004af8:	4403      	add	r3, r0
 8004afa:	1b09      	subs	r1, r1, r4
 8004afc:	428b      	cmp	r3, r1
 8004afe:	d906      	bls.n	8004b0e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8004b00:	f007 fd46 	bl	800c590 <__errno>
 8004b04:	230c      	movs	r3, #12
 8004b06:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004b0c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8004b0e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8004b10:	e7fc      	b.n	8004b0c <_sbrk+0x28>
 8004b12:	bf00      	nop
 8004b14:	20001730 	.word	0x20001730
 8004b18:	20009848 	.word	0x20009848
 8004b1c:	2000a000 	.word	0x2000a000
 8004b20:	00000400 	.word	0x00000400

08004b24 <uart_transmit_string>:
#include "system_management.h"
#include <stdio.h>
#include <stdarg.h>
#include <string.h>

void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	4605      	mov	r5, r0
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 8004b28:	4608      	mov	r0, r1
void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 8004b2a:	460c      	mov	r4, r1
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 8004b2c:	f7fb fbb0 	bl	8000290 <strlen>
 8004b30:	4621      	mov	r1, r4
 8004b32:	b282      	uxth	r2, r0
 8004b34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b38:	4628      	mov	r0, r5
}
 8004b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 8004b3e:	f002 bf59 	b.w	80079f4 <HAL_UART_Transmit>
	...

08004b44 <Debug_printf>:


void Debug_printf(const char *format, ...) {
 8004b44:	b40f      	push	{r0, r1, r2, r3}
 8004b46:	b500      	push	{lr}
 8004b48:	b0c3      	sub	sp, #268	@ 0x10c
 8004b4a:	ab44      	add	r3, sp, #272	@ 0x110

    // Start processing the variadic arguments
    va_start(args, format);

    // Format the string
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 8004b4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
void Debug_printf(const char *format, ...) {
 8004b50:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 8004b54:	9301      	str	r3, [sp, #4]
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 8004b56:	a802      	add	r0, sp, #8
 8004b58:	f006 feea 	bl	800b930 <vsniprintf>

    // End processing the arguments
    va_end(args);

    // Transmit the formatted string over UART
    uart_transmit_string(&huart1,(uint8_t*) output_buffer);
 8004b5c:	4804      	ldr	r0, [pc, #16]	@ (8004b70 <Debug_printf+0x2c>)
 8004b5e:	a902      	add	r1, sp, #8
 8004b60:	f7ff ffe0 	bl	8004b24 <uart_transmit_string>
}
 8004b64:	b043      	add	sp, #268	@ 0x10c
 8004b66:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b6a:	b004      	add	sp, #16
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	200011d0 	.word	0x200011d0

08004b74 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b74:	4a03      	ldr	r2, [pc, #12]	@ (8004b84 <SystemInit+0x10>)
 8004b76:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004b7a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b7e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b82:	4770      	bx	lr
 8004b84:	e000ed00 	.word	0xe000ed00

08004b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004b88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004bc0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004b8c:	f7ff fff2 	bl	8004b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b90:	480c      	ldr	r0, [pc, #48]	@ (8004bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004b92:	490d      	ldr	r1, [pc, #52]	@ (8004bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b94:	4a0d      	ldr	r2, [pc, #52]	@ (8004bcc <LoopForever+0xe>)
  movs r3, #0
 8004b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b98:	e002      	b.n	8004ba0 <LoopCopyDataInit>

08004b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b9e:	3304      	adds	r3, #4

08004ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ba4:	d3f9      	bcc.n	8004b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8004bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8004bd4 <LoopForever+0x16>)
  movs r3, #0
 8004baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bac:	e001      	b.n	8004bb2 <LoopFillZerobss>

08004bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bb0:	3204      	adds	r2, #4

08004bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bb4:	d3fb      	bcc.n	8004bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004bb6:	f007 fcf1 	bl	800c59c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004bba:	f7fe fb1d 	bl	80031f8 <main>

08004bbe <LoopForever>:

LoopForever:
    b LoopForever
 8004bbe:	e7fe      	b.n	8004bbe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004bc0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bc8:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8004bcc:	08011f28 	.word	0x08011f28
  ldr r2, =_sbss
 8004bd0:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8004bd4:	20009848 	.word	0x20009848

08004bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004bd8:	e7fe      	b.n	8004bd8 <ADC1_2_IRQHandler>

08004bda <__cxa_guard_abort.part.0>:

/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
 8004bda:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8004bdc:	b672      	cpsid	i
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004bde:	f7fe fd5e 	bl	800369e <Error_Handler>
 8004be2:	e7fe      	b.n	8004be2 <__cxa_guard_abort.part.0+0x8>

08004be4 <stm32_lock_acquire>:
{
 8004be4:	b508      	push	{r3, lr}
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8004be6:	7a03      	ldrb	r3, [r0, #8]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d903      	bls.n	8004bf4 <stm32_lock_acquire+0x10>
 8004bec:	b672      	cpsid	i
 8004bee:	f7fe fd56 	bl	800369e <Error_Handler>
 8004bf2:	e7fe      	b.n	8004bf2 <stm32_lock_acquire+0xe>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	7202      	strb	r2, [r0, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bf8:	f3ef 8211 	mrs	r2, BASEPRI
 8004bfc:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8004c00:	f381 8811 	msr	BASEPRI, r1
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8004c10:	bd08      	pop	{r3, pc}

08004c12 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8004c12:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
  lock->nesting_level--;
 8004c14:	7a03      	ldrb	r3, [r0, #8]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b2db      	uxtb	r3, r3
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8004c1a:	2b01      	cmp	r3, #1
  lock->nesting_level--;
 8004c1c:	7203      	strb	r3, [r0, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8004c1e:	d903      	bls.n	8004c28 <stm32_lock_release+0x16>
 8004c20:	b672      	cpsid	i
 8004c22:	f7fe fd3c 	bl	800369e <Error_Handler>
 8004c26:	e7fe      	b.n	8004c26 <stm32_lock_release+0x14>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c28:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004c2c:	f383 8811 	msr	BASEPRI, r3
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
}
 8004c30:	bd08      	pop	{r3, pc}

08004c32 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8004c32:	b510      	push	{r4, lr}
  if (lock == NULL)
 8004c34:	4604      	mov	r4, r0
 8004c36:	b920      	cbnz	r0, 8004c42 <__retarget_lock_init_recursive+0x10>
  {
    errno = EINVAL;
 8004c38:	f007 fcaa 	bl	800c590 <__errno>
 8004c3c:	2316      	movs	r3, #22
 8004c3e:	6003      	str	r3, [r0, #0]
    return;
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
}
 8004c40:	bd10      	pop	{r4, pc}
  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8004c42:	200c      	movs	r0, #12
 8004c44:	f004 ff0a 	bl	8009a5c <malloc>
 8004c48:	6020      	str	r0, [r4, #0]
  if (*lock != NULL)
 8004c4a:	b120      	cbz	r0, 8004c56 <__retarget_lock_init_recursive+0x24>
    lock->basepri[i] = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e9c0 3300 	strd	r3, r3, [r0]
  lock->nesting_level = 0;
 8004c52:	7203      	strb	r3, [r0, #8]
}
 8004c54:	e7f4      	b.n	8004c40 <__retarget_lock_init_recursive+0xe>
 8004c56:	f7ff ffc0 	bl	8004bda <__cxa_guard_abort.part.0>

08004c5a <__retarget_lock_acquire>:
/**
  * @brief Acquire lock
  * @param lock The lock
  */
void __retarget_lock_acquire(_LOCK_T lock)
{
 8004c5a:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004c5c:	b908      	cbnz	r0, 8004c62 <__retarget_lock_acquire+0x8>
 8004c5e:	f7ff ffbc 	bl	8004bda <__cxa_guard_abort.part.0>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
}
 8004c62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8004c66:	f7ff bfbd 	b.w	8004be4 <stm32_lock_acquire>

08004c6a <__retarget_lock_acquire_recursive>:
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
 8004c6a:	f7ff bff6 	b.w	8004c5a <__retarget_lock_acquire>

08004c6e <__retarget_lock_release>:
/**
  * @brief Release lock
  * @param lock The lock
  */
void __retarget_lock_release(_LOCK_T lock)
{
 8004c6e:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004c70:	b918      	cbnz	r0, 8004c7a <__retarget_lock_release+0xc>
 8004c72:	b672      	cpsid	i
 8004c74:	f7fe fd13 	bl	800369e <Error_Handler>
 8004c78:	e7fe      	b.n	8004c78 <__retarget_lock_release+0xa>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
}
 8004c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8004c7e:	f7ff bfc8 	b.w	8004c12 <stm32_lock_release>

08004c82 <__retarget_lock_release_recursive>:
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) \
  __retarget_lock_try_acquire_recursive(lock)
extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
 8004c82:	f7ff bff4 	b.w	8004c6e <__retarget_lock_release>
	...

08004c88 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c88:	4a07      	ldr	r2, [pc, #28]	@ (8004ca8 <HAL_Init+0x20>)
{
 8004c8a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c8c:	6813      	ldr	r3, [r2, #0]
 8004c8e:	f043 0310 	orr.w	r3, r3, #16
 8004c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c94:	2003      	movs	r0, #3
 8004c96:	f000 fd5b 	bl	8005750 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c9a:	200f      	movs	r0, #15
 8004c9c:	f7ff fe68 	bl	8004970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ca0:	f7ff fc7a 	bl	8004598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	bd08      	pop	{r3, pc}
 8004ca8:	40022000 	.word	0x40022000

08004cac <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004cac:	4a03      	ldr	r2, [pc, #12]	@ (8004cbc <HAL_IncTick+0x10>)
 8004cae:	4b04      	ldr	r3, [pc, #16]	@ (8004cc0 <HAL_IncTick+0x14>)
 8004cb0:	6811      	ldr	r1, [r2, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	440b      	add	r3, r1
 8004cb6:	6013      	str	r3, [r2, #0]
}
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20001764 	.word	0x20001764
 8004cc0:	20000014 	.word	0x20000014

08004cc4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8004cc4:	4b01      	ldr	r3, [pc, #4]	@ (8004ccc <HAL_GetTick+0x8>)
 8004cc6:	6818      	ldr	r0, [r3, #0]
}
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20001764 	.word	0x20001764

08004cd0 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_ADC_ErrorCallback>:
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8004cd4:	4770      	bx	lr

08004cd6 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004cd6:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004cd8:	6803      	ldr	r3, [r0, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	f002 0203 	and.w	r2, r2, #3
 8004ce0:	2a01      	cmp	r2, #1
{
 8004ce2:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004ce4:	d001      	beq.n	8004cea <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004ce6:	2000      	movs	r0, #0
}
 8004ce8:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	07d1      	lsls	r1, r2, #31
 8004cee:	d5fa      	bpl.n	8004ce6 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	f002 020d 	and.w	r2, r2, #13
 8004cf6:	2a01      	cmp	r2, #1
 8004cf8:	d115      	bne.n	8004d26 <ADC_Disable+0x50>
      __HAL_ADC_DISABLE(hadc);
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	f042 0202 	orr.w	r2, r2, #2
 8004d00:	609a      	str	r2, [r3, #8]
 8004d02:	2203      	movs	r2, #3
 8004d04:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004d06:	f7ff ffdd 	bl	8004cc4 <HAL_GetTick>
 8004d0a:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	07db      	lsls	r3, r3, #31
 8004d12:	d5e8      	bpl.n	8004ce6 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d14:	f7ff ffd6 	bl	8004cc4 <HAL_GetTick>
 8004d18:	1b40      	subs	r0, r0, r5
 8004d1a:	2802      	cmp	r0, #2
 8004d1c:	d9f6      	bls.n	8004d0c <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	07da      	lsls	r2, r3, #31
 8004d24:	d5f2      	bpl.n	8004d0c <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d28:	f043 0310 	orr.w	r3, r3, #16
 8004d2c:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d2e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004d30:	f043 0301 	orr.w	r3, r3, #1
 8004d34:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 8004d36:	2001      	movs	r0, #1
 8004d38:	e7d6      	b.n	8004ce8 <ADC_Disable+0x12>
	...

08004d3c <HAL_ADC_Init>:
{
 8004d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8004d42:	4604      	mov	r4, r0
 8004d44:	2800      	cmp	r0, #0
 8004d46:	f000 8103 	beq.w	8004f50 <HAL_ADC_Init+0x214>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d4a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004d4c:	06d5      	lsls	r5, r2, #27
 8004d4e:	d46a      	bmi.n	8004e26 <HAL_ADC_Init+0xea>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004d50:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d035      	beq.n	8004dc2 <HAL_ADC_Init+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d56:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	00d2      	lsls	r2, r2, #3
 8004d5e:	d502      	bpl.n	8004d66 <HAL_ADC_Init+0x2a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004d60:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004d62:	009d      	lsls	r5, r3, #2
 8004d64:	d50a      	bpl.n	8004d7c <HAL_ADC_Init+0x40>
      ADC_STATE_CLR_SET(hadc->State,
 8004d66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d68:	f023 0312 	bic.w	r3, r3, #18
 8004d6c:	f043 0310 	orr.w	r3, r3, #16
 8004d70:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d72:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004d74:	f043 0301 	orr.w	r3, r3, #1
 8004d78:	6463      	str	r3, [r4, #68]	@ 0x44
      tmp_hal_status = HAL_ERROR;
 8004d7a:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004d7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d7e:	06d9      	lsls	r1, r3, #27
 8004d80:	f100 80e0 	bmi.w	8004f44 <HAL_ADC_Init+0x208>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	f040 80dd 	bne.w	8004f44 <HAL_ADC_Init+0x208>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8004d8e:	0752      	lsls	r2, r2, #29
 8004d90:	f100 80d8 	bmi.w	8004f44 <HAL_ADC_Init+0x208>
    ADC_STATE_CLR_SET(hadc->State,
 8004d94:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004d96:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8004d9a:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8004da2:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004da4:	4a6b      	ldr	r2, [pc, #428]	@ (8004f54 <HAL_ADC_Init+0x218>)
 8004da6:	d042      	beq.n	8004e2e <HAL_ADC_Init+0xf2>
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d03e      	beq.n	8004e2a <HAL_ADC_Init+0xee>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004dac:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8004db0:	4293      	cmp	r3, r2
 8004db2:	4969      	ldr	r1, [pc, #420]	@ (8004f58 <HAL_ADC_Init+0x21c>)
 8004db4:	f000 80b3 	beq.w	8004f1e <HAL_ADC_Init+0x1e2>
 8004db8:	428b      	cmp	r3, r1
 8004dba:	bf18      	it	ne
 8004dbc:	2200      	movne	r2, #0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004dbe:	4967      	ldr	r1, [pc, #412]	@ (8004f5c <HAL_ADC_Init+0x220>)
 8004dc0:	e036      	b.n	8004e30 <HAL_ADC_Init+0xf4>
      hadc->InjectionConfig.ContextQueue = 0U;
 8004dc2:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8004dc6:	6443      	str	r3, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 8004dc8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 8004dcc:	f7ff fc02 	bl	80045d4 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	00d8      	lsls	r0, r3, #3
 8004dd6:	d4be      	bmi.n	8004d56 <HAL_ADC_Init+0x1a>
        tmp_hal_status = ADC_Disable(hadc);
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7ff ff7c 	bl	8004cd6 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004dde:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004de0:	06d1      	lsls	r1, r2, #27
 8004de2:	d4b9      	bmi.n	8004d58 <HAL_ADC_Init+0x1c>
 8004de4:	2800      	cmp	r0, #0
 8004de6:	d1b7      	bne.n	8004d58 <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 8004de8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004dea:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8004dec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004df0:	f023 0302 	bic.w	r3, r3, #2
 8004df4:	f043 0302 	orr.w	r3, r3, #2
 8004df8:	6423      	str	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004dfa:	6893      	ldr	r3, [r2, #8]
 8004dfc:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8004e00:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004e02:	6893      	ldr	r3, [r2, #8]
 8004e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e08:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004e0a:	4b55      	ldr	r3, [pc, #340]	@ (8004f60 <HAL_ADC_Init+0x224>)
 8004e0c:	4a55      	ldr	r2, [pc, #340]	@ (8004f64 <HAL_ADC_Init+0x228>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e14:	220a      	movs	r2, #10
 8004e16:	4353      	muls	r3, r2
            wait_loop_index--;
 8004e18:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8004e1a:	9b01      	ldr	r3, [sp, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d09a      	beq.n	8004d56 <HAL_ADC_Init+0x1a>
            wait_loop_index--;
 8004e20:	9b01      	ldr	r3, [sp, #4]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	e7f8      	b.n	8004e18 <HAL_ADC_Init+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e26:	4618      	mov	r0, r3
 8004e28:	e7a8      	b.n	8004d7c <HAL_ADC_Init+0x40>
 8004e2a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e2e:	494e      	ldr	r1, [pc, #312]	@ (8004f68 <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004e30:	689d      	ldr	r5, [r3, #8]
 8004e32:	f005 0503 	and.w	r5, r5, #3
 8004e36:	2d01      	cmp	r5, #1
 8004e38:	d102      	bne.n	8004e40 <HAL_ADC_Init+0x104>
 8004e3a:	681d      	ldr	r5, [r3, #0]
 8004e3c:	07ed      	lsls	r5, r5, #31
 8004e3e:	d40e      	bmi.n	8004e5e <HAL_ADC_Init+0x122>
 8004e40:	b13a      	cbz	r2, 8004e52 <HAL_ADC_Init+0x116>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004e42:	6895      	ldr	r5, [r2, #8]
 8004e44:	f005 0503 	and.w	r5, r5, #3
 8004e48:	2d01      	cmp	r5, #1
 8004e4a:	d102      	bne.n	8004e52 <HAL_ADC_Init+0x116>
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	07d2      	lsls	r2, r2, #31
 8004e50:	d405      	bmi.n	8004e5e <HAL_ADC_Init+0x122>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004e52:	688a      	ldr	r2, [r1, #8]
 8004e54:	6865      	ldr	r5, [r4, #4]
 8004e56:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004e5a:	432a      	orrs	r2, r5
 8004e5c:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004e5e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e66:	7e65      	ldrb	r5, [r4, #25]
 8004e68:	3901      	subs	r1, #1
 8004e6a:	bf18      	it	ne
 8004e6c:	2101      	movne	r1, #1
 8004e6e:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8004e72:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e76:	f894 1020 	ldrb.w	r1, [r4, #32]
 8004e7a:	2901      	cmp	r1, #1
 8004e7c:	d107      	bne.n	8004e8e <HAL_ADC_Init+0x152>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004e7e:	2d00      	cmp	r5, #0
 8004e80:	d14f      	bne.n	8004f22 <HAL_ADC_Init+0x1e6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004e82:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004e84:	3901      	subs	r1, #1
 8004e86:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 8004e8a:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e8e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004e90:	2901      	cmp	r1, #1
 8004e92:	d015      	beq.n	8004ec0 <HAL_ADC_Init+0x184>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004e94:	4d35      	ldr	r5, [pc, #212]	@ (8004f6c <HAL_ADC_Init+0x230>)
 8004e96:	42ab      	cmp	r3, r5
 8004e98:	d003      	beq.n	8004ea2 <HAL_ADC_Init+0x166>
 8004e9a:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 8004e9e:	42ab      	cmp	r3, r5
 8004ea0:	d10a      	bne.n	8004eb8 <HAL_ADC_Init+0x17c>
 8004ea2:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 8004ea6:	d047      	beq.n	8004f38 <HAL_ADC_Init+0x1fc>
 8004ea8:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004eac:	d047      	beq.n	8004f3e <HAL_ADC_Init+0x202>
 8004eae:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 8004eb2:	bf08      	it	eq
 8004eb4:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 8004eb8:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8004eba:	4315      	orrs	r5, r2
 8004ebc:	ea45 0201 	orr.w	r2, r5, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004ec0:	6899      	ldr	r1, [r3, #8]
 8004ec2:	f011 0f0c 	tst.w	r1, #12
 8004ec6:	d10c      	bne.n	8004ee2 <HAL_ADC_Init+0x1a6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004ec8:	68d9      	ldr	r1, [r3, #12]
 8004eca:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8004ece:	f021 0102 	bic.w	r1, r1, #2
 8004ed2:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004ed4:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8004ed8:	7e25      	ldrb	r5, [r4, #24]
 8004eda:	0049      	lsls	r1, r1, #1
 8004edc:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 8004ee0:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8004ee2:	68dd      	ldr	r5, [r3, #12]
 8004ee4:	4922      	ldr	r1, [pc, #136]	@ (8004f70 <HAL_ADC_Init+0x234>)
 8004ee6:	4029      	ands	r1, r5
 8004ee8:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004eea:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8004eec:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004eee:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004ef0:	bf05      	ittet	eq
 8004ef2:	6b19      	ldreq	r1, [r3, #48]	@ 0x30
 8004ef4:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004ef6:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004ef8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8004efc:	bf06      	itte	eq
 8004efe:	f021 010f 	biceq.w	r1, r1, #15
 8004f02:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004f04:	f022 020f 	bicne.w	r2, r2, #15
 8004f08:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	6463      	str	r3, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004f0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f10:	f023 0303 	bic.w	r3, r3, #3
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8004f1a:	b003      	add	sp, #12
 8004f1c:	bd30      	pop	{r4, r5, pc}
 8004f1e:	460a      	mov	r2, r1
 8004f20:	e74d      	b.n	8004dbe <HAL_ADC_Init+0x82>
        ADC_STATE_CLR_SET(hadc->State,
 8004f22:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004f24:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 8004f28:	f041 0120 	orr.w	r1, r1, #32
 8004f2c:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f2e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004f30:	f041 0101 	orr.w	r1, r1, #1
 8004f34:	6461      	str	r1, [r4, #68]	@ 0x44
 8004f36:	e7aa      	b.n	8004e8e <HAL_ADC_Init+0x152>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004f38:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8004f3c:	e7bc      	b.n	8004eb8 <HAL_ADC_Init+0x17c>
 8004f3e:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8004f42:	e7b9      	b.n	8004eb8 <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 8004f44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f46:	f023 0312 	bic.w	r3, r3, #18
 8004f4a:	f043 0310 	orr.w	r3, r3, #16
 8004f4e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 8004f50:	2001      	movs	r0, #1
 8004f52:	e7e2      	b.n	8004f1a <HAL_ADC_Init+0x1de>
 8004f54:	50000100 	.word	0x50000100
 8004f58:	50000500 	.word	0x50000500
 8004f5c:	50000700 	.word	0x50000700
 8004f60:	20000010 	.word	0x20000010
 8004f64:	000f4240 	.word	0x000f4240
 8004f68:	50000300 	.word	0x50000300
 8004f6c:	50000400 	.word	0x50000400
 8004f70:	fff0c007 	.word	0xfff0c007

08004f74 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8004f74:	4770      	bx	lr

08004f76 <HAL_ADCEx_InjectedQueueOverflowCallback>:
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
 8004f76:	4770      	bx	lr

08004f78 <HAL_ADCEx_LevelOutOfWindow2Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
 8004f78:	4770      	bx	lr

08004f7a <HAL_ADCEx_LevelOutOfWindow3Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
 8004f7a:	4770      	bx	lr

08004f7c <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004f7c:	6803      	ldr	r3, [r0, #0]
{
 8004f7e:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004f80:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004f82:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004f84:	076a      	lsls	r2, r5, #29
{
 8004f86:	4604      	mov	r4, r0
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004f88:	d501      	bpl.n	8004f8e <HAL_ADC_IRQHandler+0x12>
 8004f8a:	0770      	lsls	r0, r6, #29
 8004f8c:	d403      	bmi.n	8004f96 <HAL_ADC_IRQHandler+0x1a>
 8004f8e:	0729      	lsls	r1, r5, #28
 8004f90:	d543      	bpl.n	800501a <HAL_ADC_IRQHandler+0x9e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8004f92:	0732      	lsls	r2, r6, #28
 8004f94:	d541      	bpl.n	800501a <HAL_ADC_IRQHandler+0x9e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f96:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004f98:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004f9a:	bf5e      	ittt	pl
 8004f9c:	6c22      	ldrpl	r2, [r4, #64]	@ 0x40
 8004f9e:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 8004fa2:	6422      	strpl	r2, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fa8:	d003      	beq.n	8004fb2 <HAL_ADC_IRQHandler+0x36>
 8004faa:	4a90      	ldr	r2, [pc, #576]	@ (80051ec <HAL_ADC_IRQHandler+0x270>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	f040 8105 	bne.w	80051bc <HAL_ADC_IRQHandler+0x240>
 8004fb2:	4a8f      	ldr	r2, [pc, #572]	@ (80051f0 <HAL_ADC_IRQHandler+0x274>)
 8004fb4:	6891      	ldr	r1, [r2, #8]
 8004fb6:	06c9      	lsls	r1, r1, #27
 8004fb8:	d00c      	beq.n	8004fd4 <HAL_ADC_IRQHandler+0x58>
 8004fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fbe:	d003      	beq.n	8004fc8 <HAL_ADC_IRQHandler+0x4c>
 8004fc0:	498a      	ldr	r1, [pc, #552]	@ (80051ec <HAL_ADC_IRQHandler+0x270>)
 8004fc2:	428b      	cmp	r3, r1
 8004fc4:	f040 80ff 	bne.w	80051c6 <HAL_ADC_IRQHandler+0x24a>
 8004fc8:	6892      	ldr	r2, [r2, #8]
 8004fca:	f002 021f 	and.w	r2, r2, #31
 8004fce:	2a05      	cmp	r2, #5
 8004fd0:	f040 8114 	bne.w	80051fc <HAL_ADC_IRQHandler+0x280>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004fd4:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004fd6:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8004fd8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004fdc:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8004fe0:	4311      	orrs	r1, r2
 8004fe2:	d114      	bne.n	800500e <HAL_ADC_IRQHandler+0x92>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8004fe4:	0729      	lsls	r1, r5, #28
 8004fe6:	d512      	bpl.n	800500e <HAL_ADC_IRQHandler+0x92>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004fe8:	689a      	ldr	r2, [r3, #8]
 8004fea:	0752      	lsls	r2, r2, #29
 8004fec:	f100 8122 	bmi.w	8005234 <HAL_ADC_IRQHandler+0x2b8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	f022 020c 	bic.w	r2, r2, #12
 8004ff6:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004ff8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ffa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ffe:	6423      	str	r3, [r4, #64]	@ 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005000:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005002:	04d8      	lsls	r0, r3, #19
 8005004:	d403      	bmi.n	800500e <HAL_ADC_IRQHandler+0x92>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005006:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005008:	f043 0301 	orr.w	r3, r3, #1
 800500c:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 800500e:	4620      	mov	r0, r4
 8005010:	f7ff fe5e 	bl	8004cd0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	220c      	movs	r2, #12
 8005018:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800501a:	06a9      	lsls	r1, r5, #26
 800501c:	d501      	bpl.n	8005022 <HAL_ADC_IRQHandler+0xa6>
 800501e:	06b2      	lsls	r2, r6, #26
 8005020:	d403      	bmi.n	800502a <HAL_ADC_IRQHandler+0xae>
 8005022:	066b      	lsls	r3, r5, #25
 8005024:	d562      	bpl.n	80050ec <HAL_ADC_IRQHandler+0x170>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8005026:	0670      	lsls	r0, r6, #25
 8005028:	d560      	bpl.n	80050ec <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800502a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800502c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005030:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005038:	d003      	beq.n	8005042 <HAL_ADC_IRQHandler+0xc6>
 800503a:	4a6c      	ldr	r2, [pc, #432]	@ (80051ec <HAL_ADC_IRQHandler+0x270>)
 800503c:	4293      	cmp	r3, r2
 800503e:	f040 8102 	bne.w	8005246 <HAL_ADC_IRQHandler+0x2ca>
 8005042:	4a6b      	ldr	r2, [pc, #428]	@ (80051f0 <HAL_ADC_IRQHandler+0x274>)
 8005044:	6891      	ldr	r1, [r2, #8]
 8005046:	06c9      	lsls	r1, r1, #27
 8005048:	d00c      	beq.n	8005064 <HAL_ADC_IRQHandler+0xe8>
 800504a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800504e:	d003      	beq.n	8005058 <HAL_ADC_IRQHandler+0xdc>
 8005050:	4966      	ldr	r1, [pc, #408]	@ (80051ec <HAL_ADC_IRQHandler+0x270>)
 8005052:	428b      	cmp	r3, r1
 8005054:	f040 80fc 	bne.w	8005250 <HAL_ADC_IRQHandler+0x2d4>
 8005058:	6892      	ldr	r2, [r2, #8]
 800505a:	f002 021f 	and.w	r2, r2, #31
 800505e:	2a05      	cmp	r2, #5
 8005060:	f040 8108 	bne.w	8005274 <HAL_ADC_IRQHandler+0x2f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8005064:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8005066:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005068:	f011 0fc0 	tst.w	r1, #192	@ 0xc0
 800506c:	d138      	bne.n	80050e0 <HAL_ADC_IRQHandler+0x164>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800506e:	0191      	lsls	r1, r2, #6
 8005070:	d506      	bpl.n	8005080 <HAL_ADC_IRQHandler+0x104>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8005072:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8005074:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8005078:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 800507c:	4311      	orrs	r1, r2
 800507e:	d12f      	bne.n	80050e0 <HAL_ADC_IRQHandler+0x164>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8005080:	0668      	lsls	r0, r5, #25
 8005082:	d52d      	bpl.n	80050e0 <HAL_ADC_IRQHandler+0x164>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8005084:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005088:	d003      	beq.n	8005092 <HAL_ADC_IRQHandler+0x116>
 800508a:	4a58      	ldr	r2, [pc, #352]	@ (80051ec <HAL_ADC_IRQHandler+0x270>)
 800508c:	4293      	cmp	r3, r2
 800508e:	f040 810d 	bne.w	80052ac <HAL_ADC_IRQHandler+0x330>
 8005092:	4a57      	ldr	r2, [pc, #348]	@ (80051f0 <HAL_ADC_IRQHandler+0x274>)
 8005094:	6891      	ldr	r1, [r2, #8]
 8005096:	06c9      	lsls	r1, r1, #27
 8005098:	d00c      	beq.n	80050b4 <HAL_ADC_IRQHandler+0x138>
 800509a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800509e:	d003      	beq.n	80050a8 <HAL_ADC_IRQHandler+0x12c>
 80050a0:	4952      	ldr	r1, [pc, #328]	@ (80051ec <HAL_ADC_IRQHandler+0x270>)
 80050a2:	428b      	cmp	r3, r1
 80050a4:	f040 8107 	bne.w	80052b6 <HAL_ADC_IRQHandler+0x33a>
 80050a8:	6892      	ldr	r2, [r2, #8]
 80050aa:	f002 021f 	and.w	r2, r2, #31
 80050ae:	2a06      	cmp	r2, #6
 80050b0:	f040 8113 	bne.w	80052da <HAL_ADC_IRQHandler+0x35e>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80050b4:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80050b6:	0291      	lsls	r1, r2, #10
 80050b8:	d412      	bmi.n	80050e0 <HAL_ADC_IRQHandler+0x164>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	0712      	lsls	r2, r2, #28
 80050be:	f100 8128 	bmi.w	8005312 <HAL_ADC_IRQHandler+0x396>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050c8:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80050ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050d0:	6423      	str	r3, [r4, #64]	@ 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80050d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050d4:	05d8      	lsls	r0, r3, #23
 80050d6:	d403      	bmi.n	80050e0 <HAL_ADC_IRQHandler+0x164>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050da:	f043 0301 	orr.w	r3, r3, #1
 80050de:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80050e0:	4620      	mov	r0, r4
 80050e2:	f7ff ff47 	bl	8004f74 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	2260      	movs	r2, #96	@ 0x60
 80050ea:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80050ec:	0629      	lsls	r1, r5, #24
 80050ee:	d50b      	bpl.n	8005108 <HAL_ADC_IRQHandler+0x18c>
 80050f0:	0632      	lsls	r2, r6, #24
 80050f2:	d509      	bpl.n	8005108 <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80050f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050fa:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80050fc:	4620      	mov	r0, r4
 80050fe:	f7ff fde8 	bl	8004cd2 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	2280      	movs	r2, #128	@ 0x80
 8005106:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005108:	05eb      	lsls	r3, r5, #23
 800510a:	d50c      	bpl.n	8005126 <HAL_ADC_IRQHandler+0x1aa>
 800510c:	05f0      	lsls	r0, r6, #23
 800510e:	d50a      	bpl.n	8005126 <HAL_ADC_IRQHandler+0x1aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005110:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005116:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005118:	4620      	mov	r0, r4
 800511a:	f7ff ff2d 	bl	8004f78 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005124:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005126:	05a9      	lsls	r1, r5, #22
 8005128:	d50c      	bpl.n	8005144 <HAL_ADC_IRQHandler+0x1c8>
 800512a:	05b2      	lsls	r2, r6, #22
 800512c:	d50a      	bpl.n	8005144 <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800512e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005134:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005136:	4620      	mov	r0, r4
 8005138:	f7ff ff1f 	bl	8004f7a <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005142:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005144:	06eb      	lsls	r3, r5, #27
 8005146:	d525      	bpl.n	8005194 <HAL_ADC_IRQHandler+0x218>
 8005148:	06f0      	lsls	r0, r6, #27
 800514a:	d523      	bpl.n	8005194 <HAL_ADC_IRQHandler+0x218>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800514c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800514e:	2b01      	cmp	r3, #1
 8005150:	d012      	beq.n	8005178 <HAL_ADC_IRQHandler+0x1fc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005152:	6822      	ldr	r2, [r4, #0]
 8005154:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8005158:	f000 80e4 	beq.w	8005324 <HAL_ADC_IRQHandler+0x3a8>
 800515c:	4823      	ldr	r0, [pc, #140]	@ (80051ec <HAL_ADC_IRQHandler+0x270>)
 800515e:	4b25      	ldr	r3, [pc, #148]	@ (80051f4 <HAL_ADC_IRQHandler+0x278>)
 8005160:	4923      	ldr	r1, [pc, #140]	@ (80051f0 <HAL_ADC_IRQHandler+0x274>)
 8005162:	4282      	cmp	r2, r0
 8005164:	bf08      	it	eq
 8005166:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8005168:	6899      	ldr	r1, [r3, #8]
 800516a:	06c9      	lsls	r1, r1, #27
 800516c:	f040 80dc 	bne.w	8005328 <HAL_ADC_IRQHandler+0x3ac>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8005170:	68d3      	ldr	r3, [r2, #12]
 8005172:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8005176:	d00a      	beq.n	800518e <HAL_ADC_IRQHandler+0x212>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005178:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800517a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800517e:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005180:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005182:	f043 0302 	orr.w	r3, r3, #2
 8005186:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 8005188:	4620      	mov	r0, r4
 800518a:	f7ff fda3 	bl	8004cd4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	2210      	movs	r2, #16
 8005192:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005194:	056a      	lsls	r2, r5, #21
 8005196:	d510      	bpl.n	80051ba <HAL_ADC_IRQHandler+0x23e>
 8005198:	0573      	lsls	r3, r6, #21
 800519a:	d50e      	bpl.n	80051ba <HAL_ADC_IRQHandler+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800519c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800519e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051a2:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80051a4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80051a6:	f043 0308 	orr.w	r3, r3, #8
 80051aa:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80051b2:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80051b4:	4620      	mov	r0, r4
 80051b6:	f7ff fede 	bl	8004f76 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80051ba:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80051bc:	4a0d      	ldr	r2, [pc, #52]	@ (80051f4 <HAL_ADC_IRQHandler+0x278>)
 80051be:	6892      	ldr	r2, [r2, #8]
 80051c0:	06d0      	lsls	r0, r2, #27
 80051c2:	f43f af07 	beq.w	8004fd4 <HAL_ADC_IRQHandler+0x58>
 80051c6:	4a0b      	ldr	r2, [pc, #44]	@ (80051f4 <HAL_ADC_IRQHandler+0x278>)
 80051c8:	6892      	ldr	r2, [r2, #8]
 80051ca:	f002 021f 	and.w	r2, r2, #31
 80051ce:	2a05      	cmp	r2, #5
 80051d0:	f43f af00 	beq.w	8004fd4 <HAL_ADC_IRQHandler+0x58>
 80051d4:	4a07      	ldr	r2, [pc, #28]	@ (80051f4 <HAL_ADC_IRQHandler+0x278>)
 80051d6:	6892      	ldr	r2, [r2, #8]
 80051d8:	f002 021f 	and.w	r2, r2, #31
 80051dc:	2a09      	cmp	r2, #9
 80051de:	f43f aef9 	beq.w	8004fd4 <HAL_ADC_IRQHandler+0x58>
 80051e2:	4a05      	ldr	r2, [pc, #20]	@ (80051f8 <HAL_ADC_IRQHandler+0x27c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d123      	bne.n	8005230 <HAL_ADC_IRQHandler+0x2b4>
 80051e8:	e6f4      	b.n	8004fd4 <HAL_ADC_IRQHandler+0x58>
 80051ea:	bf00      	nop
 80051ec:	50000100 	.word	0x50000100
 80051f0:	50000300 	.word	0x50000300
 80051f4:	50000700 	.word	0x50000700
 80051f8:	50000400 	.word	0x50000400
 80051fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005200:	d002      	beq.n	8005208 <HAL_ADC_IRQHandler+0x28c>
 8005202:	4a4b      	ldr	r2, [pc, #300]	@ (8005330 <HAL_ADC_IRQHandler+0x3b4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d1e5      	bne.n	80051d4 <HAL_ADC_IRQHandler+0x258>
 8005208:	4a4a      	ldr	r2, [pc, #296]	@ (8005334 <HAL_ADC_IRQHandler+0x3b8>)
 800520a:	6892      	ldr	r2, [r2, #8]
 800520c:	f002 021f 	and.w	r2, r2, #31
 8005210:	2a09      	cmp	r2, #9
 8005212:	f43f aedf 	beq.w	8004fd4 <HAL_ADC_IRQHandler+0x58>
 8005216:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800521a:	f43f aedb 	beq.w	8004fd4 <HAL_ADC_IRQHandler+0x58>
 800521e:	4a46      	ldr	r2, [pc, #280]	@ (8005338 <HAL_ADC_IRQHandler+0x3bc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	f43f aed7 	beq.w	8004fd4 <HAL_ADC_IRQHandler+0x58>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005226:	4942      	ldr	r1, [pc, #264]	@ (8005330 <HAL_ADC_IRQHandler+0x3b4>)
 8005228:	428b      	cmp	r3, r1
 800522a:	bf08      	it	eq
 800522c:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8005230:	68d2      	ldr	r2, [r2, #12]
 8005232:	e6d0      	b.n	8004fd6 <HAL_ADC_IRQHandler+0x5a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005234:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005236:	f043 0310 	orr.w	r3, r3, #16
 800523a:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800523c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	6463      	str	r3, [r4, #68]	@ 0x44
 8005244:	e6e3      	b.n	800500e <HAL_ADC_IRQHandler+0x92>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005246:	4a3d      	ldr	r2, [pc, #244]	@ (800533c <HAL_ADC_IRQHandler+0x3c0>)
 8005248:	6892      	ldr	r2, [r2, #8]
 800524a:	06d0      	lsls	r0, r2, #27
 800524c:	f43f af0a 	beq.w	8005064 <HAL_ADC_IRQHandler+0xe8>
 8005250:	4a3a      	ldr	r2, [pc, #232]	@ (800533c <HAL_ADC_IRQHandler+0x3c0>)
 8005252:	6892      	ldr	r2, [r2, #8]
 8005254:	f002 021f 	and.w	r2, r2, #31
 8005258:	2a05      	cmp	r2, #5
 800525a:	f43f af03 	beq.w	8005064 <HAL_ADC_IRQHandler+0xe8>
 800525e:	4a37      	ldr	r2, [pc, #220]	@ (800533c <HAL_ADC_IRQHandler+0x3c0>)
 8005260:	6892      	ldr	r2, [r2, #8]
 8005262:	f002 021f 	and.w	r2, r2, #31
 8005266:	2a09      	cmp	r2, #9
 8005268:	f43f aefc 	beq.w	8005064 <HAL_ADC_IRQHandler+0xe8>
 800526c:	4a32      	ldr	r2, [pc, #200]	@ (8005338 <HAL_ADC_IRQHandler+0x3bc>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d11a      	bne.n	80052a8 <HAL_ADC_IRQHandler+0x32c>
 8005272:	e6f7      	b.n	8005064 <HAL_ADC_IRQHandler+0xe8>
 8005274:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005278:	d002      	beq.n	8005280 <HAL_ADC_IRQHandler+0x304>
 800527a:	4a2d      	ldr	r2, [pc, #180]	@ (8005330 <HAL_ADC_IRQHandler+0x3b4>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d1ee      	bne.n	800525e <HAL_ADC_IRQHandler+0x2e2>
 8005280:	4a2c      	ldr	r2, [pc, #176]	@ (8005334 <HAL_ADC_IRQHandler+0x3b8>)
 8005282:	6892      	ldr	r2, [r2, #8]
 8005284:	f002 021f 	and.w	r2, r2, #31
 8005288:	2a09      	cmp	r2, #9
 800528a:	f43f aeeb 	beq.w	8005064 <HAL_ADC_IRQHandler+0xe8>
 800528e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005292:	f43f aee7 	beq.w	8005064 <HAL_ADC_IRQHandler+0xe8>
 8005296:	4a28      	ldr	r2, [pc, #160]	@ (8005338 <HAL_ADC_IRQHandler+0x3bc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	f43f aee3 	beq.w	8005064 <HAL_ADC_IRQHandler+0xe8>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800529e:	4924      	ldr	r1, [pc, #144]	@ (8005330 <HAL_ADC_IRQHandler+0x3b4>)
 80052a0:	428b      	cmp	r3, r1
 80052a2:	bf08      	it	eq
 80052a4:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 80052a8:	68d2      	ldr	r2, [r2, #12]
 80052aa:	e6dc      	b.n	8005066 <HAL_ADC_IRQHandler+0xea>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80052ac:	4a23      	ldr	r2, [pc, #140]	@ (800533c <HAL_ADC_IRQHandler+0x3c0>)
 80052ae:	6892      	ldr	r2, [r2, #8]
 80052b0:	06d0      	lsls	r0, r2, #27
 80052b2:	f43f aeff 	beq.w	80050b4 <HAL_ADC_IRQHandler+0x138>
 80052b6:	4a21      	ldr	r2, [pc, #132]	@ (800533c <HAL_ADC_IRQHandler+0x3c0>)
 80052b8:	6892      	ldr	r2, [r2, #8]
 80052ba:	f002 021f 	and.w	r2, r2, #31
 80052be:	2a06      	cmp	r2, #6
 80052c0:	f43f aef8 	beq.w	80050b4 <HAL_ADC_IRQHandler+0x138>
 80052c4:	4a1d      	ldr	r2, [pc, #116]	@ (800533c <HAL_ADC_IRQHandler+0x3c0>)
 80052c6:	6892      	ldr	r2, [r2, #8]
 80052c8:	f002 021f 	and.w	r2, r2, #31
 80052cc:	2a07      	cmp	r2, #7
 80052ce:	f43f aef1 	beq.w	80050b4 <HAL_ADC_IRQHandler+0x138>
 80052d2:	4a19      	ldr	r2, [pc, #100]	@ (8005338 <HAL_ADC_IRQHandler+0x3bc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d11a      	bne.n	800530e <HAL_ADC_IRQHandler+0x392>
 80052d8:	e6ec      	b.n	80050b4 <HAL_ADC_IRQHandler+0x138>
 80052da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052de:	d002      	beq.n	80052e6 <HAL_ADC_IRQHandler+0x36a>
 80052e0:	4a13      	ldr	r2, [pc, #76]	@ (8005330 <HAL_ADC_IRQHandler+0x3b4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d1ee      	bne.n	80052c4 <HAL_ADC_IRQHandler+0x348>
 80052e6:	4a13      	ldr	r2, [pc, #76]	@ (8005334 <HAL_ADC_IRQHandler+0x3b8>)
 80052e8:	6892      	ldr	r2, [r2, #8]
 80052ea:	f002 021f 	and.w	r2, r2, #31
 80052ee:	2a07      	cmp	r2, #7
 80052f0:	f43f aee0 	beq.w	80050b4 <HAL_ADC_IRQHandler+0x138>
 80052f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052f8:	f43f aedc 	beq.w	80050b4 <HAL_ADC_IRQHandler+0x138>
 80052fc:	4a0e      	ldr	r2, [pc, #56]	@ (8005338 <HAL_ADC_IRQHandler+0x3bc>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	f43f aed8 	beq.w	80050b4 <HAL_ADC_IRQHandler+0x138>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005304:	490a      	ldr	r1, [pc, #40]	@ (8005330 <HAL_ADC_IRQHandler+0x3b4>)
 8005306:	428b      	cmp	r3, r1
 8005308:	bf08      	it	eq
 800530a:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 800530e:	68d2      	ldr	r2, [r2, #12]
 8005310:	e6d1      	b.n	80050b6 <HAL_ADC_IRQHandler+0x13a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005312:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005314:	f043 0310 	orr.w	r3, r3, #16
 8005318:	6423      	str	r3, [r4, #64]	@ 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800531a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6463      	str	r3, [r4, #68]	@ 0x44
 8005322:	e6dd      	b.n	80050e0 <HAL_ADC_IRQHandler+0x164>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005324:	4b03      	ldr	r3, [pc, #12]	@ (8005334 <HAL_ADC_IRQHandler+0x3b8>)
 8005326:	e71f      	b.n	8005168 <HAL_ADC_IRQHandler+0x1ec>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 800532e:	e722      	b.n	8005176 <HAL_ADC_IRQHandler+0x1fa>
 8005330:	50000100 	.word	0x50000100
 8005334:	50000300 	.word	0x50000300
 8005338:	50000400 	.word	0x50000400
 800533c:	50000700 	.word	0x50000700

08005340 <HAL_ADC_ConfigChannel>:
{
 8005340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005342:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8005348:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800534c:	68c8      	ldr	r0, [r1, #12]
  __HAL_LOCK(hadc);
 800534e:	2b01      	cmp	r3, #1
 8005350:	f000 816a 	beq.w	8005628 <HAL_ADC_ConfigChannel+0x2e8>
 8005354:	2301      	movs	r3, #1
 8005356:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800535a:	682b      	ldr	r3, [r5, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	0757      	lsls	r7, r2, #29
 8005360:	f100 815c 	bmi.w	800561c <HAL_ADC_ConfigChannel+0x2dc>
    if (sConfig->Rank < 5U)
 8005364:	684e      	ldr	r6, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 8005366:	680c      	ldr	r4, [r1, #0]
 8005368:	2206      	movs	r2, #6
    if (sConfig->Rank < 5U)
 800536a:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 800536c:	fb06 f202 	mul.w	r2, r6, r2
    if (sConfig->Rank < 5U)
 8005370:	d82c      	bhi.n	80053cc <HAL_ADC_ConfigChannel+0x8c>
      MODIFY_REG(hadc->Instance->SQR1,
 8005372:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8005374:	271f      	movs	r7, #31
 8005376:	4097      	lsls	r7, r2
 8005378:	ea26 0607 	bic.w	r6, r6, r7
 800537c:	fa04 f202 	lsl.w	r2, r4, r2
 8005380:	4332      	orrs	r2, r6
 8005382:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	f012 0f0c 	tst.w	r2, #12
 800538a:	d158      	bne.n	800543e <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800538c:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800538e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8005392:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8005396:	f04f 0607 	mov.w	r6, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800539a:	d93c      	bls.n	8005416 <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800539c:	699f      	ldr	r7, [r3, #24]
 800539e:	3a1e      	subs	r2, #30
 80053a0:	4096      	lsls	r6, r2
 80053a2:	ea27 0606 	bic.w	r6, r7, r6
 80053a6:	fa0c f202 	lsl.w	r2, ip, r2
 80053aa:	4332      	orrs	r2, r6
 80053ac:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	694e      	ldr	r6, [r1, #20]
 80053b2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80053b6:	0052      	lsls	r2, r2, #1
 80053b8:	4096      	lsls	r6, r2
    switch (sConfig->OffsetNumber)
 80053ba:	690a      	ldr	r2, [r1, #16]
 80053bc:	3a01      	subs	r2, #1
      MODIFY_REG(hadc->Instance->OFR1               ,
 80053be:	06a7      	lsls	r7, r4, #26
    switch (sConfig->OffsetNumber)
 80053c0:	2a03      	cmp	r2, #3
 80053c2:	d86b      	bhi.n	800549c <HAL_ADC_ConfigChannel+0x15c>
 80053c4:	e8df f002 	tbb	[pc, r2]
 80053c8:	5f544931 	.word	0x5f544931
    else if (sConfig->Rank < 10U)
 80053cc:	2e09      	cmp	r6, #9
 80053ce:	d80a      	bhi.n	80053e6 <HAL_ADC_ConfigChannel+0xa6>
      MODIFY_REG(hadc->Instance->SQR2,
 80053d0:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 80053d2:	3a1e      	subs	r2, #30
 80053d4:	271f      	movs	r7, #31
 80053d6:	4097      	lsls	r7, r2
 80053d8:	ea26 0607 	bic.w	r6, r6, r7
 80053dc:	fa04 f202 	lsl.w	r2, r4, r2
 80053e0:	4332      	orrs	r2, r6
 80053e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80053e4:	e7ce      	b.n	8005384 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 80053e6:	2e0e      	cmp	r6, #14
 80053e8:	f04f 061f 	mov.w	r6, #31
 80053ec:	d809      	bhi.n	8005402 <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80053ee:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 80053f0:	3a3c      	subs	r2, #60	@ 0x3c
 80053f2:	4096      	lsls	r6, r2
 80053f4:	ea27 0606 	bic.w	r6, r7, r6
 80053f8:	fa04 f202 	lsl.w	r2, r4, r2
 80053fc:	4332      	orrs	r2, r6
 80053fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8005400:	e7c0      	b.n	8005384 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005402:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8005404:	3a5a      	subs	r2, #90	@ 0x5a
 8005406:	4096      	lsls	r6, r2
 8005408:	ea27 0606 	bic.w	r6, r7, r6
 800540c:	fa04 f202 	lsl.w	r2, r4, r2
 8005410:	4332      	orrs	r2, r6
 8005412:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005414:	e7b6      	b.n	8005384 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005416:	695f      	ldr	r7, [r3, #20]
 8005418:	4096      	lsls	r6, r2
 800541a:	ea27 0606 	bic.w	r6, r7, r6
 800541e:	fa0c fc02 	lsl.w	ip, ip, r2
 8005422:	ea46 060c 	orr.w	r6, r6, ip
 8005426:	615e      	str	r6, [r3, #20]
 8005428:	e7c1      	b.n	80053ae <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 800542a:	f8d3 c060 	ldr.w	ip, [r3, #96]	@ 0x60
 800542e:	4a7f      	ldr	r2, [pc, #508]	@ (800562c <HAL_ADC_ConfigChannel+0x2ec>)
 8005430:	ea0c 0202 	and.w	r2, ip, r2
 8005434:	433a      	orrs	r2, r7
 8005436:	4332      	orrs	r2, r6
 8005438:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800543c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	f002 0203 	and.w	r2, r2, #3
 8005444:	2a01      	cmp	r2, #1
 8005446:	d14d      	bne.n	80054e4 <HAL_ADC_ConfigChannel+0x1a4>
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	07d6      	lsls	r6, r2, #31
 800544c:	d54a      	bpl.n	80054e4 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800544e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005450:	2300      	movs	r3, #0
 8005452:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 8005456:	b003      	add	sp, #12
 8005458:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 800545a:	f8d3 c064 	ldr.w	ip, [r3, #100]	@ 0x64
 800545e:	4a73      	ldr	r2, [pc, #460]	@ (800562c <HAL_ADC_ConfigChannel+0x2ec>)
 8005460:	ea0c 0202 	and.w	r2, ip, r2
 8005464:	433a      	orrs	r2, r7
 8005466:	4332      	orrs	r2, r6
 8005468:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800546c:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800546e:	e7e6      	b.n	800543e <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005470:	f8d3 c068 	ldr.w	ip, [r3, #104]	@ 0x68
 8005474:	4a6d      	ldr	r2, [pc, #436]	@ (800562c <HAL_ADC_ConfigChannel+0x2ec>)
 8005476:	ea0c 0202 	and.w	r2, ip, r2
 800547a:	433a      	orrs	r2, r7
 800547c:	4332      	orrs	r2, r6
 800547e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005482:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8005484:	e7db      	b.n	800543e <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005486:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 800548a:	4a68      	ldr	r2, [pc, #416]	@ (800562c <HAL_ADC_ConfigChannel+0x2ec>)
 800548c:	ea0c 0202 	and.w	r2, ip, r2
 8005490:	433a      	orrs	r2, r7
 8005492:	4332      	orrs	r2, r6
 8005494:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005498:	66da      	str	r2, [r3, #108]	@ 0x6c
 800549a:	e7d0      	b.n	800543e <HAL_ADC_ConfigChannel+0xfe>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800549c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800549e:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80054a2:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80054a4:	bf02      	ittt	eq
 80054a6:	6e1a      	ldreq	r2, [r3, #96]	@ 0x60
 80054a8:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80054ac:	661a      	streq	r2, [r3, #96]	@ 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80054ae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80054b0:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80054b4:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80054b6:	bf02      	ittt	eq
 80054b8:	6e5a      	ldreq	r2, [r3, #100]	@ 0x64
 80054ba:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80054be:	665a      	streq	r2, [r3, #100]	@ 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80054c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80054c2:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80054c6:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80054c8:	bf02      	ittt	eq
 80054ca:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
 80054cc:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80054d0:	669a      	streq	r2, [r3, #104]	@ 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80054d2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80054d4:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80054d8:	42ba      	cmp	r2, r7
 80054da:	d1b0      	bne.n	800543e <HAL_ADC_ConfigChannel+0xfe>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80054dc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80054de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80054e2:	e7d9      	b.n	8005498 <HAL_ADC_ConfigChannel+0x158>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80054e4:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80054e6:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80054e8:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80054ec:	d047      	beq.n	800557e <HAL_ADC_ConfigChannel+0x23e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80054ee:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80054f2:	ea21 0202 	bic.w	r2, r1, r2
 80054f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80054fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054fe:	d164      	bne.n	80055ca <HAL_ADC_ConfigChannel+0x28a>
 8005500:	494b      	ldr	r1, [pc, #300]	@ (8005630 <HAL_ADC_ConfigChannel+0x2f0>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005502:	2c10      	cmp	r4, #16
 8005504:	d166      	bne.n	80055d4 <HAL_ADC_ConfigChannel+0x294>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005506:	688a      	ldr	r2, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005508:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800550c:	d19f      	bne.n	800544e <HAL_ADC_ConfigChannel+0x10e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800550e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005512:	4a48      	ldr	r2, [pc, #288]	@ (8005634 <HAL_ADC_ConfigChannel+0x2f4>)
 8005514:	d009      	beq.n	800552a <HAL_ADC_ConfigChannel+0x1ea>
 8005516:	4293      	cmp	r3, r2
 8005518:	d069      	beq.n	80055ee <HAL_ADC_ConfigChannel+0x2ae>
 800551a:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 800551e:	4293      	cmp	r3, r2
 8005520:	4845      	ldr	r0, [pc, #276]	@ (8005638 <HAL_ADC_ConfigChannel+0x2f8>)
 8005522:	d067      	beq.n	80055f4 <HAL_ADC_ConfigChannel+0x2b4>
 8005524:	4283      	cmp	r3, r0
 8005526:	bf18      	it	ne
 8005528:	2200      	movne	r2, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800552a:	6898      	ldr	r0, [r3, #8]
 800552c:	f000 0003 	and.w	r0, r0, #3
 8005530:	2801      	cmp	r0, #1
 8005532:	d102      	bne.n	800553a <HAL_ADC_ConfigChannel+0x1fa>
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	07c0      	lsls	r0, r0, #31
 8005538:	d470      	bmi.n	800561c <HAL_ADC_ConfigChannel+0x2dc>
 800553a:	b13a      	cbz	r2, 800554c <HAL_ADC_ConfigChannel+0x20c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800553c:	6890      	ldr	r0, [r2, #8]
 800553e:	f000 0003 	and.w	r0, r0, #3
 8005542:	2801      	cmp	r0, #1
 8005544:	d102      	bne.n	800554c <HAL_ADC_ConfigChannel+0x20c>
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	07d2      	lsls	r2, r2, #31
 800554a:	d467      	bmi.n	800561c <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800554c:	2c10      	cmp	r4, #16
 800554e:	d153      	bne.n	80055f8 <HAL_ADC_ConfigChannel+0x2b8>
 8005550:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005554:	f47f af7b 	bne.w	800544e <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005558:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800555a:	4a38      	ldr	r2, [pc, #224]	@ (800563c <HAL_ADC_ConfigChannel+0x2fc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800555c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005560:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005562:	4b37      	ldr	r3, [pc, #220]	@ (8005640 <HAL_ADC_ConfigChannel+0x300>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	fbb3 f3f2 	udiv	r3, r3, r2
 800556a:	220a      	movs	r2, #10
 800556c:	4353      	muls	r3, r2
            wait_loop_index--;
 800556e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005570:	9b01      	ldr	r3, [sp, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	f43f af6b 	beq.w	800544e <HAL_ADC_ConfigChannel+0x10e>
            wait_loop_index--;
 8005578:	9b01      	ldr	r3, [sp, #4]
 800557a:	3b01      	subs	r3, #1
 800557c:	e7f7      	b.n	800556e <HAL_ADC_ConfigChannel+0x22e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800557e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005582:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005584:	ea42 0200 	orr.w	r2, r2, r0
 8005588:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800558c:	6888      	ldr	r0, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800558e:	d90c      	bls.n	80055aa <HAL_ADC_ConfigChannel+0x26a>
        MODIFY_REG(hadc->Instance->SMPR2,
 8005590:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8005594:	6999      	ldr	r1, [r3, #24]
 8005596:	3a1b      	subs	r2, #27
 8005598:	2607      	movs	r6, #7
 800559a:	4096      	lsls	r6, r2
 800559c:	ea21 0106 	bic.w	r1, r1, r6
 80055a0:	fa00 f202 	lsl.w	r2, r0, r2
 80055a4:	430a      	orrs	r2, r1
 80055a6:	619a      	str	r2, [r3, #24]
 80055a8:	e7a7      	b.n	80054fa <HAL_ADC_ConfigChannel+0x1ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 80055aa:	1c61      	adds	r1, r4, #1
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80055b2:	2607      	movs	r6, #7
 80055b4:	408e      	lsls	r6, r1
 80055b6:	ea22 0206 	bic.w	r2, r2, r6
 80055ba:	fa00 f101 	lsl.w	r1, r0, r1
 80055be:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 80055c4:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055c6:	f43f af42 	beq.w	800544e <HAL_ADC_ConfigChannel+0x10e>
 80055ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005634 <HAL_ADC_ConfigChannel+0x2f4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d097      	beq.n	8005500 <HAL_ADC_ConfigChannel+0x1c0>
 80055d0:	491c      	ldr	r1, [pc, #112]	@ (8005644 <HAL_ADC_ConfigChannel+0x304>)
 80055d2:	e796      	b.n	8005502 <HAL_ADC_ConfigChannel+0x1c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80055d4:	2c11      	cmp	r4, #17
 80055d6:	d103      	bne.n	80055e0 <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80055d8:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80055da:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 80055de:	e795      	b.n	800550c <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80055e0:	2c12      	cmp	r4, #18
 80055e2:	f47f af34 	bne.w	800544e <HAL_ADC_ConfigChannel+0x10e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80055e6:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80055e8:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 80055ec:	e78e      	b.n	800550c <HAL_ADC_ConfigChannel+0x1cc>
 80055ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80055f2:	e79a      	b.n	800552a <HAL_ADC_ConfigChannel+0x1ea>
 80055f4:	4602      	mov	r2, r0
 80055f6:	e798      	b.n	800552a <HAL_ADC_ConfigChannel+0x1ea>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80055f8:	2c11      	cmp	r4, #17
 80055fa:	d108      	bne.n	800560e <HAL_ADC_ConfigChannel+0x2ce>
 80055fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005600:	f47f af25 	bne.w	800544e <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005604:	688b      	ldr	r3, [r1, #8]
 8005606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800560a:	608b      	str	r3, [r1, #8]
 800560c:	e71f      	b.n	800544e <HAL_ADC_ConfigChannel+0x10e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800560e:	2c12      	cmp	r4, #18
 8005610:	f47f af1d 	bne.w	800544e <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005614:	688b      	ldr	r3, [r1, #8]
 8005616:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800561a:	e7f6      	b.n	800560a <HAL_ADC_ConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800561c:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800561e:	f043 0320 	orr.w	r3, r3, #32
 8005622:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8005624:	2001      	movs	r0, #1
 8005626:	e713      	b.n	8005450 <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 8005628:	2002      	movs	r0, #2
 800562a:	e714      	b.n	8005456 <HAL_ADC_ConfigChannel+0x116>
 800562c:	83fff000 	.word	0x83fff000
 8005630:	50000300 	.word	0x50000300
 8005634:	50000100 	.word	0x50000100
 8005638:	50000500 	.word	0x50000500
 800563c:	000f4240 	.word	0x000f4240
 8005640:	20000010 	.word	0x20000010
 8005644:	50000700 	.word	0x50000700

08005648 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8005648:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800564a:	6804      	ldr	r4, [r0, #0]
 800564c:	4b3c      	ldr	r3, [pc, #240]	@ (8005740 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 800564e:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
{
 8005652:	4605      	mov	r5, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005654:	d009      	beq.n	800566a <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8005656:	429c      	cmp	r4, r3
 8005658:	d047      	beq.n	80056ea <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 800565a:	4a3a      	ldr	r2, [pc, #232]	@ (8005744 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 800565c:	4294      	cmp	r4, r2
 800565e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005662:	d002      	beq.n	800566a <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8005664:	429c      	cmp	r4, r3
 8005666:	d166      	bne.n	8005736 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005668:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 800566a:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 800566e:	2a01      	cmp	r2, #1
 8005670:	d063      	beq.n	800573a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8005672:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005674:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(hadc);
 8005676:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800567a:	68a2      	ldr	r2, [r4, #8]
 800567c:	0752      	lsls	r2, r2, #29
 800567e:	d454      	bmi.n	800572a <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	0757      	lsls	r7, r2, #29
 8005684:	d451      	bmi.n	800572a <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005686:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 800568a:	d031      	beq.n	80056f0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800568c:	4f2c      	ldr	r7, [pc, #176]	@ (8005740 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 800568e:	4a2e      	ldr	r2, [pc, #184]	@ (8005748 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8005690:	4e2e      	ldr	r6, [pc, #184]	@ (800574c <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8005692:	42bc      	cmp	r4, r7
 8005694:	bf08      	it	eq
 8005696:	4632      	moveq	r2, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005698:	b360      	cbz	r0, 80056f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800569a:	6897      	ldr	r7, [r2, #8]
 800569c:	f895 c030 	ldrb.w	ip, [r5, #48]	@ 0x30
 80056a0:	684e      	ldr	r6, [r1, #4]
 80056a2:	f427 4760 	bic.w	r7, r7, #57344	@ 0xe000
 80056a6:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 80056aa:	433e      	orrs	r6, r7
 80056ac:	6096      	str	r6, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80056ae:	68a6      	ldr	r6, [r4, #8]
 80056b0:	f006 0603 	and.w	r6, r6, #3
 80056b4:	2e01      	cmp	r6, #1
 80056b6:	d102      	bne.n	80056be <HAL_ADCEx_MultiModeConfigChannel+0x76>
 80056b8:	6824      	ldr	r4, [r4, #0]
 80056ba:	07e6      	lsls	r6, r4, #31
 80056bc:	d410      	bmi.n	80056e0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80056be:	689c      	ldr	r4, [r3, #8]
 80056c0:	f004 0403 	and.w	r4, r4, #3
 80056c4:	2c01      	cmp	r4, #1
 80056c6:	d102      	bne.n	80056ce <HAL_ADCEx_MultiModeConfigChannel+0x86>
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	07dc      	lsls	r4, r3, #31
 80056cc:	d408      	bmi.n	80056e0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80056ce:	6893      	ldr	r3, [r2, #8]
 80056d0:	6889      	ldr	r1, [r1, #8]
 80056d2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80056d6:	4308      	orrs	r0, r1
 80056d8:	f023 030f 	bic.w	r3, r3, #15
 80056dc:	4318      	orrs	r0, r3
 80056de:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056e0:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80056e2:	2300      	movs	r3, #0
 80056e4:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
} 
 80056e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80056ee:	e7bc      	b.n	800566a <HAL_ADCEx_MultiModeConfigChannel+0x22>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056f0:	4a16      	ldr	r2, [pc, #88]	@ (800574c <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80056f2:	e7d1      	b.n	8005698 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80056f4:	6891      	ldr	r1, [r2, #8]
 80056f6:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 80056fa:	6091      	str	r1, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80056fc:	68a1      	ldr	r1, [r4, #8]
 80056fe:	f001 0103 	and.w	r1, r1, #3
 8005702:	2901      	cmp	r1, #1
 8005704:	d102      	bne.n	800570c <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8005706:	6821      	ldr	r1, [r4, #0]
 8005708:	07c9      	lsls	r1, r1, #31
 800570a:	d4e9      	bmi.n	80056e0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800570c:	6899      	ldr	r1, [r3, #8]
 800570e:	f001 0103 	and.w	r1, r1, #3
 8005712:	2901      	cmp	r1, #1
 8005714:	d102      	bne.n	800571c <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	07db      	lsls	r3, r3, #31
 800571a:	d4e1      	bmi.n	80056e0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800571c:	6893      	ldr	r3, [r2, #8]
 800571e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005722:	f023 030f 	bic.w	r3, r3, #15
 8005726:	6093      	str	r3, [r2, #8]
 8005728:	e7da      	b.n	80056e0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800572a:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800572c:	f043 0320 	orr.w	r3, r3, #32
 8005730:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8005732:	2001      	movs	r0, #1
 8005734:	e7d5      	b.n	80056e2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    return HAL_ERROR;
 8005736:	2001      	movs	r0, #1
 8005738:	e7d6      	b.n	80056e8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 800573a:	2002      	movs	r0, #2
 800573c:	e7d4      	b.n	80056e8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800573e:	bf00      	nop
 8005740:	50000100 	.word	0x50000100
 8005744:	50000400 	.word	0x50000400
 8005748:	50000700 	.word	0x50000700
 800574c:	50000300 	.word	0x50000300

08005750 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005750:	4907      	ldr	r1, [pc, #28]	@ (8005770 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005752:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005754:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005758:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800575a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800575c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005760:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800576c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800576e:	4770      	bx	lr
 8005770:	e000ed00 	.word	0xe000ed00

08005774 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005774:	4b16      	ldr	r3, [pc, #88]	@ (80057d0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005776:	b530      	push	{r4, r5, lr}
 8005778:	68dc      	ldr	r4, [r3, #12]
 800577a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800577e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005782:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005784:	2b04      	cmp	r3, #4
 8005786:	bf28      	it	cs
 8005788:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800578a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800578c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005790:	bf8c      	ite	hi
 8005792:	3c03      	subhi	r4, #3
 8005794:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005796:	fa05 f303 	lsl.w	r3, r5, r3
 800579a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800579e:	40a5      	lsls	r5, r4
 80057a0:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a4:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80057a6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057ac:	bfac      	ite	ge
 80057ae:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057b2:	4a08      	ldrlt	r2, [pc, #32]	@ (80057d4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057b4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057b8:	bfb8      	it	lt
 80057ba:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	bfaa      	itet	ge
 80057c2:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057c6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057c8:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80057cc:	bd30      	pop	{r4, r5, pc}
 80057ce:	bf00      	nop
 80057d0:	e000ed00 	.word	0xe000ed00
 80057d4:	e000ed14 	.word	0xe000ed14

080057d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80057d8:	2800      	cmp	r0, #0
 80057da:	db07      	blt.n	80057ec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057dc:	0941      	lsrs	r1, r0, #5
 80057de:	4a04      	ldr	r2, [pc, #16]	@ (80057f0 <HAL_NVIC_EnableIRQ+0x18>)
 80057e0:	f000 001f 	and.w	r0, r0, #31
 80057e4:	2301      	movs	r3, #1
 80057e6:	4083      	lsls	r3, r0
 80057e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	e000e100 	.word	0xe000e100

080057f4 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80057f4:	6802      	ldr	r2, [r0, #0]
 80057f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005820 <DMA_CalcBaseAndBitshift+0x2c>)
 80057f8:	429a      	cmp	r2, r3
 80057fa:	f04f 0114 	mov.w	r1, #20
 80057fe:	d808      	bhi.n	8005812 <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005800:	4b08      	ldr	r3, [pc, #32]	@ (8005824 <DMA_CalcBaseAndBitshift+0x30>)
 8005802:	4413      	add	r3, r2
 8005804:	4a08      	ldr	r2, [pc, #32]	@ (8005828 <DMA_CalcBaseAndBitshift+0x34>)
 8005806:	fbb3 f3f1 	udiv	r3, r3, r1
 800580a:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 800580c:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005810:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005812:	4b06      	ldr	r3, [pc, #24]	@ (800582c <DMA_CalcBaseAndBitshift+0x38>)
 8005814:	4413      	add	r3, r2
 8005816:	4a06      	ldr	r2, [pc, #24]	@ (8005830 <DMA_CalcBaseAndBitshift+0x3c>)
 8005818:	fbb3 f3f1 	udiv	r3, r3, r1
 800581c:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 800581e:	e7f5      	b.n	800580c <DMA_CalcBaseAndBitshift+0x18>
 8005820:	40020407 	.word	0x40020407
 8005824:	bffdfff8 	.word	0xbffdfff8
 8005828:	40020000 	.word	0x40020000
 800582c:	bffdfbf8 	.word	0xbffdfbf8
 8005830:	40020400 	.word	0x40020400

08005834 <HAL_DMA_Init>:
{
 8005834:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 8005836:	4604      	mov	r4, r0
 8005838:	b1e0      	cbz	r0, 8005874 <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 800583a:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 800583e:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005840:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8005842:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005844:	432b      	orrs	r3, r5
 8005846:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8005848:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800584a:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800584c:	6945      	ldr	r5, [r0, #20]
 800584e:	432b      	orrs	r3, r5
 8005850:	6985      	ldr	r5, [r0, #24]
 8005852:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8005854:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005856:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 800585a:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 800585e:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8005860:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8005862:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8005864:	f7ff ffc6 	bl	80057f4 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005868:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 800586a:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800586e:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8005870:	8423      	strh	r3, [r4, #32]
}
 8005872:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005874:	2001      	movs	r0, #1
 8005876:	e7fc      	b.n	8005872 <HAL_DMA_Init+0x3e>

08005878 <HAL_DMA_Start_IT>:
{
 8005878:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800587a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800587e:	2c01      	cmp	r4, #1
 8005880:	d033      	beq.n	80058ea <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 8005882:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 8005886:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8005888:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 800588a:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800588e:	f04f 0400 	mov.w	r4, #0
 8005892:	d128      	bne.n	80058e6 <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005894:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 8005896:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005898:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800589a:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800589e:	6826      	ldr	r6, [r4, #0]
 80058a0:	f026 0601 	bic.w	r6, r6, #1
 80058a4:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80058a6:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 80058aa:	40bd      	lsls	r5, r7
 80058ac:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80058ae:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058b0:	6843      	ldr	r3, [r0, #4]
 80058b2:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80058b4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 80058b6:	bf0b      	itete	eq
 80058b8:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80058ba:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80058bc:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80058be:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80058c0:	b14b      	cbz	r3, 80058d6 <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80058c8:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	f043 0301 	orr.w	r3, r3, #1
 80058d0:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058d2:	2000      	movs	r0, #0
}
 80058d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	f043 030a 	orr.w	r3, r3, #10
 80058dc:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	f023 0304 	bic.w	r3, r3, #4
 80058e4:	e7f0      	b.n	80058c8 <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 80058e6:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 80058ea:	2002      	movs	r0, #2
 80058ec:	e7f2      	b.n	80058d4 <HAL_DMA_Start_IT+0x5c>

080058ee <HAL_DMA_Abort>:
  if(NULL == hdma)
 80058ee:	b140      	cbz	r0, 8005902 <HAL_DMA_Abort+0x14>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058f0:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d006      	beq.n	8005906 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058f8:	2304      	movs	r3, #4
 80058fa:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 80058fc:	2300      	movs	r3, #0
 80058fe:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8005902:	2001      	movs	r0, #1
 8005904:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005906:	6803      	ldr	r3, [r0, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	f022 020e 	bic.w	r2, r2, #14
 800590e:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005918:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
 800591c:	2301      	movs	r3, #1
 800591e:	408b      	lsls	r3, r1
 8005920:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);
 8005922:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005926:	8403      	strh	r3, [r0, #32]
  return HAL_OK;
 8005928:	2000      	movs	r0, #0
}
 800592a:	4770      	bx	lr

0800592c <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800592c:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800592e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8005930:	6803      	ldr	r3, [r0, #0]
{
 8005932:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005934:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005936:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005938:	2404      	movs	r4, #4
 800593a:	4094      	lsls	r4, r2
 800593c:	4234      	tst	r4, r6
 800593e:	d00e      	beq.n	800595e <HAL_DMA_IRQHandler+0x32>
 8005940:	f015 0f04 	tst.w	r5, #4
 8005944:	d00b      	beq.n	800595e <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800594a:	bf5e      	ittt	pl
 800594c:	681a      	ldrpl	r2, [r3, #0]
 800594e:	f022 0204 	bicpl.w	r2, r2, #4
 8005952:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005954:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005956:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8005958:	b363      	cbz	r3, 80059b4 <HAL_DMA_IRQHandler+0x88>
}
 800595a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800595c:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800595e:	2402      	movs	r4, #2
 8005960:	4094      	lsls	r4, r2
 8005962:	4234      	tst	r4, r6
 8005964:	d012      	beq.n	800598c <HAL_DMA_IRQHandler+0x60>
 8005966:	f015 0f02 	tst.w	r5, #2
 800596a:	d00f      	beq.n	800598c <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	0695      	lsls	r5, r2, #26
 8005970:	d406      	bmi.n	8005980 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	f022 020a 	bic.w	r2, r2, #10
 8005978:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800597a:	2301      	movs	r3, #1
 800597c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8005980:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005982:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8005984:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8005988:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800598a:	e7e5      	b.n	8005958 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800598c:	2408      	movs	r4, #8
 800598e:	4094      	lsls	r4, r2
 8005990:	4234      	tst	r4, r6
 8005992:	d00f      	beq.n	80059b4 <HAL_DMA_IRQHandler+0x88>
 8005994:	072c      	lsls	r4, r5, #28
 8005996:	d50d      	bpl.n	80059b4 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005998:	681c      	ldr	r4, [r3, #0]
 800599a:	f024 040e 	bic.w	r4, r4, #14
 800599e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80059a0:	2301      	movs	r3, #1
 80059a2:	fa03 f202 	lsl.w	r2, r3, r2
 80059a6:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80059a8:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 80059aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059ae:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80059b0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80059b2:	e7d1      	b.n	8005958 <HAL_DMA_IRQHandler+0x2c>
}
 80059b4:	bc70      	pop	{r4, r5, r6}
 80059b6:	4770      	bx	lr

080059b8 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80059b8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
}
 80059ba:	4770      	bx	lr

080059bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059c0:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8005b40 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059c4:	4c5c      	ldr	r4, [pc, #368]	@ (8005b38 <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 80059c6:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059c8:	680a      	ldr	r2, [r1, #0]
 80059ca:	fa32 f503 	lsrs.w	r5, r2, r3
 80059ce:	d102      	bne.n	80059d6 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80059d0:	b003      	add	sp, #12
 80059d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80059d6:	2501      	movs	r5, #1
 80059d8:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 80059dc:	ea18 0202 	ands.w	r2, r8, r2
 80059e0:	f000 80a0 	beq.w	8005b24 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059e4:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80059e6:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059e8:	f006 0503 	and.w	r5, r6, #3
 80059ec:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80059f0:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059f4:	1e6f      	subs	r7, r5, #1
 80059f6:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80059f8:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059fc:	d834      	bhi.n	8005a68 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80059fe:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005a00:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005a04:	68cf      	ldr	r7, [r1, #12]
 8005a06:	fa07 f70e 	lsl.w	r7, r7, lr
 8005a0a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8005a0e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005a10:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a12:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a16:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8005a1a:	409f      	lsls	r7, r3
 8005a1c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8005a20:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8005a22:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005a24:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005a28:	688f      	ldr	r7, [r1, #8]
 8005a2a:	fa07 f70e 	lsl.w	r7, r7, lr
 8005a2e:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a32:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8005a34:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a36:	d119      	bne.n	8005a6c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8005a38:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8005a3c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005a40:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8005a44:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005a48:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005a4c:	f04f 0b0f 	mov.w	fp, #15
 8005a50:	fa0b fb0a 	lsl.w	fp, fp, sl
 8005a54:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005a58:	690f      	ldr	r7, [r1, #16]
 8005a5a:	fa07 f70a 	lsl.w	r7, r7, sl
 8005a5e:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8005a62:	f8c8 7020 	str.w	r7, [r8, #32]
 8005a66:	e001      	b.n	8005a6c <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a68:	2d03      	cmp	r5, #3
 8005a6a:	d1da      	bne.n	8005a22 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8005a6c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005a6e:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005a72:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005a76:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a78:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8005a7c:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a7e:	d051      	beq.n	8005b24 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a80:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8005a84:	f045 0501 	orr.w	r5, r5, #1
 8005a88:	f8c9 5018 	str.w	r5, [r9, #24]
 8005a8c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8005a90:	f023 0703 	bic.w	r7, r3, #3
 8005a94:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8005a98:	f005 0501 	and.w	r5, r5, #1
 8005a9c:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8005aa0:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005aa2:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005aa6:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8005aa8:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005aaa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005aae:	f04f 0e0f 	mov.w	lr, #15
 8005ab2:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ab6:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005aba:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005abe:	d033      	beq.n	8005b28 <HAL_GPIO_Init+0x16c>
 8005ac0:	4d1e      	ldr	r5, [pc, #120]	@ (8005b3c <HAL_GPIO_Init+0x180>)
 8005ac2:	42a8      	cmp	r0, r5
 8005ac4:	d032      	beq.n	8005b2c <HAL_GPIO_Init+0x170>
 8005ac6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005aca:	42a8      	cmp	r0, r5
 8005acc:	d030      	beq.n	8005b30 <HAL_GPIO_Init+0x174>
 8005ace:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005ad2:	42a8      	cmp	r0, r5
 8005ad4:	d02e      	beq.n	8005b34 <HAL_GPIO_Init+0x178>
 8005ad6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005ada:	42a8      	cmp	r0, r5
 8005adc:	bf14      	ite	ne
 8005ade:	2505      	movne	r5, #5
 8005ae0:	2504      	moveq	r5, #4
 8005ae2:	fa05 f50c 	lsl.w	r5, r5, ip
 8005ae6:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005aea:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 8005aec:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8005aee:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005af0:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8005af4:	bf0c      	ite	eq
 8005af6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8005af8:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 8005afa:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8005afc:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005afe:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 8005b02:	bf0c      	ite	eq
 8005b04:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8005b06:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 8005b08:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 8005b0a:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b0c:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8005b10:	bf0c      	ite	eq
 8005b12:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8005b14:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 8005b16:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 8005b18:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b1a:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8005b1c:	bf54      	ite	pl
 8005b1e:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8005b20:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 8005b22:	6025      	str	r5, [r4, #0]
    position++;
 8005b24:	3301      	adds	r3, #1
 8005b26:	e74f      	b.n	80059c8 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005b28:	2500      	movs	r5, #0
 8005b2a:	e7da      	b.n	8005ae2 <HAL_GPIO_Init+0x126>
 8005b2c:	2501      	movs	r5, #1
 8005b2e:	e7d8      	b.n	8005ae2 <HAL_GPIO_Init+0x126>
 8005b30:	2502      	movs	r5, #2
 8005b32:	e7d6      	b.n	8005ae2 <HAL_GPIO_Init+0x126>
 8005b34:	2503      	movs	r5, #3
 8005b36:	e7d4      	b.n	8005ae2 <HAL_GPIO_Init+0x126>
 8005b38:	40010400 	.word	0x40010400
 8005b3c:	48000400 	.word	0x48000400
 8005b40:	40021000 	.word	0x40021000

08005b44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b44:	b10a      	cbz	r2, 8005b4a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b46:	6181      	str	r1, [r0, #24]
 8005b48:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b4a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8005b4c:	4770      	bx	lr
	...

08005b50 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8005b50:	4a02      	ldr	r2, [pc, #8]	@ (8005b5c <HAL_PWR_EnableBkUpAccess+0xc>)
 8005b52:	6813      	ldr	r3, [r2, #0]
 8005b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b58:	6013      	str	r3, [r2, #0]
}
 8005b5a:	4770      	bx	lr
 8005b5c:	40007000 	.word	0x40007000

08005b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b60:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b64:	4605      	mov	r5, r0
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d033      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x72>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b6a:	6803      	ldr	r3, [r0, #0]
 8005b6c:	07da      	lsls	r2, r3, #31
 8005b6e:	d411      	bmi.n	8005b94 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b70:	682b      	ldr	r3, [r5, #0]
 8005b72:	079b      	lsls	r3, r3, #30
 8005b74:	f100 8081 	bmi.w	8005c7a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b78:	682b      	ldr	r3, [r5, #0]
 8005b7a:	071c      	lsls	r4, r3, #28
 8005b7c:	f100 80eb 	bmi.w	8005d56 <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	0758      	lsls	r0, r3, #29
 8005b84:	f100 8130 	bmi.w	8005de8 <HAL_RCC_OscConfig+0x288>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b88:	69eb      	ldr	r3, [r5, #28]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f040 81b5 	bne.w	8005efa <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }

  return HAL_OK;
 8005b90:	2000      	movs	r0, #0
 8005b92:	e047      	b.n	8005c24 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005b94:	4cb0      	ldr	r4, [pc, #704]	@ (8005e58 <HAL_RCC_OscConfig+0x2f8>)
 8005b96:	6863      	ldr	r3, [r4, #4]
 8005b98:	f003 030c 	and.w	r3, r3, #12
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d007      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ba0:	6863      	ldr	r3, [r4, #4]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d115      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x76>
 8005baa:	6863      	ldr	r3, [r4, #4]
 8005bac:	03df      	lsls	r7, r3, #15
 8005bae:	d512      	bpl.n	8005bd6 <HAL_RCC_OscConfig+0x76>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005bb4:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb8:	6821      	ldr	r1, [r4, #0]
 8005bba:	fa93 f3a3 	rbit	r3, r3
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	fab3 f383 	clz	r3, r3
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	420b      	tst	r3, r1
 8005bca:	d0d1      	beq.n	8005b70 <HAL_RCC_OscConfig+0x10>
 8005bcc:	686b      	ldr	r3, [r5, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1ce      	bne.n	8005b70 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8005bd2:	2001      	movs	r0, #1
 8005bd4:	e026      	b.n	8005c24 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bd6:	686a      	ldr	r2, [r5, #4]
 8005bd8:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005bdc:	d125      	bne.n	8005c2a <HAL_RCC_OscConfig+0xca>
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be4:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005be6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005be8:	68a9      	ldr	r1, [r5, #8]
 8005bea:	f023 030f 	bic.w	r3, r3, #15
 8005bee:	430b      	orrs	r3, r1
 8005bf0:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bf2:	b352      	cbz	r2, 8005c4a <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 8005bf4:	f7ff f866 	bl	8004cc4 <HAL_GetTick>
 8005bf8:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8005bfc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bfe:	f04f 0801 	mov.w	r8, #1
 8005c02:	fa97 f3a7 	rbit	r3, r7
 8005c06:	6822      	ldr	r2, [r4, #0]
 8005c08:	fa97 f3a7 	rbit	r3, r7
 8005c0c:	fab3 f383 	clz	r3, r3
 8005c10:	fa08 f303 	lsl.w	r3, r8, r3
 8005c14:	4213      	tst	r3, r2
 8005c16:	d1ab      	bne.n	8005b70 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c18:	f7ff f854 	bl	8004cc4 <HAL_GetTick>
 8005c1c:	1b80      	subs	r0, r0, r6
 8005c1e:	2864      	cmp	r0, #100	@ 0x64
 8005c20:	d9ef      	bls.n	8005c02 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 8005c22:	2003      	movs	r0, #3
}
 8005c24:	b002      	add	sp, #8
 8005c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	b932      	cbnz	r2, 8005c3c <HAL_RCC_OscConfig+0xdc>
 8005c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c32:	6023      	str	r3, [r4, #0]
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c3a:	e7d3      	b.n	8005be4 <HAL_RCC_OscConfig+0x84>
 8005c3c:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8005c40:	d1f5      	bne.n	8005c2e <HAL_RCC_OscConfig+0xce>
 8005c42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c46:	6023      	str	r3, [r4, #0]
 8005c48:	e7c9      	b.n	8005bde <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 8005c4a:	f7ff f83b 	bl	8004cc4 <HAL_GetTick>
 8005c4e:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8005c52:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c54:	f04f 0801 	mov.w	r8, #1
 8005c58:	fa97 f3a7 	rbit	r3, r7
 8005c5c:	6822      	ldr	r2, [r4, #0]
 8005c5e:	fa97 f3a7 	rbit	r3, r7
 8005c62:	fab3 f383 	clz	r3, r3
 8005c66:	fa08 f303 	lsl.w	r3, r8, r3
 8005c6a:	4213      	tst	r3, r2
 8005c6c:	d080      	beq.n	8005b70 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c6e:	f7ff f829 	bl	8004cc4 <HAL_GetTick>
 8005c72:	1b80      	subs	r0, r0, r6
 8005c74:	2864      	cmp	r0, #100	@ 0x64
 8005c76:	d9ef      	bls.n	8005c58 <HAL_RCC_OscConfig+0xf8>
 8005c78:	e7d3      	b.n	8005c22 <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005c7a:	4c77      	ldr	r4, [pc, #476]	@ (8005e58 <HAL_RCC_OscConfig+0x2f8>)
 8005c7c:	6863      	ldr	r3, [r4, #4]
 8005c7e:	f013 0f0c 	tst.w	r3, #12
 8005c82:	d007      	beq.n	8005c94 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005c84:	6863      	ldr	r3, [r4, #4]
 8005c86:	f003 030c 	and.w	r3, r3, #12
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	d11f      	bne.n	8005cce <HAL_RCC_OscConfig+0x16e>
 8005c8e:	6863      	ldr	r3, [r4, #4]
 8005c90:	03de      	lsls	r6, r3, #15
 8005c92:	d41c      	bmi.n	8005cce <HAL_RCC_OscConfig+0x16e>
 8005c94:	2302      	movs	r3, #2
 8005c96:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c9a:	6821      	ldr	r1, [r4, #0]
 8005c9c:	fa93 f3a3 	rbit	r3, r3
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	fab3 f383 	clz	r3, r3
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	420b      	tst	r3, r1
 8005cac:	d002      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x154>
 8005cae:	692b      	ldr	r3, [r5, #16]
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d18e      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb4:	6821      	ldr	r1, [r4, #0]
 8005cb6:	22f8      	movs	r2, #248	@ 0xf8
 8005cb8:	fa92 f2a2 	rbit	r2, r2
 8005cbc:	696b      	ldr	r3, [r5, #20]
 8005cbe:	fab2 f282 	clz	r2, r2
 8005cc2:	4093      	lsls	r3, r2
 8005cc4:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	6023      	str	r3, [r4, #0]
 8005ccc:	e754      	b.n	8005b78 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cce:	692a      	ldr	r2, [r5, #16]
 8005cd0:	2601      	movs	r6, #1
 8005cd2:	b1fa      	cbz	r2, 8005d14 <HAL_RCC_OscConfig+0x1b4>
 8005cd4:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8005cd8:	fab3 f383 	clz	r3, r3
 8005cdc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005ce0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	f04f 0802 	mov.w	r8, #2
 8005cea:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8005cec:	f7fe ffea 	bl	8004cc4 <HAL_GetTick>
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf6:	6822      	ldr	r2, [r4, #0]
 8005cf8:	fa98 f3a8 	rbit	r3, r8
 8005cfc:	fab3 f383 	clz	r3, r3
 8005d00:	fa06 f303 	lsl.w	r3, r6, r3
 8005d04:	4213      	tst	r3, r2
 8005d06:	d1d5      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d08:	f7fe ffdc 	bl	8004cc4 <HAL_GetTick>
 8005d0c:	1bc0      	subs	r0, r0, r7
 8005d0e:	2802      	cmp	r0, #2
 8005d10:	d9ef      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x192>
 8005d12:	e786      	b.n	8005c22 <HAL_RCC_OscConfig+0xc2>
 8005d14:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8005d18:	fab3 f383 	clz	r3, r3
 8005d1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005d20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	f04f 0802 	mov.w	r8, #2
 8005d2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005d2c:	f7fe ffca 	bl	8004cc4 <HAL_GetTick>
 8005d30:	4607      	mov	r7, r0
 8005d32:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d36:	6822      	ldr	r2, [r4, #0]
 8005d38:	fa98 f3a8 	rbit	r3, r8
 8005d3c:	fab3 f383 	clz	r3, r3
 8005d40:	fa06 f303 	lsl.w	r3, r6, r3
 8005d44:	4213      	tst	r3, r2
 8005d46:	f43f af17 	beq.w	8005b78 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d4a:	f7fe ffbb 	bl	8004cc4 <HAL_GetTick>
 8005d4e:	1bc0      	subs	r0, r0, r7
 8005d50:	2802      	cmp	r0, #2
 8005d52:	d9ee      	bls.n	8005d32 <HAL_RCC_OscConfig+0x1d2>
 8005d54:	e765      	b.n	8005c22 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d56:	69aa      	ldr	r2, [r5, #24]
 8005d58:	4e3f      	ldr	r6, [pc, #252]	@ (8005e58 <HAL_RCC_OscConfig+0x2f8>)
 8005d5a:	4940      	ldr	r1, [pc, #256]	@ (8005e5c <HAL_RCC_OscConfig+0x2fc>)
 8005d5c:	2401      	movs	r4, #1
 8005d5e:	b30a      	cbz	r2, 8005da4 <HAL_RCC_OscConfig+0x244>
 8005d60:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8005d64:	fab3 f383 	clz	r3, r3
 8005d68:	440b      	add	r3, r1
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	2702      	movs	r7, #2
 8005d6e:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8005d70:	f7fe ffa8 	bl	8004cc4 <HAL_GetTick>
 8005d74:	4680      	mov	r8, r0
 8005d76:	fa97 f3a7 	rbit	r3, r7
 8005d7a:	fa97 f3a7 	rbit	r3, r7
 8005d7e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d82:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8005d84:	fa97 f3a7 	rbit	r3, r7
 8005d88:	fab3 f383 	clz	r3, r3
 8005d8c:	fa04 f303 	lsl.w	r3, r4, r3
 8005d90:	4213      	tst	r3, r2
 8005d92:	f47f aef5 	bne.w	8005b80 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d96:	f7fe ff95 	bl	8004cc4 <HAL_GetTick>
 8005d9a:	eba0 0008 	sub.w	r0, r0, r8
 8005d9e:	2802      	cmp	r0, #2
 8005da0:	d9e9      	bls.n	8005d76 <HAL_RCC_OscConfig+0x216>
 8005da2:	e73e      	b.n	8005c22 <HAL_RCC_OscConfig+0xc2>
 8005da4:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8005da8:	fab3 f383 	clz	r3, r3
 8005dac:	440b      	add	r3, r1
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	2702      	movs	r7, #2
 8005db2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005db4:	f7fe ff86 	bl	8004cc4 <HAL_GetTick>
 8005db8:	4680      	mov	r8, r0
 8005dba:	fa97 f3a7 	rbit	r3, r7
 8005dbe:	fa97 f3a7 	rbit	r3, r7
 8005dc2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dc6:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8005dc8:	fa97 f3a7 	rbit	r3, r7
 8005dcc:	fab3 f383 	clz	r3, r3
 8005dd0:	fa04 f303 	lsl.w	r3, r4, r3
 8005dd4:	4213      	tst	r3, r2
 8005dd6:	f43f aed3 	beq.w	8005b80 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dda:	f7fe ff73 	bl	8004cc4 <HAL_GetTick>
 8005dde:	eba0 0008 	sub.w	r0, r0, r8
 8005de2:	2802      	cmp	r0, #2
 8005de4:	d9e9      	bls.n	8005dba <HAL_RCC_OscConfig+0x25a>
 8005de6:	e71c      	b.n	8005c22 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005de8:	4c1b      	ldr	r4, [pc, #108]	@ (8005e58 <HAL_RCC_OscConfig+0x2f8>)
 8005dea:	69e3      	ldr	r3, [r4, #28]
 8005dec:	00d9      	lsls	r1, r3, #3
 8005dee:	d431      	bmi.n	8005e54 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005df0:	69e3      	ldr	r3, [r4, #28]
 8005df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005df6:	61e3      	str	r3, [r4, #28]
 8005df8:	69e3      	ldr	r3, [r4, #28]
 8005dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005e02:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e04:	4f16      	ldr	r7, [pc, #88]	@ (8005e60 <HAL_RCC_OscConfig+0x300>)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	05da      	lsls	r2, r3, #23
 8005e0a:	d52b      	bpl.n	8005e64 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e0c:	68eb      	ldr	r3, [r5, #12]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d139      	bne.n	8005e86 <HAL_RCC_OscConfig+0x326>
 8005e12:	6a23      	ldr	r3, [r4, #32]
 8005e14:	f043 0301 	orr.w	r3, r3, #1
 8005e18:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005e1a:	f7fe ff53 	bl	8004cc4 <HAL_GetTick>
 8005e1e:	2702      	movs	r7, #2
 8005e20:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e22:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e26:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8005e2a:	fa97 f3a7 	rbit	r3, r7
 8005e2e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e32:	6a22      	ldr	r2, [r4, #32]
 8005e34:	fa97 f3a7 	rbit	r3, r7
 8005e38:	fab3 f383 	clz	r3, r3
 8005e3c:	fa09 f303 	lsl.w	r3, r9, r3
 8005e40:	4213      	tst	r3, r2
 8005e42:	d053      	beq.n	8005eec <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 8005e44:	2e00      	cmp	r6, #0
 8005e46:	f43f ae9f 	beq.w	8005b88 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e4a:	69e3      	ldr	r3, [r4, #28]
 8005e4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e50:	61e3      	str	r3, [r4, #28]
 8005e52:	e699      	b.n	8005b88 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8005e54:	2600      	movs	r6, #0
 8005e56:	e7d5      	b.n	8005e04 <HAL_RCC_OscConfig+0x2a4>
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	10908120 	.word	0x10908120
 8005e60:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e6a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005e6c:	f7fe ff2a 	bl	8004cc4 <HAL_GetTick>
 8005e70:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	05db      	lsls	r3, r3, #23
 8005e76:	d4c9      	bmi.n	8005e0c <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e78:	f7fe ff24 	bl	8004cc4 <HAL_GetTick>
 8005e7c:	eba0 0008 	sub.w	r0, r0, r8
 8005e80:	2864      	cmp	r0, #100	@ 0x64
 8005e82:	d9f6      	bls.n	8005e72 <HAL_RCC_OscConfig+0x312>
 8005e84:	e6cd      	b.n	8005c22 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e86:	bb1b      	cbnz	r3, 8005ed0 <HAL_RCC_OscConfig+0x370>
 8005e88:	6a23      	ldr	r3, [r4, #32]
 8005e8a:	f023 0301 	bic.w	r3, r3, #1
 8005e8e:	6223      	str	r3, [r4, #32]
 8005e90:	6a23      	ldr	r3, [r4, #32]
 8005e92:	f023 0304 	bic.w	r3, r3, #4
 8005e96:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005e98:	f7fe ff14 	bl	8004cc4 <HAL_GetTick>
 8005e9c:	2702      	movs	r7, #2
 8005e9e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea0:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ea4:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8005ea8:	fa97 f3a7 	rbit	r3, r7
 8005eac:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eb0:	6a22      	ldr	r2, [r4, #32]
 8005eb2:	fa97 f3a7 	rbit	r3, r7
 8005eb6:	fab3 f383 	clz	r3, r3
 8005eba:	fa09 f303 	lsl.w	r3, r9, r3
 8005ebe:	4213      	tst	r3, r2
 8005ec0:	d0c0      	beq.n	8005e44 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ec2:	f7fe feff 	bl	8004cc4 <HAL_GetTick>
 8005ec6:	eba0 0008 	sub.w	r0, r0, r8
 8005eca:	4550      	cmp	r0, sl
 8005ecc:	d9ec      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x348>
 8005ece:	e6a8      	b.n	8005c22 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ed0:	2b05      	cmp	r3, #5
 8005ed2:	6a23      	ldr	r3, [r4, #32]
 8005ed4:	d103      	bne.n	8005ede <HAL_RCC_OscConfig+0x37e>
 8005ed6:	f043 0304 	orr.w	r3, r3, #4
 8005eda:	6223      	str	r3, [r4, #32]
 8005edc:	e799      	b.n	8005e12 <HAL_RCC_OscConfig+0x2b2>
 8005ede:	f023 0301 	bic.w	r3, r3, #1
 8005ee2:	6223      	str	r3, [r4, #32]
 8005ee4:	6a23      	ldr	r3, [r4, #32]
 8005ee6:	f023 0304 	bic.w	r3, r3, #4
 8005eea:	e795      	b.n	8005e18 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eec:	f7fe feea 	bl	8004cc4 <HAL_GetTick>
 8005ef0:	eba0 0008 	sub.w	r0, r0, r8
 8005ef4:	4550      	cmp	r0, sl
 8005ef6:	d998      	bls.n	8005e2a <HAL_RCC_OscConfig+0x2ca>
 8005ef8:	e693      	b.n	8005c22 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005efa:	4c46      	ldr	r4, [pc, #280]	@ (8006014 <HAL_RCC_OscConfig+0x4b4>)
 8005efc:	6862      	ldr	r2, [r4, #4]
 8005efe:	f002 020c 	and.w	r2, r2, #12
 8005f02:	2a08      	cmp	r2, #8
 8005f04:	d074      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f0c:	d14d      	bne.n	8005faa <HAL_RCC_OscConfig+0x44a>
 8005f0e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8005f12:	fab3 f383 	clz	r3, r3
 8005f16:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005f1a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005f24:	f7fe fece 	bl	8004cc4 <HAL_GetTick>
 8005f28:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 8005f2c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f2e:	2601      	movs	r6, #1
 8005f30:	fa98 f3a8 	rbit	r3, r8
 8005f34:	6822      	ldr	r2, [r4, #0]
 8005f36:	fa98 f3a8 	rbit	r3, r8
 8005f3a:	fab3 f383 	clz	r3, r3
 8005f3e:	fa06 f303 	lsl.w	r3, r6, r3
 8005f42:	4213      	tst	r3, r2
 8005f44:	d12b      	bne.n	8005f9e <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f46:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8005f4a:	6862      	ldr	r2, [r4, #4]
 8005f4c:	430b      	orrs	r3, r1
 8005f4e:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8005f52:	4313      	orrs	r3, r2
 8005f54:	6063      	str	r3, [r4, #4]
 8005f56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f5a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8005f5e:	fab3 f383 	clz	r3, r3
 8005f62:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005f66:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005f6a:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f6c:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8005f6e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8005f70:	f7fe fea8 	bl	8004cc4 <HAL_GetTick>
 8005f74:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8005f78:	4605      	mov	r5, r0
 8005f7a:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f7e:	6822      	ldr	r2, [r4, #0]
 8005f80:	fa96 f3a6 	rbit	r3, r6
 8005f84:	fab3 f383 	clz	r3, r3
 8005f88:	fa07 f303 	lsl.w	r3, r7, r3
 8005f8c:	4213      	tst	r3, r2
 8005f8e:	f47f adff 	bne.w	8005b90 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f92:	f7fe fe97 	bl	8004cc4 <HAL_GetTick>
 8005f96:	1b40      	subs	r0, r0, r5
 8005f98:	2802      	cmp	r0, #2
 8005f9a:	d9ee      	bls.n	8005f7a <HAL_RCC_OscConfig+0x41a>
 8005f9c:	e641      	b.n	8005c22 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f9e:	f7fe fe91 	bl	8004cc4 <HAL_GetTick>
 8005fa2:	1bc0      	subs	r0, r0, r7
 8005fa4:	2802      	cmp	r0, #2
 8005fa6:	d9c3      	bls.n	8005f30 <HAL_RCC_OscConfig+0x3d0>
 8005fa8:	e63b      	b.n	8005c22 <HAL_RCC_OscConfig+0xc2>
 8005faa:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8005fae:	fab3 f383 	clz	r3, r3
 8005fb2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005fb6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005fc0:	f7fe fe80 	bl	8004cc4 <HAL_GetTick>
 8005fc4:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8005fc8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fca:	2701      	movs	r7, #1
 8005fcc:	fa96 f3a6 	rbit	r3, r6
 8005fd0:	6822      	ldr	r2, [r4, #0]
 8005fd2:	fa96 f3a6 	rbit	r3, r6
 8005fd6:	fab3 f383 	clz	r3, r3
 8005fda:	fa07 f303 	lsl.w	r3, r7, r3
 8005fde:	4213      	tst	r3, r2
 8005fe0:	f43f add6 	beq.w	8005b90 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fe4:	f7fe fe6e 	bl	8004cc4 <HAL_GetTick>
 8005fe8:	1b40      	subs	r0, r0, r5
 8005fea:	2802      	cmp	r0, #2
 8005fec:	d9ee      	bls.n	8005fcc <HAL_RCC_OscConfig+0x46c>
 8005fee:	e618      	b.n	8005c22 <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	f43f adee 	beq.w	8005bd2 <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 8005ff6:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005ff8:	6a2b      	ldr	r3, [r5, #32]
 8005ffa:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8005ffe:	429a      	cmp	r2, r3
 8006000:	f47f ade7 	bne.w	8005bd2 <HAL_RCC_OscConfig+0x72>
 8006004:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006006:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800600a:	1ac0      	subs	r0, r0, r3
 800600c:	bf18      	it	ne
 800600e:	2001      	movne	r0, #1
 8006010:	e608      	b.n	8005c24 <HAL_RCC_OscConfig+0xc4>
 8006012:	bf00      	nop
 8006014:	40021000 	.word	0x40021000

08006018 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8006018:	4b0c      	ldr	r3, [pc, #48]	@ (800604c <HAL_RCC_GetSysClockFreq+0x34>)
 800601a:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800601c:	f002 010c 	and.w	r1, r2, #12
 8006020:	2908      	cmp	r1, #8
 8006022:	d111      	bne.n	8006048 <HAL_RCC_GetSysClockFreq+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006026:	480a      	ldr	r0, [pc, #40]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x38>)
 8006028:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800602c:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800602e:	bf44      	itt	mi
 8006030:	f003 030f 	andmi.w	r3, r3, #15
 8006034:	4a07      	ldrmi	r2, [pc, #28]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006036:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006038:	bf49      	itett	mi
 800603a:	5cd2      	ldrbmi	r2, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800603c:	4b06      	ldrpl	r3, [pc, #24]	@ (8006058 <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800603e:	4b07      	ldrmi	r3, [pc, #28]	@ (800605c <HAL_RCC_GetSysClockFreq+0x44>)
 8006040:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006044:	4358      	muls	r0, r3
 8006046:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8006048:	4804      	ldr	r0, [pc, #16]	@ (800605c <HAL_RCC_GetSysClockFreq+0x44>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800604a:	4770      	bx	lr
 800604c:	40021000 	.word	0x40021000
 8006050:	080119a8 	.word	0x080119a8
 8006054:	08011998 	.word	0x08011998
 8006058:	003d0900 	.word	0x003d0900
 800605c:	007a1200 	.word	0x007a1200

08006060 <HAL_RCC_ClockConfig>:
{
 8006060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006064:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8006066:	4604      	mov	r4, r0
 8006068:	b910      	cbnz	r0, 8006070 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800606a:	2001      	movs	r0, #1
}
 800606c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006070:	4a4a      	ldr	r2, [pc, #296]	@ (800619c <HAL_RCC_ClockConfig+0x13c>)
 8006072:	6813      	ldr	r3, [r2, #0]
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	428b      	cmp	r3, r1
 800607a:	d32e      	bcc.n	80060da <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800607c:	6822      	ldr	r2, [r4, #0]
 800607e:	0791      	lsls	r1, r2, #30
 8006080:	d436      	bmi.n	80060f0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006082:	07d2      	lsls	r2, r2, #31
 8006084:	d43c      	bmi.n	8006100 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006086:	4a45      	ldr	r2, [pc, #276]	@ (800619c <HAL_RCC_ClockConfig+0x13c>)
 8006088:	6813      	ldr	r3, [r2, #0]
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	42ab      	cmp	r3, r5
 8006090:	d870      	bhi.n	8006174 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006092:	6822      	ldr	r2, [r4, #0]
 8006094:	4d42      	ldr	r5, [pc, #264]	@ (80061a0 <HAL_RCC_ClockConfig+0x140>)
 8006096:	f012 0f04 	tst.w	r2, #4
 800609a:	d177      	bne.n	800618c <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800609c:	0713      	lsls	r3, r2, #28
 800609e:	d506      	bpl.n	80060ae <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060a0:	686b      	ldr	r3, [r5, #4]
 80060a2:	6922      	ldr	r2, [r4, #16]
 80060a4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80060a8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80060ac:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80060ae:	f7ff ffb3 	bl	8006018 <HAL_RCC_GetSysClockFreq>
 80060b2:	686b      	ldr	r3, [r5, #4]
 80060b4:	22f0      	movs	r2, #240	@ 0xf0
 80060b6:	fa92 f2a2 	rbit	r2, r2
 80060ba:	fab2 f282 	clz	r2, r2
 80060be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060c2:	40d3      	lsrs	r3, r2
 80060c4:	4a37      	ldr	r2, [pc, #220]	@ (80061a4 <HAL_RCC_ClockConfig+0x144>)
 80060c6:	5cd3      	ldrb	r3, [r2, r3]
 80060c8:	40d8      	lsrs	r0, r3
 80060ca:	4b37      	ldr	r3, [pc, #220]	@ (80061a8 <HAL_RCC_ClockConfig+0x148>)
 80060cc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80060ce:	4b37      	ldr	r3, [pc, #220]	@ (80061ac <HAL_RCC_ClockConfig+0x14c>)
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	f7fe fc4d 	bl	8004970 <HAL_InitTick>
  return HAL_OK;
 80060d6:	2000      	movs	r0, #0
 80060d8:	e7c8      	b.n	800606c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060da:	6813      	ldr	r3, [r2, #0]
 80060dc:	f023 0307 	bic.w	r3, r3, #7
 80060e0:	430b      	orrs	r3, r1
 80060e2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060e4:	6813      	ldr	r3, [r2, #0]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	428b      	cmp	r3, r1
 80060ec:	d1bd      	bne.n	800606a <HAL_RCC_ClockConfig+0xa>
 80060ee:	e7c5      	b.n	800607c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060f0:	492b      	ldr	r1, [pc, #172]	@ (80061a0 <HAL_RCC_ClockConfig+0x140>)
 80060f2:	68a0      	ldr	r0, [r4, #8]
 80060f4:	684b      	ldr	r3, [r1, #4]
 80060f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060fa:	4303      	orrs	r3, r0
 80060fc:	604b      	str	r3, [r1, #4]
 80060fe:	e7c0      	b.n	8006082 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006100:	6862      	ldr	r2, [r4, #4]
 8006102:	4e27      	ldr	r6, [pc, #156]	@ (80061a0 <HAL_RCC_ClockConfig+0x140>)
 8006104:	2a01      	cmp	r2, #1
 8006106:	d124      	bne.n	8006152 <HAL_RCC_ClockConfig+0xf2>
 8006108:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800610c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006110:	6831      	ldr	r1, [r6, #0]
 8006112:	fa93 f3a3 	rbit	r3, r3
 8006116:	fab3 f383 	clz	r3, r3
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006120:	d0a3      	beq.n	800606a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006122:	6873      	ldr	r3, [r6, #4]
 8006124:	f023 0303 	bic.w	r3, r3, #3
 8006128:	4313      	orrs	r3, r2
 800612a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800612c:	f7fe fdca 	bl	8004cc4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006130:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8006134:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006136:	6873      	ldr	r3, [r6, #4]
 8006138:	6862      	ldr	r2, [r4, #4]
 800613a:	f003 030c 	and.w	r3, r3, #12
 800613e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006142:	d0a0      	beq.n	8006086 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006144:	f7fe fdbe 	bl	8004cc4 <HAL_GetTick>
 8006148:	1bc0      	subs	r0, r0, r7
 800614a:	4540      	cmp	r0, r8
 800614c:	d9f3      	bls.n	8006136 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 800614e:	2003      	movs	r0, #3
 8006150:	e78c      	b.n	800606c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006152:	2a02      	cmp	r2, #2
 8006154:	bf0c      	ite	eq
 8006156:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 800615a:	2302      	movne	r3, #2
 800615c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006160:	6830      	ldr	r0, [r6, #0]
 8006162:	fa93 f3a3 	rbit	r3, r3
 8006166:	2101      	movs	r1, #1
 8006168:	fab3 f383 	clz	r3, r3
 800616c:	fa01 f303 	lsl.w	r3, r1, r3
 8006170:	4203      	tst	r3, r0
 8006172:	e7d5      	b.n	8006120 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006174:	6813      	ldr	r3, [r2, #0]
 8006176:	f023 0307 	bic.w	r3, r3, #7
 800617a:	432b      	orrs	r3, r5
 800617c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800617e:	6813      	ldr	r3, [r2, #0]
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	42ab      	cmp	r3, r5
 8006186:	f47f af70 	bne.w	800606a <HAL_RCC_ClockConfig+0xa>
 800618a:	e782      	b.n	8006092 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800618c:	686b      	ldr	r3, [r5, #4]
 800618e:	68e1      	ldr	r1, [r4, #12]
 8006190:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006194:	430b      	orrs	r3, r1
 8006196:	606b      	str	r3, [r5, #4]
 8006198:	e780      	b.n	800609c <HAL_RCC_ClockConfig+0x3c>
 800619a:	bf00      	nop
 800619c:	40022000 	.word	0x40022000
 80061a0:	40021000 	.word	0x40021000
 80061a4:	08011988 	.word	0x08011988
 80061a8:	20000010 	.word	0x20000010
 80061ac:	20000018 	.word	0x20000018

080061b0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80061b0:	4b08      	ldr	r3, [pc, #32]	@ (80061d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	fa92 f2a2 	rbit	r2, r2
 80061bc:	fab2 f282 	clz	r2, r2
 80061c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061c4:	40d3      	lsrs	r3, r2
 80061c6:	4a04      	ldr	r2, [pc, #16]	@ (80061d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061c8:	5cd3      	ldrb	r3, [r2, r3]
 80061ca:	4a04      	ldr	r2, [pc, #16]	@ (80061dc <HAL_RCC_GetPCLK1Freq+0x2c>)
 80061cc:	6810      	ldr	r0, [r2, #0]
}    
 80061ce:	40d8      	lsrs	r0, r3
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	40021000 	.word	0x40021000
 80061d8:	08011980 	.word	0x08011980
 80061dc:	20000010 	.word	0x20000010

080061e0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80061e0:	4b08      	ldr	r3, [pc, #32]	@ (8006204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061e2:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	fa92 f2a2 	rbit	r2, r2
 80061ec:	fab2 f282 	clz	r2, r2
 80061f0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80061f4:	40d3      	lsrs	r3, r2
 80061f6:	4a04      	ldr	r2, [pc, #16]	@ (8006208 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061f8:	5cd3      	ldrb	r3, [r2, r3]
 80061fa:	4a04      	ldr	r2, [pc, #16]	@ (800620c <HAL_RCC_GetPCLK2Freq+0x2c>)
 80061fc:	6810      	ldr	r0, [r2, #0]
} 
 80061fe:	40d8      	lsrs	r0, r3
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40021000 	.word	0x40021000
 8006208:	08011980 	.word	0x08011980
 800620c:	20000010 	.word	0x20000010

08006210 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006210:	230f      	movs	r3, #15
 8006212:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006214:	4b0b      	ldr	r3, [pc, #44]	@ (8006244 <HAL_RCC_GetClockConfig+0x34>)
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	f002 0203 	and.w	r2, r2, #3
 800621c:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8006224:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800622c:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	08db      	lsrs	r3, r3, #3
 8006232:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006236:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8006238:	4b03      	ldr	r3, [pc, #12]	@ (8006248 <HAL_RCC_GetClockConfig+0x38>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	600b      	str	r3, [r1, #0]
}
 8006242:	4770      	bx	lr
 8006244:	40021000 	.word	0x40021000
 8006248:	40022000 	.word	0x40022000

0800624c <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800624c:	6803      	ldr	r3, [r0, #0]
{
 800624e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006252:	03dd      	lsls	r5, r3, #15
{
 8006254:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006256:	d524      	bpl.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x56>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006258:	4d78      	ldr	r5, [pc, #480]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800625a:	69eb      	ldr	r3, [r5, #28]
 800625c:	00d8      	lsls	r0, r3, #3
 800625e:	f100 8091 	bmi.w	8006384 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006262:	69eb      	ldr	r3, [r5, #28]
 8006264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006268:	61eb      	str	r3, [r5, #28]
 800626a:	69eb      	ldr	r3, [r5, #28]
 800626c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006274:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006276:	4f72      	ldr	r7, [pc, #456]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	05d9      	lsls	r1, r3, #23
 800627c:	f140 8084 	bpl.w	8006388 <HAL_RCCEx_PeriphCLKConfig+0x13c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006280:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006282:	6862      	ldr	r2, [r4, #4]
 8006284:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8006288:	f040 8093 	bne.w	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800628c:	6a2b      	ldr	r3, [r5, #32]
 800628e:	6862      	ldr	r2, [r4, #4]
 8006290:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006294:	4313      	orrs	r3, r2
 8006296:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006298:	b11e      	cbz	r6, 80062a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800629a:	69eb      	ldr	r3, [r5, #28]
 800629c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062a0:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	07df      	lsls	r7, r3, #31
 80062a6:	d506      	bpl.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062a8:	4964      	ldr	r1, [pc, #400]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80062aa:	68a0      	ldr	r0, [r4, #8]
 80062ac:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80062ae:	f022 0203 	bic.w	r2, r2, #3
 80062b2:	4302      	orrs	r2, r0
 80062b4:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062b6:	079e      	lsls	r6, r3, #30
 80062b8:	d506      	bpl.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062ba:	4960      	ldr	r1, [pc, #384]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80062bc:	68e0      	ldr	r0, [r4, #12]
 80062be:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80062c0:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80062c4:	4302      	orrs	r2, r0
 80062c6:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062c8:	075d      	lsls	r5, r3, #29
 80062ca:	d506      	bpl.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062cc:	495b      	ldr	r1, [pc, #364]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80062ce:	6920      	ldr	r0, [r4, #16]
 80062d0:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80062d2:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80062d6:	4302      	orrs	r2, r0
 80062d8:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062da:	0698      	lsls	r0, r3, #26
 80062dc:	d506      	bpl.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062de:	4957      	ldr	r1, [pc, #348]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80062e0:	69e0      	ldr	r0, [r4, #28]
 80062e2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80062e4:	f022 0210 	bic.w	r2, r2, #16
 80062e8:	4302      	orrs	r2, r0
 80062ea:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062ec:	0399      	lsls	r1, r3, #14
 80062ee:	d506      	bpl.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80062f0:	4952      	ldr	r1, [pc, #328]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80062f2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80062f4:	684a      	ldr	r2, [r1, #4]
 80062f6:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 80062fa:	4302      	orrs	r2, r0
 80062fc:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062fe:	065a      	lsls	r2, r3, #25
 8006300:	d506      	bpl.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006302:	494e      	ldr	r1, [pc, #312]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006304:	6a20      	ldr	r0, [r4, #32]
 8006306:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006308:	f022 0220 	bic.w	r2, r2, #32
 800630c:	4302      	orrs	r2, r0
 800630e:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006310:	071f      	lsls	r7, r3, #28
 8006312:	d506      	bpl.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006314:	4949      	ldr	r1, [pc, #292]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006316:	6960      	ldr	r0, [r4, #20]
 8006318:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800631a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800631e:	4302      	orrs	r2, r0
 8006320:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006322:	06de      	lsls	r6, r3, #27
 8006324:	d506      	bpl.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006326:	4945      	ldr	r1, [pc, #276]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006328:	69a0      	ldr	r0, [r4, #24]
 800632a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800632c:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8006330:	4302      	orrs	r2, r0
 8006332:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006334:	059d      	lsls	r5, r3, #22
 8006336:	d506      	bpl.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006338:	4940      	ldr	r1, [pc, #256]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800633a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800633c:	684a      	ldr	r2, [r1, #4]
 800633e:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8006342:	4302      	orrs	r2, r0
 8006344:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006346:	0618      	lsls	r0, r3, #24
 8006348:	d506      	bpl.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800634a:	493c      	ldr	r1, [pc, #240]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800634c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800634e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8006350:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8006354:	4302      	orrs	r2, r0
 8006356:	62ca      	str	r2, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006358:	05d9      	lsls	r1, r3, #23
 800635a:	d506      	bpl.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800635c:	4937      	ldr	r1, [pc, #220]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800635e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006360:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8006362:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 8006366:	4302      	orrs	r2, r0
 8006368:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800636a:	04da      	lsls	r2, r3, #19
 800636c:	d506      	bpl.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800636e:	4933      	ldr	r1, [pc, #204]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006370:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8006372:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006374:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006378:	4302      	orrs	r2, r0
 800637a:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800637c:	049b      	lsls	r3, r3, #18
 800637e:	d454      	bmi.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006380:	2000      	movs	r0, #0
 8006382:	e013      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 8006384:	2600      	movs	r6, #0
 8006386:	e776      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800638e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8006390:	f7fe fc98 	bl	8004cc4 <HAL_GetTick>
 8006394:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	05da      	lsls	r2, r3, #23
 800639a:	f53f af71 	bmi.w	8006280 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800639e:	f7fe fc91 	bl	8004cc4 <HAL_GetTick>
 80063a2:	eba0 0008 	sub.w	r0, r0, r8
 80063a6:	2864      	cmp	r0, #100	@ 0x64
 80063a8:	d9f5      	bls.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 80063aa:	2003      	movs	r0, #3
}
 80063ac:	b002      	add	sp, #8
 80063ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063b2:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80063b6:	429a      	cmp	r2, r3
 80063b8:	f43f af68 	beq.w	800628c <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063bc:	6a29      	ldr	r1, [r5, #32]
 80063be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80063c2:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 80063c6:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80063ca:	f8df c078 	ldr.w	ip, [pc, #120]	@ 8006444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80063ce:	fab2 f282 	clz	r2, r2
 80063d2:	4462      	add	r2, ip
 80063d4:	0092      	lsls	r2, r2, #2
 80063d6:	2701      	movs	r7, #1
 80063d8:	6017      	str	r7, [r2, #0]
 80063da:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063de:	fab3 f383 	clz	r3, r3
 80063e2:	4463      	add	r3, ip
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80063ea:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 80063ec:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80063ee:	f57f af4d 	bpl.w	800628c <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 80063f2:	f7fe fc67 	bl	8004cc4 <HAL_GetTick>
 80063f6:	f04f 0802 	mov.w	r8, #2
 80063fa:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063fc:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8006400:	fa98 f3a8 	rbit	r3, r8
 8006404:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006408:	6a2a      	ldr	r2, [r5, #32]
 800640a:	fa98 f3a8 	rbit	r3, r8
 800640e:	fab3 f383 	clz	r3, r3
 8006412:	fa07 f303 	lsl.w	r3, r7, r3
 8006416:	4213      	tst	r3, r2
 8006418:	f47f af38 	bne.w	800628c <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800641c:	f7fe fc52 	bl	8004cc4 <HAL_GetTick>
 8006420:	eba0 0009 	sub.w	r0, r0, r9
 8006424:	4550      	cmp	r0, sl
 8006426:	d9eb      	bls.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006428:	e7bf      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800642a:	4a04      	ldr	r2, [pc, #16]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800642c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800642e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006430:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006434:	430b      	orrs	r3, r1
 8006436:	6313      	str	r3, [r2, #48]	@ 0x30
 8006438:	e7a2      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800643a:	bf00      	nop
 800643c:	40021000 	.word	0x40021000
 8006440:	40007000 	.word	0x40007000
 8006444:	10908100 	.word	0x10908100

08006448 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006448:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800644a:	6803      	ldr	r3, [r0, #0]
 800644c:	4a09      	ldr	r2, [pc, #36]	@ (8006474 <HAL_RTC_WaitForSynchro+0x2c>)
 800644e:	60da      	str	r2, [r3, #12]
{
 8006450:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 8006452:	f7fe fc37 	bl	8004cc4 <HAL_GetTick>
 8006456:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	069b      	lsls	r3, r3, #26
 800645e:	d501      	bpl.n	8006464 <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8006460:	2000      	movs	r0, #0
}
 8006462:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006464:	f7fe fc2e 	bl	8004cc4 <HAL_GetTick>
 8006468:	1b40      	subs	r0, r0, r5
 800646a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800646e:	d9f3      	bls.n	8006458 <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 8006470:	2003      	movs	r0, #3
 8006472:	e7f6      	b.n	8006462 <HAL_RTC_WaitForSynchro+0x1a>
 8006474:	0001ff5f 	.word	0x0001ff5f

08006478 <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006478:	6803      	ldr	r3, [r0, #0]
{
 800647a:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800647c:	68dc      	ldr	r4, [r3, #12]
 800647e:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 8006482:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006484:	d117      	bne.n	80064b6 <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800648c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800648e:	f7fe fc19 	bl	8004cc4 <HAL_GetTick>
 8006492:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	065b      	lsls	r3, r3, #25
 800649a:	d400      	bmi.n	800649e <RTC_EnterInitMode+0x26>
 800649c:	b10c      	cbz	r4, 80064a2 <RTC_EnterInitMode+0x2a>
      }
    }
  }

  return status;
}
 800649e:	4620      	mov	r0, r4
 80064a0:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80064a2:	f7fe fc0f 	bl	8004cc4 <HAL_GetTick>
 80064a6:	1b80      	subs	r0, r0, r6
 80064a8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 80064ac:	bf82      	ittt	hi
 80064ae:	2304      	movhi	r3, #4
 80064b0:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 80064b2:	2401      	movhi	r4, #1
 80064b4:	e7ee      	b.n	8006494 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80064b6:	2400      	movs	r4, #0
 80064b8:	e7f1      	b.n	800649e <RTC_EnterInitMode+0x26>

080064ba <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80064ba:	6803      	ldr	r3, [r0, #0]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 80064c2:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80064c4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	069b      	lsls	r3, r3, #26
{
 80064ca:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80064cc:	d501      	bpl.n	80064d2 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80064ce:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 80064d0:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064d2:	f7ff ffb9 	bl	8006448 <HAL_RTC_WaitForSynchro>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d0f9      	beq.n	80064ce <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80064da:	2304      	movs	r3, #4
 80064dc:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 80064de:	2001      	movs	r0, #1
 80064e0:	e7f6      	b.n	80064d0 <RTC_ExitInitMode+0x16>

080064e2 <HAL_RTC_Init>:
{
 80064e2:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 80064e4:	4604      	mov	r4, r0
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d041      	beq.n	800656e <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80064ea:	7f43      	ldrb	r3, [r0, #29]
 80064ec:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80064f0:	b913      	cbnz	r3, 80064f8 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 80064f2:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80064f4:	f7fe f904 	bl	8004700 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80064f8:	2302      	movs	r3, #2
 80064fa:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	06d2      	lsls	r2, r2, #27
 8006502:	d503      	bpl.n	800650c <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 8006504:	2301      	movs	r3, #1
 8006506:	7763      	strb	r3, [r4, #29]
 8006508:	2000      	movs	r0, #0
}
 800650a:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800650c:	22ca      	movs	r2, #202	@ 0xca
 800650e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006510:	2253      	movs	r2, #83	@ 0x53
 8006512:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8006514:	4620      	mov	r0, r4
 8006516:	f7ff ffaf 	bl	8006478 <RTC_EnterInitMode>
    if (status == HAL_OK)
 800651a:	bb10      	cbnz	r0, 8006562 <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800651c:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800651e:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 8006526:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800652a:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800652c:	6862      	ldr	r2, [r4, #4]
 800652e:	6899      	ldr	r1, [r3, #8]
 8006530:	4302      	orrs	r2, r0
 8006532:	6960      	ldr	r0, [r4, #20]
 8006534:	4302      	orrs	r2, r0
 8006536:	430a      	orrs	r2, r1
 8006538:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800653a:	68e2      	ldr	r2, [r4, #12]
 800653c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800653e:	691a      	ldr	r2, [r3, #16]
 8006540:	68a1      	ldr	r1, [r4, #8]
 8006542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006546:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8006548:	4620      	mov	r0, r4
 800654a:	f7ff ffb6 	bl	80064ba <RTC_ExitInitMode>
    if (status == HAL_OK)
 800654e:	b940      	cbnz	r0, 8006562 <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006550:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006552:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006554:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006556:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800655a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800655c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800655e:	430a      	orrs	r2, r1
 8006560:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	22ff      	movs	r2, #255	@ 0xff
 8006566:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8006568:	2800      	cmp	r0, #0
 800656a:	d0cb      	beq.n	8006504 <HAL_RTC_Init+0x22>
 800656c:	e7cd      	b.n	800650a <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 800656e:	2001      	movs	r0, #1
 8006570:	e7cb      	b.n	800650a <HAL_RTC_Init+0x28>

08006572 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 8006572:	2300      	movs	r3, #0

  while (number >= 10U)
 8006574:	2809      	cmp	r0, #9
 8006576:	d803      	bhi.n	8006580 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006578:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800657c:	b2c0      	uxtb	r0, r0
 800657e:	4770      	bx	lr
    number -= 10U;
 8006580:	380a      	subs	r0, #10
    bcdhigh++;
 8006582:	3301      	adds	r3, #1
    number -= 10U;
 8006584:	b2c0      	uxtb	r0, r0
 8006586:	e7f5      	b.n	8006574 <RTC_ByteToBcd2+0x2>

08006588 <HAL_RTC_SetTime>:
{
 8006588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 800658c:	7f03      	ldrb	r3, [r0, #28]
 800658e:	2b01      	cmp	r3, #1
{
 8006590:	4606      	mov	r6, r0
 8006592:	460f      	mov	r7, r1
 8006594:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8006598:	d041      	beq.n	800661e <HAL_RTC_SetTime+0x96>
 800659a:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800659c:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 800659e:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80065a0:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 80065a2:	7838      	ldrb	r0, [r7, #0]
 80065a4:	787d      	ldrb	r5, [r7, #1]
 80065a6:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065a8:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 80065aa:	2a00      	cmp	r2, #0
 80065ac:	d139      	bne.n	8006622 <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065ae:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 80065b2:	bf08      	it	eq
 80065b4:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80065b6:	f7ff ffdc 	bl	8006572 <RTC_ByteToBcd2>
 80065ba:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065bc:	4628      	mov	r0, r5
 80065be:	f7ff ffd8 	bl	8006572 <RTC_ByteToBcd2>
 80065c2:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80065c4:	4620      	mov	r0, r4
 80065c6:	f7ff ffd4 	bl	8006572 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80065ca:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80065cc:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 80065d0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80065d4:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065d8:	23ca      	movs	r3, #202	@ 0xca
 80065da:	624b      	str	r3, [r1, #36]	@ 0x24
 80065dc:	2353      	movs	r3, #83	@ 0x53
 80065de:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 80065e0:	4630      	mov	r0, r6
 80065e2:	f7ff ff49 	bl	8006478 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80065e6:	b9a8      	cbnz	r0, 8006614 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80065e8:	6832      	ldr	r2, [r6, #0]
 80065ea:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 80065ee:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 80065f2:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80065f4:	6893      	ldr	r3, [r2, #8]
 80065f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065fa:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80065fc:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8006600:	6891      	ldr	r1, [r2, #8]
 8006602:	4303      	orrs	r3, r0
 8006604:	430b      	orrs	r3, r1
 8006606:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 8006608:	4630      	mov	r0, r6
 800660a:	f7ff ff56 	bl	80064ba <RTC_ExitInitMode>
  if (status == HAL_OK)
 800660e:	b908      	cbnz	r0, 8006614 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8006610:	2301      	movs	r3, #1
 8006612:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006614:	6833      	ldr	r3, [r6, #0]
 8006616:	22ff      	movs	r2, #255	@ 0xff
 8006618:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 800661a:	2300      	movs	r3, #0
 800661c:	7733      	strb	r3, [r6, #28]
}
 800661e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006622:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8006626:	bf08      	it	eq
 8006628:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800662a:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800662c:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800662e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006632:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006636:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 800663a:	e7cd      	b.n	80065d8 <HAL_RTC_SetTime+0x50>

0800663c <HAL_RTC_SetDate>:
{
 800663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800663e:	7f03      	ldrb	r3, [r0, #28]
 8006640:	2b01      	cmp	r3, #1
{
 8006642:	4605      	mov	r5, r0
 8006644:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8006648:	d027      	beq.n	800669a <HAL_RTC_SetDate+0x5e>
 800664a:	2301      	movs	r3, #1
 800664c:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800664e:	7768      	strb	r0, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006650:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006652:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006654:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 8006656:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006658:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800665a:	b1fa      	cbz	r2, 800669c <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800665c:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 8006660:	433b      	orrs	r3, r7
 8006662:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006666:	682b      	ldr	r3, [r5, #0]
 8006668:	22ca      	movs	r2, #202	@ 0xca
 800666a:	625a      	str	r2, [r3, #36]	@ 0x24
 800666c:	2253      	movs	r2, #83	@ 0x53
 800666e:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8006670:	4628      	mov	r0, r5
 8006672:	f7ff ff01 	bl	8006478 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8006676:	b958      	cbnz	r0, 8006690 <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006678:	682a      	ldr	r2, [r5, #0]
 800667a:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 800667e:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 8006682:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8006684:	4628      	mov	r0, r5
 8006686:	f7ff ff18 	bl	80064ba <RTC_ExitInitMode>
  if (status == HAL_OK)
 800668a:	b908      	cbnz	r0, 8006690 <HAL_RTC_SetDate+0x54>
    hrtc->State = HAL_RTC_STATE_READY;
 800668c:	2301      	movs	r3, #1
 800668e:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006690:	682b      	ldr	r3, [r5, #0]
 8006692:	22ff      	movs	r2, #255	@ 0xff
 8006694:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8006696:	2300      	movs	r3, #0
 8006698:	772b      	strb	r3, [r5, #28]
}
 800669a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800669c:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800669e:	bf42      	ittt	mi
 80066a0:	f024 0410 	bicmi.w	r4, r4, #16
 80066a4:	340a      	addmi	r4, #10
 80066a6:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80066a8:	f7ff ff63 	bl	8006572 <RTC_ByteToBcd2>
 80066ac:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80066ae:	7848      	ldrb	r0, [r1, #1]
 80066b0:	f7ff ff5f 	bl	8006572 <RTC_ByteToBcd2>
 80066b4:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80066b6:	4638      	mov	r0, r7
 80066b8:	f7ff ff5b 	bl	8006572 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80066bc:	ea40 0306 	orr.w	r3, r0, r6
 80066c0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80066c4:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 80066c8:	e7cd      	b.n	8006666 <HAL_RTC_SetDate+0x2a>

080066ca <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80066ca:	0903      	lsrs	r3, r0, #4
 80066cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80066d0:	f000 000f 	and.w	r0, r0, #15
 80066d4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80066d8:	b2c0      	uxtb	r0, r0
 80066da:	4770      	bx	lr

080066dc <HAL_RTC_GetTime>:
{
 80066dc:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80066de:	6803      	ldr	r3, [r0, #0]
 80066e0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80066e2:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80066e4:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80066e6:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80066e8:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80066ec:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80066f0:	f003 047f 	and.w	r4, r3, #127	@ 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80066f4:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80066f6:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80066fa:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80066fe:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006700:	704d      	strb	r5, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006702:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006704:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8006706:	b952      	cbnz	r2, 800671e <HAL_RTC_GetTime+0x42>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006708:	f7ff ffdf 	bl	80066ca <RTC_Bcd2ToByte>
 800670c:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800670e:	4628      	mov	r0, r5
 8006710:	f7ff ffdb 	bl	80066ca <RTC_Bcd2ToByte>
 8006714:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006716:	4620      	mov	r0, r4
 8006718:	f7ff ffd7 	bl	80066ca <RTC_Bcd2ToByte>
 800671c:	7088      	strb	r0, [r1, #2]
}
 800671e:	2000      	movs	r0, #0
 8006720:	bd38      	pop	{r3, r4, r5, pc}

08006722 <HAL_RTC_GetDate>:
{
 8006722:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006724:	6803      	ldr	r3, [r0, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006728:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800672c:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006730:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006734:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006738:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800673a:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800673c:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800673e:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8006740:	b952      	cbnz	r2, 8006758 <HAL_RTC_GetDate+0x36>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006742:	f7ff ffc2 	bl	80066ca <RTC_Bcd2ToByte>
 8006746:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006748:	4628      	mov	r0, r5
 800674a:	f7ff ffbe 	bl	80066ca <RTC_Bcd2ToByte>
 800674e:	7048      	strb	r0, [r1, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006750:	4620      	mov	r0, r4
 8006752:	f7ff ffba 	bl	80066ca <RTC_Bcd2ToByte>
 8006756:	7088      	strb	r0, [r1, #2]
}
 8006758:	2000      	movs	r0, #0
 800675a:	bd38      	pop	{r3, r4, r5, pc}

0800675c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800675c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800675e:	460e      	mov	r6, r1
 8006760:	4614      	mov	r4, r2
 8006762:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006764:	f7fe faae 	bl	8004cc4 <HAL_GetTick>
 8006768:	4434      	add	r4, r6
 800676a:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 800676c:	f7fe faaa 	bl	8004cc4 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006770:	4b22      	ldr	r3, [pc, #136]	@ (80067fc <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006778:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 800677a:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800677c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800677e:	682a      	ldr	r2, [r5, #0]
 8006780:	6890      	ldr	r0, [r2, #8]
 8006782:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8006786:	d02d      	beq.n	80067e4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006788:	1c73      	adds	r3, r6, #1
 800678a:	d0f9      	beq.n	8006780 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800678c:	f7fe fa9a 	bl	8004cc4 <HAL_GetTick>
 8006790:	1bc0      	subs	r0, r0, r7
 8006792:	42a0      	cmp	r0, r4
 8006794:	d328      	bcc.n	80067e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006796:	682b      	ldr	r3, [r5, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800679e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067a0:	686a      	ldr	r2, [r5, #4]
 80067a2:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80067a6:	d10a      	bne.n	80067be <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 80067a8:	68aa      	ldr	r2, [r5, #8]
 80067aa:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80067ae:	d002      	beq.n	80067b6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067b0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80067b4:	d103      	bne.n	80067be <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067be:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80067c0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80067c4:	d107      	bne.n	80067d6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80067d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067dc:	2300      	movs	r3, #0
 80067de:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80067e2:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 80067e4:	b003      	add	sp, #12
 80067e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 80067e8:	9a01      	ldr	r2, [sp, #4]
      count--;
 80067ea:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80067ec:	2a00      	cmp	r2, #0
      count--;
 80067ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	bf08      	it	eq
 80067f6:	4614      	moveq	r4, r2
 80067f8:	e7c1      	b.n	800677e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 80067fa:	bf00      	nop
 80067fc:	20000010 	.word	0x20000010

08006800 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006800:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006804:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006806:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006808:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 800680a:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800680e:	4605      	mov	r5, r0
 8006810:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006812:	f7fe fa57 	bl	8004cc4 <HAL_GetTick>
 8006816:	443c      	add	r4, r7
 8006818:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 800681a:	f7fe fa53 	bl	8004cc4 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800681e:	4b29      	ldr	r3, [pc, #164]	@ (80068c4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006820:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2223      	movs	r2, #35	@ 0x23
 8006828:	4353      	muls	r3, r2
 800682a:	0d1b      	lsrs	r3, r3, #20
 800682c:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 800682e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006830:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8006832:	682a      	ldr	r2, [r5, #0]
 8006834:	6890      	ldr	r0, [r2, #8]
 8006836:	4030      	ands	r0, r6
 8006838:	d038      	beq.n	80068ac <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800683a:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800683e:	bf01      	itttt	eq
 8006840:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8006844:	b2db      	uxtbeq	r3, r3
 8006846:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800684a:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 800684e:	1c7b      	adds	r3, r7, #1
 8006850:	d0f0      	beq.n	8006834 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006852:	f7fe fa37 	bl	8004cc4 <HAL_GetTick>
 8006856:	eba0 0008 	sub.w	r0, r0, r8
 800685a:	42a0      	cmp	r0, r4
 800685c:	d329      	bcc.n	80068b2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800685e:	682b      	ldr	r3, [r5, #0]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006866:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006868:	686a      	ldr	r2, [r5, #4]
 800686a:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800686e:	d10a      	bne.n	8006886 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 8006870:	68aa      	ldr	r2, [r5, #8]
 8006872:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006876:	d002      	beq.n	800687e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006878:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800687c:	d103      	bne.n	8006886 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006884:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006886:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8006888:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800688c:	d107      	bne.n	800689e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800689c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800689e:	2301      	movs	r3, #1
 80068a0:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068a4:	2300      	movs	r3, #0
 80068a6:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80068aa:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 80068ac:	b003      	add	sp, #12
 80068ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 80068b2:	9a01      	ldr	r2, [sp, #4]
      count--;
 80068b4:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80068b6:	2a00      	cmp	r2, #0
      count--;
 80068b8:	f103 33ff 	add.w	r3, r3, #4294967295
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	bf08      	it	eq
 80068c0:	4614      	moveq	r4, r2
 80068c2:	e7b6      	b.n	8006832 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 80068c4:	20000010 	.word	0x20000010

080068c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80068c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068ca:	6843      	ldr	r3, [r0, #4]
 80068cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 80068d0:	4604      	mov	r4, r0
 80068d2:	460e      	mov	r6, r1
 80068d4:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068d6:	d10b      	bne.n	80068f0 <SPI_EndRxTransaction+0x28>
 80068d8:	6883      	ldr	r3, [r0, #8]
 80068da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068de:	d002      	beq.n	80068e6 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068e4:	d104      	bne.n	80068f0 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80068e6:	6822      	ldr	r2, [r4, #0]
 80068e8:	6813      	ldr	r3, [r2, #0]
 80068ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ee:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068f0:	463a      	mov	r2, r7
 80068f2:	4631      	mov	r1, r6
 80068f4:	4620      	mov	r0, r4
 80068f6:	f7ff ff31 	bl	800675c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80068fa:	4605      	mov	r5, r0
 80068fc:	b128      	cbz	r0, 800690a <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068fe:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006900:	f043 0320 	orr.w	r3, r3, #32
 8006904:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006906:	2503      	movs	r5, #3
 8006908:	e013      	b.n	8006932 <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800690a:	6863      	ldr	r3, [r4, #4]
 800690c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006910:	d10f      	bne.n	8006932 <SPI_EndRxTransaction+0x6a>
 8006912:	68a3      	ldr	r3, [r4, #8]
 8006914:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006918:	d002      	beq.n	8006920 <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800691a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800691e:	d108      	bne.n	8006932 <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006920:	463b      	mov	r3, r7
 8006922:	4632      	mov	r2, r6
 8006924:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006928:	4620      	mov	r0, r4
 800692a:	f7ff ff69 	bl	8006800 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800692e:	2800      	cmp	r0, #0
 8006930:	d1e5      	bne.n	80068fe <SPI_EndRxTransaction+0x36>
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8006932:	4628      	mov	r0, r5
 8006934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006936 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006936:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006938:	4613      	mov	r3, r2
{
 800693a:	460d      	mov	r5, r1
 800693c:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800693e:	460a      	mov	r2, r1
 8006940:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 8006944:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006946:	f7ff ff5b 	bl	8006800 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800694a:	b128      	cbz	r0, 8006958 <SPI_EndRxTxTransaction+0x22>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800694c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800694e:	f043 0320 	orr.w	r3, r3, #32
 8006952:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006954:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8006956:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006958:	4632      	mov	r2, r6
 800695a:	4629      	mov	r1, r5
 800695c:	4620      	mov	r0, r4
 800695e:	f7ff fefd 	bl	800675c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006962:	2800      	cmp	r0, #0
 8006964:	d1f2      	bne.n	800694c <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006966:	4633      	mov	r3, r6
 8006968:	462a      	mov	r2, r5
 800696a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800696e:	4620      	mov	r0, r4
 8006970:	f7ff ff46 	bl	8006800 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006974:	2800      	cmp	r0, #0
 8006976:	d0ee      	beq.n	8006956 <SPI_EndRxTxTransaction+0x20>
 8006978:	e7e8      	b.n	800694c <SPI_EndRxTxTransaction+0x16>

0800697a <HAL_SPI_Init>:
{
 800697a:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800697c:	4604      	mov	r4, r0
 800697e:	2800      	cmp	r0, #0
 8006980:	d067      	beq.n	8006a52 <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006982:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006984:	2b00      	cmp	r3, #0
 8006986:	d15d      	bne.n	8006a44 <HAL_SPI_Init+0xca>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006988:	6842      	ldr	r2, [r0, #4]
 800698a:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800698e:	d000      	beq.n	8006992 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006990:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006992:	2300      	movs	r3, #0
 8006994:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006996:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800699a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800699e:	b923      	cbnz	r3, 80069aa <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 80069a0:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80069a4:	4620      	mov	r0, r4
 80069a6:	f7fd febf 	bl	8004728 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80069aa:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069ac:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80069ae:	2302      	movs	r3, #2
 80069b0:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80069b4:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069b6:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80069ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069be:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069c0:	f04f 0300 	mov.w	r3, #0
 80069c4:	d942      	bls.n	8006a4c <HAL_SPI_Init+0xd2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80069c6:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069c8:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069cc:	bf18      	it	ne
 80069ce:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069d0:	68a6      	ldr	r6, [r4, #8]
 80069d2:	6863      	ldr	r3, [r4, #4]
 80069d4:	69a1      	ldr	r1, [r4, #24]
 80069d6:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 80069da:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80069de:	4333      	orrs	r3, r6
 80069e0:	6926      	ldr	r6, [r4, #16]
 80069e2:	f006 0602 	and.w	r6, r6, #2
 80069e6:	4333      	orrs	r3, r6
 80069e8:	6966      	ldr	r6, [r4, #20]
 80069ea:	f006 0601 	and.w	r6, r6, #1
 80069ee:	4333      	orrs	r3, r6
 80069f0:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 80069f4:	4333      	orrs	r3, r6
 80069f6:	69e6      	ldr	r6, [r4, #28]
 80069f8:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 80069fc:	4333      	orrs	r3, r6
 80069fe:	6a26      	ldr	r6, [r4, #32]
 8006a00:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 8006a04:	4333      	orrs	r3, r6
 8006a06:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a08:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 8006a0c:	4333      	orrs	r3, r6
 8006a0e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a10:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8006a12:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006a14:	f006 0608 	and.w	r6, r6, #8
 8006a18:	f003 0310 	and.w	r3, r3, #16
 8006a1c:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 8006a20:	4333      	orrs	r3, r6
 8006a22:	0c09      	lsrs	r1, r1, #16
 8006a24:	4303      	orrs	r3, r0
 8006a26:	f001 0104 	and.w	r1, r1, #4
 8006a2a:	430b      	orrs	r3, r1
 8006a2c:	432b      	orrs	r3, r5
 8006a2e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a30:	69d3      	ldr	r3, [r2, #28]
 8006a32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a36:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a38:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8006a3a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a3c:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a3e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a44:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a4a:	e7a2      	b.n	8006992 <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a4c:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8006a50:	e7bc      	b.n	80069cc <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 8006a52:	2001      	movs	r0, #1
 8006a54:	e7f5      	b.n	8006a42 <HAL_SPI_Init+0xc8>

08006a56 <HAL_SPI_Transmit>:
{
 8006a56:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a5a:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8006a5c:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8006a60:	2b01      	cmp	r3, #1
{
 8006a62:	4604      	mov	r4, r0
 8006a64:	460d      	mov	r5, r1
 8006a66:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8006a68:	f000 80bc 	beq.w	8006be4 <HAL_SPI_Transmit+0x18e>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8006a72:	f7fe f927 	bl	8004cc4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006a76:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8006a7a:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006a7c:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006a7e:	fa5f f983 	uxtb.w	r9, r3
 8006a82:	f040 80ac 	bne.w	8006bde <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 8006a86:	2d00      	cmp	r5, #0
 8006a88:	d069      	beq.n	8006b5e <HAL_SPI_Transmit+0x108>
 8006a8a:	f1b8 0f00 	cmp.w	r8, #0
 8006a8e:	d066      	beq.n	8006b5e <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a90:	2303      	movs	r3, #3
 8006a92:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a96:	2300      	movs	r3, #0
 8006a98:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8006a9a:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 8006a9e:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006aa2:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006aa4:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006aa8:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aac:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8006aae:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ab0:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ab2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 8006ab6:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aba:	d107      	bne.n	8006acc <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 8006abc:	6833      	ldr	r3, [r6, #0]
 8006abe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ac2:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8006ac4:	6833      	ldr	r3, [r6, #0]
 8006ac6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006aca:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006acc:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ace:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ad0:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8006ad2:	bf5e      	ittt	pl
 8006ad4:	6833      	ldrpl	r3, [r6, #0]
 8006ad6:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8006ada:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006adc:	68e3      	ldr	r3, [r4, #12]
 8006ade:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ae2:	d943      	bls.n	8006b6c <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ae4:	b112      	cbz	r2, 8006aec <HAL_SPI_Transmit+0x96>
 8006ae6:	f1b8 0f01 	cmp.w	r8, #1
 8006aea:	d107      	bne.n	8006afc <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aec:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006af0:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006af2:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006af4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8006afc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	b9b3      	cbnz	r3, 8006b30 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b02:	4652      	mov	r2, sl
 8006b04:	4639      	mov	r1, r7
 8006b06:	4620      	mov	r0, r4
 8006b08:	f7ff ff15 	bl	8006936 <SPI_EndRxTxTransaction>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	d163      	bne.n	8006bd8 <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b10:	68a3      	ldr	r3, [r4, #8]
 8006b12:	b933      	cbnz	r3, 8006b22 <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	9201      	str	r2, [sp, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	9301      	str	r3, [sp, #4]
 8006b20:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b22:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006b24:	b9db      	cbnz	r3, 8006b5e <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 8006b26:	2201      	movs	r2, #1
 8006b28:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b2c:	4699      	mov	r9, r3
 8006b2e:	e016      	b.n	8006b5e <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b30:	6822      	ldr	r2, [r4, #0]
 8006b32:	6893      	ldr	r3, [r2, #8]
 8006b34:	079d      	lsls	r5, r3, #30
 8006b36:	d505      	bpl.n	8006b44 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b38:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b3a:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006b3e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b40:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006b42:	e7d7      	b.n	8006af4 <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b44:	f7fe f8be 	bl	8004cc4 <HAL_GetTick>
 8006b48:	eba0 000a 	sub.w	r0, r0, sl
 8006b4c:	42b8      	cmp	r0, r7
 8006b4e:	d3d5      	bcc.n	8006afc <HAL_SPI_Transmit+0xa6>
 8006b50:	1c78      	adds	r0, r7, #1
 8006b52:	d0d3      	beq.n	8006afc <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 8006b54:	2301      	movs	r3, #1
 8006b56:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8006b5a:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8006b64:	4648      	mov	r0, r9
 8006b66:	b002      	add	sp, #8
 8006b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b6c:	b112      	cbz	r2, 8006b74 <HAL_SPI_Transmit+0x11e>
 8006b6e:	f1b8 0f01 	cmp.w	r8, #1
 8006b72:	d113      	bne.n	8006b9c <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 8006b74:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d906      	bls.n	8006b8a <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b7c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006b80:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b82:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006b84:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006b86:	3b02      	subs	r3, #2
 8006b88:	e006      	b.n	8006b98 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b8a:	782b      	ldrb	r3, [r5, #0]
 8006b8c:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 8006b8e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b90:	3301      	adds	r3, #1
 8006b92:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b94:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8006b9c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0ae      	beq.n	8006b02 <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ba4:	6822      	ldr	r2, [r4, #0]
 8006ba6:	6893      	ldr	r3, [r2, #8]
 8006ba8:	0799      	lsls	r1, r3, #30
 8006baa:	d50c      	bpl.n	8006bc6 <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 8006bac:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8006bb0:	b289      	uxth	r1, r1
 8006bb2:	2901      	cmp	r1, #1
 8006bb4:	d904      	bls.n	8006bc0 <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bb6:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006bba:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bbc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006bbe:	e7e1      	b.n	8006b84 <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8006bc4:	e7e3      	b.n	8006b8e <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bc6:	f7fe f87d 	bl	8004cc4 <HAL_GetTick>
 8006bca:	eba0 000a 	sub.w	r0, r0, sl
 8006bce:	42b8      	cmp	r0, r7
 8006bd0:	d3e4      	bcc.n	8006b9c <HAL_SPI_Transmit+0x146>
 8006bd2:	1c7b      	adds	r3, r7, #1
 8006bd4:	d0e2      	beq.n	8006b9c <HAL_SPI_Transmit+0x146>
 8006bd6:	e7bd      	b.n	8006b54 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bd8:	2320      	movs	r3, #32
 8006bda:	6623      	str	r3, [r4, #96]	@ 0x60
 8006bdc:	e798      	b.n	8006b10 <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 8006bde:	f04f 0902 	mov.w	r9, #2
 8006be2:	e7bc      	b.n	8006b5e <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 8006be4:	f04f 0902 	mov.w	r9, #2
 8006be8:	e7bc      	b.n	8006b64 <HAL_SPI_Transmit+0x10e>

08006bea <HAL_SPI_TransmitReceive>:
{
 8006bea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bee:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8006bf0:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
{
 8006bf4:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8006bf6:	2b01      	cmp	r3, #1
{
 8006bf8:	4604      	mov	r4, r0
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8006bfe:	f000 8122 	beq.w	8006e46 <HAL_SPI_TransmitReceive+0x25c>
 8006c02:	2301      	movs	r3, #1
 8006c04:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8006c08:	f7fe f85c 	bl	8004cc4 <HAL_GetTick>
  tmp_state           = hspi->State;
 8006c0c:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8006c10:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c12:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8006c14:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8006c16:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c18:	d00a      	beq.n	8006c30 <HAL_SPI_TransmitReceive+0x46>
 8006c1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c1e:	f040 8110 	bne.w	8006e42 <HAL_SPI_TransmitReceive+0x258>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c22:	68a2      	ldr	r2, [r4, #8]
 8006c24:	2a00      	cmp	r2, #0
 8006c26:	f040 810c 	bne.w	8006e42 <HAL_SPI_TransmitReceive+0x258>
 8006c2a:	2904      	cmp	r1, #4
 8006c2c:	f040 8109 	bne.w	8006e42 <HAL_SPI_TransmitReceive+0x258>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c30:	b92d      	cbnz	r5, 8006c3e <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 8006c32:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8006c34:	2300      	movs	r3, #0
 8006c36:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8006c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c3e:	f1b9 0f00 	cmp.w	r9, #0
 8006c42:	d0f6      	beq.n	8006c32 <HAL_SPI_TransmitReceive+0x48>
 8006c44:	2e00      	cmp	r6, #0
 8006c46:	d0f4      	beq.n	8006c32 <HAL_SPI_TransmitReceive+0x48>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c48:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006c4c:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c4e:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c50:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c54:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c56:	bf1c      	itt	ne
 8006c58:	2205      	movne	r2, #5
 8006c5a:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c5e:	2200      	movs	r2, #0
 8006c60:	6622      	str	r2, [r4, #96]	@ 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006c62:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  hspi->RxXferCount = Size;
 8006c66:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->TxXferCount = Size;
 8006c6a:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006c6c:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferSize  = Size;
 8006c70:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c74:	684a      	ldr	r2, [r1, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c76:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006c78:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006c7a:	d801      	bhi.n	8006c80 <HAL_SPI_TransmitReceive+0x96>
 8006c7c:	2e01      	cmp	r6, #1
 8006c7e:	d02e      	beq.n	8006cde <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c80:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c84:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c86:	680a      	ldr	r2, [r1, #0]
 8006c88:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8006c8a:	bf5e      	ittt	pl
 8006c8c:	680a      	ldrpl	r2, [r1, #0]
 8006c8e:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8006c92:	600a      	strpl	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c94:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 8006c98:	d957      	bls.n	8006d4a <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c9a:	b10b      	cbz	r3, 8006ca0 <HAL_SPI_TransmitReceive+0xb6>
 8006c9c:	2e01      	cmp	r6, #1
 8006c9e:	d107      	bne.n	8006cb0 <HAL_SPI_TransmitReceive+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ca0:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006ca4:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 8006ca6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ca8:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8006cb0:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cb2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	b9ab      	cbnz	r3, 8006ce4 <HAL_SPI_TransmitReceive+0xfa>
 8006cb8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	b98b      	cbnz	r3, 8006ce4 <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cc0:	4642      	mov	r2, r8
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f7ff fe36 	bl	8006936 <SPI_EndRxTxTransaction>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	f040 80b5 	bne.w	8006e3a <HAL_SPI_TransmitReceive+0x250>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cd0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1ad      	bne.n	8006c32 <HAL_SPI_TransmitReceive+0x48>
    hspi->State = HAL_SPI_STATE_READY;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8006cdc:	e7aa      	b.n	8006c34 <HAL_SPI_TransmitReceive+0x4a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cde:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ce2:	e7cf      	b.n	8006c84 <HAL_SPI_TransmitReceive+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ce4:	6821      	ldr	r1, [r4, #0]
 8006ce6:	688b      	ldr	r3, [r1, #8]
 8006ce8:	079e      	lsls	r6, r3, #30
 8006cea:	d50d      	bpl.n	8006d08 <HAL_SPI_TransmitReceive+0x11e>
 8006cec:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	b153      	cbz	r3, 8006d08 <HAL_SPI_TransmitReceive+0x11e>
 8006cf2:	b145      	cbz	r5, 8006d06 <HAL_SPI_TransmitReceive+0x11c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cf4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006cf6:	f833 2b02 	ldrh.w	r2, [r3], #2
 8006cfa:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cfc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006cfe:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006d00:	3b01      	subs	r3, #1
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8006d06:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d08:	688a      	ldr	r2, [r1, #8]
 8006d0a:	f012 0201 	ands.w	r2, r2, #1
 8006d0e:	d00f      	beq.n	8006d30 <HAL_SPI_TransmitReceive+0x146>
 8006d10:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	b15b      	cbz	r3, 8006d30 <HAL_SPI_TransmitReceive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d1a:	68c9      	ldr	r1, [r1, #12]
 8006d1c:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d20:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006d22:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006d26:	3b01      	subs	r3, #1
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8006d2e:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d30:	f7fd ffc8 	bl	8004cc4 <HAL_GetTick>
 8006d34:	eba0 0008 	sub.w	r0, r0, r8
 8006d38:	42b8      	cmp	r0, r7
 8006d3a:	d3ba      	bcc.n	8006cb2 <HAL_SPI_TransmitReceive+0xc8>
 8006d3c:	1c78      	adds	r0, r7, #1
 8006d3e:	d0b8      	beq.n	8006cb2 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8006d40:	2301      	movs	r3, #1
 8006d42:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        errorcode = HAL_TIMEOUT;
 8006d46:	2003      	movs	r0, #3
 8006d48:	e774      	b.n	8006c34 <HAL_SPI_TransmitReceive+0x4a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d4a:	b10b      	cbz	r3, 8006d50 <HAL_SPI_TransmitReceive+0x166>
 8006d4c:	2e01      	cmp	r6, #1
 8006d4e:	d10b      	bne.n	8006d68 <HAL_SPI_TransmitReceive+0x17e>
      if (hspi->TxXferCount > 1U)
 8006d50:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d909      	bls.n	8006d6c <HAL_SPI_TransmitReceive+0x182>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d58:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006d5c:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount -= 2U;
 8006d5e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d60:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006d62:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8006d68:	2501      	movs	r5, #1
 8006d6a:	e048      	b.n	8006dfe <HAL_SPI_TransmitReceive+0x214>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d6c:	782b      	ldrb	r3, [r5, #0]
 8006d6e:	730b      	strb	r3, [r1, #12]
        hspi->pTxBuffPtr++;
 8006d70:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006d72:	3301      	adds	r3, #1
 8006d74:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006d76:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	e7f3      	b.n	8006d64 <HAL_SPI_TransmitReceive+0x17a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d7c:	6822      	ldr	r2, [r4, #0]
 8006d7e:	6893      	ldr	r3, [r2, #8]
 8006d80:	0799      	lsls	r1, r3, #30
 8006d82:	d511      	bpl.n	8006da8 <HAL_SPI_TransmitReceive+0x1be>
 8006d84:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	b173      	cbz	r3, 8006da8 <HAL_SPI_TransmitReceive+0x1be>
 8006d8a:	b165      	cbz	r5, 8006da6 <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 8006d8c:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d8e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8006d90:	b289      	uxth	r1, r1
 8006d92:	2901      	cmp	r1, #1
 8006d94:	d93d      	bls.n	8006e12 <HAL_SPI_TransmitReceive+0x228>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d96:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006d9a:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d9c:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006d9e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006da0:	3b02      	subs	r3, #2
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8006da6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006da8:	6822      	ldr	r2, [r4, #0]
 8006daa:	6891      	ldr	r1, [r2, #8]
 8006dac:	f011 0101 	ands.w	r1, r1, #1
 8006db0:	d01d      	beq.n	8006dee <HAL_SPI_TransmitReceive+0x204>
 8006db2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	b1cb      	cbz	r3, 8006dee <HAL_SPI_TransmitReceive+0x204>
        if (hspi->RxXferCount > 1U)
 8006dba:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dbe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8006dc0:	b280      	uxth	r0, r0
 8006dc2:	2801      	cmp	r0, #1
 8006dc4:	d92d      	bls.n	8006e22 <HAL_SPI_TransmitReceive+0x238>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dc6:	68d0      	ldr	r0, [r2, #12]
 8006dc8:	f823 0b02 	strh.w	r0, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dcc:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006dce:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006dd2:	3b02      	subs	r3, #2
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006dda:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	2b01      	cmp	r3, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006de2:	bf9e      	ittt	ls
 8006de4:	6853      	ldrls	r3, [r2, #4]
 8006de6:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
 8006dea:	6053      	strls	r3, [r2, #4]
        txallowed = 1U;
 8006dec:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006dee:	f7fd ff69 	bl	8004cc4 <HAL_GetTick>
 8006df2:	eba0 0008 	sub.w	r0, r0, r8
 8006df6:	42b8      	cmp	r0, r7
 8006df8:	d301      	bcc.n	8006dfe <HAL_SPI_TransmitReceive+0x214>
 8006dfa:	1c7b      	adds	r3, r7, #1
 8006dfc:	d1a0      	bne.n	8006d40 <HAL_SPI_TransmitReceive+0x156>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dfe:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1ba      	bne.n	8006d7c <HAL_SPI_TransmitReceive+0x192>
 8006e06:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1b5      	bne.n	8006d7c <HAL_SPI_TransmitReceive+0x192>
 8006e10:	e756      	b.n	8006cc0 <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8006e16:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006e18:	3301      	adds	r3, #1
 8006e1a:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8006e1c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	e7bf      	b.n	8006da2 <HAL_SPI_TransmitReceive+0x1b8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e22:	7b12      	ldrb	r2, [r2, #12]
 8006e24:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006e26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e28:	3301      	adds	r3, #1
 8006e2a:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8006e2c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006e30:	3b01      	subs	r3, #1
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8006e38:	e7d8      	b.n	8006dec <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e3a:	2320      	movs	r3, #32
 8006e3c:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8006e3e:	2001      	movs	r0, #1
 8006e40:	e746      	b.n	8006cd0 <HAL_SPI_TransmitReceive+0xe6>
    errorcode = HAL_BUSY;
 8006e42:	2002      	movs	r0, #2
 8006e44:	e6f6      	b.n	8006c34 <HAL_SPI_TransmitReceive+0x4a>
  __HAL_LOCK(hspi);
 8006e46:	2002      	movs	r0, #2
 8006e48:	e6f7      	b.n	8006c3a <HAL_SPI_TransmitReceive+0x50>

08006e4a <HAL_SPI_Receive>:
{
 8006e4a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e4e:	461f      	mov	r7, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8006e50:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8006e54:	2b01      	cmp	r3, #1
{
 8006e56:	4604      	mov	r4, r0
 8006e58:	468a      	mov	sl, r1
 8006e5a:	4690      	mov	r8, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8006e5c:	b2de      	uxtb	r6, r3
 8006e5e:	f040 80a7 	bne.w	8006fb0 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e62:	6843      	ldr	r3, [r0, #4]
 8006e64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e68:	d10e      	bne.n	8006e88 <HAL_SPI_Receive+0x3e>
 8006e6a:	6883      	ldr	r3, [r0, #8]
 8006e6c:	b963      	cbnz	r3, 8006e88 <HAL_SPI_Receive+0x3e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e6e:	2304      	movs	r3, #4
 8006e70:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e74:	4613      	mov	r3, r2
 8006e76:	9700      	str	r7, [sp, #0]
 8006e78:	460a      	mov	r2, r1
 8006e7a:	f7ff feb6 	bl	8006bea <HAL_SPI_TransmitReceive>
 8006e7e:	4606      	mov	r6, r0
}
 8006e80:	4630      	mov	r0, r6
 8006e82:	b002      	add	sp, #8
 8006e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 8006e88:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	f000 8091 	beq.w	8006fb4 <HAL_SPI_Receive+0x16a>
 8006e92:	2301      	movs	r3, #1
 8006e94:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8006e98:	f7fd ff14 	bl	8004cc4 <HAL_GetTick>
 8006e9c:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 8006e9e:	f1ba 0f00 	cmp.w	sl, #0
 8006ea2:	d075      	beq.n	8006f90 <HAL_SPI_Receive+0x146>
 8006ea4:	f1b8 0f00 	cmp.w	r8, #0
 8006ea8:	d072      	beq.n	8006f90 <HAL_SPI_Receive+0x146>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eaa:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006eac:	2304      	movs	r3, #4
 8006eae:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->TxISR       = NULL;
 8006eb2:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eb6:	6625      	str	r5, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006eb8:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006eba:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->TxXferSize  = 0U;
 8006ebe:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006ec0:	87e5      	strh	r5, [r4, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ec2:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ec4:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ec6:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ec8:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ecc:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ed0:	bf8c      	ite	hi
 8006ed2:	f423 5380 	bichi.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ed6:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
  hspi->RxXferSize  = Size;
 8006eda:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ede:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ee0:	68a3      	ldr	r3, [r4, #8]
 8006ee2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ee6:	d107      	bne.n	8006ef8 <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eee:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ef6:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8006efc:	bf5e      	ittt	pl
 8006efe:	682b      	ldrpl	r3, [r5, #0]
 8006f00:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8006f04:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006f06:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 8006f0a:	d923      	bls.n	8006f54 <HAL_SPI_Receive+0x10a>
    while (hspi->RxXferCount > 0U)
 8006f0c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	b323      	cbz	r3, 8006f5e <HAL_SPI_Receive+0x114>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	689a      	ldr	r2, [r3, #8]
 8006f18:	07d2      	lsls	r2, r2, #31
 8006f1a:	d53d      	bpl.n	8006f98 <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f20:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f24:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006f26:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8006f32:	e7eb      	b.n	8006f0c <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	07d0      	lsls	r0, r2, #31
 8006f3a:	d51d      	bpl.n	8006f78 <HAL_SPI_Receive+0x12e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f3c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006f3e:	7b1b      	ldrb	r3, [r3, #12]
 8006f40:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f44:	3301      	adds	r3, #1
 8006f46:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006f48:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 8006f54:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1ea      	bne.n	8006f34 <HAL_SPI_Receive+0xea>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f5e:	464a      	mov	r2, r9
 8006f60:	4639      	mov	r1, r7
 8006f62:	4620      	mov	r0, r4
 8006f64:	f7ff fcb0 	bl	80068c8 <SPI_EndRxTransaction>
 8006f68:	b9f8      	cbnz	r0, 8006faa <HAL_SPI_Receive+0x160>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f6a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006f6c:	b983      	cbnz	r3, 8006f90 <HAL_SPI_Receive+0x146>
    hspi->State = HAL_SPI_STATE_READY;
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f74:	461e      	mov	r6, r3
 8006f76:	e00b      	b.n	8006f90 <HAL_SPI_Receive+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f78:	f7fd fea4 	bl	8004cc4 <HAL_GetTick>
 8006f7c:	eba0 0009 	sub.w	r0, r0, r9
 8006f80:	42b8      	cmp	r0, r7
 8006f82:	d3e7      	bcc.n	8006f54 <HAL_SPI_Receive+0x10a>
 8006f84:	1c79      	adds	r1, r7, #1
 8006f86:	d0e5      	beq.n	8006f54 <HAL_SPI_Receive+0x10a>
          hspi->State = HAL_SPI_STATE_READY;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8006f8e:	2603      	movs	r6, #3
  __HAL_UNLOCK(hspi);
 8006f90:	2300      	movs	r3, #0
 8006f92:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  return errorcode;
 8006f96:	e773      	b.n	8006e80 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f98:	f7fd fe94 	bl	8004cc4 <HAL_GetTick>
 8006f9c:	eba0 0009 	sub.w	r0, r0, r9
 8006fa0:	42b8      	cmp	r0, r7
 8006fa2:	d3b3      	bcc.n	8006f0c <HAL_SPI_Receive+0xc2>
 8006fa4:	1c7b      	adds	r3, r7, #1
 8006fa6:	d0b1      	beq.n	8006f0c <HAL_SPI_Receive+0xc2>
 8006fa8:	e7ee      	b.n	8006f88 <HAL_SPI_Receive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006faa:	2320      	movs	r3, #32
 8006fac:	6623      	str	r3, [r4, #96]	@ 0x60
 8006fae:	e7dc      	b.n	8006f6a <HAL_SPI_Receive+0x120>
    errorcode = HAL_BUSY;
 8006fb0:	2602      	movs	r6, #2
 8006fb2:	e7ed      	b.n	8006f90 <HAL_SPI_Receive+0x146>
  __HAL_LOCK(hspi);
 8006fb4:	2602      	movs	r6, #2
 8006fb6:	e763      	b.n	8006e80 <HAL_SPI_Receive+0x36>

08006fb8 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fb8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d127      	bne.n	8007010 <HAL_TIM_Base_Start+0x58>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc0:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fc2:	4a14      	ldr	r2, [pc, #80]	@ (8007014 <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fc8:	6803      	ldr	r3, [r0, #0]
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d012      	beq.n	8006ff4 <HAL_TIM_Base_Start+0x3c>
 8006fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd2:	d00f      	beq.n	8006ff4 <HAL_TIM_Base_Start+0x3c>
 8006fd4:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d00b      	beq.n	8006ff4 <HAL_TIM_Base_Start+0x3c>
 8006fdc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d007      	beq.n	8006ff4 <HAL_TIM_Base_Start+0x3c>
 8006fe4:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d003      	beq.n	8006ff4 <HAL_TIM_Base_Start+0x3c>
 8006fec:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d107      	bne.n	8007004 <HAL_TIM_Base_Start+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ff4:	6899      	ldr	r1, [r3, #8]
 8006ff6:	4a08      	ldr	r2, [pc, #32]	@ (8007018 <HAL_TIM_Base_Start+0x60>)
 8006ff8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ffa:	2a06      	cmp	r2, #6
 8006ffc:	d006      	beq.n	800700c <HAL_TIM_Base_Start+0x54>
 8006ffe:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8007002:	d003      	beq.n	800700c <HAL_TIM_Base_Start+0x54>
    {
      __HAL_TIM_ENABLE(htim);
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	f042 0201 	orr.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800700c:	2000      	movs	r0, #0
 800700e:	4770      	bx	lr
    return HAL_ERROR;
 8007010:	2001      	movs	r0, #1
}
 8007012:	4770      	bx	lr
 8007014:	40012c00 	.word	0x40012c00
 8007018:	00010007 	.word	0x00010007

0800701c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800701c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007020:	2b01      	cmp	r3, #1
 8007022:	d12b      	bne.n	800707c <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007024:	2302      	movs	r3, #2
 8007026:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800702a:	6803      	ldr	r3, [r0, #0]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	f042 0201 	orr.w	r2, r2, #1
 8007032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007034:	4a12      	ldr	r2, [pc, #72]	@ (8007080 <HAL_TIM_Base_Start_IT+0x64>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d012      	beq.n	8007060 <HAL_TIM_Base_Start_IT+0x44>
 800703a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800703e:	d00f      	beq.n	8007060 <HAL_TIM_Base_Start_IT+0x44>
 8007040:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007044:	4293      	cmp	r3, r2
 8007046:	d00b      	beq.n	8007060 <HAL_TIM_Base_Start_IT+0x44>
 8007048:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800704c:	4293      	cmp	r3, r2
 800704e:	d007      	beq.n	8007060 <HAL_TIM_Base_Start_IT+0x44>
 8007050:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8007054:	4293      	cmp	r3, r2
 8007056:	d003      	beq.n	8007060 <HAL_TIM_Base_Start_IT+0x44>
 8007058:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800705c:	4293      	cmp	r3, r2
 800705e:	d107      	bne.n	8007070 <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007060:	6899      	ldr	r1, [r3, #8]
 8007062:	4a08      	ldr	r2, [pc, #32]	@ (8007084 <HAL_TIM_Base_Start_IT+0x68>)
 8007064:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007066:	2a06      	cmp	r2, #6
 8007068:	d006      	beq.n	8007078 <HAL_TIM_Base_Start_IT+0x5c>
 800706a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800706e:	d003      	beq.n	8007078 <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	f042 0201 	orr.w	r2, r2, #1
 8007076:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8007078:	2000      	movs	r0, #0
 800707a:	4770      	bx	lr
    return HAL_ERROR;
 800707c:	2001      	movs	r0, #1
}
 800707e:	4770      	bx	lr
 8007080:	40012c00 	.word	0x40012c00
 8007084:	00010007 	.word	0x00010007

08007088 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8007088:	4770      	bx	lr

0800708a <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800708a:	4770      	bx	lr

0800708c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800708c:	4770      	bx	lr

0800708e <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800708e:	4770      	bx	lr

08007090 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8007090:	6803      	ldr	r3, [r0, #0]
{
 8007092:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8007094:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007096:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007098:	07b2      	lsls	r2, r6, #30
{
 800709a:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800709c:	d50d      	bpl.n	80070ba <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800709e:	07a9      	lsls	r1, r5, #30
 80070a0:	d50b      	bpl.n	80070ba <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80070a2:	f06f 0202 	mvn.w	r2, #2
 80070a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070a8:	2201      	movs	r2, #1
 80070aa:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	079a      	lsls	r2, r3, #30
 80070b0:	d074      	beq.n	800719c <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80070b2:	f7ff ffea 	bl	800708a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070b6:	2300      	movs	r3, #0
 80070b8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070ba:	0773      	lsls	r3, r6, #29
 80070bc:	d510      	bpl.n	80070e0 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80070be:	0768      	lsls	r0, r5, #29
 80070c0:	d50e      	bpl.n	80070e0 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	f06f 0204 	mvn.w	r2, #4
 80070c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070ca:	2202      	movs	r2, #2
 80070cc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80070d4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070d6:	d067      	beq.n	80071a8 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80070d8:	f7ff ffd7 	bl	800708a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070dc:	2300      	movs	r3, #0
 80070de:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80070e0:	0731      	lsls	r1, r6, #28
 80070e2:	d50f      	bpl.n	8007104 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80070e4:	072a      	lsls	r2, r5, #28
 80070e6:	d50d      	bpl.n	8007104 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	f06f 0208 	mvn.w	r2, #8
 80070ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070f0:	2204      	movs	r2, #4
 80070f2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80070f8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070fa:	d05b      	beq.n	80071b4 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 80070fc:	f7ff ffc5 	bl	800708a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007100:	2300      	movs	r3, #0
 8007102:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007104:	06f0      	lsls	r0, r6, #27
 8007106:	d510      	bpl.n	800712a <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007108:	06e9      	lsls	r1, r5, #27
 800710a:	d50e      	bpl.n	800712a <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	f06f 0210 	mvn.w	r2, #16
 8007112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007114:	2208      	movs	r2, #8
 8007116:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800711e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007120:	d04e      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8007122:	f7ff ffb2 	bl	800708a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007126:	2300      	movs	r3, #0
 8007128:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800712a:	07f2      	lsls	r2, r6, #31
 800712c:	d508      	bpl.n	8007140 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800712e:	07eb      	lsls	r3, r5, #31
 8007130:	d506      	bpl.n	8007140 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	f06f 0201 	mvn.w	r2, #1
 8007138:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800713a:	4620      	mov	r0, r4
 800713c:	f7fc faa8 	bl	8003690 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007140:	0630      	lsls	r0, r6, #24
 8007142:	d508      	bpl.n	8007156 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007144:	0629      	lsls	r1, r5, #24
 8007146:	d506      	bpl.n	8007156 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800714e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007150:	4620      	mov	r0, r4
 8007152:	f000 f9b8 	bl	80074c6 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007156:	05f2      	lsls	r2, r6, #23
 8007158:	d508      	bpl.n	800716c <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800715a:	062b      	lsls	r3, r5, #24
 800715c:	d506      	bpl.n	800716c <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007164:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007166:	4620      	mov	r0, r4
 8007168:	f000 f9ae 	bl	80074c8 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800716c:	0670      	lsls	r0, r6, #25
 800716e:	d508      	bpl.n	8007182 <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007170:	0669      	lsls	r1, r5, #25
 8007172:	d506      	bpl.n	8007182 <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800717a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800717c:	4620      	mov	r0, r4
 800717e:	f7ff ff86 	bl	800708e <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007182:	06b2      	lsls	r2, r6, #26
 8007184:	d522      	bpl.n	80071cc <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007186:	06ab      	lsls	r3, r5, #26
 8007188:	d520      	bpl.n	80071cc <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8007190:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007192:	611a      	str	r2, [r3, #16]
}
 8007194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8007198:	f000 b994 	b.w	80074c4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800719c:	f7ff ff74 	bl	8007088 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a0:	4620      	mov	r0, r4
 80071a2:	f7ff ff73 	bl	800708c <HAL_TIM_PWM_PulseFinishedCallback>
 80071a6:	e786      	b.n	80070b6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a8:	f7ff ff6e 	bl	8007088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ac:	4620      	mov	r0, r4
 80071ae:	f7ff ff6d 	bl	800708c <HAL_TIM_PWM_PulseFinishedCallback>
 80071b2:	e793      	b.n	80070dc <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b4:	f7ff ff68 	bl	8007088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b8:	4620      	mov	r0, r4
 80071ba:	f7ff ff67 	bl	800708c <HAL_TIM_PWM_PulseFinishedCallback>
 80071be:	e79f      	b.n	8007100 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c0:	f7ff ff62 	bl	8007088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c4:	4620      	mov	r0, r4
 80071c6:	f7ff ff61 	bl	800708c <HAL_TIM_PWM_PulseFinishedCallback>
 80071ca:	e7ac      	b.n	8007126 <HAL_TIM_IRQHandler+0x96>
}
 80071cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080071d0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071d0:	4a2f      	ldr	r2, [pc, #188]	@ (8007290 <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 80071d2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071d4:	4290      	cmp	r0, r2
 80071d6:	d00e      	beq.n	80071f6 <TIM_Base_SetConfig+0x26>
 80071d8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80071dc:	d00b      	beq.n	80071f6 <TIM_Base_SetConfig+0x26>
 80071de:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80071e2:	4290      	cmp	r0, r2
 80071e4:	d007      	beq.n	80071f6 <TIM_Base_SetConfig+0x26>
 80071e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80071ea:	4290      	cmp	r0, r2
 80071ec:	d003      	beq.n	80071f6 <TIM_Base_SetConfig+0x26>
 80071ee:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80071f2:	4290      	cmp	r0, r2
 80071f4:	d115      	bne.n	8007222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80071f6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80071fc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071fe:	4a24      	ldr	r2, [pc, #144]	@ (8007290 <TIM_Base_SetConfig+0xc0>)
 8007200:	4290      	cmp	r0, r2
 8007202:	d019      	beq.n	8007238 <TIM_Base_SetConfig+0x68>
 8007204:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007208:	d016      	beq.n	8007238 <TIM_Base_SetConfig+0x68>
 800720a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800720e:	4290      	cmp	r0, r2
 8007210:	d012      	beq.n	8007238 <TIM_Base_SetConfig+0x68>
 8007212:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007216:	4290      	cmp	r0, r2
 8007218:	d00e      	beq.n	8007238 <TIM_Base_SetConfig+0x68>
 800721a:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 800721e:	4290      	cmp	r0, r2
 8007220:	d00a      	beq.n	8007238 <TIM_Base_SetConfig+0x68>
 8007222:	4a1c      	ldr	r2, [pc, #112]	@ (8007294 <TIM_Base_SetConfig+0xc4>)
 8007224:	4290      	cmp	r0, r2
 8007226:	d007      	beq.n	8007238 <TIM_Base_SetConfig+0x68>
 8007228:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800722c:	4290      	cmp	r0, r2
 800722e:	d003      	beq.n	8007238 <TIM_Base_SetConfig+0x68>
 8007230:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007234:	4290      	cmp	r0, r2
 8007236:	d103      	bne.n	8007240 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007238:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800723a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800723e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007240:	694a      	ldr	r2, [r1, #20]
 8007242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007246:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8007248:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800724a:	688b      	ldr	r3, [r1, #8]
 800724c:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800724e:	680b      	ldr	r3, [r1, #0]
 8007250:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007252:	4b0f      	ldr	r3, [pc, #60]	@ (8007290 <TIM_Base_SetConfig+0xc0>)
 8007254:	4298      	cmp	r0, r3
 8007256:	d00f      	beq.n	8007278 <TIM_Base_SetConfig+0xa8>
 8007258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800725c:	4298      	cmp	r0, r3
 800725e:	d00b      	beq.n	8007278 <TIM_Base_SetConfig+0xa8>
 8007260:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8007264:	4298      	cmp	r0, r3
 8007266:	d007      	beq.n	8007278 <TIM_Base_SetConfig+0xa8>
 8007268:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800726c:	4298      	cmp	r0, r3
 800726e:	d003      	beq.n	8007278 <TIM_Base_SetConfig+0xa8>
 8007270:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007274:	4298      	cmp	r0, r3
 8007276:	d101      	bne.n	800727c <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007278:	690b      	ldr	r3, [r1, #16]
 800727a:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800727c:	2301      	movs	r3, #1
 800727e:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007280:	6903      	ldr	r3, [r0, #16]
 8007282:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007284:	bf42      	ittt	mi
 8007286:	6903      	ldrmi	r3, [r0, #16]
 8007288:	f023 0301 	bicmi.w	r3, r3, #1
 800728c:	6103      	strmi	r3, [r0, #16]
  }
}
 800728e:	4770      	bx	lr
 8007290:	40012c00 	.word	0x40012c00
 8007294:	40014000 	.word	0x40014000

08007298 <HAL_TIM_Base_Init>:
{
 8007298:	b510      	push	{r4, lr}
  if (htim == NULL)
 800729a:	4604      	mov	r4, r0
 800729c:	b350      	cbz	r0, 80072f4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800729e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80072a2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80072a6:	b91b      	cbnz	r3, 80072b0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80072a8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80072ac:	f7fd fa8c 	bl	80047c8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80072b0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80072b4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b8:	1d21      	adds	r1, r4, #4
 80072ba:	f7ff ff89 	bl	80071d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072be:	2301      	movs	r3, #1
 80072c0:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 80072c4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80072ca:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80072ce:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80072d2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80072d6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80072da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072de:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80072e2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80072e6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80072ea:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80072ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80072f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80072f4:	2001      	movs	r0, #1
 80072f6:	e7fc      	b.n	80072f2 <HAL_TIM_Base_Init+0x5a>

080072f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072f8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072fa:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072fc:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072fe:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007302:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007306:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007308:	6082      	str	r2, [r0, #8]
}
 800730a:	bd10      	pop	{r4, pc}

0800730c <HAL_TIM_ConfigClockSource>:
{
 800730c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800730e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007312:	2b01      	cmp	r3, #1
{
 8007314:	4604      	mov	r4, r0
 8007316:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800731a:	f000 808c 	beq.w	8007436 <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 800731e:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8007322:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8007324:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8007326:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800732a:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800732c:	4b43      	ldr	r3, [pc, #268]	@ (800743c <HAL_TIM_ConfigClockSource+0x130>)
 800732e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8007330:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8007332:	680b      	ldr	r3, [r1, #0]
 8007334:	2b60      	cmp	r3, #96	@ 0x60
 8007336:	d04f      	beq.n	80073d8 <HAL_TIM_ConfigClockSource+0xcc>
 8007338:	d832      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x94>
 800733a:	2b40      	cmp	r3, #64	@ 0x40
 800733c:	d064      	beq.n	8007408 <HAL_TIM_ConfigClockSource+0xfc>
 800733e:	d816      	bhi.n	800736e <HAL_TIM_ConfigClockSource+0x62>
 8007340:	2b20      	cmp	r3, #32
 8007342:	d00d      	beq.n	8007360 <HAL_TIM_ConfigClockSource+0x54>
 8007344:	d80a      	bhi.n	800735c <HAL_TIM_ConfigClockSource+0x50>
 8007346:	f033 0110 	bics.w	r1, r3, #16
 800734a:	d009      	beq.n	8007360 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 800734c:	2301      	movs	r3, #1
 800734e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007352:	2300      	movs	r3, #0
 8007354:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007358:	4610      	mov	r0, r2
 800735a:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800735c:	2b30      	cmp	r3, #48	@ 0x30
 800735e:	d1f5      	bne.n	800734c <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8007360:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007362:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007366:	4313      	orrs	r3, r2
 8007368:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800736c:	e028      	b.n	80073c0 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 800736e:	2b50      	cmp	r3, #80	@ 0x50
 8007370:	d1ec      	bne.n	800734c <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 8007372:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007374:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007376:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007378:	6a03      	ldr	r3, [r0, #32]
 800737a:	f023 0301 	bic.w	r3, r3, #1
 800737e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007380:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007382:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007386:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800738a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 800738e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8007390:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007392:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007394:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800739a:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 800739e:	e00f      	b.n	80073c0 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 80073a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073a4:	d00d      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0xb6>
 80073a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073aa:	d00c      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0xba>
 80073ac:	2b70      	cmp	r3, #112	@ 0x70
 80073ae:	d1cd      	bne.n	800734c <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80073b0:	68cb      	ldr	r3, [r1, #12]
 80073b2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80073b6:	f7ff ff9f 	bl	80072f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80073ba:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80073c0:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80073c2:	2200      	movs	r2, #0
 80073c4:	e7c2      	b.n	800734c <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80073c6:	68cb      	ldr	r3, [r1, #12]
 80073c8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80073cc:	f7ff ff94 	bl	80072f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073d0:	6883      	ldr	r3, [r0, #8]
 80073d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80073d6:	e7f3      	b.n	80073c0 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 80073d8:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073da:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80073dc:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80073de:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073e0:	f022 0210 	bic.w	r2, r2, #16
 80073e4:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073e6:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073ec:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80073f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073f4:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80073f8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80073fa:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80073fc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80073fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007402:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8007406:	e7db      	b.n	80073c0 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8007408:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800740a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800740c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800740e:	6a03      	ldr	r3, [r0, #32]
 8007410:	f023 0301 	bic.w	r3, r3, #1
 8007414:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007416:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007418:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800741c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007420:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007424:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8007426:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007428:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800742a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800742c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007430:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8007434:	e7c4      	b.n	80073c0 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 8007436:	4602      	mov	r2, r0
 8007438:	e78e      	b.n	8007358 <HAL_TIM_ConfigClockSource+0x4c>
 800743a:	bf00      	nop
 800743c:	fffe0088 	.word	0xfffe0088

08007440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007440:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007442:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007446:	2b01      	cmp	r3, #1
{
 8007448:	4604      	mov	r4, r0
 800744a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800744e:	d032      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007450:	6823      	ldr	r3, [r4, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007452:	4d19      	ldr	r5, [pc, #100]	@ (80074b8 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007454:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007458:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800745a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800745c:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800745e:	d002      	beq.n	8007466 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8007460:	4e16      	ldr	r6, [pc, #88]	@ (80074bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8007462:	42b3      	cmp	r3, r6
 8007464:	d103      	bne.n	800746e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007466:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007468:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800746c:	4332      	orrs	r2, r6
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800746e:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007470:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007474:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007476:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8007478:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800747a:	d011      	beq.n	80074a0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800747c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007480:	d00e      	beq.n	80074a0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007482:	4a0f      	ldr	r2, [pc, #60]	@ (80074c0 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d00b      	beq.n	80074a0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007488:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800748c:	4293      	cmp	r3, r2
 800748e:	d007      	beq.n	80074a0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007490:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8007494:	4293      	cmp	r3, r2
 8007496:	d003      	beq.n	80074a0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007498:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800749c:	4293      	cmp	r3, r2
 800749e:	d104      	bne.n	80074aa <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074a0:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074a2:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074a6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074aa:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80074ac:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80074ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80074b2:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	40012c00 	.word	0x40012c00
 80074bc:	40013400 	.word	0x40013400
 80074c0:	40000400 	.word	0x40000400

080074c4 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80074c4:	4770      	bx	lr

080074c6 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80074c6:	4770      	bx	lr

080074c8 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80074c8:	4770      	bx	lr

080074ca <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ca:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	e852 3f00 	ldrex	r3, [r2]
 80074d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80074d8:	6802      	ldr	r2, [r0, #0]
 80074da:	2900      	cmp	r1, #0
 80074dc:	d1f5      	bne.n	80074ca <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	f102 0308 	add.w	r3, r2, #8
 80074e2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ea:	f102 0c08 	add.w	ip, r2, #8
 80074ee:	e84c 3100 	strex	r1, r3, [ip]
 80074f2:	2900      	cmp	r1, #0
 80074f4:	d1f3      	bne.n	80074de <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d107      	bne.n	800750c <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fc:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007500:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007504:	e842 3100 	strex	r1, r3, [r2]
 8007508:	2900      	cmp	r1, #0
 800750a:	d1f7      	bne.n	80074fc <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800750c:	2320      	movs	r3, #32
 800750e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007512:	2300      	movs	r3, #0
 8007514:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007516:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8007518:	4770      	bx	lr

0800751a <HAL_UART_Abort>:
{
 800751a:	b510      	push	{r4, lr}
 800751c:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800751e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	e852 3f00 	ldrex	r3, [r2]
 8007524:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	2900      	cmp	r1, #0
 8007530:	d1f5      	bne.n	800751e <HAL_UART_Abort+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	f103 0208 	add.w	r2, r3, #8
 8007536:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	f103 0008 	add.w	r0, r3, #8
 8007542:	e840 2100 	strex	r1, r2, [r0]
 8007546:	2900      	cmp	r1, #0
 8007548:	d1f3      	bne.n	8007532 <HAL_UART_Abort+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800754a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800754c:	2a01      	cmp	r2, #1
 800754e:	d107      	bne.n	8007560 <HAL_UART_Abort+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007550:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007554:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	e843 2100 	strex	r1, r2, [r3]
 800755c:	2900      	cmp	r1, #0
 800755e:	d1f7      	bne.n	8007550 <HAL_UART_Abort+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007560:	689a      	ldr	r2, [r3, #8]
 8007562:	0612      	lsls	r2, r2, #24
 8007564:	d51b      	bpl.n	800759e <HAL_UART_Abort+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007566:	f103 0208 	add.w	r2, r3, #8
 800756a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800756e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	f103 0008 	add.w	r0, r3, #8
 8007576:	e840 2100 	strex	r1, r2, [r0]
 800757a:	2900      	cmp	r1, #0
 800757c:	d1f3      	bne.n	8007566 <HAL_UART_Abort+0x4c>
    if (huart->hdmatx != NULL)
 800757e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8007580:	b168      	cbz	r0, 800759e <HAL_UART_Abort+0x84>
      huart->hdmatx->XferAbortCallback = NULL;
 8007582:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007584:	f7fe f9b3 	bl	80058ee <HAL_DMA_Abort>
 8007588:	b148      	cbz	r0, 800759e <HAL_UART_Abort+0x84>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800758a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800758c:	f7fe fa14 	bl	80059b8 <HAL_DMA_GetError>
 8007590:	2820      	cmp	r0, #32
 8007592:	d104      	bne.n	800759e <HAL_UART_Abort+0x84>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007594:	2310      	movs	r3, #16
 8007596:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 800759a:	2003      	movs	r0, #3
}
 800759c:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800759e:	6822      	ldr	r2, [r4, #0]
 80075a0:	6893      	ldr	r3, [r2, #8]
 80075a2:	065b      	lsls	r3, r3, #25
 80075a4:	d516      	bpl.n	80075d4 <HAL_UART_Abort+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	f102 0308 	add.w	r3, r2, #8
 80075aa:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b2:	f102 0008 	add.w	r0, r2, #8
 80075b6:	e840 3100 	strex	r1, r3, [r0]
 80075ba:	2900      	cmp	r1, #0
 80075bc:	d1f3      	bne.n	80075a6 <HAL_UART_Abort+0x8c>
    if (huart->hdmarx != NULL)
 80075be:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80075c0:	b140      	cbz	r0, 80075d4 <HAL_UART_Abort+0xba>
      huart->hdmarx->XferAbortCallback = NULL;
 80075c2:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80075c4:	f7fe f993 	bl	80058ee <HAL_DMA_Abort>
 80075c8:	b120      	cbz	r0, 80075d4 <HAL_UART_Abort+0xba>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80075ca:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80075cc:	f7fe f9f4 	bl	80059b8 <HAL_DMA_GetError>
 80075d0:	2820      	cmp	r0, #32
 80075d2:	d0df      	beq.n	8007594 <HAL_UART_Abort+0x7a>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80075d4:	6823      	ldr	r3, [r4, #0]
  huart->TxXferCount = 0U;
 80075d6:	2000      	movs	r0, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80075d8:	220f      	movs	r2, #15
  huart->TxXferCount = 0U;
 80075da:	f8a4 0052 	strh.w	r0, [r4, #82]	@ 0x52
  huart->RxXferCount = 0U;
 80075de:	f8a4 005a 	strh.w	r0, [r4, #90]	@ 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80075e2:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	f042 0208 	orr.w	r2, r2, #8
 80075ea:	619a      	str	r2, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 80075ec:	2320      	movs	r3, #32
 80075ee:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80075f0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f4:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  return HAL_OK;
 80075fa:	e7cf      	b.n	800759c <HAL_UART_Abort+0x82>

080075fc <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 80075fc:	4770      	bx	lr

080075fe <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 80075fe:	4770      	bx	lr

08007600 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8007600:	4770      	bx	lr

08007602 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007602:	6a40      	ldr	r0, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007604:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007606:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007608:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 800760c:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800760e:	689c      	ldr	r4, [r3, #8]
 8007610:	0624      	lsls	r4, r4, #24
 8007612:	d50e      	bpl.n	8007632 <UART_DMAError+0x30>
 8007614:	2a21      	cmp	r2, #33	@ 0x21
 8007616:	d10c      	bne.n	8007632 <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007618:	2200      	movs	r2, #0
 800761a:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007622:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007626:	e843 2400 	strex	r4, r2, [r3]
 800762a:	2c00      	cmp	r4, #0
 800762c:	d1f7      	bne.n	800761e <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 800762e:	2220      	movs	r2, #32
 8007630:	67c2      	str	r2, [r0, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	065b      	lsls	r3, r3, #25
 8007636:	d506      	bpl.n	8007646 <UART_DMAError+0x44>
 8007638:	2922      	cmp	r1, #34	@ 0x22
 800763a:	d104      	bne.n	8007646 <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8007642:	f7ff ff42 	bl	80074ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007646:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800764a:	f043 0310 	orr.w	r3, r3, #16
 800764e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007652:	f7ff ffd5 	bl	8007600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007656:	bd10      	pop	{r4, pc}

08007658 <HAL_UARTEx_RxEventCallback>:
}
 8007658:	4770      	bx	lr

0800765a <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800765a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 800765c:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800765e:	2301      	movs	r3, #1
 8007660:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007662:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007664:	2b01      	cmp	r3, #1
 8007666:	d105      	bne.n	8007674 <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007668:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 800766c:	0849      	lsrs	r1, r1, #1
 800766e:	f7ff fff3 	bl	8007658 <HAL_UARTEx_RxEventCallback>
}
 8007672:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8007674:	f7ff ffc3 	bl	80075fe <HAL_UART_RxHalfCpltCallback>
}
 8007678:	e7fb      	b.n	8007672 <UART_DMARxHalfCplt+0x18>

0800767a <UART_DMAReceiveCplt>:
{
 800767a:	b508      	push	{r3, lr}
 800767c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800767e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	2b20      	cmp	r3, #32
 8007684:	d032      	beq.n	80076ec <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 8007686:	2300      	movs	r3, #0
 8007688:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800768c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768e:	e852 3f00 	ldrex	r3, [r2]
 8007692:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800769a:	6803      	ldr	r3, [r0, #0]
 800769c:	2900      	cmp	r1, #0
 800769e:	d1f5      	bne.n	800768c <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	f103 0208 	add.w	r2, r3, #8
 80076a4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ac:	f103 0c08 	add.w	ip, r3, #8
 80076b0:	e84c 2100 	strex	r1, r2, [ip]
 80076b4:	2900      	cmp	r1, #0
 80076b6:	d1f3      	bne.n	80076a0 <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	f103 0208 	add.w	r2, r3, #8
 80076bc:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	f103 0c08 	add.w	ip, r3, #8
 80076c8:	e84c 2100 	strex	r1, r2, [ip]
 80076cc:	2900      	cmp	r1, #0
 80076ce:	d1f3      	bne.n	80076b8 <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 80076d0:	2220      	movs	r2, #32
 80076d2:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d6:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80076d8:	2a01      	cmp	r2, #1
 80076da:	d107      	bne.n	80076ec <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076e0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	e843 2100 	strex	r1, r2, [r3]
 80076e8:	2900      	cmp	r1, #0
 80076ea:	d1f7      	bne.n	80076dc <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076ec:	2300      	movs	r3, #0
 80076ee:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f0:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d104      	bne.n	8007700 <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076f6:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 80076fa:	f7ff ffad 	bl	8007658 <HAL_UARTEx_RxEventCallback>
}
 80076fe:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8007700:	f7ff ff7c 	bl	80075fc <HAL_UART_RxCpltCallback>
}
 8007704:	e7fb      	b.n	80076fe <UART_DMAReceiveCplt+0x84>
	...

08007708 <UART_SetConfig>:
{
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800770c:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800770e:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007710:	6925      	ldr	r5, [r4, #16]
 8007712:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007714:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007716:	432a      	orrs	r2, r5
 8007718:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800771a:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800771e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007720:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007724:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007726:	430a      	orrs	r2, r1
 8007728:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 800772e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007730:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8007734:	430a      	orrs	r2, r1
 8007736:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007738:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800773a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800773c:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8007740:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007742:	430a      	orrs	r2, r1
 8007744:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007746:	4a56      	ldr	r2, [pc, #344]	@ (80078a0 <UART_SetConfig+0x198>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d112      	bne.n	8007772 <UART_SetConfig+0x6a>
 800774c:	4b55      	ldr	r3, [pc, #340]	@ (80078a4 <UART_SetConfig+0x19c>)
 800774e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007750:	f003 0303 	and.w	r3, r3, #3
 8007754:	2b02      	cmp	r3, #2
 8007756:	f000 8091 	beq.w	800787c <UART_SetConfig+0x174>
 800775a:	2b03      	cmp	r3, #3
 800775c:	d022      	beq.n	80077a4 <UART_SetConfig+0x9c>
 800775e:	2b01      	cmp	r3, #1
 8007760:	f040 8092 	bne.w	8007888 <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007764:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007768:	f040 8085 	bne.w	8007876 <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 800776c:	f7fe fc54 	bl	8006018 <HAL_RCC_GetSysClockFreq>
        break;
 8007770:	e06b      	b.n	800784a <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007772:	4a4d      	ldr	r2, [pc, #308]	@ (80078a8 <UART_SetConfig+0x1a0>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d12e      	bne.n	80077d6 <UART_SetConfig+0xce>
 8007778:	4b4a      	ldr	r3, [pc, #296]	@ (80078a4 <UART_SetConfig+0x19c>)
 800777a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800777c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007780:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007784:	d07a      	beq.n	800787c <UART_SetConfig+0x174>
 8007786:	d80a      	bhi.n	800779e <UART_SetConfig+0x96>
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 8083 	beq.w	8007894 <UART_SetConfig+0x18c>
 800778e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007792:	d0e7      	beq.n	8007764 <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 8007794:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8007796:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8007798:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 800779c:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800779e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80077a2:	d1f7      	bne.n	8007794 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077a4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80077a8:	4840      	ldr	r0, [pc, #256]	@ (80078ac <UART_SetConfig+0x1a4>)
 80077aa:	d156      	bne.n	800785a <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077ac:	6862      	ldr	r2, [r4, #4]
 80077ae:	0853      	lsrs	r3, r2, #1
 80077b0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80077b4:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077b8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80077bc:	f1a3 0110 	sub.w	r1, r3, #16
 80077c0:	4291      	cmp	r1, r2
 80077c2:	d8e7      	bhi.n	8007794 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077c4:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80077c8:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077ca:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077cc:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80077d0:	4313      	orrs	r3, r2
 80077d2:	60cb      	str	r3, [r1, #12]
 80077d4:	e03b      	b.n	800784e <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077d6:	4a36      	ldr	r2, [pc, #216]	@ (80078b0 <UART_SetConfig+0x1a8>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d10f      	bne.n	80077fc <UART_SetConfig+0xf4>
 80077dc:	4b31      	ldr	r3, [pc, #196]	@ (80078a4 <UART_SetConfig+0x19c>)
 80077de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80077e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80077e8:	d048      	beq.n	800787c <UART_SetConfig+0x174>
 80077ea:	d804      	bhi.n	80077f6 <UART_SetConfig+0xee>
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d051      	beq.n	8007894 <UART_SetConfig+0x18c>
 80077f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80077f4:	e7cd      	b.n	8007792 <UART_SetConfig+0x8a>
 80077f6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80077fa:	e7d2      	b.n	80077a2 <UART_SetConfig+0x9a>
 80077fc:	4a2d      	ldr	r2, [pc, #180]	@ (80078b4 <UART_SetConfig+0x1ac>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d10f      	bne.n	8007822 <UART_SetConfig+0x11a>
 8007802:	4b28      	ldr	r3, [pc, #160]	@ (80078a4 <UART_SetConfig+0x19c>)
 8007804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007806:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800780a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800780e:	d035      	beq.n	800787c <UART_SetConfig+0x174>
 8007810:	d804      	bhi.n	800781c <UART_SetConfig+0x114>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d03e      	beq.n	8007894 <UART_SetConfig+0x18c>
 8007816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800781a:	e7ba      	b.n	8007792 <UART_SetConfig+0x8a>
 800781c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007820:	e7bf      	b.n	80077a2 <UART_SetConfig+0x9a>
 8007822:	4a25      	ldr	r2, [pc, #148]	@ (80078b8 <UART_SetConfig+0x1b0>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d1b5      	bne.n	8007794 <UART_SetConfig+0x8c>
 8007828:	4b1e      	ldr	r3, [pc, #120]	@ (80078a4 <UART_SetConfig+0x19c>)
 800782a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800782c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007830:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007834:	d022      	beq.n	800787c <UART_SetConfig+0x174>
 8007836:	d803      	bhi.n	8007840 <UART_SetConfig+0x138>
 8007838:	b363      	cbz	r3, 8007894 <UART_SetConfig+0x18c>
 800783a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800783e:	e7a8      	b.n	8007792 <UART_SetConfig+0x8a>
 8007840:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007844:	e7ad      	b.n	80077a2 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007846:	f7fe fccb 	bl	80061e0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800784a:	2800      	cmp	r0, #0
 800784c:	d1ae      	bne.n	80077ac <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 800784e:	2000      	movs	r0, #0
 8007850:	e7a1      	b.n	8007796 <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007852:	f7fe fcad 	bl	80061b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007856:	2800      	cmp	r0, #0
 8007858:	d0f9      	beq.n	800784e <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800785a:	6862      	ldr	r2, [r4, #4]
 800785c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8007860:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007864:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007868:	f1a3 0110 	sub.w	r1, r3, #16
 800786c:	4291      	cmp	r1, r2
 800786e:	d891      	bhi.n	8007794 <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007870:	6822      	ldr	r2, [r4, #0]
 8007872:	60d3      	str	r3, [r2, #12]
 8007874:	e7eb      	b.n	800784e <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 8007876:	f7fe fbcf 	bl	8006018 <HAL_RCC_GetSysClockFreq>
        break;
 800787a:	e7ec      	b.n	8007856 <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800787c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007880:	d094      	beq.n	80077ac <UART_SetConfig+0xa4>
 8007882:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007886:	e7e8      	b.n	800785a <UART_SetConfig+0x152>
 8007888:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800788c:	d0db      	beq.n	8007846 <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800788e:	f7fe fca7 	bl	80061e0 <HAL_RCC_GetPCLK2Freq>
        break;
 8007892:	e7e0      	b.n	8007856 <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007894:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007898:	d1db      	bne.n	8007852 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800789a:	f7fe fc89 	bl	80061b0 <HAL_RCC_GetPCLK1Freq>
        break;
 800789e:	e7d4      	b.n	800784a <UART_SetConfig+0x142>
 80078a0:	40013800 	.word	0x40013800
 80078a4:	40021000 	.word	0x40021000
 80078a8:	40004400 	.word	0x40004400
 80078ac:	007a1200 	.word	0x007a1200
 80078b0:	40004800 	.word	0x40004800
 80078b4:	40004c00 	.word	0x40004c00
 80078b8:	40005000 	.word	0x40005000

080078bc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078bc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80078be:	071a      	lsls	r2, r3, #28
{
 80078c0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078c2:	d506      	bpl.n	80078d2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078c4:	6801      	ldr	r1, [r0, #0]
 80078c6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80078c8:	684a      	ldr	r2, [r1, #4]
 80078ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80078ce:	4322      	orrs	r2, r4
 80078d0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078d2:	07dc      	lsls	r4, r3, #31
 80078d4:	d506      	bpl.n	80078e4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078d6:	6801      	ldr	r1, [r0, #0]
 80078d8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80078da:	684a      	ldr	r2, [r1, #4]
 80078dc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80078e0:	4322      	orrs	r2, r4
 80078e2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078e4:	0799      	lsls	r1, r3, #30
 80078e6:	d506      	bpl.n	80078f6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078e8:	6801      	ldr	r1, [r0, #0]
 80078ea:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80078ec:	684a      	ldr	r2, [r1, #4]
 80078ee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80078f2:	4322      	orrs	r2, r4
 80078f4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078f6:	075a      	lsls	r2, r3, #29
 80078f8:	d506      	bpl.n	8007908 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078fa:	6801      	ldr	r1, [r0, #0]
 80078fc:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80078fe:	684a      	ldr	r2, [r1, #4]
 8007900:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007904:	4322      	orrs	r2, r4
 8007906:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007908:	06dc      	lsls	r4, r3, #27
 800790a:	d506      	bpl.n	800791a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800790c:	6801      	ldr	r1, [r0, #0]
 800790e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8007910:	688a      	ldr	r2, [r1, #8]
 8007912:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007916:	4322      	orrs	r2, r4
 8007918:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800791a:	0699      	lsls	r1, r3, #26
 800791c:	d506      	bpl.n	800792c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800791e:	6801      	ldr	r1, [r0, #0]
 8007920:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8007922:	688a      	ldr	r2, [r1, #8]
 8007924:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007928:	4322      	orrs	r2, r4
 800792a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800792c:	065a      	lsls	r2, r3, #25
 800792e:	d50f      	bpl.n	8007950 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007930:	6801      	ldr	r1, [r0, #0]
 8007932:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8007934:	684a      	ldr	r2, [r1, #4]
 8007936:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800793a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800793c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007940:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007942:	d105      	bne.n	8007950 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007944:	684a      	ldr	r2, [r1, #4]
 8007946:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8007948:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800794c:	4322      	orrs	r2, r4
 800794e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007950:	061b      	lsls	r3, r3, #24
 8007952:	d506      	bpl.n	8007962 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007954:	6802      	ldr	r2, [r0, #0]
 8007956:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8007958:	6853      	ldr	r3, [r2, #4]
 800795a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800795e:	430b      	orrs	r3, r1
 8007960:	6053      	str	r3, [r2, #4]
}
 8007962:	bd10      	pop	{r4, pc}

08007964 <UART_WaitOnFlagUntilTimeout>:
{
 8007964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007968:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800796c:	4604      	mov	r4, r0
 800796e:	460d      	mov	r5, r1
 8007970:	4617      	mov	r7, r2
 8007972:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007974:	6822      	ldr	r2, [r4, #0]
 8007976:	69d3      	ldr	r3, [r2, #28]
 8007978:	ea35 0303 	bics.w	r3, r5, r3
 800797c:	bf0c      	ite	eq
 800797e:	2301      	moveq	r3, #1
 8007980:	2300      	movne	r3, #0
 8007982:	42bb      	cmp	r3, r7
 8007984:	d001      	beq.n	800798a <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8007986:	2000      	movs	r0, #0
 8007988:	e022      	b.n	80079d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800798a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800798e:	d0f2      	beq.n	8007976 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007990:	f7fd f998 	bl	8004cc4 <HAL_GetTick>
 8007994:	eba0 0008 	sub.w	r0, r0, r8
 8007998:	4548      	cmp	r0, r9
 800799a:	d829      	bhi.n	80079f0 <UART_WaitOnFlagUntilTimeout+0x8c>
 800799c:	f1b9 0f00 	cmp.w	r9, #0
 80079a0:	d026      	beq.n	80079f0 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079a2:	6821      	ldr	r1, [r4, #0]
 80079a4:	680b      	ldr	r3, [r1, #0]
 80079a6:	075a      	lsls	r2, r3, #29
 80079a8:	d5e4      	bpl.n	8007974 <UART_WaitOnFlagUntilTimeout+0x10>
 80079aa:	2d80      	cmp	r5, #128	@ 0x80
 80079ac:	d0e2      	beq.n	8007974 <UART_WaitOnFlagUntilTimeout+0x10>
 80079ae:	2d40      	cmp	r5, #64	@ 0x40
 80079b0:	d0e0      	beq.n	8007974 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079b2:	69ce      	ldr	r6, [r1, #28]
 80079b4:	f016 0608 	ands.w	r6, r6, #8
 80079b8:	d00c      	beq.n	80079d4 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079ba:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 80079bc:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079be:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 80079c0:	f7ff fd83 	bl	80074ca <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 80079c4:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079c6:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80079ca:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 80079ce:	2001      	movs	r0, #1
}
 80079d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079d4:	69cb      	ldr	r3, [r1, #28]
 80079d6:	051b      	lsls	r3, r3, #20
 80079d8:	d5cc      	bpl.n	8007974 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80079de:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 80079e0:	4620      	mov	r0, r4
 80079e2:	f7ff fd72 	bl	80074ca <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079e6:	2320      	movs	r3, #32
 80079e8:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80079ec:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 80079f0:	2003      	movs	r0, #3
 80079f2:	e7ed      	b.n	80079d0 <UART_WaitOnFlagUntilTimeout+0x6c>

080079f4 <HAL_UART_Transmit>:
{
 80079f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079f8:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80079fa:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80079fc:	2b20      	cmp	r3, #32
{
 80079fe:	4604      	mov	r4, r0
 8007a00:	460e      	mov	r6, r1
 8007a02:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007a04:	d143      	bne.n	8007a8e <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 8007a06:	2900      	cmp	r1, #0
 8007a08:	d043      	beq.n	8007a92 <HAL_UART_Transmit+0x9e>
 8007a0a:	2a00      	cmp	r2, #0
 8007a0c:	d041      	beq.n	8007a92 <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a0e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a10:	2500      	movs	r5, #0
 8007a12:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a16:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8007a18:	f7fd f954 	bl	8004cc4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a1c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8007a1e:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8007a26:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8007a28:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a2c:	d103      	bne.n	8007a36 <HAL_UART_Transmit+0x42>
 8007a2e:	6923      	ldr	r3, [r4, #16]
 8007a30:	b90b      	cbnz	r3, 8007a36 <HAL_UART_Transmit+0x42>
 8007a32:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8007a34:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8007a36:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a3a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8007a3e:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a40:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 8007a42:	b93a      	cbnz	r2, 8007a54 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a44:	2140      	movs	r1, #64	@ 0x40
 8007a46:	4620      	mov	r0, r4
 8007a48:	f7ff ff8c 	bl	8007964 <UART_WaitOnFlagUntilTimeout>
 8007a4c:	2320      	movs	r3, #32
 8007a4e:	b940      	cbnz	r0, 8007a62 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8007a50:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8007a52:	e008      	b.n	8007a66 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a54:	2200      	movs	r2, #0
 8007a56:	2180      	movs	r1, #128	@ 0x80
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f7ff ff83 	bl	8007964 <UART_WaitOnFlagUntilTimeout>
 8007a5e:	b128      	cbz	r0, 8007a6c <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 8007a60:	2320      	movs	r3, #32
 8007a62:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8007a64:	2003      	movs	r0, #3
}
 8007a66:	b003      	add	sp, #12
 8007a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a6c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8007a6e:	b95e      	cbnz	r6, 8007a88 <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a70:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a78:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8007a7a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8007a7e:	3a01      	subs	r2, #1
 8007a80:	b292      	uxth	r2, r2
 8007a82:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 8007a86:	e7d6      	b.n	8007a36 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a88:	f816 3b01 	ldrb.w	r3, [r6], #1
 8007a8c:	e7f4      	b.n	8007a78 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8007a8e:	2002      	movs	r0, #2
 8007a90:	e7e9      	b.n	8007a66 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8007a92:	2001      	movs	r0, #1
 8007a94:	e7e7      	b.n	8007a66 <HAL_UART_Transmit+0x72>

08007a96 <UART_CheckIdleState>:
{
 8007a96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a98:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a9a:	2600      	movs	r6, #0
 8007a9c:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8007aa0:	f7fd f910 	bl	8004cc4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8007aaa:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007aac:	d51b      	bpl.n	8007ae6 <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	4632      	mov	r2, r6
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007abc:	4620      	mov	r0, r4
 8007abe:	f7ff ff51 	bl	8007964 <UART_WaitOnFlagUntilTimeout>
 8007ac2:	b180      	cbz	r0, 8007ae6 <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007ac4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac6:	e852 3f00 	ldrex	r3, [r2]
 8007aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	e842 3100 	strex	r1, r3, [r2]
 8007ad2:	2900      	cmp	r1, #0
 8007ad4:	d1f6      	bne.n	8007ac4 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8007ad6:	2320      	movs	r3, #32
 8007ad8:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8007ada:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8007adc:	2300      	movs	r3, #0
 8007ade:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8007ae2:	b002      	add	sp, #8
 8007ae4:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	075b      	lsls	r3, r3, #29
 8007aec:	d524      	bpl.n	8007b38 <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	2200      	movs	r2, #0
 8007af6:	462b      	mov	r3, r5
 8007af8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007afc:	4620      	mov	r0, r4
 8007afe:	f7ff ff31 	bl	8007964 <UART_WaitOnFlagUntilTimeout>
 8007b02:	b1c8      	cbz	r0, 8007b38 <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b04:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b06:	e852 3f00 	ldrex	r3, [r2]
 8007b0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007b12:	6822      	ldr	r2, [r4, #0]
 8007b14:	2900      	cmp	r1, #0
 8007b16:	d1f5      	bne.n	8007b04 <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b18:	f102 0308 	add.w	r3, r2, #8
 8007b1c:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b20:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	f102 0008 	add.w	r0, r2, #8
 8007b28:	e840 3100 	strex	r1, r3, [r0]
 8007b2c:	2900      	cmp	r1, #0
 8007b2e:	d1f3      	bne.n	8007b18 <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 8007b30:	2320      	movs	r3, #32
 8007b32:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8007b36:	e7d0      	b.n	8007ada <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 8007b38:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b3a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007b3c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b3e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b42:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b44:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8007b46:	e7c9      	b.n	8007adc <UART_CheckIdleState+0x46>

08007b48 <HAL_UART_Init>:
{
 8007b48:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	b340      	cbz	r0, 8007ba0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007b4e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8007b50:	b91b      	cbnz	r3, 8007b5a <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8007b52:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8007b56:	f7fc fe57 	bl	8004808 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8007b5a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007b5c:	2324      	movs	r3, #36	@ 0x24
 8007b5e:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8007b60:	6813      	ldr	r3, [r2, #0]
 8007b62:	f023 0301 	bic.w	r3, r3, #1
 8007b66:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b68:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007b6a:	b113      	cbz	r3, 8007b72 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f7ff fea5 	bl	80078bc <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b72:	4620      	mov	r0, r4
 8007b74:	f7ff fdc8 	bl	8007708 <UART_SetConfig>
 8007b78:	2801      	cmp	r0, #1
 8007b7a:	d011      	beq.n	8007ba0 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b8c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8007b94:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8007b96:	601a      	str	r2, [r3, #0]
}
 8007b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8007b9c:	f7ff bf7b 	b.w	8007a96 <UART_CheckIdleState>
}
 8007ba0:	2001      	movs	r0, #1
 8007ba2:	bd10      	pop	{r4, pc}

08007ba4 <UART_Start_Receive_DMA>:
{
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 8007baa:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bae:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 8007bb0:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb2:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bb6:	2022      	movs	r0, #34	@ 0x22
 8007bb8:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 8007bbc:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007bbe:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 8007bc0:	b1a0      	cbz	r0, 8007bec <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007bc2:	4e1c      	ldr	r6, [pc, #112]	@ (8007c34 <UART_Start_Receive_DMA+0x90>)
 8007bc4:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007bc6:	4e1c      	ldr	r6, [pc, #112]	@ (8007c38 <UART_Start_Receive_DMA+0x94>)
 8007bc8:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007bca:	4e1c      	ldr	r6, [pc, #112]	@ (8007c3c <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 8007bcc:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007bd0:	460a      	mov	r2, r1
 8007bd2:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 8007bd6:	f7fd fe4f 	bl	8005878 <HAL_DMA_Start_IT>
 8007bda:	b138      	cbz	r0, 8007bec <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007bdc:	2310      	movs	r3, #16
 8007bde:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8007be2:	2320      	movs	r3, #32
 8007be4:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 8007be8:	2001      	movs	r0, #1
}
 8007bea:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007bec:	6922      	ldr	r2, [r4, #16]
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	b13a      	cbz	r2, 8007c02 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	e843 2100 	strex	r1, r2, [r3]
 8007bfe:	2900      	cmp	r1, #0
 8007c00:	d1f7      	bne.n	8007bf2 <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c02:	f103 0208 	add.w	r2, r3, #8
 8007c06:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c0a:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0e:	f103 0008 	add.w	r0, r3, #8
 8007c12:	e840 2100 	strex	r1, r2, [r0]
 8007c16:	2900      	cmp	r1, #0
 8007c18:	d1f3      	bne.n	8007c02 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1a:	f103 0208 	add.w	r2, r3, #8
 8007c1e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c26:	f103 0108 	add.w	r1, r3, #8
 8007c2a:	e841 2000 	strex	r0, r2, [r1]
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	d1f3      	bne.n	8007c1a <UART_Start_Receive_DMA+0x76>
 8007c32:	e7da      	b.n	8007bea <UART_Start_Receive_DMA+0x46>
 8007c34:	0800767b 	.word	0x0800767b
 8007c38:	0800765b 	.word	0x0800765b
 8007c3c:	08007603 	.word	0x08007603

08007c40 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c40:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8007c44:	2b20      	cmp	r3, #32
{
 8007c46:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c48:	d112      	bne.n	8007c70 <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 8007c4a:	b1a1      	cbz	r1, 8007c76 <HAL_UART_Receive_DMA+0x36>
 8007c4c:	b19a      	cbz	r2, 8007c76 <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4e:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c50:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c52:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c54:	6863      	ldr	r3, [r4, #4]
 8007c56:	021b      	lsls	r3, r3, #8
 8007c58:	d507      	bpl.n	8007c6a <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5a:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c62:	e844 3500 	strex	r5, r3, [r4]
 8007c66:	2d00      	cmp	r5, #0
 8007c68:	d1f7      	bne.n	8007c5a <HAL_UART_Receive_DMA+0x1a>
}
 8007c6a:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007c6c:	f7ff bf9a 	b.w	8007ba4 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8007c70:	2002      	movs	r0, #2
}
 8007c72:	bc30      	pop	{r4, r5}
 8007c74:	4770      	bx	lr
      return HAL_ERROR;
 8007c76:	2001      	movs	r0, #1
 8007c78:	e7fb      	b.n	8007c72 <HAL_UART_Receive_DMA+0x32>
	...

08007c7c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c7c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c80:	b113      	cbz	r3, 8007c88 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8007c82:	f06f 0005 	mvn.w	r0, #5
 8007c86:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c88:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1f8      	bne.n	8007c82 <osKernelInitialize+0x6>
 8007c90:	4b07      	ldr	r3, [pc, #28]	@ (8007cb0 <osKernelInitialize+0x34>)
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	2802      	cmp	r0, #2
 8007c96:	d106      	bne.n	8007ca6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c98:	f3ef 8311 	mrs	r3, BASEPRI
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1f0      	bne.n	8007c82 <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8007ca0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8007ca4:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d1fa      	bne.n	8007ca0 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 8007caa:	2201      	movs	r2, #1
 8007cac:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007cae:	4770      	bx	lr
 8007cb0:	20001b20 	.word	0x20001b20

08007cb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007cb4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cb6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cba:	b113      	cbz	r3, 8007cc2 <osKernelStart+0xe>
    stat = osErrorISR;
 8007cbc:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8007cc0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cc2:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 8007cc6:	2c00      	cmp	r4, #0
 8007cc8:	d1f8      	bne.n	8007cbc <osKernelStart+0x8>
 8007cca:	4b09      	ldr	r3, [pc, #36]	@ (8007cf0 <osKernelStart+0x3c>)
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	2a02      	cmp	r2, #2
 8007cd0:	d106      	bne.n	8007ce0 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cd2:	f3ef 8311 	mrs	r3, BASEPRI
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1f0      	bne.n	8007cbc <osKernelStart+0x8>
      stat = osError;
 8007cda:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8007cde:	e7ef      	b.n	8007cc0 <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 8007ce0:	2a01      	cmp	r2, #1
 8007ce2:	d1fa      	bne.n	8007cda <osKernelStart+0x26>
      KernelState = osKernelRunning;
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007ce8:	f000 ff58 	bl	8008b9c <vTaskStartScheduler>
      stat = osOK;
 8007cec:	4620      	mov	r0, r4
 8007cee:	e7e7      	b.n	8007cc0 <osKernelStart+0xc>
 8007cf0:	20001b20 	.word	0x20001b20

08007cf4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007cfa:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007cfc:	460b      	mov	r3, r1
  hTask = NULL;
 8007cfe:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d00:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8007d04:	bb52      	cbnz	r2, 8007d5c <osThreadNew+0x68>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d06:	f3ef 8210 	mrs	r2, PRIMASK
 8007d0a:	bb3a      	cbnz	r2, 8007d5c <osThreadNew+0x68>
 8007d0c:	4a26      	ldr	r2, [pc, #152]	@ (8007da8 <osThreadNew+0xb4>)
 8007d0e:	6812      	ldr	r2, [r2, #0]
 8007d10:	2a02      	cmp	r2, #2
 8007d12:	d102      	bne.n	8007d1a <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d14:	f3ef 8211 	mrs	r2, BASEPRI
 8007d18:	bb02      	cbnz	r2, 8007d5c <osThreadNew+0x68>
 8007d1a:	b1f8      	cbz	r0, 8007d5c <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8007d22:	2c00      	cmp	r4, #0
 8007d24:	d030      	beq.n	8007d88 <osThreadNew+0x94>
      if (attr->name != NULL) {
 8007d26:	6821      	ldr	r1, [r4, #0]
 8007d28:	b909      	cbnz	r1, 8007d2e <osThreadNew+0x3a>
    name  = &empty;
 8007d2a:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8007d2e:	69a5      	ldr	r5, [r4, #24]
 8007d30:	2d00      	cmp	r5, #0
 8007d32:	bf08      	it	eq
 8007d34:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d36:	1e6a      	subs	r2, r5, #1
 8007d38:	2a37      	cmp	r2, #55	@ 0x37
 8007d3a:	46ac      	mov	ip, r5
 8007d3c:	d82a      	bhi.n	8007d94 <osThreadNew+0xa0>
 8007d3e:	6862      	ldr	r2, [r4, #4]
 8007d40:	07d2      	lsls	r2, r2, #31
 8007d42:	d427      	bmi.n	8007d94 <osThreadNew+0xa0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8007d44:	6966      	ldr	r6, [r4, #20]
 8007d46:	b166      	cbz	r6, 8007d62 <osThreadNew+0x6e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d48:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d4a:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8007d4e:	b157      	cbz	r7, 8007d66 <osThreadNew+0x72>
 8007d50:	f1be 0f5b 	cmp.w	lr, #91	@ 0x5b
 8007d54:	d902      	bls.n	8007d5c <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d56:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d58:	b104      	cbz	r4, 8007d5c <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d5a:	b9ee      	cbnz	r6, 8007d98 <osThreadNew+0xa4>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007d5c:	9805      	ldr	r0, [sp, #20]
}
 8007d5e:	b007      	add	sp, #28
 8007d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8007d62:	2240      	movs	r2, #64	@ 0x40
 8007d64:	e7f1      	b.n	8007d4a <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007d66:	f1be 0f00 	cmp.w	lr, #0
 8007d6a:	d1f7      	bne.n	8007d5c <osThreadNew+0x68>
      if (mem == 0) {
 8007d6c:	6924      	ldr	r4, [r4, #16]
 8007d6e:	2c00      	cmp	r4, #0
 8007d70:	d1f4      	bne.n	8007d5c <osThreadNew+0x68>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d72:	ac05      	add	r4, sp, #20
 8007d74:	e9cd c400 	strd	ip, r4, [sp]
 8007d78:	b292      	uxth	r2, r2
 8007d7a:	f000 fee1 	bl	8008b40 <xTaskCreate>
 8007d7e:	2801      	cmp	r0, #1
          hTask = NULL;
 8007d80:	bf1c      	itt	ne
 8007d82:	2300      	movne	r3, #0
 8007d84:	9305      	strne	r3, [sp, #20]
 8007d86:	e7e9      	b.n	8007d5c <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;
 8007d88:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8007d8c:	2240      	movs	r2, #64	@ 0x40
    name  = &empty;
 8007d8e:	f10d 0113 	add.w	r1, sp, #19
 8007d92:	e7ee      	b.n	8007d72 <osThreadNew+0x7e>
        return (NULL);
 8007d94:	2000      	movs	r0, #0
 8007d96:	e7e2      	b.n	8007d5e <osThreadNew+0x6a>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d98:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8007d9c:	9500      	str	r5, [sp, #0]
 8007d9e:	f000 fe98 	bl	8008ad2 <xTaskCreateStatic>
 8007da2:	9005      	str	r0, [sp, #20]
 8007da4:	e7da      	b.n	8007d5c <osThreadNew+0x68>
 8007da6:	bf00      	nop
 8007da8:	20001b20 	.word	0x20001b20

08007dac <osThreadGetStackSpace>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dac:	f3ef 8305 	mrs	r3, IPSR

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 8007db0:	b963      	cbnz	r3, 8007dcc <osThreadGetStackSpace+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007db2:	f3ef 8310 	mrs	r3, PRIMASK
 8007db6:	b94b      	cbnz	r3, 8007dcc <osThreadGetStackSpace+0x20>
 8007db8:	4b05      	ldr	r3, [pc, #20]	@ (8007dd0 <osThreadGetStackSpace+0x24>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d102      	bne.n	8007dc6 <osThreadGetStackSpace+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007dc0:	f3ef 8311 	mrs	r3, BASEPRI
 8007dc4:	b913      	cbnz	r3, 8007dcc <osThreadGetStackSpace+0x20>
 8007dc6:	b108      	cbz	r0, 8007dcc <osThreadGetStackSpace+0x20>
    sz = 0U;
  } else {
    sz = (uint32_t)uxTaskGetStackHighWaterMark (hTask);
 8007dc8:	f001 b96a 	b.w	80090a0 <uxTaskGetStackHighWaterMark>
  }

  return (sz);
}
 8007dcc:	2000      	movs	r0, #0
 8007dce:	4770      	bx	lr
 8007dd0:	20001b20 	.word	0x20001b20

08007dd4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007dd4:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dd6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dda:	b113      	cbz	r3, 8007de2 <osDelay+0xe>
    stat = osErrorISR;
 8007ddc:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8007de0:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007de2:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1f8      	bne.n	8007ddc <osDelay+0x8>
 8007dea:	4b06      	ldr	r3, [pc, #24]	@ (8007e04 <osDelay+0x30>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d103      	bne.n	8007dfa <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007df2:	f3ef 8311 	mrs	r3, BASEPRI
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1f0      	bne.n	8007ddc <osDelay+0x8>
    if (ticks != 0U) {
 8007dfa:	b108      	cbz	r0, 8007e00 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007dfc:	f001 f82c 	bl	8008e58 <vTaskDelay>
    stat = osOK;
 8007e00:	2000      	movs	r0, #0
  return (stat);
 8007e02:	e7ed      	b.n	8007de0 <osDelay+0xc>
 8007e04:	20001b20 	.word	0x20001b20

08007e08 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e0c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8007e10:	b113      	cbz	r3, 8007e18 <osMutexNew+0x10>
  hMutex = NULL;
 8007e12:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8007e14:	4620      	mov	r0, r4
 8007e16:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e18:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ()) {
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1f8      	bne.n	8007e12 <osMutexNew+0xa>
 8007e20:	4a1a      	ldr	r2, [pc, #104]	@ (8007e8c <osMutexNew+0x84>)
 8007e22:	6812      	ldr	r2, [r2, #0]
 8007e24:	2a02      	cmp	r2, #2
 8007e26:	d103      	bne.n	8007e30 <osMutexNew+0x28>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e28:	f3ef 8211 	mrs	r2, BASEPRI
 8007e2c:	2a00      	cmp	r2, #0
 8007e2e:	d1f0      	bne.n	8007e12 <osMutexNew+0xa>
    if (attr != NULL) {
 8007e30:	b115      	cbz	r5, 8007e38 <osMutexNew+0x30>
      type = attr->attr_bits;
 8007e32:	686b      	ldr	r3, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 8007e34:	071a      	lsls	r2, r3, #28
 8007e36:	d4ec      	bmi.n	8007e12 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007e38:	f003 0601 	and.w	r6, r3, #1
      if (attr != NULL) {
 8007e3c:	b17d      	cbz	r5, 8007e5e <osMutexNew+0x56>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007e3e:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 8007e42:	b151      	cbz	r1, 8007e5a <osMutexNew+0x52>
 8007e44:	2b4f      	cmp	r3, #79	@ 0x4f
 8007e46:	d9e4      	bls.n	8007e12 <osMutexNew+0xa>
        if (rmtx != 0U) {
 8007e48:	b1de      	cbz	r6, 8007e82 <osMutexNew+0x7a>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007e4a:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007e4c:	f000 fb37 	bl	80084be <xQueueCreateMutexStatic>
 8007e50:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8007e52:	2800      	cmp	r0, #0
 8007e54:	d0dd      	beq.n	8007e12 <osMutexNew+0xa>
          name = attr->name;
 8007e56:	682d      	ldr	r5, [r5, #0]
 8007e58:	e00a      	b.n	8007e70 <osMutexNew+0x68>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1d9      	bne.n	8007e12 <osMutexNew+0xa>
          if (rmtx != 0U) {
 8007e5e:	b196      	cbz	r6, 8007e86 <osMutexNew+0x7e>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007e60:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 8007e62:	f000 fb41 	bl	80084e8 <xQueueCreateMutex>
 8007e66:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d0d2      	beq.n	8007e12 <osMutexNew+0xa>
        if (attr != NULL) {
 8007e6c:	2d00      	cmp	r5, #0
 8007e6e:	d1f2      	bne.n	8007e56 <osMutexNew+0x4e>
        vQueueAddToRegistry (hMutex, name);
 8007e70:	4629      	mov	r1, r5
 8007e72:	4620      	mov	r0, r4
 8007e74:	f000 fc9c 	bl	80087b0 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007e78:	2e00      	cmp	r6, #0
 8007e7a:	d0cb      	beq.n	8007e14 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007e7c:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 8007e80:	e7c8      	b.n	8007e14 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007e82:	2001      	movs	r0, #1
 8007e84:	e7e2      	b.n	8007e4c <osMutexNew+0x44>
            hMutex = xSemaphoreCreateMutex ();
 8007e86:	2001      	movs	r0, #1
 8007e88:	e7eb      	b.n	8007e62 <osMutexNew+0x5a>
 8007e8a:	bf00      	nop
 8007e8c:	20001b20 	.word	0x20001b20

08007e90 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007e90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e92:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e94:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007e98:	b11b      	cbz	r3, 8007ea2 <osMessageQueueNew+0x12>
  hQueue = NULL;
 8007e9a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	b002      	add	sp, #8
 8007ea0:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ea2:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1f7      	bne.n	8007e9a <osMessageQueueNew+0xa>
 8007eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8007f1c <osMessageQueueNew+0x8c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d103      	bne.n	8007eba <osMessageQueueNew+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007eb2:	f3ef 8311 	mrs	r3, BASEPRI
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1ef      	bne.n	8007e9a <osMessageQueueNew+0xa>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d0ed      	beq.n	8007e9a <osMessageQueueNew+0xa>
 8007ebe:	2900      	cmp	r1, #0
 8007ec0:	d0eb      	beq.n	8007e9a <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8007ec2:	b1ec      	cbz	r4, 8007f00 <osMessageQueueNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007ec4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8007ec8:	b193      	cbz	r3, 8007ef0 <osMessageQueueNew+0x60>
 8007eca:	2a4f      	cmp	r2, #79	@ 0x4f
 8007ecc:	d9e5      	bls.n	8007e9a <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007ece:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007ed0:	2a00      	cmp	r2, #0
 8007ed2:	d0e2      	beq.n	8007e9a <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007ed4:	6966      	ldr	r6, [r4, #20]
 8007ed6:	fb01 f500 	mul.w	r5, r1, r0
 8007eda:	42ae      	cmp	r6, r5
 8007edc:	d3dd      	bcc.n	8007e9a <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007ede:	2500      	movs	r5, #0
 8007ee0:	9500      	str	r5, [sp, #0]
 8007ee2:	f000 f9c6 	bl	8008272 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d0d6      	beq.n	8007e9a <osMessageQueueNew+0xa>
        name = attr->name;
 8007eec:	6824      	ldr	r4, [r4, #0]
 8007eee:	e00f      	b.n	8007f10 <osMessageQueueNew+0x80>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007ef0:	2a00      	cmp	r2, #0
 8007ef2:	d1d2      	bne.n	8007e9a <osMessageQueueNew+0xa>
 8007ef4:	6923      	ldr	r3, [r4, #16]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1cf      	bne.n	8007e9a <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007efa:	6963      	ldr	r3, [r4, #20]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1cc      	bne.n	8007e9a <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007f00:	2200      	movs	r2, #0
 8007f02:	f000 fa03 	bl	800830c <xQueueGenericCreate>
    if (hQueue != NULL) {
 8007f06:	4605      	mov	r5, r0
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d0c6      	beq.n	8007e9a <osMessageQueueNew+0xa>
      if (attr != NULL) {
 8007f0c:	2c00      	cmp	r4, #0
 8007f0e:	d1ed      	bne.n	8007eec <osMessageQueueNew+0x5c>
      vQueueAddToRegistry (hQueue, name);
 8007f10:	4621      	mov	r1, r4
 8007f12:	4628      	mov	r0, r5
 8007f14:	f000 fc4c 	bl	80087b0 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8007f18:	e7c0      	b.n	8007e9c <osMessageQueueNew+0xc>
 8007f1a:	bf00      	nop
 8007f1c:	20001b20 	.word	0x20001b20

08007f20 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007f20:	b513      	push	{r0, r1, r4, lr}
 8007f22:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f24:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007f28:	b123      	cbz	r3, 8007f34 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f2a:	b9e8      	cbnz	r0, 8007f68 <osMessageQueuePut+0x48>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 8007f2c:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007f30:	b002      	add	sp, #8
 8007f32:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f34:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1f6      	bne.n	8007f2a <osMessageQueuePut+0xa>
 8007f3c:	4b19      	ldr	r3, [pc, #100]	@ (8007fa4 <osMessageQueuePut+0x84>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d103      	bne.n	8007f4c <osMessageQueuePut+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f44:	f3ef 8311 	mrs	r3, BASEPRI
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1ee      	bne.n	8007f2a <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d0ed      	beq.n	8007f2c <osMessageQueuePut+0xc>
 8007f50:	2900      	cmp	r1, #0
 8007f52:	d0eb      	beq.n	8007f2c <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007f54:	2300      	movs	r3, #0
 8007f56:	4622      	mov	r2, r4
 8007f58:	f000 f9ff 	bl	800835a <xQueueGenericSend>
 8007f5c:	2801      	cmp	r0, #1
 8007f5e:	d013      	beq.n	8007f88 <osMessageQueuePut+0x68>
        if (timeout != 0U) {
 8007f60:	b16c      	cbz	r4, 8007f7e <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 8007f62:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007f66:	e7e3      	b.n	8007f30 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f68:	2900      	cmp	r1, #0
 8007f6a:	d0df      	beq.n	8007f2c <osMessageQueuePut+0xc>
 8007f6c:	2c00      	cmp	r4, #0
 8007f6e:	d1dd      	bne.n	8007f2c <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007f70:	4623      	mov	r3, r4
 8007f72:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007f74:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007f76:	f000 fad4 	bl	8008522 <xQueueGenericSendFromISR>
 8007f7a:	2801      	cmp	r0, #1
 8007f7c:	d002      	beq.n	8007f84 <osMessageQueuePut+0x64>
        stat = osErrorResource;
 8007f7e:	f06f 0002 	mvn.w	r0, #2
 8007f82:	e7d5      	b.n	8007f30 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8007f84:	9b01      	ldr	r3, [sp, #4]
 8007f86:	b90b      	cbnz	r3, 8007f8c <osMessageQueuePut+0x6c>
  stat = osOK;
 8007f88:	2000      	movs	r0, #0
 8007f8a:	e7d1      	b.n	8007f30 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8007f8c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007f90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f94:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	e7f2      	b.n	8007f88 <osMessageQueuePut+0x68>
 8007fa2:	bf00      	nop
 8007fa4:	20001b20 	.word	0x20001b20

08007fa8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007fa8:	b513      	push	{r0, r1, r4, lr}
 8007faa:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fac:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007fb0:	b123      	cbz	r3, 8007fbc <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007fb2:	b9e0      	cbnz	r0, 8007fee <osMessageQueueGet+0x46>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 8007fb4:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007fb8:	b002      	add	sp, #8
 8007fba:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fbc:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1f6      	bne.n	8007fb2 <osMessageQueueGet+0xa>
 8007fc4:	4b18      	ldr	r3, [pc, #96]	@ (8008028 <osMessageQueueGet+0x80>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d103      	bne.n	8007fd4 <osMessageQueueGet+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007fcc:	f3ef 8311 	mrs	r3, BASEPRI
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1ee      	bne.n	8007fb2 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d0ed      	beq.n	8007fb4 <osMessageQueueGet+0xc>
 8007fd8:	2900      	cmp	r1, #0
 8007fda:	d0eb      	beq.n	8007fb4 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007fdc:	4622      	mov	r2, r4
 8007fde:	f000 fafc 	bl	80085da <xQueueReceive>
 8007fe2:	2801      	cmp	r0, #1
 8007fe4:	d012      	beq.n	800800c <osMessageQueueGet+0x64>
        if (timeout != 0U) {
 8007fe6:	b164      	cbz	r4, 8008002 <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 8007fe8:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007fec:	e7e4      	b.n	8007fb8 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007fee:	2900      	cmp	r1, #0
 8007ff0:	d0e0      	beq.n	8007fb4 <osMessageQueueGet+0xc>
 8007ff2:	2c00      	cmp	r4, #0
 8007ff4:	d1de      	bne.n	8007fb4 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007ff6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007ff8:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007ffa:	f000 fb8c 	bl	8008716 <xQueueReceiveFromISR>
 8007ffe:	2801      	cmp	r0, #1
 8008000:	d002      	beq.n	8008008 <osMessageQueueGet+0x60>
        stat = osErrorResource;
 8008002:	f06f 0002 	mvn.w	r0, #2
 8008006:	e7d7      	b.n	8007fb8 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8008008:	9b01      	ldr	r3, [sp, #4]
 800800a:	b90b      	cbnz	r3, 8008010 <osMessageQueueGet+0x68>
  stat = osOK;
 800800c:	2000      	movs	r0, #0
 800800e:	e7d3      	b.n	8007fb8 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8008010:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008014:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008018:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	e7f2      	b.n	800800c <osMessageQueueGet+0x64>
 8008026:	bf00      	nop
 8008028:	20001b20 	.word	0x20001b20

0800802c <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800802c:	4b03      	ldr	r3, [pc, #12]	@ (800803c <vApplicationGetIdleTaskMemory+0x10>)
 800802e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008030:	4b03      	ldr	r3, [pc, #12]	@ (8008040 <vApplicationGetIdleTaskMemory+0x14>)
 8008032:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008034:	2340      	movs	r3, #64	@ 0x40
 8008036:	6013      	str	r3, [r2, #0]
}
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	20001ac4 	.word	0x20001ac4
 8008040:	200019c4 	.word	0x200019c4

08008044 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008044:	4b03      	ldr	r3, [pc, #12]	@ (8008054 <vApplicationGetTimerTaskMemory+0x10>)
 8008046:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008048:	4b03      	ldr	r3, [pc, #12]	@ (8008058 <vApplicationGetTimerTaskMemory+0x14>)
 800804a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800804c:	2380      	movs	r3, #128	@ 0x80
 800804e:	6013      	str	r3, [r2, #0]
}
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	20001968 	.word	0x20001968
 8008058:	20001768 	.word	0x20001768

0800805c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800805c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008060:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008064:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008068:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800806a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008070:	4770      	bx	lr

08008072 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008072:	2300      	movs	r3, #0
 8008074:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008076:	4770      	bx	lr

08008078 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008078:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800807a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800807c:	689a      	ldr	r2, [r3, #8]
 800807e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008080:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008082:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8008084:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008086:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008088:	3301      	adds	r3, #1
 800808a:	6003      	str	r3, [r0, #0]
}
 800808c:	4770      	bx	lr

0800808e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800808e:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008090:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008092:	1c63      	adds	r3, r4, #1
 8008094:	d10a      	bne.n	80080ac <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008096:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800809c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800809e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80080a0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80080a2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80080a4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80080a6:	3301      	adds	r3, #1
 80080a8:	6003      	str	r3, [r0, #0]
}
 80080aa:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080ac:	f100 0208 	add.w	r2, r0, #8
 80080b0:	4613      	mov	r3, r2
 80080b2:	6852      	ldr	r2, [r2, #4]
 80080b4:	6815      	ldr	r5, [r2, #0]
 80080b6:	42a5      	cmp	r5, r4
 80080b8:	d9fa      	bls.n	80080b0 <vListInsert+0x22>
 80080ba:	e7ed      	b.n	8008098 <vListInsert+0xa>

080080bc <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80080bc:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80080c0:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80080c2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80080c4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80080c6:	6859      	ldr	r1, [r3, #4]
 80080c8:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80080ca:	bf08      	it	eq
 80080cc:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80080ce:	2200      	movs	r2, #0
 80080d0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	3a01      	subs	r2, #1
 80080d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80080d8:	6818      	ldr	r0, [r3, #0]
}
 80080da:	4770      	bx	lr

080080dc <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80080dc:	b510      	push	{r4, lr}
 80080de:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080e0:	f001 fa88 	bl	80095f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080e4:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80080e6:	f001 faa5 	bl	8009634 <vPortExitCritical>

	return xReturn;
}
 80080ea:	fab4 f084 	clz	r0, r4
 80080ee:	0940      	lsrs	r0, r0, #5
 80080f0:	bd10      	pop	{r4, pc}

080080f2 <prvCopyDataToQueue>:
{
 80080f2:	b570      	push	{r4, r5, r6, lr}
 80080f4:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80080f6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080f8:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 80080fa:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80080fc:	b942      	cbnz	r2, 8008110 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080fe:	6806      	ldr	r6, [r0, #0]
 8008100:	b99e      	cbnz	r6, 800812a <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008102:	6840      	ldr	r0, [r0, #4]
 8008104:	f000 ffec 	bl	80090e0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8008108:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800810a:	3501      	adds	r5, #1
 800810c:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800810e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8008110:	b96e      	cbnz	r6, 800812e <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008112:	6880      	ldr	r0, [r0, #8]
 8008114:	f004 fa6e 	bl	800c5f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008118:	68a3      	ldr	r3, [r4, #8]
 800811a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800811c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800811e:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008120:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008122:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008124:	bf24      	itt	cs
 8008126:	6823      	ldrcs	r3, [r4, #0]
 8008128:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800812a:	2000      	movs	r0, #0
 800812c:	e7ed      	b.n	800810a <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800812e:	68c0      	ldr	r0, [r0, #12]
 8008130:	f004 fa60 	bl	800c5f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008134:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008136:	68e3      	ldr	r3, [r4, #12]
 8008138:	4251      	negs	r1, r2
 800813a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800813c:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800813e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008140:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008142:	bf3e      	ittt	cc
 8008144:	6863      	ldrcc	r3, [r4, #4]
 8008146:	185b      	addcc	r3, r3, r1
 8008148:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800814a:	2e02      	cmp	r6, #2
 800814c:	d1ed      	bne.n	800812a <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800814e:	b10d      	cbz	r5, 8008154 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8008150:	3d01      	subs	r5, #1
 8008152:	e7ea      	b.n	800812a <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8008154:	4628      	mov	r0, r5
 8008156:	e7d8      	b.n	800810a <prvCopyDataToQueue+0x18>

08008158 <prvCopyDataFromQueue>:
{
 8008158:	4603      	mov	r3, r0
 800815a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800815c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800815e:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008160:	b16a      	cbz	r2, 800817e <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008162:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008164:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008166:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008168:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800816a:	bf28      	it	cs
 800816c:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800816e:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008170:	bf28      	it	cs
 8008172:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008174:	68d9      	ldr	r1, [r3, #12]
}
 8008176:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800817a:	f004 ba3b 	b.w	800c5f4 <memcpy>
}
 800817e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008182:	4770      	bx	lr

08008184 <prvUnlockQueue>:
{
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008188:	f001 fa34 	bl	80095f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800818c:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008190:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8008194:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008196:	2d00      	cmp	r5, #0
 8008198:	dc14      	bgt.n	80081c4 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800819a:	23ff      	movs	r3, #255	@ 0xff
 800819c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80081a0:	f001 fa48 	bl	8009634 <vPortExitCritical>
	taskENTER_CRITICAL();
 80081a4:	f001 fa26 	bl	80095f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80081a8:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081ac:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80081b0:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081b2:	2d00      	cmp	r5, #0
 80081b4:	dc12      	bgt.n	80081dc <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80081b6:	23ff      	movs	r3, #255	@ 0xff
 80081b8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 80081bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80081c0:	f001 ba38 	b.w	8009634 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0e7      	beq.n	800819a <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081ca:	4630      	mov	r0, r6
 80081cc:	f000 feda 	bl	8008f84 <xTaskRemoveFromEventList>
 80081d0:	b108      	cbz	r0, 80081d6 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80081d2:	f000 ff5f 	bl	8009094 <vTaskMissedYield>
			--cTxLock;
 80081d6:	3d01      	subs	r5, #1
 80081d8:	b26d      	sxtb	r5, r5
 80081da:	e7dc      	b.n	8008196 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081dc:	6923      	ldr	r3, [r4, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d0e9      	beq.n	80081b6 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081e2:	4630      	mov	r0, r6
 80081e4:	f000 fece 	bl	8008f84 <xTaskRemoveFromEventList>
 80081e8:	b108      	cbz	r0, 80081ee <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80081ea:	f000 ff53 	bl	8009094 <vTaskMissedYield>
				--cRxLock;
 80081ee:	3d01      	subs	r5, #1
 80081f0:	b26d      	sxtb	r5, r5
 80081f2:	e7de      	b.n	80081b2 <prvUnlockQueue+0x2e>

080081f4 <xQueueGenericReset>:
{
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80081f8:	4604      	mov	r4, r0
 80081fa:	b940      	cbnz	r0, 800820e <xQueueGenericReset+0x1a>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	e7fe      	b.n	800820c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800820e:	f001 f9f1 	bl	80095f4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008212:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8008216:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008218:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800821a:	434b      	muls	r3, r1
 800821c:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800821e:	1a5b      	subs	r3, r3, r1
 8008220:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008222:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8008224:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008226:	2000      	movs	r0, #0
 8008228:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800822a:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800822c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008230:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8008234:	b9a5      	cbnz	r5, 8008260 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008236:	6923      	ldr	r3, [r4, #16]
 8008238:	b173      	cbz	r3, 8008258 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800823a:	f104 0010 	add.w	r0, r4, #16
 800823e:	f000 fea1 	bl	8008f84 <xTaskRemoveFromEventList>
 8008242:	b148      	cbz	r0, 8008258 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8008244:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008248:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800824c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8008258:	f001 f9ec 	bl	8009634 <vPortExitCritical>
}
 800825c:	2001      	movs	r0, #1
 800825e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008260:	f104 0010 	add.w	r0, r4, #16
 8008264:	f7ff fefa 	bl	800805c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008268:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800826c:	f7ff fef6 	bl	800805c <vListInitialise>
 8008270:	e7f2      	b.n	8008258 <xQueueGenericReset+0x64>

08008272 <xQueueGenericCreateStatic>:
	{
 8008272:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008274:	460d      	mov	r5, r1
 8008276:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008278:	b940      	cbnz	r0, 800828c <xQueueGenericCreateStatic+0x1a>
 800827a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	e7fe      	b.n	800828a <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800828c:	b943      	cbnz	r3, 80082a0 <xQueueGenericCreateStatic+0x2e>
 800828e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	e7fe      	b.n	800829e <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082a0:	b14a      	cbz	r2, 80082b6 <xQueueGenericCreateStatic+0x44>
 80082a2:	b991      	cbnz	r1, 80082ca <xQueueGenericCreateStatic+0x58>
 80082a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	e7fe      	b.n	80082b4 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082b6:	b141      	cbz	r1, 80082ca <xQueueGenericCreateStatic+0x58>
 80082b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	e7fe      	b.n	80082c8 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80082ca:	2350      	movs	r3, #80	@ 0x50
 80082cc:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80082ce:	9b01      	ldr	r3, [sp, #4]
 80082d0:	2b50      	cmp	r3, #80	@ 0x50
 80082d2:	d008      	beq.n	80082e6 <xQueueGenericCreateStatic+0x74>
 80082d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	e7fe      	b.n	80082e4 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80082e6:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80082e8:	2d00      	cmp	r5, #0
 80082ea:	bf08      	it	eq
 80082ec:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80082ee:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80082f2:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80082f6:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80082f8:	4620      	mov	r0, r4
 80082fa:	f7ff ff7b 	bl	80081f4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80082fe:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008302:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8008306:	4620      	mov	r0, r4
 8008308:	b003      	add	sp, #12
 800830a:	bd30      	pop	{r4, r5, pc}

0800830c <xQueueGenericCreate>:
	{
 800830c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830e:	460d      	mov	r5, r1
 8008310:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008312:	4606      	mov	r6, r0
 8008314:	b940      	cbnz	r0, 8008328 <xQueueGenericCreate+0x1c>
 8008316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	e7fe      	b.n	8008326 <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008328:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800832a:	3050      	adds	r0, #80	@ 0x50
 800832c:	f001 fac8 	bl	80098c0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008330:	4604      	mov	r4, r0
 8008332:	b170      	cbz	r0, 8008352 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008334:	2300      	movs	r3, #0
 8008336:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800833a:	b165      	cbz	r5, 8008356 <xQueueGenericCreate+0x4a>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800833c:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8008340:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8008344:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008346:	2101      	movs	r1, #1
 8008348:	4620      	mov	r0, r4
 800834a:	f7ff ff53 	bl	80081f4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800834e:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 8008352:	4620      	mov	r0, r4
 8008354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008356:	4603      	mov	r3, r0
 8008358:	e7f2      	b.n	8008340 <xQueueGenericCreate+0x34>

0800835a <xQueueGenericSend>:
{
 800835a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800835e:	460f      	mov	r7, r1
 8008360:	9201      	str	r2, [sp, #4]
 8008362:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8008364:	4604      	mov	r4, r0
 8008366:	b940      	cbnz	r0, 800837a <xQueueGenericSend+0x20>
 8008368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	e7fe      	b.n	8008378 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800837a:	b951      	cbnz	r1, 8008392 <xQueueGenericSend+0x38>
 800837c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800837e:	b143      	cbz	r3, 8008392 <xQueueGenericSend+0x38>
 8008380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	e7fe      	b.n	8008390 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008392:	2e02      	cmp	r6, #2
 8008394:	d10b      	bne.n	80083ae <xQueueGenericSend+0x54>
 8008396:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008398:	2b01      	cmp	r3, #1
 800839a:	d008      	beq.n	80083ae <xQueueGenericSend+0x54>
 800839c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	e7fe      	b.n	80083ac <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083ae:	f000 fe87 	bl	80090c0 <xTaskGetSchedulerState>
 80083b2:	4605      	mov	r5, r0
 80083b4:	b330      	cbz	r0, 8008404 <xQueueGenericSend+0xaa>
 80083b6:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80083b8:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80083bc:	f001 f91a 	bl	80095f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083c0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80083c2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d301      	bcc.n	80083cc <xQueueGenericSend+0x72>
 80083c8:	2e02      	cmp	r6, #2
 80083ca:	d127      	bne.n	800841c <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083cc:	4632      	mov	r2, r6
 80083ce:	4639      	mov	r1, r7
 80083d0:	4620      	mov	r0, r4
 80083d2:	f7ff fe8e 	bl	80080f2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80083d8:	b11b      	cbz	r3, 80083e2 <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083da:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80083de:	f000 fdd1 	bl	8008f84 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80083e2:	b148      	cbz	r0, 80083f8 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80083e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80083e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80083f8:	f001 f91c 	bl	8009634 <vPortExitCritical>
				return pdPASS;
 80083fc:	2001      	movs	r0, #1
}
 80083fe:	b004      	add	sp, #16
 8008400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008404:	9b01      	ldr	r3, [sp, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0d6      	beq.n	80083b8 <xQueueGenericSend+0x5e>
 800840a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	e7fe      	b.n	800841a <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800841c:	9b01      	ldr	r3, [sp, #4]
 800841e:	b91b      	cbnz	r3, 8008428 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8008420:	f001 f908 	bl	8009634 <vPortExitCritical>
					return errQUEUE_FULL;
 8008424:	2000      	movs	r0, #0
 8008426:	e7ea      	b.n	80083fe <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8008428:	b915      	cbnz	r5, 8008430 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800842a:	a802      	add	r0, sp, #8
 800842c:	f000 fdea 	bl	8009004 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008430:	f001 f900 	bl	8009634 <vPortExitCritical>
		vTaskSuspendAll();
 8008434:	f000 fbf8 	bl	8008c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008438:	f001 f8dc 	bl	80095f4 <vPortEnterCritical>
 800843c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008440:	2bff      	cmp	r3, #255	@ 0xff
 8008442:	bf08      	it	eq
 8008444:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8008448:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800844c:	2bff      	cmp	r3, #255	@ 0xff
 800844e:	bf08      	it	eq
 8008450:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8008454:	f001 f8ee 	bl	8009634 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008458:	a901      	add	r1, sp, #4
 800845a:	a802      	add	r0, sp, #8
 800845c:	f000 fdde 	bl	800901c <xTaskCheckForTimeOut>
 8008460:	bb38      	cbnz	r0, 80084b2 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008462:	f001 f8c7 	bl	80095f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008466:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008468:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800846a:	429a      	cmp	r2, r3
 800846c:	d10e      	bne.n	800848c <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800846e:	f001 f8e1 	bl	8009634 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008472:	9901      	ldr	r1, [sp, #4]
 8008474:	f104 0010 	add.w	r0, r4, #16
 8008478:	f000 fd4c 	bl	8008f14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800847c:	4620      	mov	r0, r4
 800847e:	f7ff fe81 	bl	8008184 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008482:	f000 fc75 	bl	8008d70 <xTaskResumeAll>
 8008486:	b148      	cbz	r0, 800849c <xQueueGenericSend+0x142>
 8008488:	2501      	movs	r5, #1
 800848a:	e797      	b.n	80083bc <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800848c:	f001 f8d2 	bl	8009634 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8008490:	4620      	mov	r0, r4
 8008492:	f7ff fe77 	bl	8008184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008496:	f000 fc6b 	bl	8008d70 <xTaskResumeAll>
 800849a:	e7f5      	b.n	8008488 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800849c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80084a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	e7ea      	b.n	8008488 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 80084b2:	4620      	mov	r0, r4
 80084b4:	f7ff fe66 	bl	8008184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084b8:	f000 fc5a 	bl	8008d70 <xTaskResumeAll>
			return errQUEUE_FULL;
 80084bc:	e7b2      	b.n	8008424 <xQueueGenericSend+0xca>

080084be <xQueueCreateMutexStatic>:
	{
 80084be:	b513      	push	{r0, r1, r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80084c0:	2200      	movs	r2, #0
	{
 80084c2:	460b      	mov	r3, r1
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80084c4:	9000      	str	r0, [sp, #0]
 80084c6:	4611      	mov	r1, r2
 80084c8:	2001      	movs	r0, #1
 80084ca:	f7ff fed2 	bl	8008272 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 80084ce:	4604      	mov	r4, r0
 80084d0:	b138      	cbz	r0, 80084e2 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->pxMutexHolder = NULL;
 80084d2:	2300      	movs	r3, #0
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80084d4:	e9c0 3300 	strd	r3, r3, [r0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80084d8:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80084da:	461a      	mov	r2, r3
 80084dc:	4619      	mov	r1, r3
 80084de:	f7ff ff3c 	bl	800835a <xQueueGenericSend>
	}
 80084e2:	4620      	mov	r0, r4
 80084e4:	b002      	add	sp, #8
 80084e6:	bd10      	pop	{r4, pc}

080084e8 <xQueueCreateMutex>:
	{
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80084ec:	2050      	movs	r0, #80	@ 0x50
 80084ee:	f001 f9e7 	bl	80098c0 <pvPortMalloc>
 80084f2:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 80084f4:	b198      	cbz	r0, 800851e <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80084f6:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 80084f8:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 80084fa:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80084fe:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008502:	6000      	str	r0, [r0, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008504:	f7ff fe76 	bl	80081f4 <xQueueGenericReset>
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008508:	e9c4 5500 	strd	r5, r5, [r4]
		pxNewQueue->ucQueueType = ucQueueType;
 800850c:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008510:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008512:	462b      	mov	r3, r5
 8008514:	462a      	mov	r2, r5
 8008516:	4629      	mov	r1, r5
 8008518:	4620      	mov	r0, r4
 800851a:	f7ff ff1e 	bl	800835a <xQueueGenericSend>
	}
 800851e:	4620      	mov	r0, r4
 8008520:	bd70      	pop	{r4, r5, r6, pc}

08008522 <xQueueGenericSendFromISR>:
{
 8008522:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008526:	4689      	mov	r9, r1
 8008528:	4617      	mov	r7, r2
 800852a:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800852c:	4604      	mov	r4, r0
 800852e:	b940      	cbnz	r0, 8008542 <xQueueGenericSendFromISR+0x20>
 8008530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	e7fe      	b.n	8008540 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008542:	b951      	cbnz	r1, 800855a <xQueueGenericSendFromISR+0x38>
 8008544:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008546:	b143      	cbz	r3, 800855a <xQueueGenericSendFromISR+0x38>
 8008548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	e7fe      	b.n	8008558 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800855a:	2e02      	cmp	r6, #2
 800855c:	d10b      	bne.n	8008576 <xQueueGenericSendFromISR+0x54>
 800855e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008560:	2b01      	cmp	r3, #1
 8008562:	d008      	beq.n	8008576 <xQueueGenericSendFromISR+0x54>
 8008564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	e7fe      	b.n	8008574 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008576:	f001 f94f 	bl	8009818 <vPortValidateInterruptPriority>
	__asm volatile
 800857a:	f3ef 8811 	mrs	r8, BASEPRI
 800857e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800858e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008590:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008592:	429a      	cmp	r2, r3
 8008594:	d301      	bcc.n	800859a <xQueueGenericSendFromISR+0x78>
 8008596:	2e02      	cmp	r6, #2
 8008598:	d11d      	bne.n	80085d6 <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800859a:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800859e:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 80085a0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085a2:	4649      	mov	r1, r9
 80085a4:	4620      	mov	r0, r4
 80085a6:	f7ff fda4 	bl	80080f2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80085aa:	1c6b      	adds	r3, r5, #1
 80085ac:	d10e      	bne.n	80085cc <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80085b0:	b13b      	cbz	r3, 80085c2 <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085b2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80085b6:	f000 fce5 	bl	8008f84 <xTaskRemoveFromEventList>
 80085ba:	b110      	cbz	r0, 80085c2 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 80085bc:	b10f      	cbz	r7, 80085c2 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085be:	2301      	movs	r3, #1
 80085c0:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 80085c2:	2001      	movs	r0, #1
	__asm volatile
 80085c4:	f388 8811 	msr	BASEPRI, r8
}
 80085c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085cc:	3501      	adds	r5, #1
 80085ce:	b26d      	sxtb	r5, r5
 80085d0:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 80085d4:	e7f5      	b.n	80085c2 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 80085d6:	2000      	movs	r0, #0
 80085d8:	e7f4      	b.n	80085c4 <xQueueGenericSendFromISR+0xa2>

080085da <xQueueReceive>:
{
 80085da:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80085de:	460e      	mov	r6, r1
 80085e0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80085e2:	4604      	mov	r4, r0
 80085e4:	b940      	cbnz	r0, 80085f8 <xQueueReceive+0x1e>
	__asm volatile
 80085e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	e7fe      	b.n	80085f6 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085f8:	b951      	cbnz	r1, 8008610 <xQueueReceive+0x36>
 80085fa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80085fc:	b143      	cbz	r3, 8008610 <xQueueReceive+0x36>
 80085fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	e7fe      	b.n	800860e <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008610:	f000 fd56 	bl	80090c0 <xTaskGetSchedulerState>
 8008614:	4605      	mov	r5, r0
 8008616:	b318      	cbz	r0, 8008660 <xQueueReceive+0x86>
 8008618:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800861a:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800861e:	f000 ffe9 	bl	80095f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008622:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008624:	b347      	cbz	r7, 8008678 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008626:	4631      	mov	r1, r6
 8008628:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800862a:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800862c:	f7ff fd94 	bl	8008158 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008630:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008632:	6923      	ldr	r3, [r4, #16]
 8008634:	b173      	cbz	r3, 8008654 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008636:	f104 0010 	add.w	r0, r4, #16
 800863a:	f000 fca3 	bl	8008f84 <xTaskRemoveFromEventList>
 800863e:	b148      	cbz	r0, 8008654 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8008640:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008644:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008648:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008654:	f000 ffee 	bl	8009634 <vPortExitCritical>
				return pdPASS;
 8008658:	2001      	movs	r0, #1
}
 800865a:	b004      	add	sp, #16
 800865c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008660:	9b01      	ldr	r3, [sp, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d0d9      	beq.n	800861a <xQueueReceive+0x40>
 8008666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	e7fe      	b.n	8008676 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008678:	9b01      	ldr	r3, [sp, #4]
 800867a:	b91b      	cbnz	r3, 8008684 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800867c:	f000 ffda 	bl	8009634 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008680:	2000      	movs	r0, #0
 8008682:	e7ea      	b.n	800865a <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8008684:	b915      	cbnz	r5, 800868c <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008686:	a802      	add	r0, sp, #8
 8008688:	f000 fcbc 	bl	8009004 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800868c:	f000 ffd2 	bl	8009634 <vPortExitCritical>
		vTaskSuspendAll();
 8008690:	f000 faca 	bl	8008c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008694:	f000 ffae 	bl	80095f4 <vPortEnterCritical>
 8008698:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800869c:	2bff      	cmp	r3, #255	@ 0xff
 800869e:	bf08      	it	eq
 80086a0:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80086a4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80086a8:	2bff      	cmp	r3, #255	@ 0xff
 80086aa:	bf08      	it	eq
 80086ac:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80086b0:	f000 ffc0 	bl	8009634 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086b4:	a901      	add	r1, sp, #4
 80086b6:	a802      	add	r0, sp, #8
 80086b8:	f000 fcb0 	bl	800901c <xTaskCheckForTimeOut>
 80086bc:	bb00      	cbnz	r0, 8008700 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086be:	4620      	mov	r0, r4
 80086c0:	f7ff fd0c 	bl	80080dc <prvIsQueueEmpty>
 80086c4:	b1b0      	cbz	r0, 80086f4 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086c6:	9901      	ldr	r1, [sp, #4]
 80086c8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80086cc:	f000 fc22 	bl	8008f14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086d0:	4620      	mov	r0, r4
 80086d2:	f7ff fd57 	bl	8008184 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086d6:	f000 fb4b 	bl	8008d70 <xTaskResumeAll>
 80086da:	b948      	cbnz	r0, 80086f0 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 80086dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80086e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	2501      	movs	r5, #1
 80086f2:	e794      	b.n	800861e <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 80086f4:	4620      	mov	r0, r4
 80086f6:	f7ff fd45 	bl	8008184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086fa:	f000 fb39 	bl	8008d70 <xTaskResumeAll>
 80086fe:	e7f7      	b.n	80086f0 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8008700:	4620      	mov	r0, r4
 8008702:	f7ff fd3f 	bl	8008184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008706:	f000 fb33 	bl	8008d70 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800870a:	4620      	mov	r0, r4
 800870c:	f7ff fce6 	bl	80080dc <prvIsQueueEmpty>
 8008710:	2800      	cmp	r0, #0
 8008712:	d0ed      	beq.n	80086f0 <xQueueReceive+0x116>
 8008714:	e7b4      	b.n	8008680 <xQueueReceive+0xa6>

08008716 <xQueueReceiveFromISR>:
{
 8008716:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800871a:	4689      	mov	r9, r1
 800871c:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800871e:	4604      	mov	r4, r0
 8008720:	b940      	cbnz	r0, 8008734 <xQueueReceiveFromISR+0x1e>
 8008722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	e7fe      	b.n	8008732 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008734:	b951      	cbnz	r1, 800874c <xQueueReceiveFromISR+0x36>
 8008736:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008738:	b143      	cbz	r3, 800874c <xQueueReceiveFromISR+0x36>
 800873a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	e7fe      	b.n	800874a <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800874c:	f001 f864 	bl	8009818 <vPortValidateInterruptPriority>
	__asm volatile
 8008750:	f3ef 8711 	mrs	r7, BASEPRI
 8008754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008764:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008766:	b30d      	cbz	r5, 80087ac <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008768:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800876c:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 800876e:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008770:	4620      	mov	r0, r4
 8008772:	f7ff fcf1 	bl	8008158 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008776:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8008778:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800877a:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800877c:	d111      	bne.n	80087a2 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800877e:	6923      	ldr	r3, [r4, #16]
 8008780:	b153      	cbz	r3, 8008798 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008782:	f104 0010 	add.w	r0, r4, #16
 8008786:	f000 fbfd 	bl	8008f84 <xTaskRemoveFromEventList>
 800878a:	b128      	cbz	r0, 8008798 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800878c:	f1b8 0f00 	cmp.w	r8, #0
 8008790:	d002      	beq.n	8008798 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008792:	2301      	movs	r3, #1
 8008794:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8008798:	2001      	movs	r0, #1
	__asm volatile
 800879a:	f387 8811 	msr	BASEPRI, r7
}
 800879e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80087a2:	3601      	adds	r6, #1
 80087a4:	b276      	sxtb	r6, r6
 80087a6:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 80087aa:	e7f5      	b.n	8008798 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 80087ac:	4628      	mov	r0, r5
 80087ae:	e7f4      	b.n	800879a <xQueueReceiveFromISR+0x84>

080087b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80087b0:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80087b2:	4a07      	ldr	r2, [pc, #28]	@ (80087d0 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087b4:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80087b6:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80087ba:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80087be:	b91d      	cbnz	r5, 80087c8 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80087c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80087c4:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80087c6:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087c8:	3301      	adds	r3, #1
 80087ca:	2b08      	cmp	r3, #8
 80087cc:	d1f3      	bne.n	80087b6 <vQueueAddToRegistry+0x6>
 80087ce:	e7fa      	b.n	80087c6 <vQueueAddToRegistry+0x16>
 80087d0:	20001b24 	.word	0x20001b24

080087d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087d4:	b570      	push	{r4, r5, r6, lr}
 80087d6:	4604      	mov	r4, r0
 80087d8:	460d      	mov	r5, r1
 80087da:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80087dc:	f000 ff0a 	bl	80095f4 <vPortEnterCritical>
 80087e0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80087e4:	2bff      	cmp	r3, #255	@ 0xff
 80087e6:	bf04      	itt	eq
 80087e8:	2300      	moveq	r3, #0
 80087ea:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 80087ee:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80087f2:	2bff      	cmp	r3, #255	@ 0xff
 80087f4:	bf04      	itt	eq
 80087f6:	2300      	moveq	r3, #0
 80087f8:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 80087fc:	f000 ff1a 	bl	8009634 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008800:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008802:	b92b      	cbnz	r3, 8008810 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008804:	4632      	mov	r2, r6
 8008806:	4629      	mov	r1, r5
 8008808:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800880c:	f000 fb9c 	bl	8008f48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008810:	4620      	mov	r0, r4
	}
 8008812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008816:	f7ff bcb5 	b.w	8008184 <prvUnlockQueue>
	...

0800881c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800881c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008820:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008822:	f000 fee7 	bl	80095f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008826:	4b30      	ldr	r3, [pc, #192]	@ (80088e8 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8008828:	4e30      	ldr	r6, [pc, #192]	@ (80088ec <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	4f30      	ldr	r7, [pc, #192]	@ (80088f0 <prvAddNewTaskToReadyList+0xd4>)
 800882e:	3201      	adds	r2, #1
 8008830:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008832:	6835      	ldr	r5, [r6, #0]
 8008834:	2d00      	cmp	r5, #0
 8008836:	d14b      	bne.n	80088d0 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008838:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d11f      	bne.n	8008880 <prvAddNewTaskToReadyList+0x64>
 8008840:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008842:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008844:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008846:	f7ff fc09 	bl	800805c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800884a:	2d38      	cmp	r5, #56	@ 0x38
 800884c:	f108 0814 	add.w	r8, r8, #20
 8008850:	d1f7      	bne.n	8008842 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008852:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8008918 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8008856:	4d27      	ldr	r5, [pc, #156]	@ (80088f4 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8008858:	4640      	mov	r0, r8
 800885a:	f7ff fbff 	bl	800805c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800885e:	4628      	mov	r0, r5
 8008860:	f7ff fbfc 	bl	800805c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008864:	4824      	ldr	r0, [pc, #144]	@ (80088f8 <prvAddNewTaskToReadyList+0xdc>)
 8008866:	f7ff fbf9 	bl	800805c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800886a:	4824      	ldr	r0, [pc, #144]	@ (80088fc <prvAddNewTaskToReadyList+0xe0>)
 800886c:	f7ff fbf6 	bl	800805c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008870:	4823      	ldr	r0, [pc, #140]	@ (8008900 <prvAddNewTaskToReadyList+0xe4>)
 8008872:	f7ff fbf3 	bl	800805c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008876:	4b23      	ldr	r3, [pc, #140]	@ (8008904 <prvAddNewTaskToReadyList+0xe8>)
 8008878:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800887c:	4b22      	ldr	r3, [pc, #136]	@ (8008908 <prvAddNewTaskToReadyList+0xec>)
 800887e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8008880:	4a22      	ldr	r2, [pc, #136]	@ (800890c <prvAddNewTaskToReadyList+0xf0>)
 8008882:	6813      	ldr	r3, [r2, #0]
 8008884:	3301      	adds	r3, #1
 8008886:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008888:	4a21      	ldr	r2, [pc, #132]	@ (8008910 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800888a:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800888c:	6811      	ldr	r1, [r2, #0]
 800888e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008890:	2014      	movs	r0, #20
 8008892:	428b      	cmp	r3, r1
 8008894:	fb00 7003 	mla	r0, r0, r3, r7
 8008898:	f104 0104 	add.w	r1, r4, #4
 800889c:	bf88      	it	hi
 800889e:	6013      	strhi	r3, [r2, #0]
 80088a0:	f7ff fbea 	bl	8008078 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80088a4:	f000 fec6 	bl	8009634 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80088a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008914 <prvAddNewTaskToReadyList+0xf8>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	b173      	cbz	r3, 80088cc <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80088ae:	6833      	ldr	r3, [r6, #0]
 80088b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d209      	bcs.n	80088cc <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 80088b8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80088bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	f3bf 8f6f 	isb	sy
}
 80088cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80088d0:	4b10      	ldr	r3, [pc, #64]	@ (8008914 <prvAddNewTaskToReadyList+0xf8>)
 80088d2:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 80088d6:	2a00      	cmp	r2, #0
 80088d8:	d1d2      	bne.n	8008880 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088da:	6832      	ldr	r2, [r6, #0]
 80088dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80088de:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80088e0:	bf98      	it	ls
 80088e2:	6034      	strls	r4, [r6, #0]
 80088e4:	e7cc      	b.n	8008880 <prvAddNewTaskToReadyList+0x64>
 80088e6:	bf00      	nop
 80088e8:	20001b88 	.word	0x20001b88
 80088ec:	2000205c 	.word	0x2000205c
 80088f0:	20001bfc 	.word	0x20001bfc
 80088f4:	20001bd4 	.word	0x20001bd4
 80088f8:	20001bb8 	.word	0x20001bb8
 80088fc:	20001ba4 	.word	0x20001ba4
 8008900:	20001b8c 	.word	0x20001b8c
 8008904:	20001bd0 	.word	0x20001bd0
 8008908:	20001bcc 	.word	0x20001bcc
 800890c:	20001b6c 	.word	0x20001b6c
 8008910:	20001b80 	.word	0x20001b80
 8008914:	20001b7c 	.word	0x20001b7c
 8008918:	20001be8 	.word	0x20001be8

0800891c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800891e:	4b15      	ldr	r3, [pc, #84]	@ (8008974 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008920:	4d15      	ldr	r5, [pc, #84]	@ (8008978 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8008922:	681c      	ldr	r4, [r3, #0]
{
 8008924:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008926:	6828      	ldr	r0, [r5, #0]
 8008928:	3004      	adds	r0, #4
{
 800892a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800892c:	f7ff fbc6 	bl	80080bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008930:	1c73      	adds	r3, r6, #1
 8008932:	d107      	bne.n	8008944 <prvAddCurrentTaskToDelayedList+0x28>
 8008934:	b137      	cbz	r7, 8008944 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008936:	6829      	ldr	r1, [r5, #0]
 8008938:	4810      	ldr	r0, [pc, #64]	@ (800897c <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800893a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800893e:	3104      	adds	r1, #4
 8008940:	f7ff bb9a 	b.w	8008078 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	19a4      	adds	r4, r4, r6
 8008948:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800894a:	d307      	bcc.n	800895c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800894c:	4b0c      	ldr	r3, [pc, #48]	@ (8008980 <prvAddCurrentTaskToDelayedList+0x64>)
 800894e:	6818      	ldr	r0, [r3, #0]
 8008950:	6829      	ldr	r1, [r5, #0]
}
 8008952:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008956:	3104      	adds	r1, #4
 8008958:	f7ff bb99 	b.w	800808e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800895c:	4b09      	ldr	r3, [pc, #36]	@ (8008984 <prvAddCurrentTaskToDelayedList+0x68>)
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	6829      	ldr	r1, [r5, #0]
 8008962:	3104      	adds	r1, #4
 8008964:	f7ff fb93 	bl	800808e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008968:	4b07      	ldr	r3, [pc, #28]	@ (8008988 <prvAddCurrentTaskToDelayedList+0x6c>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800896e:	bf88      	it	hi
 8008970:	601c      	strhi	r4, [r3, #0]
}
 8008972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008974:	20001b84 	.word	0x20001b84
 8008978:	2000205c 	.word	0x2000205c
 800897c:	20001b8c 	.word	0x20001b8c
 8008980:	20001bcc 	.word	0x20001bcc
 8008984:	20001bd0 	.word	0x20001bd0
 8008988:	20001b68 	.word	0x20001b68

0800898c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800898c:	4a06      	ldr	r2, [pc, #24]	@ (80089a8 <prvResetNextTaskUnblockTime+0x1c>)
 800898e:	6813      	ldr	r3, [r2, #0]
 8008990:	6819      	ldr	r1, [r3, #0]
 8008992:	4b06      	ldr	r3, [pc, #24]	@ (80089ac <prvResetNextTaskUnblockTime+0x20>)
 8008994:	b919      	cbnz	r1, 800899e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008996:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800899a:	601a      	str	r2, [r3, #0]
}
 800899c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800899e:	6812      	ldr	r2, [r2, #0]
 80089a0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089a2:	68d2      	ldr	r2, [r2, #12]
 80089a4:	6852      	ldr	r2, [r2, #4]
 80089a6:	e7f8      	b.n	800899a <prvResetNextTaskUnblockTime+0xe>
 80089a8:	20001bd0 	.word	0x20001bd0
 80089ac:	20001b68 	.word	0x20001b68

080089b0 <prvDeleteTCB>:
	{
 80089b0:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80089b2:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
	{
 80089b6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80089b8:	b93b      	cbnz	r3, 80089ca <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80089ba:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80089bc:	f001 f812 	bl	80099e4 <vPortFree>
				vPortFree( pxTCB );
 80089c0:	4620      	mov	r0, r4
	}
 80089c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80089c6:	f001 b80d 	b.w	80099e4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d0f9      	beq.n	80089c2 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d008      	beq.n	80089e4 <prvDeleteTCB+0x34>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	e7fe      	b.n	80089e2 <prvDeleteTCB+0x32>
	}
 80089e4:	bd10      	pop	{r4, pc}
	...

080089e8 <prvIdleTask>:
{
 80089e8:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089ea:	4c13      	ldr	r4, [pc, #76]	@ (8008a38 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80089ec:	4f13      	ldr	r7, [pc, #76]	@ (8008a3c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80089ee:	4d14      	ldr	r5, [pc, #80]	@ (8008a40 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	b973      	cbnz	r3, 8008a12 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089f4:	4b13      	ldr	r3, [pc, #76]	@ (8008a44 <prvIdleTask+0x5c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d9f8      	bls.n	80089ee <prvIdleTask+0x6>
				taskYIELD();
 80089fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008a00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a04:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	e7ed      	b.n	80089ee <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8008a12:	f000 fdef 	bl	80095f4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a1a:	1d30      	adds	r0, r6, #4
 8008a1c:	f7ff fb4e 	bl	80080bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a20:	682b      	ldr	r3, [r5, #0]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008a2c:	f000 fe02 	bl	8009634 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008a30:	4630      	mov	r0, r6
 8008a32:	f7ff ffbd 	bl	80089b0 <prvDeleteTCB>
 8008a36:	e7db      	b.n	80089f0 <prvIdleTask+0x8>
 8008a38:	20001ba0 	.word	0x20001ba0
 8008a3c:	20001ba4 	.word	0x20001ba4
 8008a40:	20001b88 	.word	0x20001b88
 8008a44:	20001bfc 	.word	0x20001bfc

08008a48 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a4c:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a50:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008a52:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a54:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008a56:	4607      	mov	r7, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a58:	21a5      	movs	r1, #165	@ 0xa5
 8008a5a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008a5c:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a5e:	f002 ff75 	bl	800b94c <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008a62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008a64:	3e04      	subs	r6, #4
 8008a66:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008a68:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a6c:	1e6b      	subs	r3, r5, #1
 8008a6e:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8008a72:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a74:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008a78:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8008a7c:	b109      	cbz	r1, 8008a82 <prvInitialiseNewTask.constprop.0+0x3a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a7e:	42ab      	cmp	r3, r5
 8008a80:	d1f8      	bne.n	8008a74 <prvInitialiseNewTask.constprop.0+0x2c>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a82:	9d08      	ldr	r5, [sp, #32]
 8008a84:	2d37      	cmp	r5, #55	@ 0x37
 8008a86:	bf28      	it	cs
 8008a88:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a8a:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 8008a8e:	e9c4 5a13 	strd	r5, sl, [r4, #76]	@ 0x4c
	pxNewTCB->uxPriority = uxPriority;
 8008a92:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a94:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a96:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a9a:	f7ff faea 	bl	8008072 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a9e:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008aa2:	f104 0018 	add.w	r0, r4, #24
 8008aa6:	f7ff fae4 	bl	8008072 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8008aaa:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008aae:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ab0:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ab2:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ab4:	f884 a058 	strb.w	sl, [r4, #88]	@ 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ab8:	4642      	mov	r2, r8
 8008aba:	4639      	mov	r1, r7
 8008abc:	4630      	mov	r0, r6
 8008abe:	f000 fd6b 	bl	8009598 <pxPortInitialiseStack>
 8008ac2:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8008ac4:	f1b9 0f00 	cmp.w	r9, #0
 8008ac8:	d001      	beq.n	8008ace <prvInitialiseNewTask.constprop.0+0x86>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008aca:	f8c9 4000 	str.w	r4, [r9]
}
 8008ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008ad2 <xTaskCreateStatic>:
	{
 8008ad2:	b570      	push	{r4, r5, r6, lr}
 8008ad4:	b086      	sub	sp, #24
 8008ad6:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008ada:	b945      	cbnz	r5, 8008aee <xTaskCreateStatic+0x1c>
 8008adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	e7fe      	b.n	8008aec <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8008aee:	b944      	cbnz	r4, 8008b02 <xTaskCreateStatic+0x30>
 8008af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	e7fe      	b.n	8008b00 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b02:	265c      	movs	r6, #92	@ 0x5c
 8008b04:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b06:	9e05      	ldr	r6, [sp, #20]
 8008b08:	2e5c      	cmp	r6, #92	@ 0x5c
 8008b0a:	d008      	beq.n	8008b1e <xTaskCreateStatic+0x4c>
 8008b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	e7fe      	b.n	8008b1c <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b1e:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b20:	2502      	movs	r5, #2
 8008b22:	f884 5059 	strb.w	r5, [r4, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b26:	ad04      	add	r5, sp, #16
 8008b28:	9501      	str	r5, [sp, #4]
 8008b2a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008b2c:	9402      	str	r4, [sp, #8]
 8008b2e:	9500      	str	r5, [sp, #0]
 8008b30:	f7ff ff8a 	bl	8008a48 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b34:	4620      	mov	r0, r4
 8008b36:	f7ff fe71 	bl	800881c <prvAddNewTaskToReadyList>
	}
 8008b3a:	9804      	ldr	r0, [sp, #16]
 8008b3c:	b006      	add	sp, #24
 8008b3e:	bd70      	pop	{r4, r5, r6, pc}

08008b40 <xTaskCreate>:
	{
 8008b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b44:	4607      	mov	r7, r0
 8008b46:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b48:	0090      	lsls	r0, r2, #2
	{
 8008b4a:	4688      	mov	r8, r1
 8008b4c:	4616      	mov	r6, r2
 8008b4e:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b50:	f000 feb6 	bl	80098c0 <pvPortMalloc>
			if( pxStack != NULL )
 8008b54:	4605      	mov	r5, r0
 8008b56:	b920      	cbnz	r0, 8008b62 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b58:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008b5c:	b005      	add	sp, #20
 8008b5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008b62:	205c      	movs	r0, #92	@ 0x5c
 8008b64:	f000 feac 	bl	80098c0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008b68:	4604      	mov	r4, r0
 8008b6a:	b198      	cbz	r0, 8008b94 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8008b74:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b76:	9301      	str	r3, [sp, #4]
 8008b78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b7a:	9002      	str	r0, [sp, #8]
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	4632      	mov	r2, r6
 8008b80:	464b      	mov	r3, r9
 8008b82:	4641      	mov	r1, r8
 8008b84:	4638      	mov	r0, r7
 8008b86:	f7ff ff5f 	bl	8008a48 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f7ff fe46 	bl	800881c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b90:	2001      	movs	r0, #1
 8008b92:	e7e3      	b.n	8008b5c <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8008b94:	4628      	mov	r0, r5
 8008b96:	f000 ff25 	bl	80099e4 <vPortFree>
		if( pxNewTCB != NULL )
 8008b9a:	e7dd      	b.n	8008b58 <xTaskCreate+0x18>

08008b9c <vTaskStartScheduler>:
{
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ba0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ba2:	aa07      	add	r2, sp, #28
 8008ba4:	a906      	add	r1, sp, #24
 8008ba6:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ba8:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008bac:	f7ff fa3e 	bl	800802c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008bb0:	9b05      	ldr	r3, [sp, #20]
 8008bb2:	9302      	str	r3, [sp, #8]
 8008bb4:	9b06      	ldr	r3, [sp, #24]
 8008bb6:	9a07      	ldr	r2, [sp, #28]
 8008bb8:	4916      	ldr	r1, [pc, #88]	@ (8008c14 <vTaskStartScheduler+0x78>)
 8008bba:	4817      	ldr	r0, [pc, #92]	@ (8008c18 <vTaskStartScheduler+0x7c>)
 8008bbc:	e9cd 4300 	strd	r4, r3, [sp]
 8008bc0:	4623      	mov	r3, r4
 8008bc2:	f7ff ff86 	bl	8008ad2 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008bc6:	b318      	cbz	r0, 8008c10 <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 8008bc8:	f000 fb1e 	bl	8009208 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008bcc:	2801      	cmp	r0, #1
 8008bce:	d114      	bne.n	8008bfa <vTaskStartScheduler+0x5e>
 8008bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8008be0:	4b0e      	ldr	r3, [pc, #56]	@ (8008c1c <vTaskStartScheduler+0x80>)
 8008be2:	f04f 32ff 	mov.w	r2, #4294967295
 8008be6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008be8:	4b0d      	ldr	r3, [pc, #52]	@ (8008c20 <vTaskStartScheduler+0x84>)
 8008bea:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008bec:	4b0d      	ldr	r3, [pc, #52]	@ (8008c24 <vTaskStartScheduler+0x88>)
 8008bee:	601c      	str	r4, [r3, #0]
}
 8008bf0:	b008      	add	sp, #32
 8008bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008bf6:	f000 bd8d 	b.w	8009714 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	d108      	bne.n	8008c10 <vTaskStartScheduler+0x74>
 8008bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	e7fe      	b.n	8008c0e <vTaskStartScheduler+0x72>
}
 8008c10:	b008      	add	sp, #32
 8008c12:	bd10      	pop	{r4, pc}
 8008c14:	080119b8 	.word	0x080119b8
 8008c18:	080089e9 	.word	0x080089e9
 8008c1c:	20001b68 	.word	0x20001b68
 8008c20:	20001b7c 	.word	0x20001b7c
 8008c24:	20001b84 	.word	0x20001b84

08008c28 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008c28:	4a02      	ldr	r2, [pc, #8]	@ (8008c34 <vTaskSuspendAll+0xc>)
 8008c2a:	6813      	ldr	r3, [r2, #0]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	6013      	str	r3, [r2, #0]
}
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	20001b64 	.word	0x20001b64

08008c38 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008c38:	4b01      	ldr	r3, [pc, #4]	@ (8008c40 <xTaskGetTickCount+0x8>)
 8008c3a:	6818      	ldr	r0, [r3, #0]
}
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	20001b84 	.word	0x20001b84

08008c44 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c44:	4b3f      	ldr	r3, [pc, #252]	@ (8008d44 <xTaskIncrementTick+0x100>)
 8008c46:	681b      	ldr	r3, [r3, #0]
{
 8008c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d171      	bne.n	8008d34 <xTaskIncrementTick+0xf0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c50:	4b3d      	ldr	r3, [pc, #244]	@ (8008d48 <xTaskIncrementTick+0x104>)
 8008c52:	681c      	ldr	r4, [r3, #0]
 8008c54:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8008c56:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c58:	b9bc      	cbnz	r4, 8008c8a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008c5a:	4b3c      	ldr	r3, [pc, #240]	@ (8008d4c <xTaskIncrementTick+0x108>)
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	6812      	ldr	r2, [r2, #0]
 8008c60:	b142      	cbz	r2, 8008c74 <xTaskIncrementTick+0x30>
 8008c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	e7fe      	b.n	8008c72 <xTaskIncrementTick+0x2e>
 8008c74:	4a36      	ldr	r2, [pc, #216]	@ (8008d50 <xTaskIncrementTick+0x10c>)
 8008c76:	6819      	ldr	r1, [r3, #0]
 8008c78:	6810      	ldr	r0, [r2, #0]
 8008c7a:	6018      	str	r0, [r3, #0]
 8008c7c:	6011      	str	r1, [r2, #0]
 8008c7e:	4a35      	ldr	r2, [pc, #212]	@ (8008d54 <xTaskIncrementTick+0x110>)
 8008c80:	6813      	ldr	r3, [r2, #0]
 8008c82:	3301      	adds	r3, #1
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	f7ff fe81 	bl	800898c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c8a:	4d33      	ldr	r5, [pc, #204]	@ (8008d58 <xTaskIncrementTick+0x114>)
 8008c8c:	4e33      	ldr	r6, [pc, #204]	@ (8008d5c <xTaskIncrementTick+0x118>)
 8008c8e:	682b      	ldr	r3, [r5, #0]
 8008c90:	4f33      	ldr	r7, [pc, #204]	@ (8008d60 <xTaskIncrementTick+0x11c>)
 8008c92:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 8008c94:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c98:	d911      	bls.n	8008cbe <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008c9e:	2114      	movs	r1, #20
 8008ca0:	434a      	muls	r2, r1
 8008ca2:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8008ca4:	2a02      	cmp	r2, #2
 8008ca6:	bf28      	it	cs
 8008ca8:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8008cac:	4a2d      	ldr	r2, [pc, #180]	@ (8008d64 <xTaskIncrementTick+0x120>)
 8008cae:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8008cb0:	2a00      	cmp	r2, #0
}
 8008cb2:	bf0c      	ite	eq
 8008cb4:	4658      	moveq	r0, fp
 8008cb6:	2001      	movne	r0, #1
 8008cb8:	b003      	add	sp, #12
 8008cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cbe:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8008d4c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8008cc2:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 8008d6c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cc6:	f8d9 2000 	ldr.w	r2, [r9]
 8008cca:	6812      	ldr	r2, [r2, #0]
 8008ccc:	b91a      	cbnz	r2, 8008cd6 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cce:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd2:	602a      	str	r2, [r5, #0]
					break;
 8008cd4:	e7e1      	b.n	8008c9a <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008cd6:	f8d9 2000 	ldr.w	r2, [r9]
 8008cda:	68d2      	ldr	r2, [r2, #12]
 8008cdc:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ce0:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8008ce4:	428c      	cmp	r4, r1
 8008ce6:	d201      	bcs.n	8008cec <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8008ce8:	6029      	str	r1, [r5, #0]
						break;
 8008cea:	e7d6      	b.n	8008c9a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cec:	f108 0304 	add.w	r3, r8, #4
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	9301      	str	r3, [sp, #4]
 8008cf4:	f7ff f9e2 	bl	80080bc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cf8:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8008cfc:	b119      	cbz	r1, 8008d06 <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cfe:	f108 0018 	add.w	r0, r8, #24
 8008d02:	f7ff f9db 	bl	80080bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d06:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8008d0a:	f8da 1000 	ldr.w	r1, [sl]
 8008d0e:	2314      	movs	r3, #20
 8008d10:	4288      	cmp	r0, r1
 8008d12:	bf88      	it	hi
 8008d14:	f8ca 0000 	strhi.w	r0, [sl]
 8008d18:	9901      	ldr	r1, [sp, #4]
 8008d1a:	fb03 6000 	mla	r0, r3, r0, r6
 8008d1e:	f7ff f9ab 	bl	8008078 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d22:	6838      	ldr	r0, [r7, #0]
 8008d24:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8008d28:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8008d2a:	4291      	cmp	r1, r2
 8008d2c:	bf28      	it	cs
 8008d2e:	f04f 0b01 	movcs.w	fp, #1
 8008d32:	e7c8      	b.n	8008cc6 <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 8008d34:	4a0c      	ldr	r2, [pc, #48]	@ (8008d68 <xTaskIncrementTick+0x124>)
 8008d36:	6813      	ldr	r3, [r2, #0]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8008d3c:	f04f 0b00 	mov.w	fp, #0
 8008d40:	e7b4      	b.n	8008cac <xTaskIncrementTick+0x68>
 8008d42:	bf00      	nop
 8008d44:	20001b64 	.word	0x20001b64
 8008d48:	20001b84 	.word	0x20001b84
 8008d4c:	20001bd0 	.word	0x20001bd0
 8008d50:	20001bcc 	.word	0x20001bcc
 8008d54:	20001b70 	.word	0x20001b70
 8008d58:	20001b68 	.word	0x20001b68
 8008d5c:	20001bfc 	.word	0x20001bfc
 8008d60:	2000205c 	.word	0x2000205c
 8008d64:	20001b74 	.word	0x20001b74
 8008d68:	20001b78 	.word	0x20001b78
 8008d6c:	20001b80 	.word	0x20001b80

08008d70 <xTaskResumeAll>:
{
 8008d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8008d74:	4c30      	ldr	r4, [pc, #192]	@ (8008e38 <xTaskResumeAll+0xc8>)
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	b943      	cbnz	r3, 8008d8c <xTaskResumeAll+0x1c>
 8008d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	e7fe      	b.n	8008d8a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8008d8c:	f000 fc32 	bl	80095f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	3b01      	subs	r3, #1
 8008d94:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d96:	6824      	ldr	r4, [r4, #0]
 8008d98:	b12c      	cbz	r4, 8008da6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8008d9a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008d9c:	f000 fc4a 	bl	8009634 <vPortExitCritical>
}
 8008da0:	4620      	mov	r0, r4
 8008da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008da6:	4b25      	ldr	r3, [pc, #148]	@ (8008e3c <xTaskResumeAll+0xcc>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d0f5      	beq.n	8008d9a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dae:	4d24      	ldr	r5, [pc, #144]	@ (8008e40 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8008db0:	4e24      	ldr	r6, [pc, #144]	@ (8008e44 <xTaskResumeAll+0xd4>)
 8008db2:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8008e54 <xTaskResumeAll+0xe4>
 8008db6:	e01d      	b.n	8008df4 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008db8:	68eb      	ldr	r3, [r5, #12]
 8008dba:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dbc:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dbe:	f104 0018 	add.w	r0, r4, #24
 8008dc2:	f7ff f97b 	bl	80080bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	f7ff f978 	bl	80080bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008dcc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008dce:	6832      	ldr	r2, [r6, #0]
 8008dd0:	2014      	movs	r0, #20
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	fb00 8003 	mla	r0, r0, r3, r8
 8008dd8:	4639      	mov	r1, r7
 8008dda:	bf88      	it	hi
 8008ddc:	6033      	strhi	r3, [r6, #0]
 8008dde:	f7ff f94b 	bl	8008078 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008de2:	4b19      	ldr	r3, [pc, #100]	@ (8008e48 <xTaskResumeAll+0xd8>)
 8008de4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d302      	bcc.n	8008df4 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8008dee:	4b17      	ldr	r3, [pc, #92]	@ (8008e4c <xTaskResumeAll+0xdc>)
 8008df0:	2201      	movs	r2, #1
 8008df2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008df4:	682b      	ldr	r3, [r5, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1de      	bne.n	8008db8 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008dfa:	b10c      	cbz	r4, 8008e00 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8008dfc:	f7ff fdc6 	bl	800898c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008e00:	4d13      	ldr	r5, [pc, #76]	@ (8008e50 <xTaskResumeAll+0xe0>)
 8008e02:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008e04:	b144      	cbz	r4, 8008e18 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8008e06:	4e11      	ldr	r6, [pc, #68]	@ (8008e4c <xTaskResumeAll+0xdc>)
 8008e08:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8008e0a:	f7ff ff1b 	bl	8008c44 <xTaskIncrementTick>
 8008e0e:	b100      	cbz	r0, 8008e12 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8008e10:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008e12:	3c01      	subs	r4, #1
 8008e14:	d1f9      	bne.n	8008e0a <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 8008e16:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008e18:	4b0c      	ldr	r3, [pc, #48]	@ (8008e4c <xTaskResumeAll+0xdc>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d0bc      	beq.n	8008d9a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8008e20:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008e24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e28:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008e34:	2401      	movs	r4, #1
 8008e36:	e7b1      	b.n	8008d9c <xTaskResumeAll+0x2c>
 8008e38:	20001b64 	.word	0x20001b64
 8008e3c:	20001b88 	.word	0x20001b88
 8008e40:	20001bb8 	.word	0x20001bb8
 8008e44:	20001b80 	.word	0x20001b80
 8008e48:	2000205c 	.word	0x2000205c
 8008e4c:	20001b74 	.word	0x20001b74
 8008e50:	20001b78 	.word	0x20001b78
 8008e54:	20001bfc 	.word	0x20001bfc

08008e58 <vTaskDelay>:
	{
 8008e58:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e5a:	b950      	cbnz	r0, 8008e72 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008e5c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008e60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e64:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	f3bf 8f6f 	isb	sy
	}
 8008e70:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008e72:	4b0a      	ldr	r3, [pc, #40]	@ (8008e9c <vTaskDelay+0x44>)
 8008e74:	6819      	ldr	r1, [r3, #0]
 8008e76:	b141      	cbz	r1, 8008e8a <vTaskDelay+0x32>
 8008e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	e7fe      	b.n	8008e88 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008e8a:	f7ff fecd 	bl	8008c28 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e8e:	f7ff fd45 	bl	800891c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008e92:	f7ff ff6d 	bl	8008d70 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d0e0      	beq.n	8008e5c <vTaskDelay+0x4>
 8008e9a:	e7e9      	b.n	8008e70 <vTaskDelay+0x18>
 8008e9c:	20001b64 	.word	0x20001b64

08008ea0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ea0:	4b17      	ldr	r3, [pc, #92]	@ (8008f00 <vTaskSwitchContext+0x60>)
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	4b17      	ldr	r3, [pc, #92]	@ (8008f04 <vTaskSwitchContext+0x64>)
{
 8008ea6:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ea8:	b112      	cbz	r2, 8008eb0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008eaa:	2201      	movs	r2, #1
 8008eac:	601a      	str	r2, [r3, #0]
}
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008eb0:	4d15      	ldr	r5, [pc, #84]	@ (8008f08 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 8008eb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008eb4:	682a      	ldr	r2, [r5, #0]
 8008eb6:	4915      	ldr	r1, [pc, #84]	@ (8008f0c <vTaskSwitchContext+0x6c>)
 8008eb8:	2614      	movs	r6, #20
 8008eba:	fb06 f302 	mul.w	r3, r6, r2
 8008ebe:	18c8      	adds	r0, r1, r3
 8008ec0:	58cc      	ldr	r4, [r1, r3]
 8008ec2:	b18c      	cbz	r4, 8008ee8 <vTaskSwitchContext+0x48>
 8008ec4:	6844      	ldr	r4, [r0, #4]
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	6864      	ldr	r4, [r4, #4]
 8008eca:	6044      	str	r4, [r0, #4]
 8008ecc:	440b      	add	r3, r1
 8008ece:	429c      	cmp	r4, r3
 8008ed0:	bf04      	itt	eq
 8008ed2:	6863      	ldreq	r3, [r4, #4]
 8008ed4:	6043      	streq	r3, [r0, #4]
 8008ed6:	2314      	movs	r3, #20
 8008ed8:	fb03 1102 	mla	r1, r3, r2, r1
 8008edc:	684b      	ldr	r3, [r1, #4]
 8008ede:	68d9      	ldr	r1, [r3, #12]
 8008ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8008f10 <vTaskSwitchContext+0x70>)
 8008ee2:	6019      	str	r1, [r3, #0]
 8008ee4:	602a      	str	r2, [r5, #0]
}
 8008ee6:	e7e2      	b.n	8008eae <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008ee8:	b942      	cbnz	r2, 8008efc <vTaskSwitchContext+0x5c>
 8008eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	e7fe      	b.n	8008efa <vTaskSwitchContext+0x5a>
 8008efc:	3a01      	subs	r2, #1
 8008efe:	e7dc      	b.n	8008eba <vTaskSwitchContext+0x1a>
 8008f00:	20001b64 	.word	0x20001b64
 8008f04:	20001b74 	.word	0x20001b74
 8008f08:	20001b80 	.word	0x20001b80
 8008f0c:	20001bfc 	.word	0x20001bfc
 8008f10:	2000205c 	.word	0x2000205c

08008f14 <vTaskPlaceOnEventList>:
{
 8008f14:	b510      	push	{r4, lr}
 8008f16:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008f18:	b940      	cbnz	r0, 8008f2c <vTaskPlaceOnEventList+0x18>
 8008f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	e7fe      	b.n	8008f2a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f2c:	4b05      	ldr	r3, [pc, #20]	@ (8008f44 <vTaskPlaceOnEventList+0x30>)
 8008f2e:	6819      	ldr	r1, [r3, #0]
 8008f30:	3118      	adds	r1, #24
 8008f32:	f7ff f8ac 	bl	800808e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f36:	4620      	mov	r0, r4
 8008f38:	2101      	movs	r1, #1
}
 8008f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f3e:	f7ff bced 	b.w	800891c <prvAddCurrentTaskToDelayedList>
 8008f42:	bf00      	nop
 8008f44:	2000205c 	.word	0x2000205c

08008f48 <vTaskPlaceOnEventListRestricted>:
	{
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	460d      	mov	r5, r1
 8008f4c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8008f4e:	b940      	cbnz	r0, 8008f62 <vTaskPlaceOnEventListRestricted+0x1a>
 8008f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	e7fe      	b.n	8008f60 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f62:	4b07      	ldr	r3, [pc, #28]	@ (8008f80 <vTaskPlaceOnEventListRestricted+0x38>)
 8008f64:	6819      	ldr	r1, [r3, #0]
 8008f66:	3118      	adds	r1, #24
 8008f68:	f7ff f886 	bl	8008078 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008f6c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f6e:	4621      	mov	r1, r4
 8008f70:	bf0c      	ite	eq
 8008f72:	4628      	moveq	r0, r5
 8008f74:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8008f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f7c:	f7ff bcce 	b.w	800891c <prvAddCurrentTaskToDelayedList>
 8008f80:	2000205c 	.word	0x2000205c

08008f84 <xTaskRemoveFromEventList>:
{
 8008f84:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008f86:	68c3      	ldr	r3, [r0, #12]
 8008f88:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008f8a:	b944      	cbnz	r4, 8008f9e <xTaskRemoveFromEventList+0x1a>
 8008f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	e7fe      	b.n	8008f9c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f9e:	f104 0518 	add.w	r5, r4, #24
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f7ff f88a 	bl	80080bc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fa8:	4b10      	ldr	r3, [pc, #64]	@ (8008fec <xTaskRemoveFromEventList+0x68>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	b9db      	cbnz	r3, 8008fe6 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008fae:	1d25      	adds	r5, r4, #4
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	f7ff f883 	bl	80080bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8008ff0 <xTaskRemoveFromEventList+0x6c>)
 8008fb8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008fba:	6811      	ldr	r1, [r2, #0]
 8008fbc:	428b      	cmp	r3, r1
 8008fbe:	bf88      	it	hi
 8008fc0:	6013      	strhi	r3, [r2, #0]
 8008fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8008ff4 <xTaskRemoveFromEventList+0x70>)
 8008fc4:	2014      	movs	r0, #20
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fcc:	f7ff f854 	bl	8008078 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fd0:	4b09      	ldr	r3, [pc, #36]	@ (8008ff8 <xTaskRemoveFromEventList+0x74>)
 8008fd2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd8:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8008fda:	bf83      	ittte	hi
 8008fdc:	4b07      	ldrhi	r3, [pc, #28]	@ (8008ffc <xTaskRemoveFromEventList+0x78>)
 8008fde:	2001      	movhi	r0, #1
 8008fe0:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8008fe2:	2000      	movls	r0, #0
}
 8008fe4:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fe6:	4806      	ldr	r0, [pc, #24]	@ (8009000 <xTaskRemoveFromEventList+0x7c>)
 8008fe8:	4629      	mov	r1, r5
 8008fea:	e7ef      	b.n	8008fcc <xTaskRemoveFromEventList+0x48>
 8008fec:	20001b64 	.word	0x20001b64
 8008ff0:	20001b80 	.word	0x20001b80
 8008ff4:	20001bfc 	.word	0x20001bfc
 8008ff8:	2000205c 	.word	0x2000205c
 8008ffc:	20001b74 	.word	0x20001b74
 8009000:	20001bb8 	.word	0x20001bb8

08009004 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009004:	4b03      	ldr	r3, [pc, #12]	@ (8009014 <vTaskInternalSetTimeOutState+0x10>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800900a:	4b03      	ldr	r3, [pc, #12]	@ (8009018 <vTaskInternalSetTimeOutState+0x14>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6043      	str	r3, [r0, #4]
}
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	20001b70 	.word	0x20001b70
 8009018:	20001b84 	.word	0x20001b84

0800901c <xTaskCheckForTimeOut>:
{
 800901c:	b570      	push	{r4, r5, r6, lr}
 800901e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8009020:	4605      	mov	r5, r0
 8009022:	b940      	cbnz	r0, 8009036 <xTaskCheckForTimeOut+0x1a>
 8009024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	e7fe      	b.n	8009034 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8009036:	b941      	cbnz	r1, 800904a <xTaskCheckForTimeOut+0x2e>
 8009038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	e7fe      	b.n	8009048 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800904a:	f000 fad3 	bl	80095f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800904e:	4b0f      	ldr	r3, [pc, #60]	@ (800908c <xTaskCheckForTimeOut+0x70>)
 8009050:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	1c5a      	adds	r2, r3, #1
 8009056:	d010      	beq.n	800907a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009058:	480d      	ldr	r0, [pc, #52]	@ (8009090 <xTaskCheckForTimeOut+0x74>)
 800905a:	682e      	ldr	r6, [r5, #0]
 800905c:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800905e:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009060:	4286      	cmp	r6, r0
 8009062:	d001      	beq.n	8009068 <xTaskCheckForTimeOut+0x4c>
 8009064:	428a      	cmp	r2, r1
 8009066:	d90f      	bls.n	8009088 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009068:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800906a:	4283      	cmp	r3, r0
 800906c:	d90a      	bls.n	8009084 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800906e:	1a5b      	subs	r3, r3, r1
 8009070:	4413      	add	r3, r2
 8009072:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009074:	4628      	mov	r0, r5
 8009076:	f7ff ffc5 	bl	8009004 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800907a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800907c:	f000 fada 	bl	8009634 <vPortExitCritical>
}
 8009080:	4620      	mov	r0, r4
 8009082:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009088:	2401      	movs	r4, #1
 800908a:	e7f7      	b.n	800907c <xTaskCheckForTimeOut+0x60>
 800908c:	20001b84 	.word	0x20001b84
 8009090:	20001b70 	.word	0x20001b70

08009094 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009094:	4b01      	ldr	r3, [pc, #4]	@ (800909c <vTaskMissedYield+0x8>)
 8009096:	2201      	movs	r2, #1
 8009098:	601a      	str	r2, [r3, #0]
}
 800909a:	4770      	bx	lr
 800909c:	20001b74 	.word	0x20001b74

080090a0 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 80090a0:	b908      	cbnz	r0, 80090a6 <uxTaskGetStackHighWaterMark+0x6>
 80090a2:	4b06      	ldr	r3, [pc, #24]	@ (80090bc <uxTaskGetStackHighWaterMark+0x1c>)
 80090a4:	6818      	ldr	r0, [r3, #0]
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80090a6:	6b02      	ldr	r2, [r0, #48]	@ 0x30
	uint32_t ulCount = 0U;
 80090a8:	2000      	movs	r0, #0
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80090aa:	5c13      	ldrb	r3, [r2, r0]
 80090ac:	2ba5      	cmp	r3, #165	@ 0xa5
 80090ae:	d002      	beq.n	80090b6 <uxTaskGetStackHighWaterMark+0x16>
	}
 80090b0:	f3c0 008f 	ubfx	r0, r0, #2, #16
 80090b4:	4770      	bx	lr
			ulCount++;
 80090b6:	3001      	adds	r0, #1
 80090b8:	e7f7      	b.n	80090aa <uxTaskGetStackHighWaterMark+0xa>
 80090ba:	bf00      	nop
 80090bc:	2000205c 	.word	0x2000205c

080090c0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80090c0:	4b05      	ldr	r3, [pc, #20]	@ (80090d8 <xTaskGetSchedulerState+0x18>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	b133      	cbz	r3, 80090d4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090c6:	4b05      	ldr	r3, [pc, #20]	@ (80090dc <xTaskGetSchedulerState+0x1c>)
 80090c8:	6818      	ldr	r0, [r3, #0]
 80090ca:	fab0 f080 	clz	r0, r0
 80090ce:	0940      	lsrs	r0, r0, #5
 80090d0:	0040      	lsls	r0, r0, #1
 80090d2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80090d4:	2001      	movs	r0, #1
	}
 80090d6:	4770      	bx	lr
 80090d8:	20001b7c 	.word	0x20001b7c
 80090dc:	20001b64 	.word	0x20001b64

080090e0 <xTaskPriorityDisinherit>:
	{
 80090e0:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 80090e2:	b908      	cbnz	r0, 80090e8 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 80090e4:	2000      	movs	r0, #0
	}
 80090e6:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80090e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009158 <xTaskPriorityDisinherit+0x78>)
 80090ea:	681c      	ldr	r4, [r3, #0]
 80090ec:	4284      	cmp	r4, r0
 80090ee:	d008      	beq.n	8009102 <xTaskPriorityDisinherit+0x22>
 80090f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	e7fe      	b.n	8009100 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8009102:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009104:	b943      	cbnz	r3, 8009118 <xTaskPriorityDisinherit+0x38>
 8009106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	e7fe      	b.n	8009116 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009118:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800911a:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800911c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800911e:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8009120:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009122:	d0df      	beq.n	80090e4 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1dd      	bne.n	80090e4 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009128:	1d25      	adds	r5, r4, #4
 800912a:	4628      	mov	r0, r5
 800912c:	f7fe ffc6 	bl	80080bc <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009130:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009132:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009134:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009138:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800913a:	4a08      	ldr	r2, [pc, #32]	@ (800915c <xTaskPriorityDisinherit+0x7c>)
 800913c:	6811      	ldr	r1, [r2, #0]
 800913e:	428b      	cmp	r3, r1
 8009140:	bf88      	it	hi
 8009142:	6013      	strhi	r3, [r2, #0]
 8009144:	4a06      	ldr	r2, [pc, #24]	@ (8009160 <xTaskPriorityDisinherit+0x80>)
 8009146:	2014      	movs	r0, #20
 8009148:	fb00 2003 	mla	r0, r0, r3, r2
 800914c:	4629      	mov	r1, r5
 800914e:	f7fe ff93 	bl	8008078 <vListInsertEnd>
					xReturn = pdTRUE;
 8009152:	2001      	movs	r0, #1
		return xReturn;
 8009154:	e7c7      	b.n	80090e6 <xTaskPriorityDisinherit+0x6>
 8009156:	bf00      	nop
 8009158:	2000205c 	.word	0x2000205c
 800915c:	20001b80 	.word	0x20001b80
 8009160:	20001bfc 	.word	0x20001bfc

08009164 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8009164:	4291      	cmp	r1, r2
{
 8009166:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009168:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800916a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800916c:	d80a      	bhi.n	8009184 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800916e:	1ad2      	subs	r2, r2, r3
 8009170:	6983      	ldr	r3, [r0, #24]
 8009172:	429a      	cmp	r2, r3
 8009174:	d20d      	bcs.n	8009192 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009176:	4b08      	ldr	r3, [pc, #32]	@ (8009198 <prvInsertTimerInActiveList+0x34>)
 8009178:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800917a:	6818      	ldr	r0, [r3, #0]
 800917c:	f7fe ff87 	bl	800808e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009180:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8009182:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009184:	429a      	cmp	r2, r3
 8009186:	d201      	bcs.n	800918c <prvInsertTimerInActiveList+0x28>
 8009188:	4299      	cmp	r1, r3
 800918a:	d202      	bcs.n	8009192 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800918c:	4b03      	ldr	r3, [pc, #12]	@ (800919c <prvInsertTimerInActiveList+0x38>)
 800918e:	1d01      	adds	r1, r0, #4
 8009190:	e7f3      	b.n	800917a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8009192:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009194:	e7f5      	b.n	8009182 <prvInsertTimerInActiveList+0x1e>
 8009196:	bf00      	nop
 8009198:	2000215c 	.word	0x2000215c
 800919c:	20002160 	.word	0x20002160

080091a0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80091a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80091a2:	4c11      	ldr	r4, [pc, #68]	@ (80091e8 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80091a4:	f000 fa26 	bl	80095f4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80091a8:	6825      	ldr	r5, [r4, #0]
 80091aa:	b9bd      	cbnz	r5, 80091dc <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80091ac:	4f0f      	ldr	r7, [pc, #60]	@ (80091ec <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80091ae:	4e10      	ldr	r6, [pc, #64]	@ (80091f0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80091b0:	4638      	mov	r0, r7
 80091b2:	f7fe ff53 	bl	800805c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80091b6:	4630      	mov	r0, r6
 80091b8:	f7fe ff50 	bl	800805c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80091bc:	4b0d      	ldr	r3, [pc, #52]	@ (80091f4 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80091be:	4a0e      	ldr	r2, [pc, #56]	@ (80091f8 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 80091c0:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80091c2:	4b0e      	ldr	r3, [pc, #56]	@ (80091fc <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80091c4:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 80091c6:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80091c8:	200a      	movs	r0, #10
 80091ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009200 <prvCheckForValidListAndQueue+0x60>)
 80091cc:	9500      	str	r5, [sp, #0]
 80091ce:	f7ff f850 	bl	8008272 <xQueueGenericCreateStatic>
 80091d2:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80091d4:	b110      	cbz	r0, 80091dc <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80091d6:	490b      	ldr	r1, [pc, #44]	@ (8009204 <prvCheckForValidListAndQueue+0x64>)
 80091d8:	f7ff faea 	bl	80087b0 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80091dc:	b003      	add	sp, #12
 80091de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80091e2:	f000 ba27 	b.w	8009634 <vPortExitCritical>
 80091e6:	bf00      	nop
 80091e8:	20002158 	.word	0x20002158
 80091ec:	20002178 	.word	0x20002178
 80091f0:	20002164 	.word	0x20002164
 80091f4:	20002160 	.word	0x20002160
 80091f8:	200020b0 	.word	0x200020b0
 80091fc:	2000215c 	.word	0x2000215c
 8009200:	20002060 	.word	0x20002060
 8009204:	080119bd 	.word	0x080119bd

08009208 <xTimerCreateTimerTask>:
{
 8009208:	b510      	push	{r4, lr}
 800920a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800920c:	f7ff ffc8 	bl	80091a0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009210:	4b12      	ldr	r3, [pc, #72]	@ (800925c <xTimerCreateTimerTask+0x54>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	b1b3      	cbz	r3, 8009244 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009216:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009218:	aa07      	add	r2, sp, #28
 800921a:	a906      	add	r1, sp, #24
 800921c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800921e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009222:	f7fe ff0f 	bl	8008044 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009226:	9b05      	ldr	r3, [sp, #20]
 8009228:	9302      	str	r3, [sp, #8]
 800922a:	9b06      	ldr	r3, [sp, #24]
 800922c:	9301      	str	r3, [sp, #4]
 800922e:	2302      	movs	r3, #2
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	9a07      	ldr	r2, [sp, #28]
 8009234:	490a      	ldr	r1, [pc, #40]	@ (8009260 <xTimerCreateTimerTask+0x58>)
 8009236:	480b      	ldr	r0, [pc, #44]	@ (8009264 <xTimerCreateTimerTask+0x5c>)
 8009238:	4623      	mov	r3, r4
 800923a:	f7ff fc4a 	bl	8008ad2 <xTaskCreateStatic>
 800923e:	4b0a      	ldr	r3, [pc, #40]	@ (8009268 <xTimerCreateTimerTask+0x60>)
 8009240:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009242:	b940      	cbnz	r0, 8009256 <xTimerCreateTimerTask+0x4e>
 8009244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8009254:	e7fe      	b.n	8009254 <xTimerCreateTimerTask+0x4c>
}
 8009256:	2001      	movs	r0, #1
 8009258:	b008      	add	sp, #32
 800925a:	bd10      	pop	{r4, pc}
 800925c:	20002158 	.word	0x20002158
 8009260:	080119c2 	.word	0x080119c2
 8009264:	08009365 	.word	0x08009365
 8009268:	20002154 	.word	0x20002154

0800926c <xTimerGenericCommand>:
{
 800926c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800926e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8009270:	4604      	mov	r4, r0
{
 8009272:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8009274:	b940      	cbnz	r0, 8009288 <xTimerGenericCommand+0x1c>
 8009276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	e7fe      	b.n	8009286 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8009288:	4d0d      	ldr	r5, [pc, #52]	@ (80092c0 <xTimerGenericCommand+0x54>)
 800928a:	6828      	ldr	r0, [r5, #0]
 800928c:	b180      	cbz	r0, 80092b0 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800928e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009290:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009294:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009296:	dc0d      	bgt.n	80092b4 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009298:	f7ff ff12 	bl	80090c0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800929c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800929e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092a0:	bf08      	it	eq
 80092a2:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092a4:	6828      	ldr	r0, [r5, #0]
 80092a6:	bf18      	it	ne
 80092a8:	461a      	movne	r2, r3
 80092aa:	4669      	mov	r1, sp
 80092ac:	f7ff f855 	bl	800835a <xQueueGenericSend>
}
 80092b0:	b004      	add	sp, #16
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092b4:	2300      	movs	r3, #0
 80092b6:	4669      	mov	r1, sp
 80092b8:	f7ff f933 	bl	8008522 <xQueueGenericSendFromISR>
 80092bc:	e7f8      	b.n	80092b0 <xTimerGenericCommand+0x44>
 80092be:	bf00      	nop
 80092c0:	20002158 	.word	0x20002158

080092c4 <prvSampleTimeNow>:
{
 80092c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 80092c8:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 8009360 <prvSampleTimeNow+0x9c>
{
 80092cc:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 80092ce:	f7ff fcb3 	bl	8008c38 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80092d2:	f8d8 3000 	ldr.w	r3, [r8]
 80092d6:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 80092d8:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 80092da:	d909      	bls.n	80092f0 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092dc:	4f1e      	ldr	r7, [pc, #120]	@ (8009358 <prvSampleTimeNow+0x94>)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	b96a      	cbnz	r2, 8009300 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 80092e4:	4a1d      	ldr	r2, [pc, #116]	@ (800935c <prvSampleTimeNow+0x98>)
 80092e6:	6811      	ldr	r1, [r2, #0]
 80092e8:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 80092ea:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e000      	b.n	80092f2 <prvSampleTimeNow+0x2e>
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 80092f4:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80092f6:	f8c8 5000 	str.w	r5, [r8]
}
 80092fa:	b002      	add	sp, #8
 80092fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009300:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009302:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009304:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009308:	f104 0a04 	add.w	sl, r4, #4
 800930c:	4650      	mov	r0, sl
 800930e:	f7fe fed5 	bl	80080bc <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009312:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009314:	4620      	mov	r0, r4
 8009316:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009318:	69e3      	ldr	r3, [r4, #28]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d1df      	bne.n	80092de <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800931e:	69a3      	ldr	r3, [r4, #24]
 8009320:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8009322:	4599      	cmp	r9, r3
 8009324:	d206      	bcs.n	8009334 <prvSampleTimeNow+0x70>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009326:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009328:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800932a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800932c:	4651      	mov	r1, sl
 800932e:	f7fe feae 	bl	800808e <vListInsert>
 8009332:	e7d4      	b.n	80092de <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009334:	2300      	movs	r3, #0
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	464a      	mov	r2, r9
 800933a:	4619      	mov	r1, r3
 800933c:	4620      	mov	r0, r4
 800933e:	f7ff ff95 	bl	800926c <xTimerGenericCommand>
				configASSERT( xResult );
 8009342:	2800      	cmp	r0, #0
 8009344:	d1cb      	bne.n	80092de <prvSampleTimeNow+0x1a>
 8009346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	e7fe      	b.n	8009356 <prvSampleTimeNow+0x92>
 8009358:	20002160 	.word	0x20002160
 800935c:	2000215c 	.word	0x2000215c
 8009360:	20002150 	.word	0x20002150

08009364 <prvTimerTask>:
{
 8009364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009368:	4e69      	ldr	r6, [pc, #420]	@ (8009510 <prvTimerTask+0x1ac>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800936a:	4f6a      	ldr	r7, [pc, #424]	@ (8009514 <prvTimerTask+0x1b0>)
{
 800936c:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800936e:	6833      	ldr	r3, [r6, #0]
 8009370:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009372:	2d00      	cmp	r5, #0
 8009374:	d033      	beq.n	80093de <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800937c:	f7ff fc54 	bl	8008c28 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009380:	a804      	add	r0, sp, #16
 8009382:	f7ff ff9f 	bl	80092c4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009386:	9c04      	ldr	r4, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009388:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800938a:	2c00      	cmp	r4, #0
 800938c:	d175      	bne.n	800947a <prvTimerTask+0x116>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800938e:	2d00      	cmp	r5, #0
 8009390:	d058      	beq.n	8009444 <prvTimerTask+0xe0>
 8009392:	4540      	cmp	r0, r8
 8009394:	d35c      	bcc.n	8009450 <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 8009396:	f7ff fceb 	bl	8008d70 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800939a:	6833      	ldr	r3, [r6, #0]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093a0:	1d28      	adds	r0, r5, #4
 80093a2:	f7fe fe8b 	bl	80080bc <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80093a6:	69eb      	ldr	r3, [r5, #28]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d11a      	bne.n	80093e2 <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80093ac:	69a9      	ldr	r1, [r5, #24]
 80093ae:	4643      	mov	r3, r8
 80093b0:	464a      	mov	r2, r9
 80093b2:	4441      	add	r1, r8
 80093b4:	4628      	mov	r0, r5
 80093b6:	f7ff fed5 	bl	8009164 <prvInsertTimerInActiveList>
 80093ba:	b190      	cbz	r0, 80093e2 <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093bc:	9400      	str	r4, [sp, #0]
 80093be:	4623      	mov	r3, r4
 80093c0:	4642      	mov	r2, r8
 80093c2:	4621      	mov	r1, r4
 80093c4:	4628      	mov	r0, r5
 80093c6:	f7ff ff51 	bl	800926c <xTimerGenericCommand>
			configASSERT( xResult );
 80093ca:	b950      	cbnz	r0, 80093e2 <prvTimerTask+0x7e>
 80093cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	e7fe      	b.n	80093dc <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 80093de:	46a8      	mov	r8, r5
 80093e0:	e7cc      	b.n	800937c <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093e2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80093e4:	4628      	mov	r0, r5
 80093e6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093e8:	6838      	ldr	r0, [r7, #0]
 80093ea:	2200      	movs	r2, #0
 80093ec:	a904      	add	r1, sp, #16
 80093ee:	f7ff f8f4 	bl	80085da <xQueueReceive>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d0bb      	beq.n	800936e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093f6:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80093f8:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	db40      	blt.n	8009480 <prvTimerTask+0x11c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80093fe:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009400:	6963      	ldr	r3, [r4, #20]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d143      	bne.n	800948e <prvTimerTask+0x12a>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009406:	a803      	add	r0, sp, #12
 8009408:	f7ff ff5c 	bl	80092c4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800940c:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800940e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8009410:	2b09      	cmp	r3, #9
 8009412:	d8e9      	bhi.n	80093e8 <prvTimerTask+0x84>
 8009414:	a101      	add	r1, pc, #4	@ (adr r1, 800941c <prvTimerTask+0xb8>)
 8009416:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800941a:	bf00      	nop
 800941c:	08009497 	.word	0x08009497
 8009420:	08009497 	.word	0x08009497
 8009424:	08009497 	.word	0x08009497
 8009428:	080093e9 	.word	0x080093e9
 800942c:	080094db 	.word	0x080094db
 8009430:	080094ff 	.word	0x080094ff
 8009434:	08009497 	.word	0x08009497
 8009438:	08009497 	.word	0x08009497
 800943c:	080093e9 	.word	0x080093e9
 8009440:	080094db 	.word	0x080094db
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009444:	4b34      	ldr	r3, [pc, #208]	@ (8009518 <prvTimerTask+0x1b4>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681c      	ldr	r4, [r3, #0]
 800944a:	fab4 f484 	clz	r4, r4
 800944e:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009450:	6838      	ldr	r0, [r7, #0]
 8009452:	4622      	mov	r2, r4
 8009454:	eba8 0109 	sub.w	r1, r8, r9
 8009458:	f7ff f9bc 	bl	80087d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800945c:	f7ff fc88 	bl	8008d70 <xTaskResumeAll>
 8009460:	2800      	cmp	r0, #0
 8009462:	d1c1      	bne.n	80093e8 <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 8009464:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800946c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	e7b6      	b.n	80093e8 <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 800947a:	f7ff fc79 	bl	8008d70 <xTaskResumeAll>
}
 800947e:	e7b3      	b.n	80093e8 <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009480:	9b05      	ldr	r3, [sp, #20]
 8009482:	9907      	ldr	r1, [sp, #28]
 8009484:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009486:	9b04      	ldr	r3, [sp, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	dbad      	blt.n	80093e8 <prvTimerTask+0x84>
 800948c:	e7b7      	b.n	80093fe <prvTimerTask+0x9a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800948e:	1d20      	adds	r0, r4, #4
 8009490:	f7fe fe14 	bl	80080bc <uxListRemove>
 8009494:	e7b7      	b.n	8009406 <prvTimerTask+0xa2>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009496:	69a1      	ldr	r1, [r4, #24]
 8009498:	9b05      	ldr	r3, [sp, #20]
 800949a:	4620      	mov	r0, r4
 800949c:	4419      	add	r1, r3
 800949e:	f7ff fe61 	bl	8009164 <prvInsertTimerInActiveList>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d0a0      	beq.n	80093e8 <prvTimerTask+0x84>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80094a8:	4620      	mov	r0, r4
 80094aa:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80094ac:	69e3      	ldr	r3, [r4, #28]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d19a      	bne.n	80093e8 <prvTimerTask+0x84>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094b2:	69a2      	ldr	r2, [r4, #24]
 80094b4:	9905      	ldr	r1, [sp, #20]
 80094b6:	2300      	movs	r3, #0
 80094b8:	440a      	add	r2, r1
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	4619      	mov	r1, r3
 80094be:	4620      	mov	r0, r4
 80094c0:	f7ff fed4 	bl	800926c <xTimerGenericCommand>
							configASSERT( xResult );
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d18f      	bne.n	80093e8 <prvTimerTask+0x84>
 80094c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	e7fe      	b.n	80094d8 <prvTimerTask+0x174>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094da:	9905      	ldr	r1, [sp, #20]
 80094dc:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80094de:	b941      	cbnz	r1, 80094f2 <prvTimerTask+0x18e>
 80094e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	e7fe      	b.n	80094f0 <prvTimerTask+0x18c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094f2:	4603      	mov	r3, r0
 80094f4:	4401      	add	r1, r0
 80094f6:	4620      	mov	r0, r4
 80094f8:	f7ff fe34 	bl	8009164 <prvInsertTimerInActiveList>
					break;
 80094fc:	e774      	b.n	80093e8 <prvTimerTask+0x84>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80094fe:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8009502:	2b00      	cmp	r3, #0
 8009504:	f47f af70 	bne.w	80093e8 <prvTimerTask+0x84>
							vPortFree( pxTimer );
 8009508:	4620      	mov	r0, r4
 800950a:	f000 fa6b 	bl	80099e4 <vPortFree>
 800950e:	e76b      	b.n	80093e8 <prvTimerTask+0x84>
 8009510:	20002160 	.word	0x20002160
 8009514:	20002158 	.word	0x20002158
 8009518:	2000215c 	.word	0x2000215c

0800951c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800951c:	4808      	ldr	r0, [pc, #32]	@ (8009540 <prvPortStartFirstTask+0x24>)
 800951e:	6800      	ldr	r0, [r0, #0]
 8009520:	6800      	ldr	r0, [r0, #0]
 8009522:	f380 8808 	msr	MSP, r0
 8009526:	f04f 0000 	mov.w	r0, #0
 800952a:	f380 8814 	msr	CONTROL, r0
 800952e:	b662      	cpsie	i
 8009530:	b661      	cpsie	f
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	df00      	svc	0
 800953c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800953e:	0000      	.short	0x0000
 8009540:	e000ed08 	.word	0xe000ed08

08009544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009544:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009554 <vPortEnableVFP+0x10>
 8009548:	6801      	ldr	r1, [r0, #0]
 800954a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800954e:	6001      	str	r1, [r0, #0]
 8009550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009552:	0000      	.short	0x0000
 8009554:	e000ed88 	.word	0xe000ed88

08009558 <prvTaskExitError>:
{
 8009558:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800955e:	4b0d      	ldr	r3, [pc, #52]	@ (8009594 <prvTaskExitError+0x3c>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3301      	adds	r3, #1
 8009564:	d008      	beq.n	8009578 <prvTaskExitError+0x20>
 8009566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	e7fe      	b.n	8009576 <prvTaskExitError+0x1e>
 8009578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8009588:	9b01      	ldr	r3, [sp, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d0fc      	beq.n	8009588 <prvTaskExitError+0x30>
}
 800958e:	b002      	add	sp, #8
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	2000001c 	.word	0x2000001c

08009598 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009598:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800959c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095a0:	4b07      	ldr	r3, [pc, #28]	@ (80095c0 <pxPortInitialiseStack+0x28>)
 80095a2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095a6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80095aa:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095ae:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095b2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80095b6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80095ba:	3844      	subs	r0, #68	@ 0x44
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	08009559 	.word	0x08009559
	...

080095d0 <SVC_Handler>:
	__asm volatile (
 80095d0:	4b07      	ldr	r3, [pc, #28]	@ (80095f0 <pxCurrentTCBConst2>)
 80095d2:	6819      	ldr	r1, [r3, #0]
 80095d4:	6808      	ldr	r0, [r1, #0]
 80095d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095da:	f380 8809 	msr	PSP, r0
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	f04f 0000 	mov.w	r0, #0
 80095e6:	f380 8811 	msr	BASEPRI, r0
 80095ea:	4770      	bx	lr
 80095ec:	f3af 8000 	nop.w

080095f0 <pxCurrentTCBConst2>:
 80095f0:	2000205c 	.word	0x2000205c

080095f4 <vPortEnterCritical>:
 80095f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009604:	4a0a      	ldr	r2, [pc, #40]	@ (8009630 <vPortEnterCritical+0x3c>)
 8009606:	6813      	ldr	r3, [r2, #0]
 8009608:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800960a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800960c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800960e:	d10e      	bne.n	800962e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009610:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009614:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8009618:	b2db      	uxtb	r3, r3
 800961a:	b143      	cbz	r3, 800962e <vPortEnterCritical+0x3a>
 800961c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	e7fe      	b.n	800962c <vPortEnterCritical+0x38>
}
 800962e:	4770      	bx	lr
 8009630:	2000001c 	.word	0x2000001c

08009634 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009634:	4a08      	ldr	r2, [pc, #32]	@ (8009658 <vPortExitCritical+0x24>)
 8009636:	6813      	ldr	r3, [r2, #0]
 8009638:	b943      	cbnz	r3, 800964c <vPortExitCritical+0x18>
 800963a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	e7fe      	b.n	800964a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800964c:	3b01      	subs	r3, #1
 800964e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009650:	b90b      	cbnz	r3, 8009656 <vPortExitCritical+0x22>
	__asm volatile
 8009652:	f383 8811 	msr	BASEPRI, r3
}
 8009656:	4770      	bx	lr
 8009658:	2000001c 	.word	0x2000001c
 800965c:	00000000 	.word	0x00000000

08009660 <PendSV_Handler>:
	__asm volatile
 8009660:	f3ef 8009 	mrs	r0, PSP
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	4b15      	ldr	r3, [pc, #84]	@ (80096c0 <pxCurrentTCBConst>)
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	f01e 0f10 	tst.w	lr, #16
 8009670:	bf08      	it	eq
 8009672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967a:	6010      	str	r0, [r2, #0]
 800967c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009680:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009684:	f380 8811 	msr	BASEPRI, r0
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f7ff fc06 	bl	8008ea0 <vTaskSwitchContext>
 8009694:	f04f 0000 	mov.w	r0, #0
 8009698:	f380 8811 	msr	BASEPRI, r0
 800969c:	bc09      	pop	{r0, r3}
 800969e:	6819      	ldr	r1, [r3, #0]
 80096a0:	6808      	ldr	r0, [r1, #0]
 80096a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a6:	f01e 0f10 	tst.w	lr, #16
 80096aa:	bf08      	it	eq
 80096ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80096b0:	f380 8809 	msr	PSP, r0
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	f3af 8000 	nop.w

080096c0 <pxCurrentTCBConst>:
 80096c0:	2000205c 	.word	0x2000205c

080096c4 <SysTick_Handler>:
{
 80096c4:	b508      	push	{r3, lr}
	__asm volatile
 80096c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80096d6:	f7ff fab5 	bl	8008c44 <xTaskIncrementTick>
 80096da:	b128      	cbz	r0, 80096e8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80096dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80096e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80096e8:	2300      	movs	r3, #0
 80096ea:	f383 8811 	msr	BASEPRI, r3
}
 80096ee:	bd08      	pop	{r3, pc}

080096f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096f0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80096f4:	2300      	movs	r3, #0
 80096f6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096f8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096fa:	4b05      	ldr	r3, [pc, #20]	@ (8009710 <vPortSetupTimerInterrupt+0x20>)
 80096fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	fbb3 f3f1 	udiv	r3, r3, r1
 8009706:	3b01      	subs	r3, #1
 8009708:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800970a:	2307      	movs	r3, #7
 800970c:	6113      	str	r3, [r2, #16]
}
 800970e:	4770      	bx	lr
 8009710:	20000010 	.word	0x20000010

08009714 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009714:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8009718:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800971a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800971e:	4a38      	ldr	r2, [pc, #224]	@ (8009800 <xPortStartScheduler+0xec>)
 8009720:	4291      	cmp	r1, r2
 8009722:	d108      	bne.n	8009736 <xPortStartScheduler+0x22>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	e7fe      	b.n	8009734 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009736:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800973a:	4b32      	ldr	r3, [pc, #200]	@ (8009804 <xPortStartScheduler+0xf0>)
 800973c:	429a      	cmp	r2, r3
 800973e:	d108      	bne.n	8009752 <xPortStartScheduler+0x3e>
 8009740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	e7fe      	b.n	8009750 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009752:	4b2d      	ldr	r3, [pc, #180]	@ (8009808 <xPortStartScheduler+0xf4>)
 8009754:	781a      	ldrb	r2, [r3, #0]
 8009756:	b2d2      	uxtb	r2, r2
 8009758:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800975a:	22ff      	movs	r2, #255	@ 0xff
 800975c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800975e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009760:	4a2a      	ldr	r2, [pc, #168]	@ (800980c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009762:	b2db      	uxtb	r3, r3
 8009764:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009768:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800976c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009770:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009772:	4a27      	ldr	r2, [pc, #156]	@ (8009810 <xPortStartScheduler+0xfc>)
 8009774:	2307      	movs	r3, #7
 8009776:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009778:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800977c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800977e:	0609      	lsls	r1, r1, #24
 8009780:	d40a      	bmi.n	8009798 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009782:	2b03      	cmp	r3, #3
 8009784:	d011      	beq.n	80097aa <xPortStartScheduler+0x96>
 8009786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	e7fe      	b.n	8009796 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8009798:	3b01      	subs	r3, #1
 800979a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800979c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	f88d 3003 	strb.w	r3, [sp, #3]
 80097a8:	e7e6      	b.n	8009778 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80097ae:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097b0:	9b01      	ldr	r3, [sp, #4]
 80097b2:	4a15      	ldr	r2, [pc, #84]	@ (8009808 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097b4:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097bc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80097c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80097c4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097c8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80097cc:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80097d0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80097d4:	f7ff ff8c 	bl	80096f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80097d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009814 <xPortStartScheduler+0x100>)
 80097da:	2500      	movs	r5, #0
 80097dc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80097de:	f7ff feb1 	bl	8009544 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097e2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80097e6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80097ea:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80097ee:	f7ff fe95 	bl	800951c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80097f2:	f7ff fb55 	bl	8008ea0 <vTaskSwitchContext>
	prvTaskExitError();
 80097f6:	f7ff feaf 	bl	8009558 <prvTaskExitError>
}
 80097fa:	4628      	mov	r0, r5
 80097fc:	b003      	add	sp, #12
 80097fe:	bd30      	pop	{r4, r5, pc}
 8009800:	410fc271 	.word	0x410fc271
 8009804:	410fc270 	.word	0x410fc270
 8009808:	e000e400 	.word	0xe000e400
 800980c:	20002190 	.word	0x20002190
 8009810:	2000218c 	.word	0x2000218c
 8009814:	2000001c 	.word	0x2000001c

08009818 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009818:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800981c:	2b0f      	cmp	r3, #15
 800981e:	d90e      	bls.n	800983e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009820:	4a11      	ldr	r2, [pc, #68]	@ (8009868 <vPortValidateInterruptPriority+0x50>)
 8009822:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009824:	4a11      	ldr	r2, [pc, #68]	@ (800986c <vPortValidateInterruptPriority+0x54>)
 8009826:	7812      	ldrb	r2, [r2, #0]
 8009828:	429a      	cmp	r2, r3
 800982a:	d908      	bls.n	800983e <vPortValidateInterruptPriority+0x26>
 800982c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009830:	f383 8811 	msr	BASEPRI, r3
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	e7fe      	b.n	800983c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800983e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009842:	4a0b      	ldr	r2, [pc, #44]	@ (8009870 <vPortValidateInterruptPriority+0x58>)
 8009844:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8009848:	6812      	ldr	r2, [r2, #0]
 800984a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800984e:	4293      	cmp	r3, r2
 8009850:	d908      	bls.n	8009864 <vPortValidateInterruptPriority+0x4c>
 8009852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	e7fe      	b.n	8009862 <vPortValidateInterruptPriority+0x4a>
	}
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	e000e3f0 	.word	0xe000e3f0
 800986c:	20002190 	.word	0x20002190
 8009870:	2000218c 	.word	0x2000218c

08009874 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009874:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009876:	4b10      	ldr	r3, [pc, #64]	@ (80098b8 <prvInsertBlockIntoFreeList+0x44>)
 8009878:	461a      	mov	r2, r3
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4283      	cmp	r3, r0
 800987e:	d3fb      	bcc.n	8009878 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009880:	6854      	ldr	r4, [r2, #4]
 8009882:	1911      	adds	r1, r2, r4
 8009884:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009886:	bf01      	itttt	eq
 8009888:	6841      	ldreq	r1, [r0, #4]
 800988a:	4610      	moveq	r0, r2
 800988c:	1909      	addeq	r1, r1, r4
 800988e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009890:	6844      	ldr	r4, [r0, #4]
 8009892:	1901      	adds	r1, r0, r4
 8009894:	428b      	cmp	r3, r1
 8009896:	d10c      	bne.n	80098b2 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009898:	4908      	ldr	r1, [pc, #32]	@ (80098bc <prvInsertBlockIntoFreeList+0x48>)
 800989a:	6809      	ldr	r1, [r1, #0]
 800989c:	428b      	cmp	r3, r1
 800989e:	d003      	beq.n	80098a8 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098a0:	6859      	ldr	r1, [r3, #4]
 80098a2:	4421      	add	r1, r4
 80098a4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098a6:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098a8:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098aa:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098ac:	bf18      	it	ne
 80098ae:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098b0:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098b2:	4619      	mov	r1, r3
 80098b4:	e7f8      	b.n	80098a8 <prvInsertBlockIntoFreeList+0x34>
 80098b6:	bf00      	nop
 80098b8:	200021a4 	.word	0x200021a4
 80098bc:	200021a0 	.word	0x200021a0

080098c0 <pvPortMalloc>:
{
 80098c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80098c6:	f7ff f9af 	bl	8008c28 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80098ca:	493f      	ldr	r1, [pc, #252]	@ (80099c8 <pvPortMalloc+0x108>)
 80098cc:	4d3f      	ldr	r5, [pc, #252]	@ (80099cc <pvPortMalloc+0x10c>)
 80098ce:	680b      	ldr	r3, [r1, #0]
 80098d0:	b9fb      	cbnz	r3, 8009912 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 80098d2:	4a3f      	ldr	r2, [pc, #252]	@ (80099d0 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098d4:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098d6:	bf1c      	itt	ne
 80098d8:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098da:	4b3e      	ldrne	r3, [pc, #248]	@ (80099d4 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098dc:	4e3e      	ldr	r6, [pc, #248]	@ (80099d8 <pvPortMalloc+0x118>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098de:	bf1a      	itte	ne
 80098e0:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098e4:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098e6:	f247 5330 	movweq	r3, #30000	@ 0x7530
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098ea:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80098ec:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098ee:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80098f2:	2000      	movs	r0, #0
 80098f4:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098f6:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80098f8:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80098fc:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098fe:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8009902:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009904:	4b35      	ldr	r3, [pc, #212]	@ (80099dc <pvPortMalloc+0x11c>)
 8009906:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009908:	4b35      	ldr	r3, [pc, #212]	@ (80099e0 <pvPortMalloc+0x120>)
 800990a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800990c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009910:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009912:	682e      	ldr	r6, [r5, #0]
 8009914:	4226      	tst	r6, r4
 8009916:	d152      	bne.n	80099be <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 8009918:	2c00      	cmp	r4, #0
 800991a:	d043      	beq.n	80099a4 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 800991c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009920:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009922:	bf1c      	itt	ne
 8009924:	f023 0307 	bicne.w	r3, r3, #7
 8009928:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800992a:	2b00      	cmp	r3, #0
 800992c:	d047      	beq.n	80099be <pvPortMalloc+0xfe>
 800992e:	4f2c      	ldr	r7, [pc, #176]	@ (80099e0 <pvPortMalloc+0x120>)
 8009930:	683c      	ldr	r4, [r7, #0]
 8009932:	429c      	cmp	r4, r3
 8009934:	d343      	bcc.n	80099be <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 8009936:	4a28      	ldr	r2, [pc, #160]	@ (80099d8 <pvPortMalloc+0x118>)
 8009938:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800993a:	6868      	ldr	r0, [r5, #4]
 800993c:	4298      	cmp	r0, r3
 800993e:	d204      	bcs.n	800994a <pvPortMalloc+0x8a>
 8009940:	f8d5 c000 	ldr.w	ip, [r5]
 8009944:	f1bc 0f00 	cmp.w	ip, #0
 8009948:	d115      	bne.n	8009976 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 800994a:	6809      	ldr	r1, [r1, #0]
 800994c:	42a9      	cmp	r1, r5
 800994e:	d036      	beq.n	80099be <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009950:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009952:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009956:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009958:	1ac2      	subs	r2, r0, r3
 800995a:	2a10      	cmp	r2, #16
 800995c:	d912      	bls.n	8009984 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800995e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009960:	0741      	lsls	r1, r0, #29
 8009962:	d00b      	beq.n	800997c <pvPortMalloc+0xbc>
 8009964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	e7fe      	b.n	8009974 <pvPortMalloc+0xb4>
 8009976:	462a      	mov	r2, r5
 8009978:	4665      	mov	r5, ip
 800997a:	e7de      	b.n	800993a <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800997c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800997e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009980:	f7ff ff78 	bl	8009874 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009984:	4915      	ldr	r1, [pc, #84]	@ (80099dc <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009986:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009988:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800998a:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800998c:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800998e:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8009992:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009996:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009998:	bf38      	it	cc
 800999a:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800999c:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800999e:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 80099a2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80099a4:	f7ff f9e4 	bl	8008d70 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80099a8:	0763      	lsls	r3, r4, #29
 80099aa:	d00a      	beq.n	80099c2 <pvPortMalloc+0x102>
 80099ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	e7fe      	b.n	80099bc <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 80099be:	2400      	movs	r4, #0
 80099c0:	e7f0      	b.n	80099a4 <pvPortMalloc+0xe4>
}
 80099c2:	4620      	mov	r0, r4
 80099c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099c8:	200021a0 	.word	0x200021a0
 80099cc:	20002194 	.word	0x20002194
 80099d0:	200021ac 	.word	0x200021ac
 80099d4:	200096dc 	.word	0x200096dc
 80099d8:	200021a4 	.word	0x200021a4
 80099dc:	20002198 	.word	0x20002198
 80099e0:	2000219c 	.word	0x2000219c

080099e4 <vPortFree>:
{
 80099e4:	b510      	push	{r4, lr}
	if( pv != NULL )
 80099e6:	4604      	mov	r4, r0
 80099e8:	b370      	cbz	r0, 8009a48 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80099ea:	4a18      	ldr	r2, [pc, #96]	@ (8009a4c <vPortFree+0x68>)
 80099ec:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80099f0:	6812      	ldr	r2, [r2, #0]
 80099f2:	4213      	tst	r3, r2
 80099f4:	d108      	bne.n	8009a08 <vPortFree+0x24>
 80099f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	e7fe      	b.n	8009a06 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a08:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009a0c:	b141      	cbz	r1, 8009a20 <vPortFree+0x3c>
 8009a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	e7fe      	b.n	8009a1e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a20:	ea23 0302 	bic.w	r3, r3, r2
 8009a24:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009a28:	f7ff f8fe 	bl	8008c28 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a2c:	4a08      	ldr	r2, [pc, #32]	@ (8009a50 <vPortFree+0x6c>)
 8009a2e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009a32:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a34:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a38:	440b      	add	r3, r1
 8009a3a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a3c:	f7ff ff1a 	bl	8009874 <prvInsertBlockIntoFreeList>
}
 8009a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8009a44:	f7ff b994 	b.w	8008d70 <xTaskResumeAll>
}
 8009a48:	bd10      	pop	{r4, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20002194 	.word	0x20002194
 8009a50:	2000219c 	.word	0x2000219c

08009a54 <atoi>:
 8009a54:	220a      	movs	r2, #10
 8009a56:	2100      	movs	r1, #0
 8009a58:	f000 bf44 	b.w	800a8e4 <strtol>

08009a5c <malloc>:
 8009a5c:	4b02      	ldr	r3, [pc, #8]	@ (8009a68 <malloc+0xc>)
 8009a5e:	4601      	mov	r1, r0
 8009a60:	6818      	ldr	r0, [r3, #0]
 8009a62:	f000 b82d 	b.w	8009ac0 <_malloc_r>
 8009a66:	bf00      	nop
 8009a68:	200001a0 	.word	0x200001a0

08009a6c <free>:
 8009a6c:	4b02      	ldr	r3, [pc, #8]	@ (8009a78 <free+0xc>)
 8009a6e:	4601      	mov	r1, r0
 8009a70:	6818      	ldr	r0, [r3, #0]
 8009a72:	f003 bc31 	b.w	800d2d8 <_free_r>
 8009a76:	bf00      	nop
 8009a78:	200001a0 	.word	0x200001a0

08009a7c <sbrk_aligned>:
 8009a7c:	b570      	push	{r4, r5, r6, lr}
 8009a7e:	4e0f      	ldr	r6, [pc, #60]	@ (8009abc <sbrk_aligned+0x40>)
 8009a80:	460c      	mov	r4, r1
 8009a82:	6831      	ldr	r1, [r6, #0]
 8009a84:	4605      	mov	r5, r0
 8009a86:	b911      	cbnz	r1, 8009a8e <sbrk_aligned+0x12>
 8009a88:	f002 fd60 	bl	800c54c <_sbrk_r>
 8009a8c:	6030      	str	r0, [r6, #0]
 8009a8e:	4621      	mov	r1, r4
 8009a90:	4628      	mov	r0, r5
 8009a92:	f002 fd5b 	bl	800c54c <_sbrk_r>
 8009a96:	1c43      	adds	r3, r0, #1
 8009a98:	d103      	bne.n	8009aa2 <sbrk_aligned+0x26>
 8009a9a:	f04f 34ff 	mov.w	r4, #4294967295
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	bd70      	pop	{r4, r5, r6, pc}
 8009aa2:	1cc4      	adds	r4, r0, #3
 8009aa4:	f024 0403 	bic.w	r4, r4, #3
 8009aa8:	42a0      	cmp	r0, r4
 8009aaa:	d0f8      	beq.n	8009a9e <sbrk_aligned+0x22>
 8009aac:	1a21      	subs	r1, r4, r0
 8009aae:	4628      	mov	r0, r5
 8009ab0:	f002 fd4c 	bl	800c54c <_sbrk_r>
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	d1f2      	bne.n	8009a9e <sbrk_aligned+0x22>
 8009ab8:	e7ef      	b.n	8009a9a <sbrk_aligned+0x1e>
 8009aba:	bf00      	nop
 8009abc:	200096dc 	.word	0x200096dc

08009ac0 <_malloc_r>:
 8009ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ac4:	1ccd      	adds	r5, r1, #3
 8009ac6:	f025 0503 	bic.w	r5, r5, #3
 8009aca:	3508      	adds	r5, #8
 8009acc:	2d0c      	cmp	r5, #12
 8009ace:	bf38      	it	cc
 8009ad0:	250c      	movcc	r5, #12
 8009ad2:	2d00      	cmp	r5, #0
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	db01      	blt.n	8009adc <_malloc_r+0x1c>
 8009ad8:	42a9      	cmp	r1, r5
 8009ada:	d904      	bls.n	8009ae6 <_malloc_r+0x26>
 8009adc:	230c      	movs	r3, #12
 8009ade:	6033      	str	r3, [r6, #0]
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009bbc <_malloc_r+0xfc>
 8009aea:	f000 f869 	bl	8009bc0 <__malloc_lock>
 8009aee:	f8d8 3000 	ldr.w	r3, [r8]
 8009af2:	461c      	mov	r4, r3
 8009af4:	bb44      	cbnz	r4, 8009b48 <_malloc_r+0x88>
 8009af6:	4629      	mov	r1, r5
 8009af8:	4630      	mov	r0, r6
 8009afa:	f7ff ffbf 	bl	8009a7c <sbrk_aligned>
 8009afe:	1c43      	adds	r3, r0, #1
 8009b00:	4604      	mov	r4, r0
 8009b02:	d158      	bne.n	8009bb6 <_malloc_r+0xf6>
 8009b04:	f8d8 4000 	ldr.w	r4, [r8]
 8009b08:	4627      	mov	r7, r4
 8009b0a:	2f00      	cmp	r7, #0
 8009b0c:	d143      	bne.n	8009b96 <_malloc_r+0xd6>
 8009b0e:	2c00      	cmp	r4, #0
 8009b10:	d04b      	beq.n	8009baa <_malloc_r+0xea>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	4639      	mov	r1, r7
 8009b16:	4630      	mov	r0, r6
 8009b18:	eb04 0903 	add.w	r9, r4, r3
 8009b1c:	f002 fd16 	bl	800c54c <_sbrk_r>
 8009b20:	4581      	cmp	r9, r0
 8009b22:	d142      	bne.n	8009baa <_malloc_r+0xea>
 8009b24:	6821      	ldr	r1, [r4, #0]
 8009b26:	1a6d      	subs	r5, r5, r1
 8009b28:	4629      	mov	r1, r5
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	f7ff ffa6 	bl	8009a7c <sbrk_aligned>
 8009b30:	3001      	adds	r0, #1
 8009b32:	d03a      	beq.n	8009baa <_malloc_r+0xea>
 8009b34:	6823      	ldr	r3, [r4, #0]
 8009b36:	442b      	add	r3, r5
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	bb62      	cbnz	r2, 8009b9c <_malloc_r+0xdc>
 8009b42:	f8c8 7000 	str.w	r7, [r8]
 8009b46:	e00f      	b.n	8009b68 <_malloc_r+0xa8>
 8009b48:	6822      	ldr	r2, [r4, #0]
 8009b4a:	1b52      	subs	r2, r2, r5
 8009b4c:	d420      	bmi.n	8009b90 <_malloc_r+0xd0>
 8009b4e:	2a0b      	cmp	r2, #11
 8009b50:	d917      	bls.n	8009b82 <_malloc_r+0xc2>
 8009b52:	1961      	adds	r1, r4, r5
 8009b54:	42a3      	cmp	r3, r4
 8009b56:	6025      	str	r5, [r4, #0]
 8009b58:	bf18      	it	ne
 8009b5a:	6059      	strne	r1, [r3, #4]
 8009b5c:	6863      	ldr	r3, [r4, #4]
 8009b5e:	bf08      	it	eq
 8009b60:	f8c8 1000 	streq.w	r1, [r8]
 8009b64:	5162      	str	r2, [r4, r5]
 8009b66:	604b      	str	r3, [r1, #4]
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f000 f82f 	bl	8009bcc <__malloc_unlock>
 8009b6e:	f104 000b 	add.w	r0, r4, #11
 8009b72:	1d23      	adds	r3, r4, #4
 8009b74:	f020 0007 	bic.w	r0, r0, #7
 8009b78:	1ac2      	subs	r2, r0, r3
 8009b7a:	bf1c      	itt	ne
 8009b7c:	1a1b      	subne	r3, r3, r0
 8009b7e:	50a3      	strne	r3, [r4, r2]
 8009b80:	e7af      	b.n	8009ae2 <_malloc_r+0x22>
 8009b82:	6862      	ldr	r2, [r4, #4]
 8009b84:	42a3      	cmp	r3, r4
 8009b86:	bf0c      	ite	eq
 8009b88:	f8c8 2000 	streq.w	r2, [r8]
 8009b8c:	605a      	strne	r2, [r3, #4]
 8009b8e:	e7eb      	b.n	8009b68 <_malloc_r+0xa8>
 8009b90:	4623      	mov	r3, r4
 8009b92:	6864      	ldr	r4, [r4, #4]
 8009b94:	e7ae      	b.n	8009af4 <_malloc_r+0x34>
 8009b96:	463c      	mov	r4, r7
 8009b98:	687f      	ldr	r7, [r7, #4]
 8009b9a:	e7b6      	b.n	8009b0a <_malloc_r+0x4a>
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	42a3      	cmp	r3, r4
 8009ba2:	d1fb      	bne.n	8009b9c <_malloc_r+0xdc>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	6053      	str	r3, [r2, #4]
 8009ba8:	e7de      	b.n	8009b68 <_malloc_r+0xa8>
 8009baa:	230c      	movs	r3, #12
 8009bac:	6033      	str	r3, [r6, #0]
 8009bae:	4630      	mov	r0, r6
 8009bb0:	f000 f80c 	bl	8009bcc <__malloc_unlock>
 8009bb4:	e794      	b.n	8009ae0 <_malloc_r+0x20>
 8009bb6:	6005      	str	r5, [r0, #0]
 8009bb8:	e7d6      	b.n	8009b68 <_malloc_r+0xa8>
 8009bba:	bf00      	nop
 8009bbc:	200096e0 	.word	0x200096e0

08009bc0 <__malloc_lock>:
 8009bc0:	4801      	ldr	r0, [pc, #4]	@ (8009bc8 <__malloc_lock+0x8>)
 8009bc2:	f7fb b852 	b.w	8004c6a <__retarget_lock_acquire_recursive>
 8009bc6:	bf00      	nop
 8009bc8:	2000174c 	.word	0x2000174c

08009bcc <__malloc_unlock>:
 8009bcc:	4801      	ldr	r0, [pc, #4]	@ (8009bd4 <__malloc_unlock+0x8>)
 8009bce:	f7fb b858 	b.w	8004c82 <__retarget_lock_release_recursive>
 8009bd2:	bf00      	nop
 8009bd4:	2000174c 	.word	0x2000174c

08009bd8 <sulp>:
 8009bd8:	b570      	push	{r4, r5, r6, lr}
 8009bda:	4604      	mov	r4, r0
 8009bdc:	460d      	mov	r5, r1
 8009bde:	ec45 4b10 	vmov	d0, r4, r5
 8009be2:	4616      	mov	r6, r2
 8009be4:	f004 fac6 	bl	800e174 <__ulp>
 8009be8:	ec51 0b10 	vmov	r0, r1, d0
 8009bec:	b17e      	cbz	r6, 8009c0e <sulp+0x36>
 8009bee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009bf2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	dd09      	ble.n	8009c0e <sulp+0x36>
 8009bfa:	051b      	lsls	r3, r3, #20
 8009bfc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009c00:	2400      	movs	r4, #0
 8009c02:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009c06:	4622      	mov	r2, r4
 8009c08:	462b      	mov	r3, r5
 8009c0a:	f7f6 fd05 	bl	8000618 <__aeabi_dmul>
 8009c0e:	ec41 0b10 	vmov	d0, r0, r1
 8009c12:	bd70      	pop	{r4, r5, r6, pc}
 8009c14:	0000      	movs	r0, r0
	...

08009c18 <_strtod_l>:
 8009c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1c:	b09f      	sub	sp, #124	@ 0x7c
 8009c1e:	460c      	mov	r4, r1
 8009c20:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009c22:	2200      	movs	r2, #0
 8009c24:	921a      	str	r2, [sp, #104]	@ 0x68
 8009c26:	9005      	str	r0, [sp, #20]
 8009c28:	f04f 0a00 	mov.w	sl, #0
 8009c2c:	f04f 0b00 	mov.w	fp, #0
 8009c30:	460a      	mov	r2, r1
 8009c32:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c34:	7811      	ldrb	r1, [r2, #0]
 8009c36:	292b      	cmp	r1, #43	@ 0x2b
 8009c38:	d04a      	beq.n	8009cd0 <_strtod_l+0xb8>
 8009c3a:	d838      	bhi.n	8009cae <_strtod_l+0x96>
 8009c3c:	290d      	cmp	r1, #13
 8009c3e:	d832      	bhi.n	8009ca6 <_strtod_l+0x8e>
 8009c40:	2908      	cmp	r1, #8
 8009c42:	d832      	bhi.n	8009caa <_strtod_l+0x92>
 8009c44:	2900      	cmp	r1, #0
 8009c46:	d03b      	beq.n	8009cc0 <_strtod_l+0xa8>
 8009c48:	2200      	movs	r2, #0
 8009c4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009c4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009c4e:	782a      	ldrb	r2, [r5, #0]
 8009c50:	2a30      	cmp	r2, #48	@ 0x30
 8009c52:	f040 80b3 	bne.w	8009dbc <_strtod_l+0x1a4>
 8009c56:	786a      	ldrb	r2, [r5, #1]
 8009c58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009c5c:	2a58      	cmp	r2, #88	@ 0x58
 8009c5e:	d16e      	bne.n	8009d3e <_strtod_l+0x126>
 8009c60:	9302      	str	r3, [sp, #8]
 8009c62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c64:	9301      	str	r3, [sp, #4]
 8009c66:	ab1a      	add	r3, sp, #104	@ 0x68
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	4a8e      	ldr	r2, [pc, #568]	@ (8009ea4 <_strtod_l+0x28c>)
 8009c6c:	9805      	ldr	r0, [sp, #20]
 8009c6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009c70:	a919      	add	r1, sp, #100	@ 0x64
 8009c72:	f003 fbe3 	bl	800d43c <__gethex>
 8009c76:	f010 060f 	ands.w	r6, r0, #15
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	d005      	beq.n	8009c8a <_strtod_l+0x72>
 8009c7e:	2e06      	cmp	r6, #6
 8009c80:	d128      	bne.n	8009cd4 <_strtod_l+0xbc>
 8009c82:	3501      	adds	r5, #1
 8009c84:	2300      	movs	r3, #0
 8009c86:	9519      	str	r5, [sp, #100]	@ 0x64
 8009c88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f040 858e 	bne.w	800a7ae <_strtod_l+0xb96>
 8009c92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c94:	b1cb      	cbz	r3, 8009cca <_strtod_l+0xb2>
 8009c96:	4652      	mov	r2, sl
 8009c98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009c9c:	ec43 2b10 	vmov	d0, r2, r3
 8009ca0:	b01f      	add	sp, #124	@ 0x7c
 8009ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca6:	2920      	cmp	r1, #32
 8009ca8:	d1ce      	bne.n	8009c48 <_strtod_l+0x30>
 8009caa:	3201      	adds	r2, #1
 8009cac:	e7c1      	b.n	8009c32 <_strtod_l+0x1a>
 8009cae:	292d      	cmp	r1, #45	@ 0x2d
 8009cb0:	d1ca      	bne.n	8009c48 <_strtod_l+0x30>
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009cb6:	1c51      	adds	r1, r2, #1
 8009cb8:	9119      	str	r1, [sp, #100]	@ 0x64
 8009cba:	7852      	ldrb	r2, [r2, #1]
 8009cbc:	2a00      	cmp	r2, #0
 8009cbe:	d1c5      	bne.n	8009c4c <_strtod_l+0x34>
 8009cc0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009cc2:	9419      	str	r4, [sp, #100]	@ 0x64
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f040 8570 	bne.w	800a7aa <_strtod_l+0xb92>
 8009cca:	4652      	mov	r2, sl
 8009ccc:	465b      	mov	r3, fp
 8009cce:	e7e5      	b.n	8009c9c <_strtod_l+0x84>
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	e7ef      	b.n	8009cb4 <_strtod_l+0x9c>
 8009cd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009cd6:	b13a      	cbz	r2, 8009ce8 <_strtod_l+0xd0>
 8009cd8:	2135      	movs	r1, #53	@ 0x35
 8009cda:	a81c      	add	r0, sp, #112	@ 0x70
 8009cdc:	f004 fb44 	bl	800e368 <__copybits>
 8009ce0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ce2:	9805      	ldr	r0, [sp, #20]
 8009ce4:	f003 ff12 	bl	800db0c <_Bfree>
 8009ce8:	3e01      	subs	r6, #1
 8009cea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009cec:	2e04      	cmp	r6, #4
 8009cee:	d806      	bhi.n	8009cfe <_strtod_l+0xe6>
 8009cf0:	e8df f006 	tbb	[pc, r6]
 8009cf4:	201d0314 	.word	0x201d0314
 8009cf8:	14          	.byte	0x14
 8009cf9:	00          	.byte	0x00
 8009cfa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009cfe:	05e1      	lsls	r1, r4, #23
 8009d00:	bf48      	it	mi
 8009d02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009d06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d0a:	0d1b      	lsrs	r3, r3, #20
 8009d0c:	051b      	lsls	r3, r3, #20
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1bb      	bne.n	8009c8a <_strtod_l+0x72>
 8009d12:	f002 fc3d 	bl	800c590 <__errno>
 8009d16:	2322      	movs	r3, #34	@ 0x22
 8009d18:	6003      	str	r3, [r0, #0]
 8009d1a:	e7b6      	b.n	8009c8a <_strtod_l+0x72>
 8009d1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009d20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009d24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009d28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009d2c:	e7e7      	b.n	8009cfe <_strtod_l+0xe6>
 8009d2e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009eac <_strtod_l+0x294>
 8009d32:	e7e4      	b.n	8009cfe <_strtod_l+0xe6>
 8009d34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009d38:	f04f 3aff 	mov.w	sl, #4294967295
 8009d3c:	e7df      	b.n	8009cfe <_strtod_l+0xe6>
 8009d3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d40:	1c5a      	adds	r2, r3, #1
 8009d42:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d44:	785b      	ldrb	r3, [r3, #1]
 8009d46:	2b30      	cmp	r3, #48	@ 0x30
 8009d48:	d0f9      	beq.n	8009d3e <_strtod_l+0x126>
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d09d      	beq.n	8009c8a <_strtod_l+0x72>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d54:	930c      	str	r3, [sp, #48]	@ 0x30
 8009d56:	2300      	movs	r3, #0
 8009d58:	9308      	str	r3, [sp, #32]
 8009d5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d5c:	461f      	mov	r7, r3
 8009d5e:	220a      	movs	r2, #10
 8009d60:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009d62:	7805      	ldrb	r5, [r0, #0]
 8009d64:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009d68:	b2d9      	uxtb	r1, r3
 8009d6a:	2909      	cmp	r1, #9
 8009d6c:	d928      	bls.n	8009dc0 <_strtod_l+0x1a8>
 8009d6e:	494e      	ldr	r1, [pc, #312]	@ (8009ea8 <_strtod_l+0x290>)
 8009d70:	2201      	movs	r2, #1
 8009d72:	f001 fe00 	bl	800b976 <strncmp>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d032      	beq.n	8009de0 <_strtod_l+0x1c8>
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	462a      	mov	r2, r5
 8009d7e:	4681      	mov	r9, r0
 8009d80:	463d      	mov	r5, r7
 8009d82:	4603      	mov	r3, r0
 8009d84:	2a65      	cmp	r2, #101	@ 0x65
 8009d86:	d001      	beq.n	8009d8c <_strtod_l+0x174>
 8009d88:	2a45      	cmp	r2, #69	@ 0x45
 8009d8a:	d114      	bne.n	8009db6 <_strtod_l+0x19e>
 8009d8c:	b91d      	cbnz	r5, 8009d96 <_strtod_l+0x17e>
 8009d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d90:	4302      	orrs	r2, r0
 8009d92:	d095      	beq.n	8009cc0 <_strtod_l+0xa8>
 8009d94:	2500      	movs	r5, #0
 8009d96:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009d98:	1c62      	adds	r2, r4, #1
 8009d9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d9c:	7862      	ldrb	r2, [r4, #1]
 8009d9e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009da0:	d077      	beq.n	8009e92 <_strtod_l+0x27a>
 8009da2:	2a2d      	cmp	r2, #45	@ 0x2d
 8009da4:	d07b      	beq.n	8009e9e <_strtod_l+0x286>
 8009da6:	f04f 0c00 	mov.w	ip, #0
 8009daa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009dae:	2909      	cmp	r1, #9
 8009db0:	f240 8082 	bls.w	8009eb8 <_strtod_l+0x2a0>
 8009db4:	9419      	str	r4, [sp, #100]	@ 0x64
 8009db6:	f04f 0800 	mov.w	r8, #0
 8009dba:	e0a2      	b.n	8009f02 <_strtod_l+0x2ea>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	e7c7      	b.n	8009d50 <_strtod_l+0x138>
 8009dc0:	2f08      	cmp	r7, #8
 8009dc2:	bfd5      	itete	le
 8009dc4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009dc6:	9908      	ldrgt	r1, [sp, #32]
 8009dc8:	fb02 3301 	mlale	r3, r2, r1, r3
 8009dcc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009dd0:	f100 0001 	add.w	r0, r0, #1
 8009dd4:	bfd4      	ite	le
 8009dd6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009dd8:	9308      	strgt	r3, [sp, #32]
 8009dda:	3701      	adds	r7, #1
 8009ddc:	9019      	str	r0, [sp, #100]	@ 0x64
 8009dde:	e7bf      	b.n	8009d60 <_strtod_l+0x148>
 8009de0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	9219      	str	r2, [sp, #100]	@ 0x64
 8009de6:	785a      	ldrb	r2, [r3, #1]
 8009de8:	b37f      	cbz	r7, 8009e4a <_strtod_l+0x232>
 8009dea:	4681      	mov	r9, r0
 8009dec:	463d      	mov	r5, r7
 8009dee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009df2:	2b09      	cmp	r3, #9
 8009df4:	d912      	bls.n	8009e1c <_strtod_l+0x204>
 8009df6:	2301      	movs	r3, #1
 8009df8:	e7c4      	b.n	8009d84 <_strtod_l+0x16c>
 8009dfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dfc:	1c5a      	adds	r2, r3, #1
 8009dfe:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e00:	785a      	ldrb	r2, [r3, #1]
 8009e02:	3001      	adds	r0, #1
 8009e04:	2a30      	cmp	r2, #48	@ 0x30
 8009e06:	d0f8      	beq.n	8009dfa <_strtod_l+0x1e2>
 8009e08:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009e0c:	2b08      	cmp	r3, #8
 8009e0e:	f200 84d3 	bhi.w	800a7b8 <_strtod_l+0xba0>
 8009e12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e14:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e16:	4681      	mov	r9, r0
 8009e18:	2000      	movs	r0, #0
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	3a30      	subs	r2, #48	@ 0x30
 8009e1e:	f100 0301 	add.w	r3, r0, #1
 8009e22:	d02a      	beq.n	8009e7a <_strtod_l+0x262>
 8009e24:	4499      	add	r9, r3
 8009e26:	eb00 0c05 	add.w	ip, r0, r5
 8009e2a:	462b      	mov	r3, r5
 8009e2c:	210a      	movs	r1, #10
 8009e2e:	4563      	cmp	r3, ip
 8009e30:	d10d      	bne.n	8009e4e <_strtod_l+0x236>
 8009e32:	1c69      	adds	r1, r5, #1
 8009e34:	4401      	add	r1, r0
 8009e36:	4428      	add	r0, r5
 8009e38:	2808      	cmp	r0, #8
 8009e3a:	dc16      	bgt.n	8009e6a <_strtod_l+0x252>
 8009e3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009e3e:	230a      	movs	r3, #10
 8009e40:	fb03 2300 	mla	r3, r3, r0, r2
 8009e44:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e46:	2300      	movs	r3, #0
 8009e48:	e018      	b.n	8009e7c <_strtod_l+0x264>
 8009e4a:	4638      	mov	r0, r7
 8009e4c:	e7da      	b.n	8009e04 <_strtod_l+0x1ec>
 8009e4e:	2b08      	cmp	r3, #8
 8009e50:	f103 0301 	add.w	r3, r3, #1
 8009e54:	dc03      	bgt.n	8009e5e <_strtod_l+0x246>
 8009e56:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009e58:	434e      	muls	r6, r1
 8009e5a:	960a      	str	r6, [sp, #40]	@ 0x28
 8009e5c:	e7e7      	b.n	8009e2e <_strtod_l+0x216>
 8009e5e:	2b10      	cmp	r3, #16
 8009e60:	bfde      	ittt	le
 8009e62:	9e08      	ldrle	r6, [sp, #32]
 8009e64:	434e      	mulle	r6, r1
 8009e66:	9608      	strle	r6, [sp, #32]
 8009e68:	e7e1      	b.n	8009e2e <_strtod_l+0x216>
 8009e6a:	280f      	cmp	r0, #15
 8009e6c:	dceb      	bgt.n	8009e46 <_strtod_l+0x22e>
 8009e6e:	9808      	ldr	r0, [sp, #32]
 8009e70:	230a      	movs	r3, #10
 8009e72:	fb03 2300 	mla	r3, r3, r0, r2
 8009e76:	9308      	str	r3, [sp, #32]
 8009e78:	e7e5      	b.n	8009e46 <_strtod_l+0x22e>
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009e7e:	1c50      	adds	r0, r2, #1
 8009e80:	9019      	str	r0, [sp, #100]	@ 0x64
 8009e82:	7852      	ldrb	r2, [r2, #1]
 8009e84:	4618      	mov	r0, r3
 8009e86:	460d      	mov	r5, r1
 8009e88:	e7b1      	b.n	8009dee <_strtod_l+0x1d6>
 8009e8a:	f04f 0900 	mov.w	r9, #0
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e77d      	b.n	8009d8e <_strtod_l+0x176>
 8009e92:	f04f 0c00 	mov.w	ip, #0
 8009e96:	1ca2      	adds	r2, r4, #2
 8009e98:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e9a:	78a2      	ldrb	r2, [r4, #2]
 8009e9c:	e785      	b.n	8009daa <_strtod_l+0x192>
 8009e9e:	f04f 0c01 	mov.w	ip, #1
 8009ea2:	e7f8      	b.n	8009e96 <_strtod_l+0x27e>
 8009ea4:	080119e0 	.word	0x080119e0
 8009ea8:	080119ca 	.word	0x080119ca
 8009eac:	7ff00000 	.word	0x7ff00000
 8009eb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009eb2:	1c51      	adds	r1, r2, #1
 8009eb4:	9119      	str	r1, [sp, #100]	@ 0x64
 8009eb6:	7852      	ldrb	r2, [r2, #1]
 8009eb8:	2a30      	cmp	r2, #48	@ 0x30
 8009eba:	d0f9      	beq.n	8009eb0 <_strtod_l+0x298>
 8009ebc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009ec0:	2908      	cmp	r1, #8
 8009ec2:	f63f af78 	bhi.w	8009db6 <_strtod_l+0x19e>
 8009ec6:	3a30      	subs	r2, #48	@ 0x30
 8009ec8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009eca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ecc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009ece:	f04f 080a 	mov.w	r8, #10
 8009ed2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ed4:	1c56      	adds	r6, r2, #1
 8009ed6:	9619      	str	r6, [sp, #100]	@ 0x64
 8009ed8:	7852      	ldrb	r2, [r2, #1]
 8009eda:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009ede:	f1be 0f09 	cmp.w	lr, #9
 8009ee2:	d939      	bls.n	8009f58 <_strtod_l+0x340>
 8009ee4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009ee6:	1a76      	subs	r6, r6, r1
 8009ee8:	2e08      	cmp	r6, #8
 8009eea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009eee:	dc03      	bgt.n	8009ef8 <_strtod_l+0x2e0>
 8009ef0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009ef2:	4588      	cmp	r8, r1
 8009ef4:	bfa8      	it	ge
 8009ef6:	4688      	movge	r8, r1
 8009ef8:	f1bc 0f00 	cmp.w	ip, #0
 8009efc:	d001      	beq.n	8009f02 <_strtod_l+0x2ea>
 8009efe:	f1c8 0800 	rsb	r8, r8, #0
 8009f02:	2d00      	cmp	r5, #0
 8009f04:	d14e      	bne.n	8009fa4 <_strtod_l+0x38c>
 8009f06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f08:	4308      	orrs	r0, r1
 8009f0a:	f47f aebe 	bne.w	8009c8a <_strtod_l+0x72>
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f47f aed6 	bne.w	8009cc0 <_strtod_l+0xa8>
 8009f14:	2a69      	cmp	r2, #105	@ 0x69
 8009f16:	d028      	beq.n	8009f6a <_strtod_l+0x352>
 8009f18:	dc25      	bgt.n	8009f66 <_strtod_l+0x34e>
 8009f1a:	2a49      	cmp	r2, #73	@ 0x49
 8009f1c:	d025      	beq.n	8009f6a <_strtod_l+0x352>
 8009f1e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009f20:	f47f aece 	bne.w	8009cc0 <_strtod_l+0xa8>
 8009f24:	499b      	ldr	r1, [pc, #620]	@ (800a194 <_strtod_l+0x57c>)
 8009f26:	a819      	add	r0, sp, #100	@ 0x64
 8009f28:	f003 fcaa 	bl	800d880 <__match>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	f43f aec7 	beq.w	8009cc0 <_strtod_l+0xa8>
 8009f32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	2b28      	cmp	r3, #40	@ 0x28
 8009f38:	d12e      	bne.n	8009f98 <_strtod_l+0x380>
 8009f3a:	4997      	ldr	r1, [pc, #604]	@ (800a198 <_strtod_l+0x580>)
 8009f3c:	aa1c      	add	r2, sp, #112	@ 0x70
 8009f3e:	a819      	add	r0, sp, #100	@ 0x64
 8009f40:	f003 fcb2 	bl	800d8a8 <__hexnan>
 8009f44:	2805      	cmp	r0, #5
 8009f46:	d127      	bne.n	8009f98 <_strtod_l+0x380>
 8009f48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f4a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009f4e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009f52:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009f56:	e698      	b.n	8009c8a <_strtod_l+0x72>
 8009f58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009f5a:	fb08 2101 	mla	r1, r8, r1, r2
 8009f5e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009f62:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f64:	e7b5      	b.n	8009ed2 <_strtod_l+0x2ba>
 8009f66:	2a6e      	cmp	r2, #110	@ 0x6e
 8009f68:	e7da      	b.n	8009f20 <_strtod_l+0x308>
 8009f6a:	498c      	ldr	r1, [pc, #560]	@ (800a19c <_strtod_l+0x584>)
 8009f6c:	a819      	add	r0, sp, #100	@ 0x64
 8009f6e:	f003 fc87 	bl	800d880 <__match>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	f43f aea4 	beq.w	8009cc0 <_strtod_l+0xa8>
 8009f78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f7a:	4989      	ldr	r1, [pc, #548]	@ (800a1a0 <_strtod_l+0x588>)
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	a819      	add	r0, sp, #100	@ 0x64
 8009f80:	9319      	str	r3, [sp, #100]	@ 0x64
 8009f82:	f003 fc7d 	bl	800d880 <__match>
 8009f86:	b910      	cbnz	r0, 8009f8e <_strtod_l+0x376>
 8009f88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009f8e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a1b0 <_strtod_l+0x598>
 8009f92:	f04f 0a00 	mov.w	sl, #0
 8009f96:	e678      	b.n	8009c8a <_strtod_l+0x72>
 8009f98:	4882      	ldr	r0, [pc, #520]	@ (800a1a4 <_strtod_l+0x58c>)
 8009f9a:	f002 fb39 	bl	800c610 <nan>
 8009f9e:	ec5b ab10 	vmov	sl, fp, d0
 8009fa2:	e672      	b.n	8009c8a <_strtod_l+0x72>
 8009fa4:	eba8 0309 	sub.w	r3, r8, r9
 8009fa8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009faa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fac:	2f00      	cmp	r7, #0
 8009fae:	bf08      	it	eq
 8009fb0:	462f      	moveq	r7, r5
 8009fb2:	2d10      	cmp	r5, #16
 8009fb4:	462c      	mov	r4, r5
 8009fb6:	bfa8      	it	ge
 8009fb8:	2410      	movge	r4, #16
 8009fba:	f7f6 fab3 	bl	8000524 <__aeabi_ui2d>
 8009fbe:	2d09      	cmp	r5, #9
 8009fc0:	4682      	mov	sl, r0
 8009fc2:	468b      	mov	fp, r1
 8009fc4:	dc13      	bgt.n	8009fee <_strtod_l+0x3d6>
 8009fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f43f ae5e 	beq.w	8009c8a <_strtod_l+0x72>
 8009fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fd0:	dd78      	ble.n	800a0c4 <_strtod_l+0x4ac>
 8009fd2:	2b16      	cmp	r3, #22
 8009fd4:	dc5f      	bgt.n	800a096 <_strtod_l+0x47e>
 8009fd6:	4974      	ldr	r1, [pc, #464]	@ (800a1a8 <_strtod_l+0x590>)
 8009fd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fe0:	4652      	mov	r2, sl
 8009fe2:	465b      	mov	r3, fp
 8009fe4:	f7f6 fb18 	bl	8000618 <__aeabi_dmul>
 8009fe8:	4682      	mov	sl, r0
 8009fea:	468b      	mov	fp, r1
 8009fec:	e64d      	b.n	8009c8a <_strtod_l+0x72>
 8009fee:	4b6e      	ldr	r3, [pc, #440]	@ (800a1a8 <_strtod_l+0x590>)
 8009ff0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ff4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009ff8:	f7f6 fb0e 	bl	8000618 <__aeabi_dmul>
 8009ffc:	4682      	mov	sl, r0
 8009ffe:	9808      	ldr	r0, [sp, #32]
 800a000:	468b      	mov	fp, r1
 800a002:	f7f6 fa8f 	bl	8000524 <__aeabi_ui2d>
 800a006:	4602      	mov	r2, r0
 800a008:	460b      	mov	r3, r1
 800a00a:	4650      	mov	r0, sl
 800a00c:	4659      	mov	r1, fp
 800a00e:	f7f6 f94d 	bl	80002ac <__adddf3>
 800a012:	2d0f      	cmp	r5, #15
 800a014:	4682      	mov	sl, r0
 800a016:	468b      	mov	fp, r1
 800a018:	ddd5      	ble.n	8009fc6 <_strtod_l+0x3ae>
 800a01a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a01c:	1b2c      	subs	r4, r5, r4
 800a01e:	441c      	add	r4, r3
 800a020:	2c00      	cmp	r4, #0
 800a022:	f340 8096 	ble.w	800a152 <_strtod_l+0x53a>
 800a026:	f014 030f 	ands.w	r3, r4, #15
 800a02a:	d00a      	beq.n	800a042 <_strtod_l+0x42a>
 800a02c:	495e      	ldr	r1, [pc, #376]	@ (800a1a8 <_strtod_l+0x590>)
 800a02e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a032:	4652      	mov	r2, sl
 800a034:	465b      	mov	r3, fp
 800a036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a03a:	f7f6 faed 	bl	8000618 <__aeabi_dmul>
 800a03e:	4682      	mov	sl, r0
 800a040:	468b      	mov	fp, r1
 800a042:	f034 040f 	bics.w	r4, r4, #15
 800a046:	d073      	beq.n	800a130 <_strtod_l+0x518>
 800a048:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a04c:	dd48      	ble.n	800a0e0 <_strtod_l+0x4c8>
 800a04e:	2400      	movs	r4, #0
 800a050:	46a0      	mov	r8, r4
 800a052:	940a      	str	r4, [sp, #40]	@ 0x28
 800a054:	46a1      	mov	r9, r4
 800a056:	9a05      	ldr	r2, [sp, #20]
 800a058:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a1b0 <_strtod_l+0x598>
 800a05c:	2322      	movs	r3, #34	@ 0x22
 800a05e:	6013      	str	r3, [r2, #0]
 800a060:	f04f 0a00 	mov.w	sl, #0
 800a064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a066:	2b00      	cmp	r3, #0
 800a068:	f43f ae0f 	beq.w	8009c8a <_strtod_l+0x72>
 800a06c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a06e:	9805      	ldr	r0, [sp, #20]
 800a070:	f003 fd4c 	bl	800db0c <_Bfree>
 800a074:	9805      	ldr	r0, [sp, #20]
 800a076:	4649      	mov	r1, r9
 800a078:	f003 fd48 	bl	800db0c <_Bfree>
 800a07c:	9805      	ldr	r0, [sp, #20]
 800a07e:	4641      	mov	r1, r8
 800a080:	f003 fd44 	bl	800db0c <_Bfree>
 800a084:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a086:	9805      	ldr	r0, [sp, #20]
 800a088:	f003 fd40 	bl	800db0c <_Bfree>
 800a08c:	9805      	ldr	r0, [sp, #20]
 800a08e:	4621      	mov	r1, r4
 800a090:	f003 fd3c 	bl	800db0c <_Bfree>
 800a094:	e5f9      	b.n	8009c8a <_strtod_l+0x72>
 800a096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a098:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a09c:	4293      	cmp	r3, r2
 800a09e:	dbbc      	blt.n	800a01a <_strtod_l+0x402>
 800a0a0:	4c41      	ldr	r4, [pc, #260]	@ (800a1a8 <_strtod_l+0x590>)
 800a0a2:	f1c5 050f 	rsb	r5, r5, #15
 800a0a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a0aa:	4652      	mov	r2, sl
 800a0ac:	465b      	mov	r3, fp
 800a0ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0b2:	f7f6 fab1 	bl	8000618 <__aeabi_dmul>
 800a0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0b8:	1b5d      	subs	r5, r3, r5
 800a0ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a0be:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a0c2:	e78f      	b.n	8009fe4 <_strtod_l+0x3cc>
 800a0c4:	3316      	adds	r3, #22
 800a0c6:	dba8      	blt.n	800a01a <_strtod_l+0x402>
 800a0c8:	4b37      	ldr	r3, [pc, #220]	@ (800a1a8 <_strtod_l+0x590>)
 800a0ca:	eba9 0808 	sub.w	r8, r9, r8
 800a0ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a0d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a0d6:	4650      	mov	r0, sl
 800a0d8:	4659      	mov	r1, fp
 800a0da:	f7f6 fbc7 	bl	800086c <__aeabi_ddiv>
 800a0de:	e783      	b.n	8009fe8 <_strtod_l+0x3d0>
 800a0e0:	4b32      	ldr	r3, [pc, #200]	@ (800a1ac <_strtod_l+0x594>)
 800a0e2:	9308      	str	r3, [sp, #32]
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	1124      	asrs	r4, r4, #4
 800a0e8:	4650      	mov	r0, sl
 800a0ea:	4659      	mov	r1, fp
 800a0ec:	461e      	mov	r6, r3
 800a0ee:	2c01      	cmp	r4, #1
 800a0f0:	dc21      	bgt.n	800a136 <_strtod_l+0x51e>
 800a0f2:	b10b      	cbz	r3, 800a0f8 <_strtod_l+0x4e0>
 800a0f4:	4682      	mov	sl, r0
 800a0f6:	468b      	mov	fp, r1
 800a0f8:	492c      	ldr	r1, [pc, #176]	@ (800a1ac <_strtod_l+0x594>)
 800a0fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a0fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a102:	4652      	mov	r2, sl
 800a104:	465b      	mov	r3, fp
 800a106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a10a:	f7f6 fa85 	bl	8000618 <__aeabi_dmul>
 800a10e:	4b28      	ldr	r3, [pc, #160]	@ (800a1b0 <_strtod_l+0x598>)
 800a110:	460a      	mov	r2, r1
 800a112:	400b      	ands	r3, r1
 800a114:	4927      	ldr	r1, [pc, #156]	@ (800a1b4 <_strtod_l+0x59c>)
 800a116:	428b      	cmp	r3, r1
 800a118:	4682      	mov	sl, r0
 800a11a:	d898      	bhi.n	800a04e <_strtod_l+0x436>
 800a11c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a120:	428b      	cmp	r3, r1
 800a122:	bf86      	itte	hi
 800a124:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a1b8 <_strtod_l+0x5a0>
 800a128:	f04f 3aff 	movhi.w	sl, #4294967295
 800a12c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a130:	2300      	movs	r3, #0
 800a132:	9308      	str	r3, [sp, #32]
 800a134:	e07a      	b.n	800a22c <_strtod_l+0x614>
 800a136:	07e2      	lsls	r2, r4, #31
 800a138:	d505      	bpl.n	800a146 <_strtod_l+0x52e>
 800a13a:	9b08      	ldr	r3, [sp, #32]
 800a13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a140:	f7f6 fa6a 	bl	8000618 <__aeabi_dmul>
 800a144:	2301      	movs	r3, #1
 800a146:	9a08      	ldr	r2, [sp, #32]
 800a148:	3208      	adds	r2, #8
 800a14a:	3601      	adds	r6, #1
 800a14c:	1064      	asrs	r4, r4, #1
 800a14e:	9208      	str	r2, [sp, #32]
 800a150:	e7cd      	b.n	800a0ee <_strtod_l+0x4d6>
 800a152:	d0ed      	beq.n	800a130 <_strtod_l+0x518>
 800a154:	4264      	negs	r4, r4
 800a156:	f014 020f 	ands.w	r2, r4, #15
 800a15a:	d00a      	beq.n	800a172 <_strtod_l+0x55a>
 800a15c:	4b12      	ldr	r3, [pc, #72]	@ (800a1a8 <_strtod_l+0x590>)
 800a15e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a162:	4650      	mov	r0, sl
 800a164:	4659      	mov	r1, fp
 800a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16a:	f7f6 fb7f 	bl	800086c <__aeabi_ddiv>
 800a16e:	4682      	mov	sl, r0
 800a170:	468b      	mov	fp, r1
 800a172:	1124      	asrs	r4, r4, #4
 800a174:	d0dc      	beq.n	800a130 <_strtod_l+0x518>
 800a176:	2c1f      	cmp	r4, #31
 800a178:	dd20      	ble.n	800a1bc <_strtod_l+0x5a4>
 800a17a:	2400      	movs	r4, #0
 800a17c:	46a0      	mov	r8, r4
 800a17e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a180:	46a1      	mov	r9, r4
 800a182:	9a05      	ldr	r2, [sp, #20]
 800a184:	2322      	movs	r3, #34	@ 0x22
 800a186:	f04f 0a00 	mov.w	sl, #0
 800a18a:	f04f 0b00 	mov.w	fp, #0
 800a18e:	6013      	str	r3, [r2, #0]
 800a190:	e768      	b.n	800a064 <_strtod_l+0x44c>
 800a192:	bf00      	nop
 800a194:	08011b2e 	.word	0x08011b2e
 800a198:	080119cc 	.word	0x080119cc
 800a19c:	08011b26 	.word	0x08011b26
 800a1a0:	08011c0f 	.word	0x08011c0f
 800a1a4:	080109db 	.word	0x080109db
 800a1a8:	08011d88 	.word	0x08011d88
 800a1ac:	08011d60 	.word	0x08011d60
 800a1b0:	7ff00000 	.word	0x7ff00000
 800a1b4:	7ca00000 	.word	0x7ca00000
 800a1b8:	7fefffff 	.word	0x7fefffff
 800a1bc:	f014 0310 	ands.w	r3, r4, #16
 800a1c0:	bf18      	it	ne
 800a1c2:	236a      	movne	r3, #106	@ 0x6a
 800a1c4:	4ea9      	ldr	r6, [pc, #676]	@ (800a46c <_strtod_l+0x854>)
 800a1c6:	9308      	str	r3, [sp, #32]
 800a1c8:	4650      	mov	r0, sl
 800a1ca:	4659      	mov	r1, fp
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	07e2      	lsls	r2, r4, #31
 800a1d0:	d504      	bpl.n	800a1dc <_strtod_l+0x5c4>
 800a1d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a1d6:	f7f6 fa1f 	bl	8000618 <__aeabi_dmul>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	1064      	asrs	r4, r4, #1
 800a1de:	f106 0608 	add.w	r6, r6, #8
 800a1e2:	d1f4      	bne.n	800a1ce <_strtod_l+0x5b6>
 800a1e4:	b10b      	cbz	r3, 800a1ea <_strtod_l+0x5d2>
 800a1e6:	4682      	mov	sl, r0
 800a1e8:	468b      	mov	fp, r1
 800a1ea:	9b08      	ldr	r3, [sp, #32]
 800a1ec:	b1b3      	cbz	r3, 800a21c <_strtod_l+0x604>
 800a1ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a1f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	4659      	mov	r1, fp
 800a1fa:	dd0f      	ble.n	800a21c <_strtod_l+0x604>
 800a1fc:	2b1f      	cmp	r3, #31
 800a1fe:	dd55      	ble.n	800a2ac <_strtod_l+0x694>
 800a200:	2b34      	cmp	r3, #52	@ 0x34
 800a202:	bfde      	ittt	le
 800a204:	f04f 33ff 	movle.w	r3, #4294967295
 800a208:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a20c:	4093      	lslle	r3, r2
 800a20e:	f04f 0a00 	mov.w	sl, #0
 800a212:	bfcc      	ite	gt
 800a214:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a218:	ea03 0b01 	andle.w	fp, r3, r1
 800a21c:	2200      	movs	r2, #0
 800a21e:	2300      	movs	r3, #0
 800a220:	4650      	mov	r0, sl
 800a222:	4659      	mov	r1, fp
 800a224:	f7f6 fc60 	bl	8000ae8 <__aeabi_dcmpeq>
 800a228:	2800      	cmp	r0, #0
 800a22a:	d1a6      	bne.n	800a17a <_strtod_l+0x562>
 800a22c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a22e:	9300      	str	r3, [sp, #0]
 800a230:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a232:	9805      	ldr	r0, [sp, #20]
 800a234:	462b      	mov	r3, r5
 800a236:	463a      	mov	r2, r7
 800a238:	f003 fcd0 	bl	800dbdc <__s2b>
 800a23c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a23e:	2800      	cmp	r0, #0
 800a240:	f43f af05 	beq.w	800a04e <_strtod_l+0x436>
 800a244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a246:	2a00      	cmp	r2, #0
 800a248:	eba9 0308 	sub.w	r3, r9, r8
 800a24c:	bfa8      	it	ge
 800a24e:	2300      	movge	r3, #0
 800a250:	9312      	str	r3, [sp, #72]	@ 0x48
 800a252:	2400      	movs	r4, #0
 800a254:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a258:	9316      	str	r3, [sp, #88]	@ 0x58
 800a25a:	46a0      	mov	r8, r4
 800a25c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a25e:	9805      	ldr	r0, [sp, #20]
 800a260:	6859      	ldr	r1, [r3, #4]
 800a262:	f003 fc13 	bl	800da8c <_Balloc>
 800a266:	4681      	mov	r9, r0
 800a268:	2800      	cmp	r0, #0
 800a26a:	f43f aef4 	beq.w	800a056 <_strtod_l+0x43e>
 800a26e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a270:	691a      	ldr	r2, [r3, #16]
 800a272:	3202      	adds	r2, #2
 800a274:	f103 010c 	add.w	r1, r3, #12
 800a278:	0092      	lsls	r2, r2, #2
 800a27a:	300c      	adds	r0, #12
 800a27c:	f002 f9ba 	bl	800c5f4 <memcpy>
 800a280:	ec4b ab10 	vmov	d0, sl, fp
 800a284:	9805      	ldr	r0, [sp, #20]
 800a286:	aa1c      	add	r2, sp, #112	@ 0x70
 800a288:	a91b      	add	r1, sp, #108	@ 0x6c
 800a28a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a28e:	f003 ffe1 	bl	800e254 <__d2b>
 800a292:	901a      	str	r0, [sp, #104]	@ 0x68
 800a294:	2800      	cmp	r0, #0
 800a296:	f43f aede 	beq.w	800a056 <_strtod_l+0x43e>
 800a29a:	9805      	ldr	r0, [sp, #20]
 800a29c:	2101      	movs	r1, #1
 800a29e:	f003 fd33 	bl	800dd08 <__i2b>
 800a2a2:	4680      	mov	r8, r0
 800a2a4:	b948      	cbnz	r0, 800a2ba <_strtod_l+0x6a2>
 800a2a6:	f04f 0800 	mov.w	r8, #0
 800a2aa:	e6d4      	b.n	800a056 <_strtod_l+0x43e>
 800a2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b4:	ea03 0a0a 	and.w	sl, r3, sl
 800a2b8:	e7b0      	b.n	800a21c <_strtod_l+0x604>
 800a2ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a2bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a2be:	2d00      	cmp	r5, #0
 800a2c0:	bfab      	itete	ge
 800a2c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a2c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a2c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a2c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a2ca:	bfac      	ite	ge
 800a2cc:	18ef      	addge	r7, r5, r3
 800a2ce:	1b5e      	sublt	r6, r3, r5
 800a2d0:	9b08      	ldr	r3, [sp, #32]
 800a2d2:	1aed      	subs	r5, r5, r3
 800a2d4:	4415      	add	r5, r2
 800a2d6:	4b66      	ldr	r3, [pc, #408]	@ (800a470 <_strtod_l+0x858>)
 800a2d8:	3d01      	subs	r5, #1
 800a2da:	429d      	cmp	r5, r3
 800a2dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a2e0:	da50      	bge.n	800a384 <_strtod_l+0x76c>
 800a2e2:	1b5b      	subs	r3, r3, r5
 800a2e4:	2b1f      	cmp	r3, #31
 800a2e6:	eba2 0203 	sub.w	r2, r2, r3
 800a2ea:	f04f 0101 	mov.w	r1, #1
 800a2ee:	dc3d      	bgt.n	800a36c <_strtod_l+0x754>
 800a2f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a2f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a2fa:	18bd      	adds	r5, r7, r2
 800a2fc:	9b08      	ldr	r3, [sp, #32]
 800a2fe:	42af      	cmp	r7, r5
 800a300:	4416      	add	r6, r2
 800a302:	441e      	add	r6, r3
 800a304:	463b      	mov	r3, r7
 800a306:	bfa8      	it	ge
 800a308:	462b      	movge	r3, r5
 800a30a:	42b3      	cmp	r3, r6
 800a30c:	bfa8      	it	ge
 800a30e:	4633      	movge	r3, r6
 800a310:	2b00      	cmp	r3, #0
 800a312:	bfc2      	ittt	gt
 800a314:	1aed      	subgt	r5, r5, r3
 800a316:	1af6      	subgt	r6, r6, r3
 800a318:	1aff      	subgt	r7, r7, r3
 800a31a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	dd16      	ble.n	800a34e <_strtod_l+0x736>
 800a320:	4641      	mov	r1, r8
 800a322:	9805      	ldr	r0, [sp, #20]
 800a324:	461a      	mov	r2, r3
 800a326:	f003 fdaf 	bl	800de88 <__pow5mult>
 800a32a:	4680      	mov	r8, r0
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d0ba      	beq.n	800a2a6 <_strtod_l+0x68e>
 800a330:	4601      	mov	r1, r0
 800a332:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a334:	9805      	ldr	r0, [sp, #20]
 800a336:	f003 fcfd 	bl	800dd34 <__multiply>
 800a33a:	900e      	str	r0, [sp, #56]	@ 0x38
 800a33c:	2800      	cmp	r0, #0
 800a33e:	f43f ae8a 	beq.w	800a056 <_strtod_l+0x43e>
 800a342:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a344:	9805      	ldr	r0, [sp, #20]
 800a346:	f003 fbe1 	bl	800db0c <_Bfree>
 800a34a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a34c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a34e:	2d00      	cmp	r5, #0
 800a350:	dc1d      	bgt.n	800a38e <_strtod_l+0x776>
 800a352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a354:	2b00      	cmp	r3, #0
 800a356:	dd23      	ble.n	800a3a0 <_strtod_l+0x788>
 800a358:	4649      	mov	r1, r9
 800a35a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a35c:	9805      	ldr	r0, [sp, #20]
 800a35e:	f003 fd93 	bl	800de88 <__pow5mult>
 800a362:	4681      	mov	r9, r0
 800a364:	b9e0      	cbnz	r0, 800a3a0 <_strtod_l+0x788>
 800a366:	f04f 0900 	mov.w	r9, #0
 800a36a:	e674      	b.n	800a056 <_strtod_l+0x43e>
 800a36c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a370:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a374:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a378:	35e2      	adds	r5, #226	@ 0xe2
 800a37a:	fa01 f305 	lsl.w	r3, r1, r5
 800a37e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a380:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a382:	e7ba      	b.n	800a2fa <_strtod_l+0x6e2>
 800a384:	2300      	movs	r3, #0
 800a386:	9310      	str	r3, [sp, #64]	@ 0x40
 800a388:	2301      	movs	r3, #1
 800a38a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a38c:	e7b5      	b.n	800a2fa <_strtod_l+0x6e2>
 800a38e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a390:	9805      	ldr	r0, [sp, #20]
 800a392:	462a      	mov	r2, r5
 800a394:	f003 fdd2 	bl	800df3c <__lshift>
 800a398:	901a      	str	r0, [sp, #104]	@ 0x68
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d1d9      	bne.n	800a352 <_strtod_l+0x73a>
 800a39e:	e65a      	b.n	800a056 <_strtod_l+0x43e>
 800a3a0:	2e00      	cmp	r6, #0
 800a3a2:	dd07      	ble.n	800a3b4 <_strtod_l+0x79c>
 800a3a4:	4649      	mov	r1, r9
 800a3a6:	9805      	ldr	r0, [sp, #20]
 800a3a8:	4632      	mov	r2, r6
 800a3aa:	f003 fdc7 	bl	800df3c <__lshift>
 800a3ae:	4681      	mov	r9, r0
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d0d8      	beq.n	800a366 <_strtod_l+0x74e>
 800a3b4:	2f00      	cmp	r7, #0
 800a3b6:	dd08      	ble.n	800a3ca <_strtod_l+0x7b2>
 800a3b8:	4641      	mov	r1, r8
 800a3ba:	9805      	ldr	r0, [sp, #20]
 800a3bc:	463a      	mov	r2, r7
 800a3be:	f003 fdbd 	bl	800df3c <__lshift>
 800a3c2:	4680      	mov	r8, r0
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	f43f ae46 	beq.w	800a056 <_strtod_l+0x43e>
 800a3ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3cc:	9805      	ldr	r0, [sp, #20]
 800a3ce:	464a      	mov	r2, r9
 800a3d0:	f003 fe3c 	bl	800e04c <__mdiff>
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	f43f ae3d 	beq.w	800a056 <_strtod_l+0x43e>
 800a3dc:	68c3      	ldr	r3, [r0, #12]
 800a3de:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	60c3      	str	r3, [r0, #12]
 800a3e4:	4641      	mov	r1, r8
 800a3e6:	f003 fe15 	bl	800e014 <__mcmp>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	da46      	bge.n	800a47c <_strtod_l+0x864>
 800a3ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3f0:	ea53 030a 	orrs.w	r3, r3, sl
 800a3f4:	d16c      	bne.n	800a4d0 <_strtod_l+0x8b8>
 800a3f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d168      	bne.n	800a4d0 <_strtod_l+0x8b8>
 800a3fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a402:	0d1b      	lsrs	r3, r3, #20
 800a404:	051b      	lsls	r3, r3, #20
 800a406:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a40a:	d961      	bls.n	800a4d0 <_strtod_l+0x8b8>
 800a40c:	6963      	ldr	r3, [r4, #20]
 800a40e:	b913      	cbnz	r3, 800a416 <_strtod_l+0x7fe>
 800a410:	6923      	ldr	r3, [r4, #16]
 800a412:	2b01      	cmp	r3, #1
 800a414:	dd5c      	ble.n	800a4d0 <_strtod_l+0x8b8>
 800a416:	4621      	mov	r1, r4
 800a418:	2201      	movs	r2, #1
 800a41a:	9805      	ldr	r0, [sp, #20]
 800a41c:	f003 fd8e 	bl	800df3c <__lshift>
 800a420:	4641      	mov	r1, r8
 800a422:	4604      	mov	r4, r0
 800a424:	f003 fdf6 	bl	800e014 <__mcmp>
 800a428:	2800      	cmp	r0, #0
 800a42a:	dd51      	ble.n	800a4d0 <_strtod_l+0x8b8>
 800a42c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a430:	9a08      	ldr	r2, [sp, #32]
 800a432:	0d1b      	lsrs	r3, r3, #20
 800a434:	051b      	lsls	r3, r3, #20
 800a436:	2a00      	cmp	r2, #0
 800a438:	d06b      	beq.n	800a512 <_strtod_l+0x8fa>
 800a43a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a43e:	d868      	bhi.n	800a512 <_strtod_l+0x8fa>
 800a440:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a444:	f67f ae9d 	bls.w	800a182 <_strtod_l+0x56a>
 800a448:	4b0a      	ldr	r3, [pc, #40]	@ (800a474 <_strtod_l+0x85c>)
 800a44a:	4650      	mov	r0, sl
 800a44c:	4659      	mov	r1, fp
 800a44e:	2200      	movs	r2, #0
 800a450:	f7f6 f8e2 	bl	8000618 <__aeabi_dmul>
 800a454:	4b08      	ldr	r3, [pc, #32]	@ (800a478 <_strtod_l+0x860>)
 800a456:	400b      	ands	r3, r1
 800a458:	4682      	mov	sl, r0
 800a45a:	468b      	mov	fp, r1
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f47f ae05 	bne.w	800a06c <_strtod_l+0x454>
 800a462:	9a05      	ldr	r2, [sp, #20]
 800a464:	2322      	movs	r3, #34	@ 0x22
 800a466:	6013      	str	r3, [r2, #0]
 800a468:	e600      	b.n	800a06c <_strtod_l+0x454>
 800a46a:	bf00      	nop
 800a46c:	080119f8 	.word	0x080119f8
 800a470:	fffffc02 	.word	0xfffffc02
 800a474:	39500000 	.word	0x39500000
 800a478:	7ff00000 	.word	0x7ff00000
 800a47c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a480:	d165      	bne.n	800a54e <_strtod_l+0x936>
 800a482:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a484:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a488:	b35a      	cbz	r2, 800a4e2 <_strtod_l+0x8ca>
 800a48a:	4a9f      	ldr	r2, [pc, #636]	@ (800a708 <_strtod_l+0xaf0>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d12b      	bne.n	800a4e8 <_strtod_l+0x8d0>
 800a490:	9b08      	ldr	r3, [sp, #32]
 800a492:	4651      	mov	r1, sl
 800a494:	b303      	cbz	r3, 800a4d8 <_strtod_l+0x8c0>
 800a496:	4b9d      	ldr	r3, [pc, #628]	@ (800a70c <_strtod_l+0xaf4>)
 800a498:	465a      	mov	r2, fp
 800a49a:	4013      	ands	r3, r2
 800a49c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a4:	d81b      	bhi.n	800a4de <_strtod_l+0x8c6>
 800a4a6:	0d1b      	lsrs	r3, r3, #20
 800a4a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a4ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b0:	4299      	cmp	r1, r3
 800a4b2:	d119      	bne.n	800a4e8 <_strtod_l+0x8d0>
 800a4b4:	4b96      	ldr	r3, [pc, #600]	@ (800a710 <_strtod_l+0xaf8>)
 800a4b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d102      	bne.n	800a4c2 <_strtod_l+0x8aa>
 800a4bc:	3101      	adds	r1, #1
 800a4be:	f43f adca 	beq.w	800a056 <_strtod_l+0x43e>
 800a4c2:	4b92      	ldr	r3, [pc, #584]	@ (800a70c <_strtod_l+0xaf4>)
 800a4c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4c6:	401a      	ands	r2, r3
 800a4c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a4cc:	f04f 0a00 	mov.w	sl, #0
 800a4d0:	9b08      	ldr	r3, [sp, #32]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1b8      	bne.n	800a448 <_strtod_l+0x830>
 800a4d6:	e5c9      	b.n	800a06c <_strtod_l+0x454>
 800a4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4dc:	e7e8      	b.n	800a4b0 <_strtod_l+0x898>
 800a4de:	4613      	mov	r3, r2
 800a4e0:	e7e6      	b.n	800a4b0 <_strtod_l+0x898>
 800a4e2:	ea53 030a 	orrs.w	r3, r3, sl
 800a4e6:	d0a1      	beq.n	800a42c <_strtod_l+0x814>
 800a4e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a4ea:	b1db      	cbz	r3, 800a524 <_strtod_l+0x90c>
 800a4ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4ee:	4213      	tst	r3, r2
 800a4f0:	d0ee      	beq.n	800a4d0 <_strtod_l+0x8b8>
 800a4f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4f4:	9a08      	ldr	r2, [sp, #32]
 800a4f6:	4650      	mov	r0, sl
 800a4f8:	4659      	mov	r1, fp
 800a4fa:	b1bb      	cbz	r3, 800a52c <_strtod_l+0x914>
 800a4fc:	f7ff fb6c 	bl	8009bd8 <sulp>
 800a500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a504:	ec53 2b10 	vmov	r2, r3, d0
 800a508:	f7f5 fed0 	bl	80002ac <__adddf3>
 800a50c:	4682      	mov	sl, r0
 800a50e:	468b      	mov	fp, r1
 800a510:	e7de      	b.n	800a4d0 <_strtod_l+0x8b8>
 800a512:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a516:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a51a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a51e:	f04f 3aff 	mov.w	sl, #4294967295
 800a522:	e7d5      	b.n	800a4d0 <_strtod_l+0x8b8>
 800a524:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a526:	ea13 0f0a 	tst.w	r3, sl
 800a52a:	e7e1      	b.n	800a4f0 <_strtod_l+0x8d8>
 800a52c:	f7ff fb54 	bl	8009bd8 <sulp>
 800a530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a534:	ec53 2b10 	vmov	r2, r3, d0
 800a538:	f7f5 feb6 	bl	80002a8 <__aeabi_dsub>
 800a53c:	2200      	movs	r2, #0
 800a53e:	2300      	movs	r3, #0
 800a540:	4682      	mov	sl, r0
 800a542:	468b      	mov	fp, r1
 800a544:	f7f6 fad0 	bl	8000ae8 <__aeabi_dcmpeq>
 800a548:	2800      	cmp	r0, #0
 800a54a:	d0c1      	beq.n	800a4d0 <_strtod_l+0x8b8>
 800a54c:	e619      	b.n	800a182 <_strtod_l+0x56a>
 800a54e:	4641      	mov	r1, r8
 800a550:	4620      	mov	r0, r4
 800a552:	f003 fed7 	bl	800e304 <__ratio>
 800a556:	ec57 6b10 	vmov	r6, r7, d0
 800a55a:	2200      	movs	r2, #0
 800a55c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a560:	4630      	mov	r0, r6
 800a562:	4639      	mov	r1, r7
 800a564:	f7f6 fad4 	bl	8000b10 <__aeabi_dcmple>
 800a568:	2800      	cmp	r0, #0
 800a56a:	d06f      	beq.n	800a64c <_strtod_l+0xa34>
 800a56c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d17a      	bne.n	800a668 <_strtod_l+0xa50>
 800a572:	f1ba 0f00 	cmp.w	sl, #0
 800a576:	d158      	bne.n	800a62a <_strtod_l+0xa12>
 800a578:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a57a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d15a      	bne.n	800a638 <_strtod_l+0xa20>
 800a582:	4b64      	ldr	r3, [pc, #400]	@ (800a714 <_strtod_l+0xafc>)
 800a584:	2200      	movs	r2, #0
 800a586:	4630      	mov	r0, r6
 800a588:	4639      	mov	r1, r7
 800a58a:	f7f6 fab7 	bl	8000afc <__aeabi_dcmplt>
 800a58e:	2800      	cmp	r0, #0
 800a590:	d159      	bne.n	800a646 <_strtod_l+0xa2e>
 800a592:	4630      	mov	r0, r6
 800a594:	4639      	mov	r1, r7
 800a596:	4b60      	ldr	r3, [pc, #384]	@ (800a718 <_strtod_l+0xb00>)
 800a598:	2200      	movs	r2, #0
 800a59a:	f7f6 f83d 	bl	8000618 <__aeabi_dmul>
 800a59e:	4606      	mov	r6, r0
 800a5a0:	460f      	mov	r7, r1
 800a5a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a5a6:	9606      	str	r6, [sp, #24]
 800a5a8:	9307      	str	r3, [sp, #28]
 800a5aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5ae:	4d57      	ldr	r5, [pc, #348]	@ (800a70c <_strtod_l+0xaf4>)
 800a5b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a5b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5b6:	401d      	ands	r5, r3
 800a5b8:	4b58      	ldr	r3, [pc, #352]	@ (800a71c <_strtod_l+0xb04>)
 800a5ba:	429d      	cmp	r5, r3
 800a5bc:	f040 80b2 	bne.w	800a724 <_strtod_l+0xb0c>
 800a5c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a5c6:	ec4b ab10 	vmov	d0, sl, fp
 800a5ca:	f003 fdd3 	bl	800e174 <__ulp>
 800a5ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5d2:	ec51 0b10 	vmov	r0, r1, d0
 800a5d6:	f7f6 f81f 	bl	8000618 <__aeabi_dmul>
 800a5da:	4652      	mov	r2, sl
 800a5dc:	465b      	mov	r3, fp
 800a5de:	f7f5 fe65 	bl	80002ac <__adddf3>
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	4949      	ldr	r1, [pc, #292]	@ (800a70c <_strtod_l+0xaf4>)
 800a5e6:	4a4e      	ldr	r2, [pc, #312]	@ (800a720 <_strtod_l+0xb08>)
 800a5e8:	4019      	ands	r1, r3
 800a5ea:	4291      	cmp	r1, r2
 800a5ec:	4682      	mov	sl, r0
 800a5ee:	d942      	bls.n	800a676 <_strtod_l+0xa5e>
 800a5f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a5f2:	4b47      	ldr	r3, [pc, #284]	@ (800a710 <_strtod_l+0xaf8>)
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d103      	bne.n	800a600 <_strtod_l+0x9e8>
 800a5f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	f43f ad2b 	beq.w	800a056 <_strtod_l+0x43e>
 800a600:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a710 <_strtod_l+0xaf8>
 800a604:	f04f 3aff 	mov.w	sl, #4294967295
 800a608:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a60a:	9805      	ldr	r0, [sp, #20]
 800a60c:	f003 fa7e 	bl	800db0c <_Bfree>
 800a610:	9805      	ldr	r0, [sp, #20]
 800a612:	4649      	mov	r1, r9
 800a614:	f003 fa7a 	bl	800db0c <_Bfree>
 800a618:	9805      	ldr	r0, [sp, #20]
 800a61a:	4641      	mov	r1, r8
 800a61c:	f003 fa76 	bl	800db0c <_Bfree>
 800a620:	9805      	ldr	r0, [sp, #20]
 800a622:	4621      	mov	r1, r4
 800a624:	f003 fa72 	bl	800db0c <_Bfree>
 800a628:	e618      	b.n	800a25c <_strtod_l+0x644>
 800a62a:	f1ba 0f01 	cmp.w	sl, #1
 800a62e:	d103      	bne.n	800a638 <_strtod_l+0xa20>
 800a630:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a632:	2b00      	cmp	r3, #0
 800a634:	f43f ada5 	beq.w	800a182 <_strtod_l+0x56a>
 800a638:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a6e8 <_strtod_l+0xad0>
 800a63c:	4f35      	ldr	r7, [pc, #212]	@ (800a714 <_strtod_l+0xafc>)
 800a63e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a642:	2600      	movs	r6, #0
 800a644:	e7b1      	b.n	800a5aa <_strtod_l+0x992>
 800a646:	4f34      	ldr	r7, [pc, #208]	@ (800a718 <_strtod_l+0xb00>)
 800a648:	2600      	movs	r6, #0
 800a64a:	e7aa      	b.n	800a5a2 <_strtod_l+0x98a>
 800a64c:	4b32      	ldr	r3, [pc, #200]	@ (800a718 <_strtod_l+0xb00>)
 800a64e:	4630      	mov	r0, r6
 800a650:	4639      	mov	r1, r7
 800a652:	2200      	movs	r2, #0
 800a654:	f7f5 ffe0 	bl	8000618 <__aeabi_dmul>
 800a658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a65a:	4606      	mov	r6, r0
 800a65c:	460f      	mov	r7, r1
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d09f      	beq.n	800a5a2 <_strtod_l+0x98a>
 800a662:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a666:	e7a0      	b.n	800a5aa <_strtod_l+0x992>
 800a668:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a6f0 <_strtod_l+0xad8>
 800a66c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a670:	ec57 6b17 	vmov	r6, r7, d7
 800a674:	e799      	b.n	800a5aa <_strtod_l+0x992>
 800a676:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a67a:	9b08      	ldr	r3, [sp, #32]
 800a67c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1c1      	bne.n	800a608 <_strtod_l+0x9f0>
 800a684:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a688:	0d1b      	lsrs	r3, r3, #20
 800a68a:	051b      	lsls	r3, r3, #20
 800a68c:	429d      	cmp	r5, r3
 800a68e:	d1bb      	bne.n	800a608 <_strtod_l+0x9f0>
 800a690:	4630      	mov	r0, r6
 800a692:	4639      	mov	r1, r7
 800a694:	f7f6 fb08 	bl	8000ca8 <__aeabi_d2lz>
 800a698:	f7f5 ff90 	bl	80005bc <__aeabi_l2d>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4630      	mov	r0, r6
 800a6a2:	4639      	mov	r1, r7
 800a6a4:	f7f5 fe00 	bl	80002a8 <__aeabi_dsub>
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a6b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a6b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6b6:	ea46 060a 	orr.w	r6, r6, sl
 800a6ba:	431e      	orrs	r6, r3
 800a6bc:	d06f      	beq.n	800a79e <_strtod_l+0xb86>
 800a6be:	a30e      	add	r3, pc, #56	@ (adr r3, 800a6f8 <_strtod_l+0xae0>)
 800a6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c4:	f7f6 fa1a 	bl	8000afc <__aeabi_dcmplt>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	f47f accf 	bne.w	800a06c <_strtod_l+0x454>
 800a6ce:	a30c      	add	r3, pc, #48	@ (adr r3, 800a700 <_strtod_l+0xae8>)
 800a6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6d8:	f7f6 fa2e 	bl	8000b38 <__aeabi_dcmpgt>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d093      	beq.n	800a608 <_strtod_l+0x9f0>
 800a6e0:	e4c4      	b.n	800a06c <_strtod_l+0x454>
 800a6e2:	bf00      	nop
 800a6e4:	f3af 8000 	nop.w
 800a6e8:	00000000 	.word	0x00000000
 800a6ec:	bff00000 	.word	0xbff00000
 800a6f0:	00000000 	.word	0x00000000
 800a6f4:	3ff00000 	.word	0x3ff00000
 800a6f8:	94a03595 	.word	0x94a03595
 800a6fc:	3fdfffff 	.word	0x3fdfffff
 800a700:	35afe535 	.word	0x35afe535
 800a704:	3fe00000 	.word	0x3fe00000
 800a708:	000fffff 	.word	0x000fffff
 800a70c:	7ff00000 	.word	0x7ff00000
 800a710:	7fefffff 	.word	0x7fefffff
 800a714:	3ff00000 	.word	0x3ff00000
 800a718:	3fe00000 	.word	0x3fe00000
 800a71c:	7fe00000 	.word	0x7fe00000
 800a720:	7c9fffff 	.word	0x7c9fffff
 800a724:	9b08      	ldr	r3, [sp, #32]
 800a726:	b323      	cbz	r3, 800a772 <_strtod_l+0xb5a>
 800a728:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a72c:	d821      	bhi.n	800a772 <_strtod_l+0xb5a>
 800a72e:	a328      	add	r3, pc, #160	@ (adr r3, 800a7d0 <_strtod_l+0xbb8>)
 800a730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a734:	4630      	mov	r0, r6
 800a736:	4639      	mov	r1, r7
 800a738:	f7f6 f9ea 	bl	8000b10 <__aeabi_dcmple>
 800a73c:	b1a0      	cbz	r0, 800a768 <_strtod_l+0xb50>
 800a73e:	4639      	mov	r1, r7
 800a740:	4630      	mov	r0, r6
 800a742:	f7f6 fa41 	bl	8000bc8 <__aeabi_d2uiz>
 800a746:	2801      	cmp	r0, #1
 800a748:	bf38      	it	cc
 800a74a:	2001      	movcc	r0, #1
 800a74c:	f7f5 feea 	bl	8000524 <__aeabi_ui2d>
 800a750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a752:	4606      	mov	r6, r0
 800a754:	460f      	mov	r7, r1
 800a756:	b9fb      	cbnz	r3, 800a798 <_strtod_l+0xb80>
 800a758:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a75c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a75e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a760:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a764:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a768:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a76a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a76e:	1b5b      	subs	r3, r3, r5
 800a770:	9311      	str	r3, [sp, #68]	@ 0x44
 800a772:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a776:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a77a:	f003 fcfb 	bl	800e174 <__ulp>
 800a77e:	4650      	mov	r0, sl
 800a780:	ec53 2b10 	vmov	r2, r3, d0
 800a784:	4659      	mov	r1, fp
 800a786:	f7f5 ff47 	bl	8000618 <__aeabi_dmul>
 800a78a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a78e:	f7f5 fd8d 	bl	80002ac <__adddf3>
 800a792:	4682      	mov	sl, r0
 800a794:	468b      	mov	fp, r1
 800a796:	e770      	b.n	800a67a <_strtod_l+0xa62>
 800a798:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a79c:	e7e0      	b.n	800a760 <_strtod_l+0xb48>
 800a79e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a7d8 <_strtod_l+0xbc0>)
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	f7f6 f9aa 	bl	8000afc <__aeabi_dcmplt>
 800a7a8:	e798      	b.n	800a6dc <_strtod_l+0xac4>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a7b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7b2:	6013      	str	r3, [r2, #0]
 800a7b4:	f7ff ba6d 	b.w	8009c92 <_strtod_l+0x7a>
 800a7b8:	2a65      	cmp	r2, #101	@ 0x65
 800a7ba:	f43f ab66 	beq.w	8009e8a <_strtod_l+0x272>
 800a7be:	2a45      	cmp	r2, #69	@ 0x45
 800a7c0:	f43f ab63 	beq.w	8009e8a <_strtod_l+0x272>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	f7ff bb9e 	b.w	8009f06 <_strtod_l+0x2ee>
 800a7ca:	bf00      	nop
 800a7cc:	f3af 8000 	nop.w
 800a7d0:	ffc00000 	.word	0xffc00000
 800a7d4:	41dfffff 	.word	0x41dfffff
 800a7d8:	94a03595 	.word	0x94a03595
 800a7dc:	3fcfffff 	.word	0x3fcfffff

0800a7e0 <_strtod_r>:
 800a7e0:	4b01      	ldr	r3, [pc, #4]	@ (800a7e8 <_strtod_r+0x8>)
 800a7e2:	f7ff ba19 	b.w	8009c18 <_strtod_l>
 800a7e6:	bf00      	nop
 800a7e8:	20000034 	.word	0x20000034

0800a7ec <_strtol_l.constprop.0>:
 800a7ec:	2b24      	cmp	r3, #36	@ 0x24
 800a7ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f2:	4686      	mov	lr, r0
 800a7f4:	4690      	mov	r8, r2
 800a7f6:	d801      	bhi.n	800a7fc <_strtol_l.constprop.0+0x10>
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d106      	bne.n	800a80a <_strtol_l.constprop.0+0x1e>
 800a7fc:	f001 fec8 	bl	800c590 <__errno>
 800a800:	2316      	movs	r3, #22
 800a802:	6003      	str	r3, [r0, #0]
 800a804:	2000      	movs	r0, #0
 800a806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a80a:	4834      	ldr	r0, [pc, #208]	@ (800a8dc <_strtol_l.constprop.0+0xf0>)
 800a80c:	460d      	mov	r5, r1
 800a80e:	462a      	mov	r2, r5
 800a810:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a814:	5d06      	ldrb	r6, [r0, r4]
 800a816:	f016 0608 	ands.w	r6, r6, #8
 800a81a:	d1f8      	bne.n	800a80e <_strtol_l.constprop.0+0x22>
 800a81c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a81e:	d12d      	bne.n	800a87c <_strtol_l.constprop.0+0x90>
 800a820:	782c      	ldrb	r4, [r5, #0]
 800a822:	2601      	movs	r6, #1
 800a824:	1c95      	adds	r5, r2, #2
 800a826:	f033 0210 	bics.w	r2, r3, #16
 800a82a:	d109      	bne.n	800a840 <_strtol_l.constprop.0+0x54>
 800a82c:	2c30      	cmp	r4, #48	@ 0x30
 800a82e:	d12a      	bne.n	800a886 <_strtol_l.constprop.0+0x9a>
 800a830:	782a      	ldrb	r2, [r5, #0]
 800a832:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a836:	2a58      	cmp	r2, #88	@ 0x58
 800a838:	d125      	bne.n	800a886 <_strtol_l.constprop.0+0x9a>
 800a83a:	786c      	ldrb	r4, [r5, #1]
 800a83c:	2310      	movs	r3, #16
 800a83e:	3502      	adds	r5, #2
 800a840:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a844:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a848:	2200      	movs	r2, #0
 800a84a:	fbbc f9f3 	udiv	r9, ip, r3
 800a84e:	4610      	mov	r0, r2
 800a850:	fb03 ca19 	mls	sl, r3, r9, ip
 800a854:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a858:	2f09      	cmp	r7, #9
 800a85a:	d81b      	bhi.n	800a894 <_strtol_l.constprop.0+0xa8>
 800a85c:	463c      	mov	r4, r7
 800a85e:	42a3      	cmp	r3, r4
 800a860:	dd27      	ble.n	800a8b2 <_strtol_l.constprop.0+0xc6>
 800a862:	1c57      	adds	r7, r2, #1
 800a864:	d007      	beq.n	800a876 <_strtol_l.constprop.0+0x8a>
 800a866:	4581      	cmp	r9, r0
 800a868:	d320      	bcc.n	800a8ac <_strtol_l.constprop.0+0xc0>
 800a86a:	d101      	bne.n	800a870 <_strtol_l.constprop.0+0x84>
 800a86c:	45a2      	cmp	sl, r4
 800a86e:	db1d      	blt.n	800a8ac <_strtol_l.constprop.0+0xc0>
 800a870:	fb00 4003 	mla	r0, r0, r3, r4
 800a874:	2201      	movs	r2, #1
 800a876:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a87a:	e7eb      	b.n	800a854 <_strtol_l.constprop.0+0x68>
 800a87c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a87e:	bf04      	itt	eq
 800a880:	782c      	ldrbeq	r4, [r5, #0]
 800a882:	1c95      	addeq	r5, r2, #2
 800a884:	e7cf      	b.n	800a826 <_strtol_l.constprop.0+0x3a>
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1da      	bne.n	800a840 <_strtol_l.constprop.0+0x54>
 800a88a:	2c30      	cmp	r4, #48	@ 0x30
 800a88c:	bf0c      	ite	eq
 800a88e:	2308      	moveq	r3, #8
 800a890:	230a      	movne	r3, #10
 800a892:	e7d5      	b.n	800a840 <_strtol_l.constprop.0+0x54>
 800a894:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a898:	2f19      	cmp	r7, #25
 800a89a:	d801      	bhi.n	800a8a0 <_strtol_l.constprop.0+0xb4>
 800a89c:	3c37      	subs	r4, #55	@ 0x37
 800a89e:	e7de      	b.n	800a85e <_strtol_l.constprop.0+0x72>
 800a8a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a8a4:	2f19      	cmp	r7, #25
 800a8a6:	d804      	bhi.n	800a8b2 <_strtol_l.constprop.0+0xc6>
 800a8a8:	3c57      	subs	r4, #87	@ 0x57
 800a8aa:	e7d8      	b.n	800a85e <_strtol_l.constprop.0+0x72>
 800a8ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b0:	e7e1      	b.n	800a876 <_strtol_l.constprop.0+0x8a>
 800a8b2:	1c53      	adds	r3, r2, #1
 800a8b4:	d108      	bne.n	800a8c8 <_strtol_l.constprop.0+0xdc>
 800a8b6:	2322      	movs	r3, #34	@ 0x22
 800a8b8:	f8ce 3000 	str.w	r3, [lr]
 800a8bc:	4660      	mov	r0, ip
 800a8be:	f1b8 0f00 	cmp.w	r8, #0
 800a8c2:	d0a0      	beq.n	800a806 <_strtol_l.constprop.0+0x1a>
 800a8c4:	1e69      	subs	r1, r5, #1
 800a8c6:	e006      	b.n	800a8d6 <_strtol_l.constprop.0+0xea>
 800a8c8:	b106      	cbz	r6, 800a8cc <_strtol_l.constprop.0+0xe0>
 800a8ca:	4240      	negs	r0, r0
 800a8cc:	f1b8 0f00 	cmp.w	r8, #0
 800a8d0:	d099      	beq.n	800a806 <_strtol_l.constprop.0+0x1a>
 800a8d2:	2a00      	cmp	r2, #0
 800a8d4:	d1f6      	bne.n	800a8c4 <_strtol_l.constprop.0+0xd8>
 800a8d6:	f8c8 1000 	str.w	r1, [r8]
 800a8da:	e794      	b.n	800a806 <_strtol_l.constprop.0+0x1a>
 800a8dc:	08011a21 	.word	0x08011a21

0800a8e0 <_strtol_r>:
 800a8e0:	f7ff bf84 	b.w	800a7ec <_strtol_l.constprop.0>

0800a8e4 <strtol>:
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	460a      	mov	r2, r1
 800a8e8:	4601      	mov	r1, r0
 800a8ea:	4802      	ldr	r0, [pc, #8]	@ (800a8f4 <strtol+0x10>)
 800a8ec:	6800      	ldr	r0, [r0, #0]
 800a8ee:	f7ff bf7d 	b.w	800a7ec <_strtol_l.constprop.0>
 800a8f2:	bf00      	nop
 800a8f4:	200001a0 	.word	0x200001a0

0800a8f8 <__cvt>:
 800a8f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8fc:	ec57 6b10 	vmov	r6, r7, d0
 800a900:	2f00      	cmp	r7, #0
 800a902:	460c      	mov	r4, r1
 800a904:	4619      	mov	r1, r3
 800a906:	463b      	mov	r3, r7
 800a908:	bfbb      	ittet	lt
 800a90a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a90e:	461f      	movlt	r7, r3
 800a910:	2300      	movge	r3, #0
 800a912:	232d      	movlt	r3, #45	@ 0x2d
 800a914:	700b      	strb	r3, [r1, #0]
 800a916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a918:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a91c:	4691      	mov	r9, r2
 800a91e:	f023 0820 	bic.w	r8, r3, #32
 800a922:	bfbc      	itt	lt
 800a924:	4632      	movlt	r2, r6
 800a926:	4616      	movlt	r6, r2
 800a928:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a92c:	d005      	beq.n	800a93a <__cvt+0x42>
 800a92e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a932:	d100      	bne.n	800a936 <__cvt+0x3e>
 800a934:	3401      	adds	r4, #1
 800a936:	2102      	movs	r1, #2
 800a938:	e000      	b.n	800a93c <__cvt+0x44>
 800a93a:	2103      	movs	r1, #3
 800a93c:	ab03      	add	r3, sp, #12
 800a93e:	9301      	str	r3, [sp, #4]
 800a940:	ab02      	add	r3, sp, #8
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	ec47 6b10 	vmov	d0, r6, r7
 800a948:	4653      	mov	r3, sl
 800a94a:	4622      	mov	r2, r4
 800a94c:	f001 ff00 	bl	800c750 <_dtoa_r>
 800a950:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a954:	4605      	mov	r5, r0
 800a956:	d119      	bne.n	800a98c <__cvt+0x94>
 800a958:	f019 0f01 	tst.w	r9, #1
 800a95c:	d00e      	beq.n	800a97c <__cvt+0x84>
 800a95e:	eb00 0904 	add.w	r9, r0, r4
 800a962:	2200      	movs	r2, #0
 800a964:	2300      	movs	r3, #0
 800a966:	4630      	mov	r0, r6
 800a968:	4639      	mov	r1, r7
 800a96a:	f7f6 f8bd 	bl	8000ae8 <__aeabi_dcmpeq>
 800a96e:	b108      	cbz	r0, 800a974 <__cvt+0x7c>
 800a970:	f8cd 900c 	str.w	r9, [sp, #12]
 800a974:	2230      	movs	r2, #48	@ 0x30
 800a976:	9b03      	ldr	r3, [sp, #12]
 800a978:	454b      	cmp	r3, r9
 800a97a:	d31e      	bcc.n	800a9ba <__cvt+0xc2>
 800a97c:	9b03      	ldr	r3, [sp, #12]
 800a97e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a980:	1b5b      	subs	r3, r3, r5
 800a982:	4628      	mov	r0, r5
 800a984:	6013      	str	r3, [r2, #0]
 800a986:	b004      	add	sp, #16
 800a988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a98c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a990:	eb00 0904 	add.w	r9, r0, r4
 800a994:	d1e5      	bne.n	800a962 <__cvt+0x6a>
 800a996:	7803      	ldrb	r3, [r0, #0]
 800a998:	2b30      	cmp	r3, #48	@ 0x30
 800a99a:	d10a      	bne.n	800a9b2 <__cvt+0xba>
 800a99c:	2200      	movs	r2, #0
 800a99e:	2300      	movs	r3, #0
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	4639      	mov	r1, r7
 800a9a4:	f7f6 f8a0 	bl	8000ae8 <__aeabi_dcmpeq>
 800a9a8:	b918      	cbnz	r0, 800a9b2 <__cvt+0xba>
 800a9aa:	f1c4 0401 	rsb	r4, r4, #1
 800a9ae:	f8ca 4000 	str.w	r4, [sl]
 800a9b2:	f8da 3000 	ldr.w	r3, [sl]
 800a9b6:	4499      	add	r9, r3
 800a9b8:	e7d3      	b.n	800a962 <__cvt+0x6a>
 800a9ba:	1c59      	adds	r1, r3, #1
 800a9bc:	9103      	str	r1, [sp, #12]
 800a9be:	701a      	strb	r2, [r3, #0]
 800a9c0:	e7d9      	b.n	800a976 <__cvt+0x7e>

0800a9c2 <__exponent>:
 800a9c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9c4:	2900      	cmp	r1, #0
 800a9c6:	bfba      	itte	lt
 800a9c8:	4249      	neglt	r1, r1
 800a9ca:	232d      	movlt	r3, #45	@ 0x2d
 800a9cc:	232b      	movge	r3, #43	@ 0x2b
 800a9ce:	2909      	cmp	r1, #9
 800a9d0:	7002      	strb	r2, [r0, #0]
 800a9d2:	7043      	strb	r3, [r0, #1]
 800a9d4:	dd29      	ble.n	800aa2a <__exponent+0x68>
 800a9d6:	f10d 0307 	add.w	r3, sp, #7
 800a9da:	461d      	mov	r5, r3
 800a9dc:	270a      	movs	r7, #10
 800a9de:	461a      	mov	r2, r3
 800a9e0:	fbb1 f6f7 	udiv	r6, r1, r7
 800a9e4:	fb07 1416 	mls	r4, r7, r6, r1
 800a9e8:	3430      	adds	r4, #48	@ 0x30
 800a9ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	2c63      	cmp	r4, #99	@ 0x63
 800a9f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	dcf1      	bgt.n	800a9de <__exponent+0x1c>
 800a9fa:	3130      	adds	r1, #48	@ 0x30
 800a9fc:	1e94      	subs	r4, r2, #2
 800a9fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aa02:	1c41      	adds	r1, r0, #1
 800aa04:	4623      	mov	r3, r4
 800aa06:	42ab      	cmp	r3, r5
 800aa08:	d30a      	bcc.n	800aa20 <__exponent+0x5e>
 800aa0a:	f10d 0309 	add.w	r3, sp, #9
 800aa0e:	1a9b      	subs	r3, r3, r2
 800aa10:	42ac      	cmp	r4, r5
 800aa12:	bf88      	it	hi
 800aa14:	2300      	movhi	r3, #0
 800aa16:	3302      	adds	r3, #2
 800aa18:	4403      	add	r3, r0
 800aa1a:	1a18      	subs	r0, r3, r0
 800aa1c:	b003      	add	sp, #12
 800aa1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa20:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aa24:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aa28:	e7ed      	b.n	800aa06 <__exponent+0x44>
 800aa2a:	2330      	movs	r3, #48	@ 0x30
 800aa2c:	3130      	adds	r1, #48	@ 0x30
 800aa2e:	7083      	strb	r3, [r0, #2]
 800aa30:	70c1      	strb	r1, [r0, #3]
 800aa32:	1d03      	adds	r3, r0, #4
 800aa34:	e7f1      	b.n	800aa1a <__exponent+0x58>
	...

0800aa38 <_printf_float>:
 800aa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	b08d      	sub	sp, #52	@ 0x34
 800aa3e:	460c      	mov	r4, r1
 800aa40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aa44:	4616      	mov	r6, r2
 800aa46:	461f      	mov	r7, r3
 800aa48:	4605      	mov	r5, r0
 800aa4a:	f001 fd47 	bl	800c4dc <_localeconv_r>
 800aa4e:	6803      	ldr	r3, [r0, #0]
 800aa50:	9304      	str	r3, [sp, #16]
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7f5 fc1c 	bl	8000290 <strlen>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa5c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa60:	9005      	str	r0, [sp, #20]
 800aa62:	3307      	adds	r3, #7
 800aa64:	f023 0307 	bic.w	r3, r3, #7
 800aa68:	f103 0208 	add.w	r2, r3, #8
 800aa6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aa70:	f8d4 b000 	ldr.w	fp, [r4]
 800aa74:	f8c8 2000 	str.w	r2, [r8]
 800aa78:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aa80:	9307      	str	r3, [sp, #28]
 800aa82:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aa8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa8e:	4b9c      	ldr	r3, [pc, #624]	@ (800ad00 <_printf_float+0x2c8>)
 800aa90:	f04f 32ff 	mov.w	r2, #4294967295
 800aa94:	f7f6 f85a 	bl	8000b4c <__aeabi_dcmpun>
 800aa98:	bb70      	cbnz	r0, 800aaf8 <_printf_float+0xc0>
 800aa9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa9e:	4b98      	ldr	r3, [pc, #608]	@ (800ad00 <_printf_float+0x2c8>)
 800aaa0:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa4:	f7f6 f834 	bl	8000b10 <__aeabi_dcmple>
 800aaa8:	bb30      	cbnz	r0, 800aaf8 <_printf_float+0xc0>
 800aaaa:	2200      	movs	r2, #0
 800aaac:	2300      	movs	r3, #0
 800aaae:	4640      	mov	r0, r8
 800aab0:	4649      	mov	r1, r9
 800aab2:	f7f6 f823 	bl	8000afc <__aeabi_dcmplt>
 800aab6:	b110      	cbz	r0, 800aabe <_printf_float+0x86>
 800aab8:	232d      	movs	r3, #45	@ 0x2d
 800aaba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aabe:	4a91      	ldr	r2, [pc, #580]	@ (800ad04 <_printf_float+0x2cc>)
 800aac0:	4b91      	ldr	r3, [pc, #580]	@ (800ad08 <_printf_float+0x2d0>)
 800aac2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aac6:	bf94      	ite	ls
 800aac8:	4690      	movls	r8, r2
 800aaca:	4698      	movhi	r8, r3
 800aacc:	2303      	movs	r3, #3
 800aace:	6123      	str	r3, [r4, #16]
 800aad0:	f02b 0304 	bic.w	r3, fp, #4
 800aad4:	6023      	str	r3, [r4, #0]
 800aad6:	f04f 0900 	mov.w	r9, #0
 800aada:	9700      	str	r7, [sp, #0]
 800aadc:	4633      	mov	r3, r6
 800aade:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aae0:	4621      	mov	r1, r4
 800aae2:	4628      	mov	r0, r5
 800aae4:	f000 f9d2 	bl	800ae8c <_printf_common>
 800aae8:	3001      	adds	r0, #1
 800aaea:	f040 808d 	bne.w	800ac08 <_printf_float+0x1d0>
 800aaee:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf2:	b00d      	add	sp, #52	@ 0x34
 800aaf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf8:	4642      	mov	r2, r8
 800aafa:	464b      	mov	r3, r9
 800aafc:	4640      	mov	r0, r8
 800aafe:	4649      	mov	r1, r9
 800ab00:	f7f6 f824 	bl	8000b4c <__aeabi_dcmpun>
 800ab04:	b140      	cbz	r0, 800ab18 <_printf_float+0xe0>
 800ab06:	464b      	mov	r3, r9
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	bfbc      	itt	lt
 800ab0c:	232d      	movlt	r3, #45	@ 0x2d
 800ab0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ab12:	4a7e      	ldr	r2, [pc, #504]	@ (800ad0c <_printf_float+0x2d4>)
 800ab14:	4b7e      	ldr	r3, [pc, #504]	@ (800ad10 <_printf_float+0x2d8>)
 800ab16:	e7d4      	b.n	800aac2 <_printf_float+0x8a>
 800ab18:	6863      	ldr	r3, [r4, #4]
 800ab1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ab1e:	9206      	str	r2, [sp, #24]
 800ab20:	1c5a      	adds	r2, r3, #1
 800ab22:	d13b      	bne.n	800ab9c <_printf_float+0x164>
 800ab24:	2306      	movs	r3, #6
 800ab26:	6063      	str	r3, [r4, #4]
 800ab28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	6022      	str	r2, [r4, #0]
 800ab30:	9303      	str	r3, [sp, #12]
 800ab32:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab34:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ab38:	ab09      	add	r3, sp, #36	@ 0x24
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	6861      	ldr	r1, [r4, #4]
 800ab3e:	ec49 8b10 	vmov	d0, r8, r9
 800ab42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ab46:	4628      	mov	r0, r5
 800ab48:	f7ff fed6 	bl	800a8f8 <__cvt>
 800ab4c:	9b06      	ldr	r3, [sp, #24]
 800ab4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab50:	2b47      	cmp	r3, #71	@ 0x47
 800ab52:	4680      	mov	r8, r0
 800ab54:	d129      	bne.n	800abaa <_printf_float+0x172>
 800ab56:	1cc8      	adds	r0, r1, #3
 800ab58:	db02      	blt.n	800ab60 <_printf_float+0x128>
 800ab5a:	6863      	ldr	r3, [r4, #4]
 800ab5c:	4299      	cmp	r1, r3
 800ab5e:	dd41      	ble.n	800abe4 <_printf_float+0x1ac>
 800ab60:	f1aa 0a02 	sub.w	sl, sl, #2
 800ab64:	fa5f fa8a 	uxtb.w	sl, sl
 800ab68:	3901      	subs	r1, #1
 800ab6a:	4652      	mov	r2, sl
 800ab6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ab70:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab72:	f7ff ff26 	bl	800a9c2 <__exponent>
 800ab76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab78:	1813      	adds	r3, r2, r0
 800ab7a:	2a01      	cmp	r2, #1
 800ab7c:	4681      	mov	r9, r0
 800ab7e:	6123      	str	r3, [r4, #16]
 800ab80:	dc02      	bgt.n	800ab88 <_printf_float+0x150>
 800ab82:	6822      	ldr	r2, [r4, #0]
 800ab84:	07d2      	lsls	r2, r2, #31
 800ab86:	d501      	bpl.n	800ab8c <_printf_float+0x154>
 800ab88:	3301      	adds	r3, #1
 800ab8a:	6123      	str	r3, [r4, #16]
 800ab8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d0a2      	beq.n	800aada <_printf_float+0xa2>
 800ab94:	232d      	movs	r3, #45	@ 0x2d
 800ab96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab9a:	e79e      	b.n	800aada <_printf_float+0xa2>
 800ab9c:	9a06      	ldr	r2, [sp, #24]
 800ab9e:	2a47      	cmp	r2, #71	@ 0x47
 800aba0:	d1c2      	bne.n	800ab28 <_printf_float+0xf0>
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1c0      	bne.n	800ab28 <_printf_float+0xf0>
 800aba6:	2301      	movs	r3, #1
 800aba8:	e7bd      	b.n	800ab26 <_printf_float+0xee>
 800abaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800abae:	d9db      	bls.n	800ab68 <_printf_float+0x130>
 800abb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800abb4:	d118      	bne.n	800abe8 <_printf_float+0x1b0>
 800abb6:	2900      	cmp	r1, #0
 800abb8:	6863      	ldr	r3, [r4, #4]
 800abba:	dd0b      	ble.n	800abd4 <_printf_float+0x19c>
 800abbc:	6121      	str	r1, [r4, #16]
 800abbe:	b913      	cbnz	r3, 800abc6 <_printf_float+0x18e>
 800abc0:	6822      	ldr	r2, [r4, #0]
 800abc2:	07d0      	lsls	r0, r2, #31
 800abc4:	d502      	bpl.n	800abcc <_printf_float+0x194>
 800abc6:	3301      	adds	r3, #1
 800abc8:	440b      	add	r3, r1
 800abca:	6123      	str	r3, [r4, #16]
 800abcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800abce:	f04f 0900 	mov.w	r9, #0
 800abd2:	e7db      	b.n	800ab8c <_printf_float+0x154>
 800abd4:	b913      	cbnz	r3, 800abdc <_printf_float+0x1a4>
 800abd6:	6822      	ldr	r2, [r4, #0]
 800abd8:	07d2      	lsls	r2, r2, #31
 800abda:	d501      	bpl.n	800abe0 <_printf_float+0x1a8>
 800abdc:	3302      	adds	r3, #2
 800abde:	e7f4      	b.n	800abca <_printf_float+0x192>
 800abe0:	2301      	movs	r3, #1
 800abe2:	e7f2      	b.n	800abca <_printf_float+0x192>
 800abe4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800abe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abea:	4299      	cmp	r1, r3
 800abec:	db05      	blt.n	800abfa <_printf_float+0x1c2>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	6121      	str	r1, [r4, #16]
 800abf2:	07d8      	lsls	r0, r3, #31
 800abf4:	d5ea      	bpl.n	800abcc <_printf_float+0x194>
 800abf6:	1c4b      	adds	r3, r1, #1
 800abf8:	e7e7      	b.n	800abca <_printf_float+0x192>
 800abfa:	2900      	cmp	r1, #0
 800abfc:	bfd4      	ite	le
 800abfe:	f1c1 0202 	rsble	r2, r1, #2
 800ac02:	2201      	movgt	r2, #1
 800ac04:	4413      	add	r3, r2
 800ac06:	e7e0      	b.n	800abca <_printf_float+0x192>
 800ac08:	6823      	ldr	r3, [r4, #0]
 800ac0a:	055a      	lsls	r2, r3, #21
 800ac0c:	d407      	bmi.n	800ac1e <_printf_float+0x1e6>
 800ac0e:	6923      	ldr	r3, [r4, #16]
 800ac10:	4642      	mov	r2, r8
 800ac12:	4631      	mov	r1, r6
 800ac14:	4628      	mov	r0, r5
 800ac16:	47b8      	blx	r7
 800ac18:	3001      	adds	r0, #1
 800ac1a:	d12b      	bne.n	800ac74 <_printf_float+0x23c>
 800ac1c:	e767      	b.n	800aaee <_printf_float+0xb6>
 800ac1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ac22:	f240 80dd 	bls.w	800ade0 <_printf_float+0x3a8>
 800ac26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	f7f5 ff5b 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac32:	2800      	cmp	r0, #0
 800ac34:	d033      	beq.n	800ac9e <_printf_float+0x266>
 800ac36:	4a37      	ldr	r2, [pc, #220]	@ (800ad14 <_printf_float+0x2dc>)
 800ac38:	2301      	movs	r3, #1
 800ac3a:	4631      	mov	r1, r6
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	47b8      	blx	r7
 800ac40:	3001      	adds	r0, #1
 800ac42:	f43f af54 	beq.w	800aaee <_printf_float+0xb6>
 800ac46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ac4a:	4543      	cmp	r3, r8
 800ac4c:	db02      	blt.n	800ac54 <_printf_float+0x21c>
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	07d8      	lsls	r0, r3, #31
 800ac52:	d50f      	bpl.n	800ac74 <_printf_float+0x23c>
 800ac54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac58:	4631      	mov	r1, r6
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	47b8      	blx	r7
 800ac5e:	3001      	adds	r0, #1
 800ac60:	f43f af45 	beq.w	800aaee <_printf_float+0xb6>
 800ac64:	f04f 0900 	mov.w	r9, #0
 800ac68:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac6c:	f104 0a1a 	add.w	sl, r4, #26
 800ac70:	45c8      	cmp	r8, r9
 800ac72:	dc09      	bgt.n	800ac88 <_printf_float+0x250>
 800ac74:	6823      	ldr	r3, [r4, #0]
 800ac76:	079b      	lsls	r3, r3, #30
 800ac78:	f100 8103 	bmi.w	800ae82 <_printf_float+0x44a>
 800ac7c:	68e0      	ldr	r0, [r4, #12]
 800ac7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac80:	4298      	cmp	r0, r3
 800ac82:	bfb8      	it	lt
 800ac84:	4618      	movlt	r0, r3
 800ac86:	e734      	b.n	800aaf2 <_printf_float+0xba>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	4652      	mov	r2, sl
 800ac8c:	4631      	mov	r1, r6
 800ac8e:	4628      	mov	r0, r5
 800ac90:	47b8      	blx	r7
 800ac92:	3001      	adds	r0, #1
 800ac94:	f43f af2b 	beq.w	800aaee <_printf_float+0xb6>
 800ac98:	f109 0901 	add.w	r9, r9, #1
 800ac9c:	e7e8      	b.n	800ac70 <_printf_float+0x238>
 800ac9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	dc39      	bgt.n	800ad18 <_printf_float+0x2e0>
 800aca4:	4a1b      	ldr	r2, [pc, #108]	@ (800ad14 <_printf_float+0x2dc>)
 800aca6:	2301      	movs	r3, #1
 800aca8:	4631      	mov	r1, r6
 800acaa:	4628      	mov	r0, r5
 800acac:	47b8      	blx	r7
 800acae:	3001      	adds	r0, #1
 800acb0:	f43f af1d 	beq.w	800aaee <_printf_float+0xb6>
 800acb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800acb8:	ea59 0303 	orrs.w	r3, r9, r3
 800acbc:	d102      	bne.n	800acc4 <_printf_float+0x28c>
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	07d9      	lsls	r1, r3, #31
 800acc2:	d5d7      	bpl.n	800ac74 <_printf_float+0x23c>
 800acc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acc8:	4631      	mov	r1, r6
 800acca:	4628      	mov	r0, r5
 800accc:	47b8      	blx	r7
 800acce:	3001      	adds	r0, #1
 800acd0:	f43f af0d 	beq.w	800aaee <_printf_float+0xb6>
 800acd4:	f04f 0a00 	mov.w	sl, #0
 800acd8:	f104 0b1a 	add.w	fp, r4, #26
 800acdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acde:	425b      	negs	r3, r3
 800ace0:	4553      	cmp	r3, sl
 800ace2:	dc01      	bgt.n	800ace8 <_printf_float+0x2b0>
 800ace4:	464b      	mov	r3, r9
 800ace6:	e793      	b.n	800ac10 <_printf_float+0x1d8>
 800ace8:	2301      	movs	r3, #1
 800acea:	465a      	mov	r2, fp
 800acec:	4631      	mov	r1, r6
 800acee:	4628      	mov	r0, r5
 800acf0:	47b8      	blx	r7
 800acf2:	3001      	adds	r0, #1
 800acf4:	f43f aefb 	beq.w	800aaee <_printf_float+0xb6>
 800acf8:	f10a 0a01 	add.w	sl, sl, #1
 800acfc:	e7ee      	b.n	800acdc <_printf_float+0x2a4>
 800acfe:	bf00      	nop
 800ad00:	7fefffff 	.word	0x7fefffff
 800ad04:	08011b21 	.word	0x08011b21
 800ad08:	08011b25 	.word	0x08011b25
 800ad0c:	08011b29 	.word	0x08011b29
 800ad10:	08011b2d 	.word	0x08011b2d
 800ad14:	08011e77 	.word	0x08011e77
 800ad18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ad1e:	4553      	cmp	r3, sl
 800ad20:	bfa8      	it	ge
 800ad22:	4653      	movge	r3, sl
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	4699      	mov	r9, r3
 800ad28:	dc36      	bgt.n	800ad98 <_printf_float+0x360>
 800ad2a:	f04f 0b00 	mov.w	fp, #0
 800ad2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad32:	f104 021a 	add.w	r2, r4, #26
 800ad36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad38:	9306      	str	r3, [sp, #24]
 800ad3a:	eba3 0309 	sub.w	r3, r3, r9
 800ad3e:	455b      	cmp	r3, fp
 800ad40:	dc31      	bgt.n	800ada6 <_printf_float+0x36e>
 800ad42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad44:	459a      	cmp	sl, r3
 800ad46:	dc3a      	bgt.n	800adbe <_printf_float+0x386>
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	07da      	lsls	r2, r3, #31
 800ad4c:	d437      	bmi.n	800adbe <_printf_float+0x386>
 800ad4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad50:	ebaa 0903 	sub.w	r9, sl, r3
 800ad54:	9b06      	ldr	r3, [sp, #24]
 800ad56:	ebaa 0303 	sub.w	r3, sl, r3
 800ad5a:	4599      	cmp	r9, r3
 800ad5c:	bfa8      	it	ge
 800ad5e:	4699      	movge	r9, r3
 800ad60:	f1b9 0f00 	cmp.w	r9, #0
 800ad64:	dc33      	bgt.n	800adce <_printf_float+0x396>
 800ad66:	f04f 0800 	mov.w	r8, #0
 800ad6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad6e:	f104 0b1a 	add.w	fp, r4, #26
 800ad72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad74:	ebaa 0303 	sub.w	r3, sl, r3
 800ad78:	eba3 0309 	sub.w	r3, r3, r9
 800ad7c:	4543      	cmp	r3, r8
 800ad7e:	f77f af79 	ble.w	800ac74 <_printf_float+0x23c>
 800ad82:	2301      	movs	r3, #1
 800ad84:	465a      	mov	r2, fp
 800ad86:	4631      	mov	r1, r6
 800ad88:	4628      	mov	r0, r5
 800ad8a:	47b8      	blx	r7
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	f43f aeae 	beq.w	800aaee <_printf_float+0xb6>
 800ad92:	f108 0801 	add.w	r8, r8, #1
 800ad96:	e7ec      	b.n	800ad72 <_printf_float+0x33a>
 800ad98:	4642      	mov	r2, r8
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	47b8      	blx	r7
 800ada0:	3001      	adds	r0, #1
 800ada2:	d1c2      	bne.n	800ad2a <_printf_float+0x2f2>
 800ada4:	e6a3      	b.n	800aaee <_printf_float+0xb6>
 800ada6:	2301      	movs	r3, #1
 800ada8:	4631      	mov	r1, r6
 800adaa:	4628      	mov	r0, r5
 800adac:	9206      	str	r2, [sp, #24]
 800adae:	47b8      	blx	r7
 800adb0:	3001      	adds	r0, #1
 800adb2:	f43f ae9c 	beq.w	800aaee <_printf_float+0xb6>
 800adb6:	9a06      	ldr	r2, [sp, #24]
 800adb8:	f10b 0b01 	add.w	fp, fp, #1
 800adbc:	e7bb      	b.n	800ad36 <_printf_float+0x2fe>
 800adbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adc2:	4631      	mov	r1, r6
 800adc4:	4628      	mov	r0, r5
 800adc6:	47b8      	blx	r7
 800adc8:	3001      	adds	r0, #1
 800adca:	d1c0      	bne.n	800ad4e <_printf_float+0x316>
 800adcc:	e68f      	b.n	800aaee <_printf_float+0xb6>
 800adce:	9a06      	ldr	r2, [sp, #24]
 800add0:	464b      	mov	r3, r9
 800add2:	4442      	add	r2, r8
 800add4:	4631      	mov	r1, r6
 800add6:	4628      	mov	r0, r5
 800add8:	47b8      	blx	r7
 800adda:	3001      	adds	r0, #1
 800addc:	d1c3      	bne.n	800ad66 <_printf_float+0x32e>
 800adde:	e686      	b.n	800aaee <_printf_float+0xb6>
 800ade0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ade4:	f1ba 0f01 	cmp.w	sl, #1
 800ade8:	dc01      	bgt.n	800adee <_printf_float+0x3b6>
 800adea:	07db      	lsls	r3, r3, #31
 800adec:	d536      	bpl.n	800ae5c <_printf_float+0x424>
 800adee:	2301      	movs	r3, #1
 800adf0:	4642      	mov	r2, r8
 800adf2:	4631      	mov	r1, r6
 800adf4:	4628      	mov	r0, r5
 800adf6:	47b8      	blx	r7
 800adf8:	3001      	adds	r0, #1
 800adfa:	f43f ae78 	beq.w	800aaee <_printf_float+0xb6>
 800adfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae02:	4631      	mov	r1, r6
 800ae04:	4628      	mov	r0, r5
 800ae06:	47b8      	blx	r7
 800ae08:	3001      	adds	r0, #1
 800ae0a:	f43f ae70 	beq.w	800aaee <_printf_float+0xb6>
 800ae0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae12:	2200      	movs	r2, #0
 800ae14:	2300      	movs	r3, #0
 800ae16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae1a:	f7f5 fe65 	bl	8000ae8 <__aeabi_dcmpeq>
 800ae1e:	b9c0      	cbnz	r0, 800ae52 <_printf_float+0x41a>
 800ae20:	4653      	mov	r3, sl
 800ae22:	f108 0201 	add.w	r2, r8, #1
 800ae26:	4631      	mov	r1, r6
 800ae28:	4628      	mov	r0, r5
 800ae2a:	47b8      	blx	r7
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	d10c      	bne.n	800ae4a <_printf_float+0x412>
 800ae30:	e65d      	b.n	800aaee <_printf_float+0xb6>
 800ae32:	2301      	movs	r3, #1
 800ae34:	465a      	mov	r2, fp
 800ae36:	4631      	mov	r1, r6
 800ae38:	4628      	mov	r0, r5
 800ae3a:	47b8      	blx	r7
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	f43f ae56 	beq.w	800aaee <_printf_float+0xb6>
 800ae42:	f108 0801 	add.w	r8, r8, #1
 800ae46:	45d0      	cmp	r8, sl
 800ae48:	dbf3      	blt.n	800ae32 <_printf_float+0x3fa>
 800ae4a:	464b      	mov	r3, r9
 800ae4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ae50:	e6df      	b.n	800ac12 <_printf_float+0x1da>
 800ae52:	f04f 0800 	mov.w	r8, #0
 800ae56:	f104 0b1a 	add.w	fp, r4, #26
 800ae5a:	e7f4      	b.n	800ae46 <_printf_float+0x40e>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	4642      	mov	r2, r8
 800ae60:	e7e1      	b.n	800ae26 <_printf_float+0x3ee>
 800ae62:	2301      	movs	r3, #1
 800ae64:	464a      	mov	r2, r9
 800ae66:	4631      	mov	r1, r6
 800ae68:	4628      	mov	r0, r5
 800ae6a:	47b8      	blx	r7
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	f43f ae3e 	beq.w	800aaee <_printf_float+0xb6>
 800ae72:	f108 0801 	add.w	r8, r8, #1
 800ae76:	68e3      	ldr	r3, [r4, #12]
 800ae78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae7a:	1a5b      	subs	r3, r3, r1
 800ae7c:	4543      	cmp	r3, r8
 800ae7e:	dcf0      	bgt.n	800ae62 <_printf_float+0x42a>
 800ae80:	e6fc      	b.n	800ac7c <_printf_float+0x244>
 800ae82:	f04f 0800 	mov.w	r8, #0
 800ae86:	f104 0919 	add.w	r9, r4, #25
 800ae8a:	e7f4      	b.n	800ae76 <_printf_float+0x43e>

0800ae8c <_printf_common>:
 800ae8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae90:	4616      	mov	r6, r2
 800ae92:	4698      	mov	r8, r3
 800ae94:	688a      	ldr	r2, [r1, #8]
 800ae96:	690b      	ldr	r3, [r1, #16]
 800ae98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	bfb8      	it	lt
 800aea0:	4613      	movlt	r3, r2
 800aea2:	6033      	str	r3, [r6, #0]
 800aea4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aea8:	4607      	mov	r7, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	b10a      	cbz	r2, 800aeb2 <_printf_common+0x26>
 800aeae:	3301      	adds	r3, #1
 800aeb0:	6033      	str	r3, [r6, #0]
 800aeb2:	6823      	ldr	r3, [r4, #0]
 800aeb4:	0699      	lsls	r1, r3, #26
 800aeb6:	bf42      	ittt	mi
 800aeb8:	6833      	ldrmi	r3, [r6, #0]
 800aeba:	3302      	addmi	r3, #2
 800aebc:	6033      	strmi	r3, [r6, #0]
 800aebe:	6825      	ldr	r5, [r4, #0]
 800aec0:	f015 0506 	ands.w	r5, r5, #6
 800aec4:	d106      	bne.n	800aed4 <_printf_common+0x48>
 800aec6:	f104 0a19 	add.w	sl, r4, #25
 800aeca:	68e3      	ldr	r3, [r4, #12]
 800aecc:	6832      	ldr	r2, [r6, #0]
 800aece:	1a9b      	subs	r3, r3, r2
 800aed0:	42ab      	cmp	r3, r5
 800aed2:	dc26      	bgt.n	800af22 <_printf_common+0x96>
 800aed4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aed8:	6822      	ldr	r2, [r4, #0]
 800aeda:	3b00      	subs	r3, #0
 800aedc:	bf18      	it	ne
 800aede:	2301      	movne	r3, #1
 800aee0:	0692      	lsls	r2, r2, #26
 800aee2:	d42b      	bmi.n	800af3c <_printf_common+0xb0>
 800aee4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aee8:	4641      	mov	r1, r8
 800aeea:	4638      	mov	r0, r7
 800aeec:	47c8      	blx	r9
 800aeee:	3001      	adds	r0, #1
 800aef0:	d01e      	beq.n	800af30 <_printf_common+0xa4>
 800aef2:	6823      	ldr	r3, [r4, #0]
 800aef4:	6922      	ldr	r2, [r4, #16]
 800aef6:	f003 0306 	and.w	r3, r3, #6
 800aefa:	2b04      	cmp	r3, #4
 800aefc:	bf02      	ittt	eq
 800aefe:	68e5      	ldreq	r5, [r4, #12]
 800af00:	6833      	ldreq	r3, [r6, #0]
 800af02:	1aed      	subeq	r5, r5, r3
 800af04:	68a3      	ldr	r3, [r4, #8]
 800af06:	bf0c      	ite	eq
 800af08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af0c:	2500      	movne	r5, #0
 800af0e:	4293      	cmp	r3, r2
 800af10:	bfc4      	itt	gt
 800af12:	1a9b      	subgt	r3, r3, r2
 800af14:	18ed      	addgt	r5, r5, r3
 800af16:	2600      	movs	r6, #0
 800af18:	341a      	adds	r4, #26
 800af1a:	42b5      	cmp	r5, r6
 800af1c:	d11a      	bne.n	800af54 <_printf_common+0xc8>
 800af1e:	2000      	movs	r0, #0
 800af20:	e008      	b.n	800af34 <_printf_common+0xa8>
 800af22:	2301      	movs	r3, #1
 800af24:	4652      	mov	r2, sl
 800af26:	4641      	mov	r1, r8
 800af28:	4638      	mov	r0, r7
 800af2a:	47c8      	blx	r9
 800af2c:	3001      	adds	r0, #1
 800af2e:	d103      	bne.n	800af38 <_printf_common+0xac>
 800af30:	f04f 30ff 	mov.w	r0, #4294967295
 800af34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af38:	3501      	adds	r5, #1
 800af3a:	e7c6      	b.n	800aeca <_printf_common+0x3e>
 800af3c:	18e1      	adds	r1, r4, r3
 800af3e:	1c5a      	adds	r2, r3, #1
 800af40:	2030      	movs	r0, #48	@ 0x30
 800af42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af46:	4422      	add	r2, r4
 800af48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af50:	3302      	adds	r3, #2
 800af52:	e7c7      	b.n	800aee4 <_printf_common+0x58>
 800af54:	2301      	movs	r3, #1
 800af56:	4622      	mov	r2, r4
 800af58:	4641      	mov	r1, r8
 800af5a:	4638      	mov	r0, r7
 800af5c:	47c8      	blx	r9
 800af5e:	3001      	adds	r0, #1
 800af60:	d0e6      	beq.n	800af30 <_printf_common+0xa4>
 800af62:	3601      	adds	r6, #1
 800af64:	e7d9      	b.n	800af1a <_printf_common+0x8e>
	...

0800af68 <_printf_i>:
 800af68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af6c:	7e0f      	ldrb	r7, [r1, #24]
 800af6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af70:	2f78      	cmp	r7, #120	@ 0x78
 800af72:	4691      	mov	r9, r2
 800af74:	4680      	mov	r8, r0
 800af76:	460c      	mov	r4, r1
 800af78:	469a      	mov	sl, r3
 800af7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af7e:	d807      	bhi.n	800af90 <_printf_i+0x28>
 800af80:	2f62      	cmp	r7, #98	@ 0x62
 800af82:	d80a      	bhi.n	800af9a <_printf_i+0x32>
 800af84:	2f00      	cmp	r7, #0
 800af86:	f000 80d2 	beq.w	800b12e <_printf_i+0x1c6>
 800af8a:	2f58      	cmp	r7, #88	@ 0x58
 800af8c:	f000 80b9 	beq.w	800b102 <_printf_i+0x19a>
 800af90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af98:	e03a      	b.n	800b010 <_printf_i+0xa8>
 800af9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af9e:	2b15      	cmp	r3, #21
 800afa0:	d8f6      	bhi.n	800af90 <_printf_i+0x28>
 800afa2:	a101      	add	r1, pc, #4	@ (adr r1, 800afa8 <_printf_i+0x40>)
 800afa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afa8:	0800b001 	.word	0x0800b001
 800afac:	0800b015 	.word	0x0800b015
 800afb0:	0800af91 	.word	0x0800af91
 800afb4:	0800af91 	.word	0x0800af91
 800afb8:	0800af91 	.word	0x0800af91
 800afbc:	0800af91 	.word	0x0800af91
 800afc0:	0800b015 	.word	0x0800b015
 800afc4:	0800af91 	.word	0x0800af91
 800afc8:	0800af91 	.word	0x0800af91
 800afcc:	0800af91 	.word	0x0800af91
 800afd0:	0800af91 	.word	0x0800af91
 800afd4:	0800b115 	.word	0x0800b115
 800afd8:	0800b03f 	.word	0x0800b03f
 800afdc:	0800b0cf 	.word	0x0800b0cf
 800afe0:	0800af91 	.word	0x0800af91
 800afe4:	0800af91 	.word	0x0800af91
 800afe8:	0800b137 	.word	0x0800b137
 800afec:	0800af91 	.word	0x0800af91
 800aff0:	0800b03f 	.word	0x0800b03f
 800aff4:	0800af91 	.word	0x0800af91
 800aff8:	0800af91 	.word	0x0800af91
 800affc:	0800b0d7 	.word	0x0800b0d7
 800b000:	6833      	ldr	r3, [r6, #0]
 800b002:	1d1a      	adds	r2, r3, #4
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	6032      	str	r2, [r6, #0]
 800b008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b00c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b010:	2301      	movs	r3, #1
 800b012:	e09d      	b.n	800b150 <_printf_i+0x1e8>
 800b014:	6833      	ldr	r3, [r6, #0]
 800b016:	6820      	ldr	r0, [r4, #0]
 800b018:	1d19      	adds	r1, r3, #4
 800b01a:	6031      	str	r1, [r6, #0]
 800b01c:	0606      	lsls	r6, r0, #24
 800b01e:	d501      	bpl.n	800b024 <_printf_i+0xbc>
 800b020:	681d      	ldr	r5, [r3, #0]
 800b022:	e003      	b.n	800b02c <_printf_i+0xc4>
 800b024:	0645      	lsls	r5, r0, #25
 800b026:	d5fb      	bpl.n	800b020 <_printf_i+0xb8>
 800b028:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b02c:	2d00      	cmp	r5, #0
 800b02e:	da03      	bge.n	800b038 <_printf_i+0xd0>
 800b030:	232d      	movs	r3, #45	@ 0x2d
 800b032:	426d      	negs	r5, r5
 800b034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b038:	4859      	ldr	r0, [pc, #356]	@ (800b1a0 <_printf_i+0x238>)
 800b03a:	230a      	movs	r3, #10
 800b03c:	e011      	b.n	800b062 <_printf_i+0xfa>
 800b03e:	6821      	ldr	r1, [r4, #0]
 800b040:	6833      	ldr	r3, [r6, #0]
 800b042:	0608      	lsls	r0, r1, #24
 800b044:	f853 5b04 	ldr.w	r5, [r3], #4
 800b048:	d402      	bmi.n	800b050 <_printf_i+0xe8>
 800b04a:	0649      	lsls	r1, r1, #25
 800b04c:	bf48      	it	mi
 800b04e:	b2ad      	uxthmi	r5, r5
 800b050:	2f6f      	cmp	r7, #111	@ 0x6f
 800b052:	4853      	ldr	r0, [pc, #332]	@ (800b1a0 <_printf_i+0x238>)
 800b054:	6033      	str	r3, [r6, #0]
 800b056:	bf14      	ite	ne
 800b058:	230a      	movne	r3, #10
 800b05a:	2308      	moveq	r3, #8
 800b05c:	2100      	movs	r1, #0
 800b05e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b062:	6866      	ldr	r6, [r4, #4]
 800b064:	60a6      	str	r6, [r4, #8]
 800b066:	2e00      	cmp	r6, #0
 800b068:	bfa2      	ittt	ge
 800b06a:	6821      	ldrge	r1, [r4, #0]
 800b06c:	f021 0104 	bicge.w	r1, r1, #4
 800b070:	6021      	strge	r1, [r4, #0]
 800b072:	b90d      	cbnz	r5, 800b078 <_printf_i+0x110>
 800b074:	2e00      	cmp	r6, #0
 800b076:	d04b      	beq.n	800b110 <_printf_i+0x1a8>
 800b078:	4616      	mov	r6, r2
 800b07a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b07e:	fb03 5711 	mls	r7, r3, r1, r5
 800b082:	5dc7      	ldrb	r7, [r0, r7]
 800b084:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b088:	462f      	mov	r7, r5
 800b08a:	42bb      	cmp	r3, r7
 800b08c:	460d      	mov	r5, r1
 800b08e:	d9f4      	bls.n	800b07a <_printf_i+0x112>
 800b090:	2b08      	cmp	r3, #8
 800b092:	d10b      	bne.n	800b0ac <_printf_i+0x144>
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	07df      	lsls	r7, r3, #31
 800b098:	d508      	bpl.n	800b0ac <_printf_i+0x144>
 800b09a:	6923      	ldr	r3, [r4, #16]
 800b09c:	6861      	ldr	r1, [r4, #4]
 800b09e:	4299      	cmp	r1, r3
 800b0a0:	bfde      	ittt	le
 800b0a2:	2330      	movle	r3, #48	@ 0x30
 800b0a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b0a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b0ac:	1b92      	subs	r2, r2, r6
 800b0ae:	6122      	str	r2, [r4, #16]
 800b0b0:	f8cd a000 	str.w	sl, [sp]
 800b0b4:	464b      	mov	r3, r9
 800b0b6:	aa03      	add	r2, sp, #12
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	4640      	mov	r0, r8
 800b0bc:	f7ff fee6 	bl	800ae8c <_printf_common>
 800b0c0:	3001      	adds	r0, #1
 800b0c2:	d14a      	bne.n	800b15a <_printf_i+0x1f2>
 800b0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c8:	b004      	add	sp, #16
 800b0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ce:	6823      	ldr	r3, [r4, #0]
 800b0d0:	f043 0320 	orr.w	r3, r3, #32
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	4833      	ldr	r0, [pc, #204]	@ (800b1a4 <_printf_i+0x23c>)
 800b0d8:	2778      	movs	r7, #120	@ 0x78
 800b0da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	6831      	ldr	r1, [r6, #0]
 800b0e2:	061f      	lsls	r7, r3, #24
 800b0e4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b0e8:	d402      	bmi.n	800b0f0 <_printf_i+0x188>
 800b0ea:	065f      	lsls	r7, r3, #25
 800b0ec:	bf48      	it	mi
 800b0ee:	b2ad      	uxthmi	r5, r5
 800b0f0:	6031      	str	r1, [r6, #0]
 800b0f2:	07d9      	lsls	r1, r3, #31
 800b0f4:	bf44      	itt	mi
 800b0f6:	f043 0320 	orrmi.w	r3, r3, #32
 800b0fa:	6023      	strmi	r3, [r4, #0]
 800b0fc:	b11d      	cbz	r5, 800b106 <_printf_i+0x19e>
 800b0fe:	2310      	movs	r3, #16
 800b100:	e7ac      	b.n	800b05c <_printf_i+0xf4>
 800b102:	4827      	ldr	r0, [pc, #156]	@ (800b1a0 <_printf_i+0x238>)
 800b104:	e7e9      	b.n	800b0da <_printf_i+0x172>
 800b106:	6823      	ldr	r3, [r4, #0]
 800b108:	f023 0320 	bic.w	r3, r3, #32
 800b10c:	6023      	str	r3, [r4, #0]
 800b10e:	e7f6      	b.n	800b0fe <_printf_i+0x196>
 800b110:	4616      	mov	r6, r2
 800b112:	e7bd      	b.n	800b090 <_printf_i+0x128>
 800b114:	6833      	ldr	r3, [r6, #0]
 800b116:	6825      	ldr	r5, [r4, #0]
 800b118:	6961      	ldr	r1, [r4, #20]
 800b11a:	1d18      	adds	r0, r3, #4
 800b11c:	6030      	str	r0, [r6, #0]
 800b11e:	062e      	lsls	r6, r5, #24
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	d501      	bpl.n	800b128 <_printf_i+0x1c0>
 800b124:	6019      	str	r1, [r3, #0]
 800b126:	e002      	b.n	800b12e <_printf_i+0x1c6>
 800b128:	0668      	lsls	r0, r5, #25
 800b12a:	d5fb      	bpl.n	800b124 <_printf_i+0x1bc>
 800b12c:	8019      	strh	r1, [r3, #0]
 800b12e:	2300      	movs	r3, #0
 800b130:	6123      	str	r3, [r4, #16]
 800b132:	4616      	mov	r6, r2
 800b134:	e7bc      	b.n	800b0b0 <_printf_i+0x148>
 800b136:	6833      	ldr	r3, [r6, #0]
 800b138:	1d1a      	adds	r2, r3, #4
 800b13a:	6032      	str	r2, [r6, #0]
 800b13c:	681e      	ldr	r6, [r3, #0]
 800b13e:	6862      	ldr	r2, [r4, #4]
 800b140:	2100      	movs	r1, #0
 800b142:	4630      	mov	r0, r6
 800b144:	f7f5 f854 	bl	80001f0 <memchr>
 800b148:	b108      	cbz	r0, 800b14e <_printf_i+0x1e6>
 800b14a:	1b80      	subs	r0, r0, r6
 800b14c:	6060      	str	r0, [r4, #4]
 800b14e:	6863      	ldr	r3, [r4, #4]
 800b150:	6123      	str	r3, [r4, #16]
 800b152:	2300      	movs	r3, #0
 800b154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b158:	e7aa      	b.n	800b0b0 <_printf_i+0x148>
 800b15a:	6923      	ldr	r3, [r4, #16]
 800b15c:	4632      	mov	r2, r6
 800b15e:	4649      	mov	r1, r9
 800b160:	4640      	mov	r0, r8
 800b162:	47d0      	blx	sl
 800b164:	3001      	adds	r0, #1
 800b166:	d0ad      	beq.n	800b0c4 <_printf_i+0x15c>
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	079b      	lsls	r3, r3, #30
 800b16c:	d413      	bmi.n	800b196 <_printf_i+0x22e>
 800b16e:	68e0      	ldr	r0, [r4, #12]
 800b170:	9b03      	ldr	r3, [sp, #12]
 800b172:	4298      	cmp	r0, r3
 800b174:	bfb8      	it	lt
 800b176:	4618      	movlt	r0, r3
 800b178:	e7a6      	b.n	800b0c8 <_printf_i+0x160>
 800b17a:	2301      	movs	r3, #1
 800b17c:	4632      	mov	r2, r6
 800b17e:	4649      	mov	r1, r9
 800b180:	4640      	mov	r0, r8
 800b182:	47d0      	blx	sl
 800b184:	3001      	adds	r0, #1
 800b186:	d09d      	beq.n	800b0c4 <_printf_i+0x15c>
 800b188:	3501      	adds	r5, #1
 800b18a:	68e3      	ldr	r3, [r4, #12]
 800b18c:	9903      	ldr	r1, [sp, #12]
 800b18e:	1a5b      	subs	r3, r3, r1
 800b190:	42ab      	cmp	r3, r5
 800b192:	dcf2      	bgt.n	800b17a <_printf_i+0x212>
 800b194:	e7eb      	b.n	800b16e <_printf_i+0x206>
 800b196:	2500      	movs	r5, #0
 800b198:	f104 0619 	add.w	r6, r4, #25
 800b19c:	e7f5      	b.n	800b18a <_printf_i+0x222>
 800b19e:	bf00      	nop
 800b1a0:	08011b31 	.word	0x08011b31
 800b1a4:	08011b42 	.word	0x08011b42

0800b1a8 <_scanf_float>:
 800b1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ac:	b087      	sub	sp, #28
 800b1ae:	4617      	mov	r7, r2
 800b1b0:	9303      	str	r3, [sp, #12]
 800b1b2:	688b      	ldr	r3, [r1, #8]
 800b1b4:	1e5a      	subs	r2, r3, #1
 800b1b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b1ba:	bf81      	itttt	hi
 800b1bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b1c0:	eb03 0b05 	addhi.w	fp, r3, r5
 800b1c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b1c8:	608b      	strhi	r3, [r1, #8]
 800b1ca:	680b      	ldr	r3, [r1, #0]
 800b1cc:	460a      	mov	r2, r1
 800b1ce:	f04f 0500 	mov.w	r5, #0
 800b1d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b1d6:	f842 3b1c 	str.w	r3, [r2], #28
 800b1da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b1de:	4680      	mov	r8, r0
 800b1e0:	460c      	mov	r4, r1
 800b1e2:	bf98      	it	ls
 800b1e4:	f04f 0b00 	movls.w	fp, #0
 800b1e8:	9201      	str	r2, [sp, #4]
 800b1ea:	4616      	mov	r6, r2
 800b1ec:	46aa      	mov	sl, r5
 800b1ee:	46a9      	mov	r9, r5
 800b1f0:	9502      	str	r5, [sp, #8]
 800b1f2:	68a2      	ldr	r2, [r4, #8]
 800b1f4:	b152      	cbz	r2, 800b20c <_scanf_float+0x64>
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	2b4e      	cmp	r3, #78	@ 0x4e
 800b1fc:	d864      	bhi.n	800b2c8 <_scanf_float+0x120>
 800b1fe:	2b40      	cmp	r3, #64	@ 0x40
 800b200:	d83c      	bhi.n	800b27c <_scanf_float+0xd4>
 800b202:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b206:	b2c8      	uxtb	r0, r1
 800b208:	280e      	cmp	r0, #14
 800b20a:	d93a      	bls.n	800b282 <_scanf_float+0xda>
 800b20c:	f1b9 0f00 	cmp.w	r9, #0
 800b210:	d003      	beq.n	800b21a <_scanf_float+0x72>
 800b212:	6823      	ldr	r3, [r4, #0]
 800b214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b218:	6023      	str	r3, [r4, #0]
 800b21a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b21e:	f1ba 0f01 	cmp.w	sl, #1
 800b222:	f200 8117 	bhi.w	800b454 <_scanf_float+0x2ac>
 800b226:	9b01      	ldr	r3, [sp, #4]
 800b228:	429e      	cmp	r6, r3
 800b22a:	f200 8108 	bhi.w	800b43e <_scanf_float+0x296>
 800b22e:	2001      	movs	r0, #1
 800b230:	b007      	add	sp, #28
 800b232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b236:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b23a:	2a0d      	cmp	r2, #13
 800b23c:	d8e6      	bhi.n	800b20c <_scanf_float+0x64>
 800b23e:	a101      	add	r1, pc, #4	@ (adr r1, 800b244 <_scanf_float+0x9c>)
 800b240:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b244:	0800b38b 	.word	0x0800b38b
 800b248:	0800b20d 	.word	0x0800b20d
 800b24c:	0800b20d 	.word	0x0800b20d
 800b250:	0800b20d 	.word	0x0800b20d
 800b254:	0800b3eb 	.word	0x0800b3eb
 800b258:	0800b3c3 	.word	0x0800b3c3
 800b25c:	0800b20d 	.word	0x0800b20d
 800b260:	0800b20d 	.word	0x0800b20d
 800b264:	0800b399 	.word	0x0800b399
 800b268:	0800b20d 	.word	0x0800b20d
 800b26c:	0800b20d 	.word	0x0800b20d
 800b270:	0800b20d 	.word	0x0800b20d
 800b274:	0800b20d 	.word	0x0800b20d
 800b278:	0800b351 	.word	0x0800b351
 800b27c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b280:	e7db      	b.n	800b23a <_scanf_float+0x92>
 800b282:	290e      	cmp	r1, #14
 800b284:	d8c2      	bhi.n	800b20c <_scanf_float+0x64>
 800b286:	a001      	add	r0, pc, #4	@ (adr r0, 800b28c <_scanf_float+0xe4>)
 800b288:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b28c:	0800b341 	.word	0x0800b341
 800b290:	0800b20d 	.word	0x0800b20d
 800b294:	0800b341 	.word	0x0800b341
 800b298:	0800b3d7 	.word	0x0800b3d7
 800b29c:	0800b20d 	.word	0x0800b20d
 800b2a0:	0800b2e9 	.word	0x0800b2e9
 800b2a4:	0800b327 	.word	0x0800b327
 800b2a8:	0800b327 	.word	0x0800b327
 800b2ac:	0800b327 	.word	0x0800b327
 800b2b0:	0800b327 	.word	0x0800b327
 800b2b4:	0800b327 	.word	0x0800b327
 800b2b8:	0800b327 	.word	0x0800b327
 800b2bc:	0800b327 	.word	0x0800b327
 800b2c0:	0800b327 	.word	0x0800b327
 800b2c4:	0800b327 	.word	0x0800b327
 800b2c8:	2b6e      	cmp	r3, #110	@ 0x6e
 800b2ca:	d809      	bhi.n	800b2e0 <_scanf_float+0x138>
 800b2cc:	2b60      	cmp	r3, #96	@ 0x60
 800b2ce:	d8b2      	bhi.n	800b236 <_scanf_float+0x8e>
 800b2d0:	2b54      	cmp	r3, #84	@ 0x54
 800b2d2:	d07b      	beq.n	800b3cc <_scanf_float+0x224>
 800b2d4:	2b59      	cmp	r3, #89	@ 0x59
 800b2d6:	d199      	bne.n	800b20c <_scanf_float+0x64>
 800b2d8:	2d07      	cmp	r5, #7
 800b2da:	d197      	bne.n	800b20c <_scanf_float+0x64>
 800b2dc:	2508      	movs	r5, #8
 800b2de:	e02c      	b.n	800b33a <_scanf_float+0x192>
 800b2e0:	2b74      	cmp	r3, #116	@ 0x74
 800b2e2:	d073      	beq.n	800b3cc <_scanf_float+0x224>
 800b2e4:	2b79      	cmp	r3, #121	@ 0x79
 800b2e6:	e7f6      	b.n	800b2d6 <_scanf_float+0x12e>
 800b2e8:	6821      	ldr	r1, [r4, #0]
 800b2ea:	05c8      	lsls	r0, r1, #23
 800b2ec:	d51b      	bpl.n	800b326 <_scanf_float+0x17e>
 800b2ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b2f2:	6021      	str	r1, [r4, #0]
 800b2f4:	f109 0901 	add.w	r9, r9, #1
 800b2f8:	f1bb 0f00 	cmp.w	fp, #0
 800b2fc:	d003      	beq.n	800b306 <_scanf_float+0x15e>
 800b2fe:	3201      	adds	r2, #1
 800b300:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b304:	60a2      	str	r2, [r4, #8]
 800b306:	68a3      	ldr	r3, [r4, #8]
 800b308:	3b01      	subs	r3, #1
 800b30a:	60a3      	str	r3, [r4, #8]
 800b30c:	6923      	ldr	r3, [r4, #16]
 800b30e:	3301      	adds	r3, #1
 800b310:	6123      	str	r3, [r4, #16]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	3b01      	subs	r3, #1
 800b316:	2b00      	cmp	r3, #0
 800b318:	607b      	str	r3, [r7, #4]
 800b31a:	f340 8087 	ble.w	800b42c <_scanf_float+0x284>
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	3301      	adds	r3, #1
 800b322:	603b      	str	r3, [r7, #0]
 800b324:	e765      	b.n	800b1f2 <_scanf_float+0x4a>
 800b326:	eb1a 0105 	adds.w	r1, sl, r5
 800b32a:	f47f af6f 	bne.w	800b20c <_scanf_float+0x64>
 800b32e:	6822      	ldr	r2, [r4, #0]
 800b330:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b334:	6022      	str	r2, [r4, #0]
 800b336:	460d      	mov	r5, r1
 800b338:	468a      	mov	sl, r1
 800b33a:	f806 3b01 	strb.w	r3, [r6], #1
 800b33e:	e7e2      	b.n	800b306 <_scanf_float+0x15e>
 800b340:	6822      	ldr	r2, [r4, #0]
 800b342:	0610      	lsls	r0, r2, #24
 800b344:	f57f af62 	bpl.w	800b20c <_scanf_float+0x64>
 800b348:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b34c:	6022      	str	r2, [r4, #0]
 800b34e:	e7f4      	b.n	800b33a <_scanf_float+0x192>
 800b350:	f1ba 0f00 	cmp.w	sl, #0
 800b354:	d10e      	bne.n	800b374 <_scanf_float+0x1cc>
 800b356:	f1b9 0f00 	cmp.w	r9, #0
 800b35a:	d10e      	bne.n	800b37a <_scanf_float+0x1d2>
 800b35c:	6822      	ldr	r2, [r4, #0]
 800b35e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b362:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b366:	d108      	bne.n	800b37a <_scanf_float+0x1d2>
 800b368:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b36c:	6022      	str	r2, [r4, #0]
 800b36e:	f04f 0a01 	mov.w	sl, #1
 800b372:	e7e2      	b.n	800b33a <_scanf_float+0x192>
 800b374:	f1ba 0f02 	cmp.w	sl, #2
 800b378:	d055      	beq.n	800b426 <_scanf_float+0x27e>
 800b37a:	2d01      	cmp	r5, #1
 800b37c:	d002      	beq.n	800b384 <_scanf_float+0x1dc>
 800b37e:	2d04      	cmp	r5, #4
 800b380:	f47f af44 	bne.w	800b20c <_scanf_float+0x64>
 800b384:	3501      	adds	r5, #1
 800b386:	b2ed      	uxtb	r5, r5
 800b388:	e7d7      	b.n	800b33a <_scanf_float+0x192>
 800b38a:	f1ba 0f01 	cmp.w	sl, #1
 800b38e:	f47f af3d 	bne.w	800b20c <_scanf_float+0x64>
 800b392:	f04f 0a02 	mov.w	sl, #2
 800b396:	e7d0      	b.n	800b33a <_scanf_float+0x192>
 800b398:	b97d      	cbnz	r5, 800b3ba <_scanf_float+0x212>
 800b39a:	f1b9 0f00 	cmp.w	r9, #0
 800b39e:	f47f af38 	bne.w	800b212 <_scanf_float+0x6a>
 800b3a2:	6822      	ldr	r2, [r4, #0]
 800b3a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b3a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b3ac:	f040 8108 	bne.w	800b5c0 <_scanf_float+0x418>
 800b3b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b3b4:	6022      	str	r2, [r4, #0]
 800b3b6:	2501      	movs	r5, #1
 800b3b8:	e7bf      	b.n	800b33a <_scanf_float+0x192>
 800b3ba:	2d03      	cmp	r5, #3
 800b3bc:	d0e2      	beq.n	800b384 <_scanf_float+0x1dc>
 800b3be:	2d05      	cmp	r5, #5
 800b3c0:	e7de      	b.n	800b380 <_scanf_float+0x1d8>
 800b3c2:	2d02      	cmp	r5, #2
 800b3c4:	f47f af22 	bne.w	800b20c <_scanf_float+0x64>
 800b3c8:	2503      	movs	r5, #3
 800b3ca:	e7b6      	b.n	800b33a <_scanf_float+0x192>
 800b3cc:	2d06      	cmp	r5, #6
 800b3ce:	f47f af1d 	bne.w	800b20c <_scanf_float+0x64>
 800b3d2:	2507      	movs	r5, #7
 800b3d4:	e7b1      	b.n	800b33a <_scanf_float+0x192>
 800b3d6:	6822      	ldr	r2, [r4, #0]
 800b3d8:	0591      	lsls	r1, r2, #22
 800b3da:	f57f af17 	bpl.w	800b20c <_scanf_float+0x64>
 800b3de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b3e2:	6022      	str	r2, [r4, #0]
 800b3e4:	f8cd 9008 	str.w	r9, [sp, #8]
 800b3e8:	e7a7      	b.n	800b33a <_scanf_float+0x192>
 800b3ea:	6822      	ldr	r2, [r4, #0]
 800b3ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b3f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b3f4:	d006      	beq.n	800b404 <_scanf_float+0x25c>
 800b3f6:	0550      	lsls	r0, r2, #21
 800b3f8:	f57f af08 	bpl.w	800b20c <_scanf_float+0x64>
 800b3fc:	f1b9 0f00 	cmp.w	r9, #0
 800b400:	f000 80de 	beq.w	800b5c0 <_scanf_float+0x418>
 800b404:	0591      	lsls	r1, r2, #22
 800b406:	bf58      	it	pl
 800b408:	9902      	ldrpl	r1, [sp, #8]
 800b40a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b40e:	bf58      	it	pl
 800b410:	eba9 0101 	subpl.w	r1, r9, r1
 800b414:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b418:	bf58      	it	pl
 800b41a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b41e:	6022      	str	r2, [r4, #0]
 800b420:	f04f 0900 	mov.w	r9, #0
 800b424:	e789      	b.n	800b33a <_scanf_float+0x192>
 800b426:	f04f 0a03 	mov.w	sl, #3
 800b42a:	e786      	b.n	800b33a <_scanf_float+0x192>
 800b42c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b430:	4639      	mov	r1, r7
 800b432:	4640      	mov	r0, r8
 800b434:	4798      	blx	r3
 800b436:	2800      	cmp	r0, #0
 800b438:	f43f aedb 	beq.w	800b1f2 <_scanf_float+0x4a>
 800b43c:	e6e6      	b.n	800b20c <_scanf_float+0x64>
 800b43e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b442:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b446:	463a      	mov	r2, r7
 800b448:	4640      	mov	r0, r8
 800b44a:	4798      	blx	r3
 800b44c:	6923      	ldr	r3, [r4, #16]
 800b44e:	3b01      	subs	r3, #1
 800b450:	6123      	str	r3, [r4, #16]
 800b452:	e6e8      	b.n	800b226 <_scanf_float+0x7e>
 800b454:	1e6b      	subs	r3, r5, #1
 800b456:	2b06      	cmp	r3, #6
 800b458:	d824      	bhi.n	800b4a4 <_scanf_float+0x2fc>
 800b45a:	2d02      	cmp	r5, #2
 800b45c:	d836      	bhi.n	800b4cc <_scanf_float+0x324>
 800b45e:	9b01      	ldr	r3, [sp, #4]
 800b460:	429e      	cmp	r6, r3
 800b462:	f67f aee4 	bls.w	800b22e <_scanf_float+0x86>
 800b466:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b46a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b46e:	463a      	mov	r2, r7
 800b470:	4640      	mov	r0, r8
 800b472:	4798      	blx	r3
 800b474:	6923      	ldr	r3, [r4, #16]
 800b476:	3b01      	subs	r3, #1
 800b478:	6123      	str	r3, [r4, #16]
 800b47a:	e7f0      	b.n	800b45e <_scanf_float+0x2b6>
 800b47c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b480:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b484:	463a      	mov	r2, r7
 800b486:	4640      	mov	r0, r8
 800b488:	4798      	blx	r3
 800b48a:	6923      	ldr	r3, [r4, #16]
 800b48c:	3b01      	subs	r3, #1
 800b48e:	6123      	str	r3, [r4, #16]
 800b490:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b494:	fa5f fa8a 	uxtb.w	sl, sl
 800b498:	f1ba 0f02 	cmp.w	sl, #2
 800b49c:	d1ee      	bne.n	800b47c <_scanf_float+0x2d4>
 800b49e:	3d03      	subs	r5, #3
 800b4a0:	b2ed      	uxtb	r5, r5
 800b4a2:	1b76      	subs	r6, r6, r5
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	05da      	lsls	r2, r3, #23
 800b4a8:	d530      	bpl.n	800b50c <_scanf_float+0x364>
 800b4aa:	055b      	lsls	r3, r3, #21
 800b4ac:	d511      	bpl.n	800b4d2 <_scanf_float+0x32a>
 800b4ae:	9b01      	ldr	r3, [sp, #4]
 800b4b0:	429e      	cmp	r6, r3
 800b4b2:	f67f aebc 	bls.w	800b22e <_scanf_float+0x86>
 800b4b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b4ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b4be:	463a      	mov	r2, r7
 800b4c0:	4640      	mov	r0, r8
 800b4c2:	4798      	blx	r3
 800b4c4:	6923      	ldr	r3, [r4, #16]
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	6123      	str	r3, [r4, #16]
 800b4ca:	e7f0      	b.n	800b4ae <_scanf_float+0x306>
 800b4cc:	46aa      	mov	sl, r5
 800b4ce:	46b3      	mov	fp, r6
 800b4d0:	e7de      	b.n	800b490 <_scanf_float+0x2e8>
 800b4d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b4d6:	6923      	ldr	r3, [r4, #16]
 800b4d8:	2965      	cmp	r1, #101	@ 0x65
 800b4da:	f103 33ff 	add.w	r3, r3, #4294967295
 800b4de:	f106 35ff 	add.w	r5, r6, #4294967295
 800b4e2:	6123      	str	r3, [r4, #16]
 800b4e4:	d00c      	beq.n	800b500 <_scanf_float+0x358>
 800b4e6:	2945      	cmp	r1, #69	@ 0x45
 800b4e8:	d00a      	beq.n	800b500 <_scanf_float+0x358>
 800b4ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b4ee:	463a      	mov	r2, r7
 800b4f0:	4640      	mov	r0, r8
 800b4f2:	4798      	blx	r3
 800b4f4:	6923      	ldr	r3, [r4, #16]
 800b4f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b4fa:	3b01      	subs	r3, #1
 800b4fc:	1eb5      	subs	r5, r6, #2
 800b4fe:	6123      	str	r3, [r4, #16]
 800b500:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b504:	463a      	mov	r2, r7
 800b506:	4640      	mov	r0, r8
 800b508:	4798      	blx	r3
 800b50a:	462e      	mov	r6, r5
 800b50c:	6822      	ldr	r2, [r4, #0]
 800b50e:	f012 0210 	ands.w	r2, r2, #16
 800b512:	d001      	beq.n	800b518 <_scanf_float+0x370>
 800b514:	2000      	movs	r0, #0
 800b516:	e68b      	b.n	800b230 <_scanf_float+0x88>
 800b518:	7032      	strb	r2, [r6, #0]
 800b51a:	6823      	ldr	r3, [r4, #0]
 800b51c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b524:	d11c      	bne.n	800b560 <_scanf_float+0x3b8>
 800b526:	9b02      	ldr	r3, [sp, #8]
 800b528:	454b      	cmp	r3, r9
 800b52a:	eba3 0209 	sub.w	r2, r3, r9
 800b52e:	d123      	bne.n	800b578 <_scanf_float+0x3d0>
 800b530:	9901      	ldr	r1, [sp, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	4640      	mov	r0, r8
 800b536:	f7ff f953 	bl	800a7e0 <_strtod_r>
 800b53a:	9b03      	ldr	r3, [sp, #12]
 800b53c:	6821      	ldr	r1, [r4, #0]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f011 0f02 	tst.w	r1, #2
 800b544:	ec57 6b10 	vmov	r6, r7, d0
 800b548:	f103 0204 	add.w	r2, r3, #4
 800b54c:	d01f      	beq.n	800b58e <_scanf_float+0x3e6>
 800b54e:	9903      	ldr	r1, [sp, #12]
 800b550:	600a      	str	r2, [r1, #0]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	e9c3 6700 	strd	r6, r7, [r3]
 800b558:	68e3      	ldr	r3, [r4, #12]
 800b55a:	3301      	adds	r3, #1
 800b55c:	60e3      	str	r3, [r4, #12]
 800b55e:	e7d9      	b.n	800b514 <_scanf_float+0x36c>
 800b560:	9b04      	ldr	r3, [sp, #16]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0e4      	beq.n	800b530 <_scanf_float+0x388>
 800b566:	9905      	ldr	r1, [sp, #20]
 800b568:	230a      	movs	r3, #10
 800b56a:	3101      	adds	r1, #1
 800b56c:	4640      	mov	r0, r8
 800b56e:	f7ff f9b7 	bl	800a8e0 <_strtol_r>
 800b572:	9b04      	ldr	r3, [sp, #16]
 800b574:	9e05      	ldr	r6, [sp, #20]
 800b576:	1ac2      	subs	r2, r0, r3
 800b578:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b57c:	429e      	cmp	r6, r3
 800b57e:	bf28      	it	cs
 800b580:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b584:	4910      	ldr	r1, [pc, #64]	@ (800b5c8 <_scanf_float+0x420>)
 800b586:	4630      	mov	r0, r6
 800b588:	f000 f918 	bl	800b7bc <siprintf>
 800b58c:	e7d0      	b.n	800b530 <_scanf_float+0x388>
 800b58e:	f011 0f04 	tst.w	r1, #4
 800b592:	9903      	ldr	r1, [sp, #12]
 800b594:	600a      	str	r2, [r1, #0]
 800b596:	d1dc      	bne.n	800b552 <_scanf_float+0x3aa>
 800b598:	681d      	ldr	r5, [r3, #0]
 800b59a:	4632      	mov	r2, r6
 800b59c:	463b      	mov	r3, r7
 800b59e:	4630      	mov	r0, r6
 800b5a0:	4639      	mov	r1, r7
 800b5a2:	f7f5 fad3 	bl	8000b4c <__aeabi_dcmpun>
 800b5a6:	b128      	cbz	r0, 800b5b4 <_scanf_float+0x40c>
 800b5a8:	4808      	ldr	r0, [pc, #32]	@ (800b5cc <_scanf_float+0x424>)
 800b5aa:	f001 f839 	bl	800c620 <nanf>
 800b5ae:	ed85 0a00 	vstr	s0, [r5]
 800b5b2:	e7d1      	b.n	800b558 <_scanf_float+0x3b0>
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	4639      	mov	r1, r7
 800b5b8:	f7f5 fb26 	bl	8000c08 <__aeabi_d2f>
 800b5bc:	6028      	str	r0, [r5, #0]
 800b5be:	e7cb      	b.n	800b558 <_scanf_float+0x3b0>
 800b5c0:	f04f 0900 	mov.w	r9, #0
 800b5c4:	e629      	b.n	800b21a <_scanf_float+0x72>
 800b5c6:	bf00      	nop
 800b5c8:	08011b53 	.word	0x08011b53
 800b5cc:	080109db 	.word	0x080109db

0800b5d0 <std>:
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	b510      	push	{r4, lr}
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	e9c0 3300 	strd	r3, r3, [r0]
 800b5da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5de:	6083      	str	r3, [r0, #8]
 800b5e0:	8181      	strh	r1, [r0, #12]
 800b5e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b5e4:	81c2      	strh	r2, [r0, #14]
 800b5e6:	6183      	str	r3, [r0, #24]
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	2208      	movs	r2, #8
 800b5ec:	305c      	adds	r0, #92	@ 0x5c
 800b5ee:	f000 f9ad 	bl	800b94c <memset>
 800b5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b628 <std+0x58>)
 800b5f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b5f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b62c <std+0x5c>)
 800b5f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b5fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b630 <std+0x60>)
 800b5fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b5fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b634 <std+0x64>)
 800b600:	6323      	str	r3, [r4, #48]	@ 0x30
 800b602:	4b0d      	ldr	r3, [pc, #52]	@ (800b638 <std+0x68>)
 800b604:	6224      	str	r4, [r4, #32]
 800b606:	429c      	cmp	r4, r3
 800b608:	d006      	beq.n	800b618 <std+0x48>
 800b60a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b60e:	4294      	cmp	r4, r2
 800b610:	d002      	beq.n	800b618 <std+0x48>
 800b612:	33d0      	adds	r3, #208	@ 0xd0
 800b614:	429c      	cmp	r4, r3
 800b616:	d105      	bne.n	800b624 <std+0x54>
 800b618:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b620:	f7f9 bb07 	b.w	8004c32 <__retarget_lock_init_recursive>
 800b624:	bd10      	pop	{r4, pc}
 800b626:	bf00      	nop
 800b628:	0800b851 	.word	0x0800b851
 800b62c:	0800b877 	.word	0x0800b877
 800b630:	0800b8af 	.word	0x0800b8af
 800b634:	0800b8d3 	.word	0x0800b8d3
 800b638:	200096e4 	.word	0x200096e4

0800b63c <stdio_exit_handler>:
 800b63c:	4a02      	ldr	r2, [pc, #8]	@ (800b648 <stdio_exit_handler+0xc>)
 800b63e:	4903      	ldr	r1, [pc, #12]	@ (800b64c <stdio_exit_handler+0x10>)
 800b640:	4803      	ldr	r0, [pc, #12]	@ (800b650 <stdio_exit_handler+0x14>)
 800b642:	f000 b869 	b.w	800b718 <_fwalk_sglue>
 800b646:	bf00      	nop
 800b648:	20000020 	.word	0x20000020
 800b64c:	0800eee9 	.word	0x0800eee9
 800b650:	200001a4 	.word	0x200001a4

0800b654 <cleanup_stdio>:
 800b654:	6841      	ldr	r1, [r0, #4]
 800b656:	4b0c      	ldr	r3, [pc, #48]	@ (800b688 <cleanup_stdio+0x34>)
 800b658:	4299      	cmp	r1, r3
 800b65a:	b510      	push	{r4, lr}
 800b65c:	4604      	mov	r4, r0
 800b65e:	d001      	beq.n	800b664 <cleanup_stdio+0x10>
 800b660:	f003 fc42 	bl	800eee8 <_fflush_r>
 800b664:	68a1      	ldr	r1, [r4, #8]
 800b666:	4b09      	ldr	r3, [pc, #36]	@ (800b68c <cleanup_stdio+0x38>)
 800b668:	4299      	cmp	r1, r3
 800b66a:	d002      	beq.n	800b672 <cleanup_stdio+0x1e>
 800b66c:	4620      	mov	r0, r4
 800b66e:	f003 fc3b 	bl	800eee8 <_fflush_r>
 800b672:	68e1      	ldr	r1, [r4, #12]
 800b674:	4b06      	ldr	r3, [pc, #24]	@ (800b690 <cleanup_stdio+0x3c>)
 800b676:	4299      	cmp	r1, r3
 800b678:	d004      	beq.n	800b684 <cleanup_stdio+0x30>
 800b67a:	4620      	mov	r0, r4
 800b67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b680:	f003 bc32 	b.w	800eee8 <_fflush_r>
 800b684:	bd10      	pop	{r4, pc}
 800b686:	bf00      	nop
 800b688:	200096e4 	.word	0x200096e4
 800b68c:	2000974c 	.word	0x2000974c
 800b690:	200097b4 	.word	0x200097b4

0800b694 <global_stdio_init.part.0>:
 800b694:	b510      	push	{r4, lr}
 800b696:	4b0b      	ldr	r3, [pc, #44]	@ (800b6c4 <global_stdio_init.part.0+0x30>)
 800b698:	4c0b      	ldr	r4, [pc, #44]	@ (800b6c8 <global_stdio_init.part.0+0x34>)
 800b69a:	4a0c      	ldr	r2, [pc, #48]	@ (800b6cc <global_stdio_init.part.0+0x38>)
 800b69c:	601a      	str	r2, [r3, #0]
 800b69e:	4620      	mov	r0, r4
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	2104      	movs	r1, #4
 800b6a4:	f7ff ff94 	bl	800b5d0 <std>
 800b6a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	2109      	movs	r1, #9
 800b6b0:	f7ff ff8e 	bl	800b5d0 <std>
 800b6b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b6b8:	2202      	movs	r2, #2
 800b6ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6be:	2112      	movs	r1, #18
 800b6c0:	f7ff bf86 	b.w	800b5d0 <std>
 800b6c4:	2000981c 	.word	0x2000981c
 800b6c8:	200096e4 	.word	0x200096e4
 800b6cc:	0800b63d 	.word	0x0800b63d

0800b6d0 <__sfp_lock_acquire>:
 800b6d0:	4801      	ldr	r0, [pc, #4]	@ (800b6d8 <__sfp_lock_acquire+0x8>)
 800b6d2:	f7f9 baca 	b.w	8004c6a <__retarget_lock_acquire_recursive>
 800b6d6:	bf00      	nop
 800b6d8:	20001758 	.word	0x20001758

0800b6dc <__sfp_lock_release>:
 800b6dc:	4801      	ldr	r0, [pc, #4]	@ (800b6e4 <__sfp_lock_release+0x8>)
 800b6de:	f7f9 bad0 	b.w	8004c82 <__retarget_lock_release_recursive>
 800b6e2:	bf00      	nop
 800b6e4:	20001758 	.word	0x20001758

0800b6e8 <__sinit>:
 800b6e8:	b510      	push	{r4, lr}
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	f7ff fff0 	bl	800b6d0 <__sfp_lock_acquire>
 800b6f0:	6a23      	ldr	r3, [r4, #32]
 800b6f2:	b11b      	cbz	r3, 800b6fc <__sinit+0x14>
 800b6f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6f8:	f7ff bff0 	b.w	800b6dc <__sfp_lock_release>
 800b6fc:	4b04      	ldr	r3, [pc, #16]	@ (800b710 <__sinit+0x28>)
 800b6fe:	6223      	str	r3, [r4, #32]
 800b700:	4b04      	ldr	r3, [pc, #16]	@ (800b714 <__sinit+0x2c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d1f5      	bne.n	800b6f4 <__sinit+0xc>
 800b708:	f7ff ffc4 	bl	800b694 <global_stdio_init.part.0>
 800b70c:	e7f2      	b.n	800b6f4 <__sinit+0xc>
 800b70e:	bf00      	nop
 800b710:	0800b655 	.word	0x0800b655
 800b714:	2000981c 	.word	0x2000981c

0800b718 <_fwalk_sglue>:
 800b718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b71c:	4607      	mov	r7, r0
 800b71e:	4688      	mov	r8, r1
 800b720:	4614      	mov	r4, r2
 800b722:	2600      	movs	r6, #0
 800b724:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b728:	f1b9 0901 	subs.w	r9, r9, #1
 800b72c:	d505      	bpl.n	800b73a <_fwalk_sglue+0x22>
 800b72e:	6824      	ldr	r4, [r4, #0]
 800b730:	2c00      	cmp	r4, #0
 800b732:	d1f7      	bne.n	800b724 <_fwalk_sglue+0xc>
 800b734:	4630      	mov	r0, r6
 800b736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b73a:	89ab      	ldrh	r3, [r5, #12]
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d907      	bls.n	800b750 <_fwalk_sglue+0x38>
 800b740:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b744:	3301      	adds	r3, #1
 800b746:	d003      	beq.n	800b750 <_fwalk_sglue+0x38>
 800b748:	4629      	mov	r1, r5
 800b74a:	4638      	mov	r0, r7
 800b74c:	47c0      	blx	r8
 800b74e:	4306      	orrs	r6, r0
 800b750:	3568      	adds	r5, #104	@ 0x68
 800b752:	e7e9      	b.n	800b728 <_fwalk_sglue+0x10>

0800b754 <sniprintf>:
 800b754:	b40c      	push	{r2, r3}
 800b756:	b530      	push	{r4, r5, lr}
 800b758:	4b17      	ldr	r3, [pc, #92]	@ (800b7b8 <sniprintf+0x64>)
 800b75a:	1e0c      	subs	r4, r1, #0
 800b75c:	681d      	ldr	r5, [r3, #0]
 800b75e:	b09d      	sub	sp, #116	@ 0x74
 800b760:	da08      	bge.n	800b774 <sniprintf+0x20>
 800b762:	238b      	movs	r3, #139	@ 0x8b
 800b764:	602b      	str	r3, [r5, #0]
 800b766:	f04f 30ff 	mov.w	r0, #4294967295
 800b76a:	b01d      	add	sp, #116	@ 0x74
 800b76c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b770:	b002      	add	sp, #8
 800b772:	4770      	bx	lr
 800b774:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b778:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b77c:	bf14      	ite	ne
 800b77e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b782:	4623      	moveq	r3, r4
 800b784:	9304      	str	r3, [sp, #16]
 800b786:	9307      	str	r3, [sp, #28]
 800b788:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b78c:	9002      	str	r0, [sp, #8]
 800b78e:	9006      	str	r0, [sp, #24]
 800b790:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b794:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b796:	ab21      	add	r3, sp, #132	@ 0x84
 800b798:	a902      	add	r1, sp, #8
 800b79a:	4628      	mov	r0, r5
 800b79c:	9301      	str	r3, [sp, #4]
 800b79e:	f002 ff09 	bl	800e5b4 <_svfiprintf_r>
 800b7a2:	1c43      	adds	r3, r0, #1
 800b7a4:	bfbc      	itt	lt
 800b7a6:	238b      	movlt	r3, #139	@ 0x8b
 800b7a8:	602b      	strlt	r3, [r5, #0]
 800b7aa:	2c00      	cmp	r4, #0
 800b7ac:	d0dd      	beq.n	800b76a <sniprintf+0x16>
 800b7ae:	9b02      	ldr	r3, [sp, #8]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	701a      	strb	r2, [r3, #0]
 800b7b4:	e7d9      	b.n	800b76a <sniprintf+0x16>
 800b7b6:	bf00      	nop
 800b7b8:	200001a0 	.word	0x200001a0

0800b7bc <siprintf>:
 800b7bc:	b40e      	push	{r1, r2, r3}
 800b7be:	b500      	push	{lr}
 800b7c0:	b09c      	sub	sp, #112	@ 0x70
 800b7c2:	ab1d      	add	r3, sp, #116	@ 0x74
 800b7c4:	9002      	str	r0, [sp, #8]
 800b7c6:	9006      	str	r0, [sp, #24]
 800b7c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b7cc:	4809      	ldr	r0, [pc, #36]	@ (800b7f4 <siprintf+0x38>)
 800b7ce:	9107      	str	r1, [sp, #28]
 800b7d0:	9104      	str	r1, [sp, #16]
 800b7d2:	4909      	ldr	r1, [pc, #36]	@ (800b7f8 <siprintf+0x3c>)
 800b7d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7d8:	9105      	str	r1, [sp, #20]
 800b7da:	6800      	ldr	r0, [r0, #0]
 800b7dc:	9301      	str	r3, [sp, #4]
 800b7de:	a902      	add	r1, sp, #8
 800b7e0:	f002 fee8 	bl	800e5b4 <_svfiprintf_r>
 800b7e4:	9b02      	ldr	r3, [sp, #8]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	701a      	strb	r2, [r3, #0]
 800b7ea:	b01c      	add	sp, #112	@ 0x70
 800b7ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7f0:	b003      	add	sp, #12
 800b7f2:	4770      	bx	lr
 800b7f4:	200001a0 	.word	0x200001a0
 800b7f8:	ffff0208 	.word	0xffff0208

0800b7fc <siscanf>:
 800b7fc:	b40e      	push	{r1, r2, r3}
 800b7fe:	b530      	push	{r4, r5, lr}
 800b800:	b09c      	sub	sp, #112	@ 0x70
 800b802:	ac1f      	add	r4, sp, #124	@ 0x7c
 800b804:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800b808:	f854 5b04 	ldr.w	r5, [r4], #4
 800b80c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b810:	9002      	str	r0, [sp, #8]
 800b812:	9006      	str	r0, [sp, #24]
 800b814:	f7f4 fd3c 	bl	8000290 <strlen>
 800b818:	4b0b      	ldr	r3, [pc, #44]	@ (800b848 <siscanf+0x4c>)
 800b81a:	9003      	str	r0, [sp, #12]
 800b81c:	9007      	str	r0, [sp, #28]
 800b81e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b820:	480a      	ldr	r0, [pc, #40]	@ (800b84c <siscanf+0x50>)
 800b822:	9401      	str	r4, [sp, #4]
 800b824:	2300      	movs	r3, #0
 800b826:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b828:	9314      	str	r3, [sp, #80]	@ 0x50
 800b82a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b82e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b832:	462a      	mov	r2, r5
 800b834:	4623      	mov	r3, r4
 800b836:	a902      	add	r1, sp, #8
 800b838:	6800      	ldr	r0, [r0, #0]
 800b83a:	f003 f80f 	bl	800e85c <__ssvfiscanf_r>
 800b83e:	b01c      	add	sp, #112	@ 0x70
 800b840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b844:	b003      	add	sp, #12
 800b846:	4770      	bx	lr
 800b848:	0800b873 	.word	0x0800b873
 800b84c:	200001a0 	.word	0x200001a0

0800b850 <__sread>:
 800b850:	b510      	push	{r4, lr}
 800b852:	460c      	mov	r4, r1
 800b854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b858:	f000 fe66 	bl	800c528 <_read_r>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	bfab      	itete	ge
 800b860:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b862:	89a3      	ldrhlt	r3, [r4, #12]
 800b864:	181b      	addge	r3, r3, r0
 800b866:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b86a:	bfac      	ite	ge
 800b86c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b86e:	81a3      	strhlt	r3, [r4, #12]
 800b870:	bd10      	pop	{r4, pc}

0800b872 <__seofread>:
 800b872:	2000      	movs	r0, #0
 800b874:	4770      	bx	lr

0800b876 <__swrite>:
 800b876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b87a:	461f      	mov	r7, r3
 800b87c:	898b      	ldrh	r3, [r1, #12]
 800b87e:	05db      	lsls	r3, r3, #23
 800b880:	4605      	mov	r5, r0
 800b882:	460c      	mov	r4, r1
 800b884:	4616      	mov	r6, r2
 800b886:	d505      	bpl.n	800b894 <__swrite+0x1e>
 800b888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b88c:	2302      	movs	r3, #2
 800b88e:	2200      	movs	r2, #0
 800b890:	f000 fe38 	bl	800c504 <_lseek_r>
 800b894:	89a3      	ldrh	r3, [r4, #12]
 800b896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b89a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b89e:	81a3      	strh	r3, [r4, #12]
 800b8a0:	4632      	mov	r2, r6
 800b8a2:	463b      	mov	r3, r7
 800b8a4:	4628      	mov	r0, r5
 800b8a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8aa:	f000 be5f 	b.w	800c56c <_write_r>

0800b8ae <__sseek>:
 800b8ae:	b510      	push	{r4, lr}
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b6:	f000 fe25 	bl	800c504 <_lseek_r>
 800b8ba:	1c43      	adds	r3, r0, #1
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	bf15      	itete	ne
 800b8c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b8c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b8c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b8ca:	81a3      	strheq	r3, [r4, #12]
 800b8cc:	bf18      	it	ne
 800b8ce:	81a3      	strhne	r3, [r4, #12]
 800b8d0:	bd10      	pop	{r4, pc}

0800b8d2 <__sclose>:
 800b8d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8d6:	f000 be05 	b.w	800c4e4 <_close_r>

0800b8da <_vsniprintf_r>:
 800b8da:	b530      	push	{r4, r5, lr}
 800b8dc:	4614      	mov	r4, r2
 800b8de:	2c00      	cmp	r4, #0
 800b8e0:	b09b      	sub	sp, #108	@ 0x6c
 800b8e2:	4605      	mov	r5, r0
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	da05      	bge.n	800b8f4 <_vsniprintf_r+0x1a>
 800b8e8:	238b      	movs	r3, #139	@ 0x8b
 800b8ea:	6003      	str	r3, [r0, #0]
 800b8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f0:	b01b      	add	sp, #108	@ 0x6c
 800b8f2:	bd30      	pop	{r4, r5, pc}
 800b8f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b8f8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b8fc:	bf14      	ite	ne
 800b8fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b902:	4623      	moveq	r3, r4
 800b904:	9302      	str	r3, [sp, #8]
 800b906:	9305      	str	r3, [sp, #20]
 800b908:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b90c:	9100      	str	r1, [sp, #0]
 800b90e:	9104      	str	r1, [sp, #16]
 800b910:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b914:	4669      	mov	r1, sp
 800b916:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b918:	f002 fe4c 	bl	800e5b4 <_svfiprintf_r>
 800b91c:	1c43      	adds	r3, r0, #1
 800b91e:	bfbc      	itt	lt
 800b920:	238b      	movlt	r3, #139	@ 0x8b
 800b922:	602b      	strlt	r3, [r5, #0]
 800b924:	2c00      	cmp	r4, #0
 800b926:	d0e3      	beq.n	800b8f0 <_vsniprintf_r+0x16>
 800b928:	9b00      	ldr	r3, [sp, #0]
 800b92a:	2200      	movs	r2, #0
 800b92c:	701a      	strb	r2, [r3, #0]
 800b92e:	e7df      	b.n	800b8f0 <_vsniprintf_r+0x16>

0800b930 <vsniprintf>:
 800b930:	b507      	push	{r0, r1, r2, lr}
 800b932:	9300      	str	r3, [sp, #0]
 800b934:	4613      	mov	r3, r2
 800b936:	460a      	mov	r2, r1
 800b938:	4601      	mov	r1, r0
 800b93a:	4803      	ldr	r0, [pc, #12]	@ (800b948 <vsniprintf+0x18>)
 800b93c:	6800      	ldr	r0, [r0, #0]
 800b93e:	f7ff ffcc 	bl	800b8da <_vsniprintf_r>
 800b942:	b003      	add	sp, #12
 800b944:	f85d fb04 	ldr.w	pc, [sp], #4
 800b948:	200001a0 	.word	0x200001a0

0800b94c <memset>:
 800b94c:	4402      	add	r2, r0
 800b94e:	4603      	mov	r3, r0
 800b950:	4293      	cmp	r3, r2
 800b952:	d100      	bne.n	800b956 <memset+0xa>
 800b954:	4770      	bx	lr
 800b956:	f803 1b01 	strb.w	r1, [r3], #1
 800b95a:	e7f9      	b.n	800b950 <memset+0x4>

0800b95c <strchr>:
 800b95c:	b2c9      	uxtb	r1, r1
 800b95e:	4603      	mov	r3, r0
 800b960:	4618      	mov	r0, r3
 800b962:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b966:	b112      	cbz	r2, 800b96e <strchr+0x12>
 800b968:	428a      	cmp	r2, r1
 800b96a:	d1f9      	bne.n	800b960 <strchr+0x4>
 800b96c:	4770      	bx	lr
 800b96e:	2900      	cmp	r1, #0
 800b970:	bf18      	it	ne
 800b972:	2000      	movne	r0, #0
 800b974:	4770      	bx	lr

0800b976 <strncmp>:
 800b976:	b510      	push	{r4, lr}
 800b978:	b16a      	cbz	r2, 800b996 <strncmp+0x20>
 800b97a:	3901      	subs	r1, #1
 800b97c:	1884      	adds	r4, r0, r2
 800b97e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b982:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b986:	429a      	cmp	r2, r3
 800b988:	d103      	bne.n	800b992 <strncmp+0x1c>
 800b98a:	42a0      	cmp	r0, r4
 800b98c:	d001      	beq.n	800b992 <strncmp+0x1c>
 800b98e:	2a00      	cmp	r2, #0
 800b990:	d1f5      	bne.n	800b97e <strncmp+0x8>
 800b992:	1ad0      	subs	r0, r2, r3
 800b994:	bd10      	pop	{r4, pc}
 800b996:	4610      	mov	r0, r2
 800b998:	e7fc      	b.n	800b994 <strncmp+0x1e>

0800b99a <strncpy>:
 800b99a:	b510      	push	{r4, lr}
 800b99c:	3901      	subs	r1, #1
 800b99e:	4603      	mov	r3, r0
 800b9a0:	b132      	cbz	r2, 800b9b0 <strncpy+0x16>
 800b9a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b9a6:	f803 4b01 	strb.w	r4, [r3], #1
 800b9aa:	3a01      	subs	r2, #1
 800b9ac:	2c00      	cmp	r4, #0
 800b9ae:	d1f7      	bne.n	800b9a0 <strncpy+0x6>
 800b9b0:	441a      	add	r2, r3
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d100      	bne.n	800b9ba <strncpy+0x20>
 800b9b8:	bd10      	pop	{r4, pc}
 800b9ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b9be:	e7f9      	b.n	800b9b4 <strncpy+0x1a>

0800b9c0 <strrchr>:
 800b9c0:	b538      	push	{r3, r4, r5, lr}
 800b9c2:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	d10e      	bne.n	800b9e8 <strrchr+0x28>
 800b9ca:	4621      	mov	r1, r4
 800b9cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9d0:	f7ff bfc4 	b.w	800b95c <strchr>
 800b9d4:	1c43      	adds	r3, r0, #1
 800b9d6:	4605      	mov	r5, r0
 800b9d8:	4621      	mov	r1, r4
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7ff ffbe 	bl	800b95c <strchr>
 800b9e0:	2800      	cmp	r0, #0
 800b9e2:	d1f7      	bne.n	800b9d4 <strrchr+0x14>
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	bd38      	pop	{r3, r4, r5, pc}
 800b9e8:	2500      	movs	r5, #0
 800b9ea:	e7f5      	b.n	800b9d8 <strrchr+0x18>

0800b9ec <strstr>:
 800b9ec:	780a      	ldrb	r2, [r1, #0]
 800b9ee:	b570      	push	{r4, r5, r6, lr}
 800b9f0:	b96a      	cbnz	r2, 800ba0e <strstr+0x22>
 800b9f2:	bd70      	pop	{r4, r5, r6, pc}
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d109      	bne.n	800ba0c <strstr+0x20>
 800b9f8:	460c      	mov	r4, r1
 800b9fa:	4605      	mov	r5, r0
 800b9fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d0f6      	beq.n	800b9f2 <strstr+0x6>
 800ba04:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ba08:	429e      	cmp	r6, r3
 800ba0a:	d0f7      	beq.n	800b9fc <strstr+0x10>
 800ba0c:	3001      	adds	r0, #1
 800ba0e:	7803      	ldrb	r3, [r0, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1ef      	bne.n	800b9f4 <strstr+0x8>
 800ba14:	4618      	mov	r0, r3
 800ba16:	e7ec      	b.n	800b9f2 <strstr+0x6>

0800ba18 <validate_structure>:
 800ba18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba1a:	6801      	ldr	r1, [r0, #0]
 800ba1c:	293b      	cmp	r1, #59	@ 0x3b
 800ba1e:	4604      	mov	r4, r0
 800ba20:	d911      	bls.n	800ba46 <validate_structure+0x2e>
 800ba22:	223c      	movs	r2, #60	@ 0x3c
 800ba24:	4668      	mov	r0, sp
 800ba26:	f000 fe01 	bl	800c62c <div>
 800ba2a:	9a01      	ldr	r2, [sp, #4]
 800ba2c:	6863      	ldr	r3, [r4, #4]
 800ba2e:	9900      	ldr	r1, [sp, #0]
 800ba30:	2a00      	cmp	r2, #0
 800ba32:	440b      	add	r3, r1
 800ba34:	6063      	str	r3, [r4, #4]
 800ba36:	bfbb      	ittet	lt
 800ba38:	323c      	addlt	r2, #60	@ 0x3c
 800ba3a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ba3e:	6022      	strge	r2, [r4, #0]
 800ba40:	6022      	strlt	r2, [r4, #0]
 800ba42:	bfb8      	it	lt
 800ba44:	6063      	strlt	r3, [r4, #4]
 800ba46:	6861      	ldr	r1, [r4, #4]
 800ba48:	293b      	cmp	r1, #59	@ 0x3b
 800ba4a:	d911      	bls.n	800ba70 <validate_structure+0x58>
 800ba4c:	223c      	movs	r2, #60	@ 0x3c
 800ba4e:	4668      	mov	r0, sp
 800ba50:	f000 fdec 	bl	800c62c <div>
 800ba54:	9a01      	ldr	r2, [sp, #4]
 800ba56:	68a3      	ldr	r3, [r4, #8]
 800ba58:	9900      	ldr	r1, [sp, #0]
 800ba5a:	2a00      	cmp	r2, #0
 800ba5c:	440b      	add	r3, r1
 800ba5e:	60a3      	str	r3, [r4, #8]
 800ba60:	bfbb      	ittet	lt
 800ba62:	323c      	addlt	r2, #60	@ 0x3c
 800ba64:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ba68:	6062      	strge	r2, [r4, #4]
 800ba6a:	6062      	strlt	r2, [r4, #4]
 800ba6c:	bfb8      	it	lt
 800ba6e:	60a3      	strlt	r3, [r4, #8]
 800ba70:	68a1      	ldr	r1, [r4, #8]
 800ba72:	2917      	cmp	r1, #23
 800ba74:	d911      	bls.n	800ba9a <validate_structure+0x82>
 800ba76:	2218      	movs	r2, #24
 800ba78:	4668      	mov	r0, sp
 800ba7a:	f000 fdd7 	bl	800c62c <div>
 800ba7e:	9a01      	ldr	r2, [sp, #4]
 800ba80:	68e3      	ldr	r3, [r4, #12]
 800ba82:	9900      	ldr	r1, [sp, #0]
 800ba84:	2a00      	cmp	r2, #0
 800ba86:	440b      	add	r3, r1
 800ba88:	60e3      	str	r3, [r4, #12]
 800ba8a:	bfbb      	ittet	lt
 800ba8c:	3218      	addlt	r2, #24
 800ba8e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ba92:	60a2      	strge	r2, [r4, #8]
 800ba94:	60a2      	strlt	r2, [r4, #8]
 800ba96:	bfb8      	it	lt
 800ba98:	60e3      	strlt	r3, [r4, #12]
 800ba9a:	6921      	ldr	r1, [r4, #16]
 800ba9c:	290b      	cmp	r1, #11
 800ba9e:	d911      	bls.n	800bac4 <validate_structure+0xac>
 800baa0:	220c      	movs	r2, #12
 800baa2:	4668      	mov	r0, sp
 800baa4:	f000 fdc2 	bl	800c62c <div>
 800baa8:	9a01      	ldr	r2, [sp, #4]
 800baaa:	6963      	ldr	r3, [r4, #20]
 800baac:	9900      	ldr	r1, [sp, #0]
 800baae:	2a00      	cmp	r2, #0
 800bab0:	440b      	add	r3, r1
 800bab2:	6163      	str	r3, [r4, #20]
 800bab4:	bfbb      	ittet	lt
 800bab6:	320c      	addlt	r2, #12
 800bab8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800babc:	6122      	strge	r2, [r4, #16]
 800babe:	6122      	strlt	r2, [r4, #16]
 800bac0:	bfb8      	it	lt
 800bac2:	6163      	strlt	r3, [r4, #20]
 800bac4:	6963      	ldr	r3, [r4, #20]
 800bac6:	079a      	lsls	r2, r3, #30
 800bac8:	d11c      	bne.n	800bb04 <validate_structure+0xec>
 800baca:	2164      	movs	r1, #100	@ 0x64
 800bacc:	fb93 f2f1 	sdiv	r2, r3, r1
 800bad0:	fb01 3212 	mls	r2, r1, r2, r3
 800bad4:	b9c2      	cbnz	r2, 800bb08 <validate_structure+0xf0>
 800bad6:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800bada:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800bade:	fb93 f1f2 	sdiv	r1, r3, r2
 800bae2:	fb02 3311 	mls	r3, r2, r1, r3
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	bf14      	ite	ne
 800baea:	231c      	movne	r3, #28
 800baec:	231d      	moveq	r3, #29
 800baee:	68e2      	ldr	r2, [r4, #12]
 800baf0:	2a00      	cmp	r2, #0
 800baf2:	dc0b      	bgt.n	800bb0c <validate_structure+0xf4>
 800baf4:	4d31      	ldr	r5, [pc, #196]	@ (800bbbc <validate_structure+0x1a4>)
 800baf6:	200b      	movs	r0, #11
 800baf8:	2164      	movs	r1, #100	@ 0x64
 800bafa:	68e6      	ldr	r6, [r4, #12]
 800bafc:	2e00      	cmp	r6, #0
 800bafe:	dd30      	ble.n	800bb62 <validate_structure+0x14a>
 800bb00:	b003      	add	sp, #12
 800bb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb04:	231c      	movs	r3, #28
 800bb06:	e7f2      	b.n	800baee <validate_structure+0xd6>
 800bb08:	231d      	movs	r3, #29
 800bb0a:	e7f0      	b.n	800baee <validate_structure+0xd6>
 800bb0c:	4d2b      	ldr	r5, [pc, #172]	@ (800bbbc <validate_structure+0x1a4>)
 800bb0e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800bb12:	2a01      	cmp	r2, #1
 800bb14:	bf14      	ite	ne
 800bb16:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800bb1a:	4618      	moveq	r0, r3
 800bb1c:	4281      	cmp	r1, r0
 800bb1e:	ddef      	ble.n	800bb00 <validate_structure+0xe8>
 800bb20:	3201      	adds	r2, #1
 800bb22:	1a09      	subs	r1, r1, r0
 800bb24:	2a0c      	cmp	r2, #12
 800bb26:	60e1      	str	r1, [r4, #12]
 800bb28:	6122      	str	r2, [r4, #16]
 800bb2a:	d1f0      	bne.n	800bb0e <validate_structure+0xf6>
 800bb2c:	6963      	ldr	r3, [r4, #20]
 800bb2e:	2100      	movs	r1, #0
 800bb30:	1c5a      	adds	r2, r3, #1
 800bb32:	6121      	str	r1, [r4, #16]
 800bb34:	0791      	lsls	r1, r2, #30
 800bb36:	6162      	str	r2, [r4, #20]
 800bb38:	d13c      	bne.n	800bbb4 <validate_structure+0x19c>
 800bb3a:	2164      	movs	r1, #100	@ 0x64
 800bb3c:	fb92 f0f1 	sdiv	r0, r2, r1
 800bb40:	fb01 2210 	mls	r2, r1, r0, r2
 800bb44:	2a00      	cmp	r2, #0
 800bb46:	d137      	bne.n	800bbb8 <validate_structure+0x1a0>
 800bb48:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800bb4c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800bb50:	fb93 f1f2 	sdiv	r1, r3, r2
 800bb54:	fb02 3311 	mls	r3, r2, r1, r3
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	bf14      	ite	ne
 800bb5c:	231c      	movne	r3, #28
 800bb5e:	231d      	moveq	r3, #29
 800bb60:	e7d5      	b.n	800bb0e <validate_structure+0xf6>
 800bb62:	6922      	ldr	r2, [r4, #16]
 800bb64:	3a01      	subs	r2, #1
 800bb66:	6122      	str	r2, [r4, #16]
 800bb68:	3201      	adds	r2, #1
 800bb6a:	d116      	bne.n	800bb9a <validate_structure+0x182>
 800bb6c:	6963      	ldr	r3, [r4, #20]
 800bb6e:	1e5a      	subs	r2, r3, #1
 800bb70:	0797      	lsls	r7, r2, #30
 800bb72:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800bb76:	d119      	bne.n	800bbac <validate_structure+0x194>
 800bb78:	fb92 f7f1 	sdiv	r7, r2, r1
 800bb7c:	fb01 2217 	mls	r2, r1, r7, r2
 800bb80:	b9b2      	cbnz	r2, 800bbb0 <validate_structure+0x198>
 800bb82:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800bb86:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800bb8a:	fb93 f7f2 	sdiv	r7, r3, r2
 800bb8e:	fb02 3317 	mls	r3, r2, r7, r3
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	bf14      	ite	ne
 800bb96:	231c      	movne	r3, #28
 800bb98:	231d      	moveq	r3, #29
 800bb9a:	6922      	ldr	r2, [r4, #16]
 800bb9c:	2a01      	cmp	r2, #1
 800bb9e:	bf14      	ite	ne
 800bba0:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800bba4:	461a      	moveq	r2, r3
 800bba6:	4432      	add	r2, r6
 800bba8:	60e2      	str	r2, [r4, #12]
 800bbaa:	e7a6      	b.n	800bafa <validate_structure+0xe2>
 800bbac:	231c      	movs	r3, #28
 800bbae:	e7f4      	b.n	800bb9a <validate_structure+0x182>
 800bbb0:	231d      	movs	r3, #29
 800bbb2:	e7f2      	b.n	800bb9a <validate_structure+0x182>
 800bbb4:	231c      	movs	r3, #28
 800bbb6:	e7aa      	b.n	800bb0e <validate_structure+0xf6>
 800bbb8:	231d      	movs	r3, #29
 800bbba:	e7a8      	b.n	800bb0e <validate_structure+0xf6>
 800bbbc:	08011b88 	.word	0x08011b88

0800bbc0 <mktime>:
 800bbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc4:	b085      	sub	sp, #20
 800bbc6:	4607      	mov	r7, r0
 800bbc8:	f003 fa44 	bl	800f054 <__gettzinfo>
 800bbcc:	4681      	mov	r9, r0
 800bbce:	4638      	mov	r0, r7
 800bbd0:	f7ff ff22 	bl	800ba18 <validate_structure>
 800bbd4:	e9d7 4300 	ldrd	r4, r3, [r7]
 800bbd8:	223c      	movs	r2, #60	@ 0x3c
 800bbda:	fb02 4403 	mla	r4, r2, r3, r4
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	697d      	ldr	r5, [r7, #20]
 800bbe2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800bbe6:	fb02 4403 	mla	r4, r2, r3, r4
 800bbea:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800bbee:	4ac1      	ldr	r2, [pc, #772]	@ (800bef4 <mktime+0x334>)
 800bbf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bbf4:	3e01      	subs	r6, #1
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	4416      	add	r6, r2
 800bbfa:	dd11      	ble.n	800bc20 <mktime+0x60>
 800bbfc:	07a9      	lsls	r1, r5, #30
 800bbfe:	d10f      	bne.n	800bc20 <mktime+0x60>
 800bc00:	2264      	movs	r2, #100	@ 0x64
 800bc02:	fb95 f3f2 	sdiv	r3, r5, r2
 800bc06:	fb02 5313 	mls	r3, r2, r3, r5
 800bc0a:	b943      	cbnz	r3, 800bc1e <mktime+0x5e>
 800bc0c:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800bc10:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800bc14:	fb93 f1f2 	sdiv	r1, r3, r2
 800bc18:	fb02 3311 	mls	r3, r2, r1, r3
 800bc1c:	b903      	cbnz	r3, 800bc20 <mktime+0x60>
 800bc1e:	3601      	adds	r6, #1
 800bc20:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800bc24:	3310      	adds	r3, #16
 800bc26:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	61fe      	str	r6, [r7, #28]
 800bc2e:	f200 8167 	bhi.w	800bf00 <mktime+0x340>
 800bc32:	2d46      	cmp	r5, #70	@ 0x46
 800bc34:	f340 808e 	ble.w	800bd54 <mktime+0x194>
 800bc38:	2346      	movs	r3, #70	@ 0x46
 800bc3a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800bc3e:	2164      	movs	r1, #100	@ 0x64
 800bc40:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800bc44:	079a      	lsls	r2, r3, #30
 800bc46:	d17f      	bne.n	800bd48 <mktime+0x188>
 800bc48:	fb93 f2f1 	sdiv	r2, r3, r1
 800bc4c:	fb01 3212 	mls	r2, r1, r2, r3
 800bc50:	2a00      	cmp	r2, #0
 800bc52:	d17c      	bne.n	800bd4e <mktime+0x18e>
 800bc54:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800bc58:	fb92 fef0 	sdiv	lr, r2, r0
 800bc5c:	fb00 221e 	mls	r2, r0, lr, r2
 800bc60:	2a00      	cmp	r2, #0
 800bc62:	bf14      	ite	ne
 800bc64:	4662      	movne	r2, ip
 800bc66:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	429d      	cmp	r5, r3
 800bc6e:	4416      	add	r6, r2
 800bc70:	d1e8      	bne.n	800bc44 <mktime+0x84>
 800bc72:	4ba1      	ldr	r3, [pc, #644]	@ (800bef8 <mktime+0x338>)
 800bc74:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800bc78:	fbc6 4803 	smlal	r4, r8, r6, r3
 800bc7c:	f000 f9fa 	bl	800c074 <__tz_lock>
 800bc80:	f000 fa04 	bl	800c08c <_tzset_unlocked>
 800bc84:	4b9d      	ldr	r3, [pc, #628]	@ (800befc <mktime+0x33c>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f000 8140 	beq.w	800bf0e <mktime+0x34e>
 800bc8e:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800bc92:	6978      	ldr	r0, [r7, #20]
 800bc94:	4653      	mov	r3, sl
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	bfa8      	it	ge
 800bc9a:	2301      	movge	r3, #1
 800bc9c:	9301      	str	r3, [sp, #4]
 800bc9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bca2:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800bca6:	4283      	cmp	r3, r0
 800bca8:	f040 8096 	bne.w	800bdd8 <mktime+0x218>
 800bcac:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800bcb0:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800bcb4:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800bcb8:	1a13      	subs	r3, r2, r0
 800bcba:	9303      	str	r3, [sp, #12]
 800bcbc:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800bcc0:	9302      	str	r3, [sp, #8]
 800bcc2:	9a02      	ldr	r2, [sp, #8]
 800bcc4:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800bcc8:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800bccc:	ebb2 0e03 	subs.w	lr, r2, r3
 800bcd0:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800bcd4:	4574      	cmp	r4, lr
 800bcd6:	eb78 0201 	sbcs.w	r2, r8, r1
 800bcda:	f280 8085 	bge.w	800bde8 <mktime+0x228>
 800bcde:	f8d9 2000 	ldr.w	r2, [r9]
 800bce2:	2a00      	cmp	r2, #0
 800bce4:	f000 808d 	beq.w	800be02 <mktime+0x242>
 800bce8:	9a03      	ldr	r2, [sp, #12]
 800bcea:	4294      	cmp	r4, r2
 800bcec:	eb78 020b 	sbcs.w	r2, r8, fp
 800bcf0:	f2c0 810a 	blt.w	800bf08 <mktime+0x348>
 800bcf4:	4574      	cmp	r4, lr
 800bcf6:	eb78 0101 	sbcs.w	r1, r8, r1
 800bcfa:	bfb4      	ite	lt
 800bcfc:	f04f 0b01 	movlt.w	fp, #1
 800bd00:	f04f 0b00 	movge.w	fp, #0
 800bd04:	f1ba 0f00 	cmp.w	sl, #0
 800bd08:	f280 8087 	bge.w	800be1a <mktime+0x25a>
 800bd0c:	f1bb 0f01 	cmp.w	fp, #1
 800bd10:	f040 80ff 	bne.w	800bf12 <mktime+0x352>
 800bd14:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800bd18:	191c      	adds	r4, r3, r4
 800bd1a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800bd1e:	f04f 0b01 	mov.w	fp, #1
 800bd22:	f000 f9ad 	bl	800c080 <__tz_unlock>
 800bd26:	3604      	adds	r6, #4
 800bd28:	2307      	movs	r3, #7
 800bd2a:	fb96 f3f3 	sdiv	r3, r6, r3
 800bd2e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bd32:	1af6      	subs	r6, r6, r3
 800bd34:	f100 80db 	bmi.w	800beee <mktime+0x32e>
 800bd38:	f8c7 b020 	str.w	fp, [r7, #32]
 800bd3c:	61be      	str	r6, [r7, #24]
 800bd3e:	4620      	mov	r0, r4
 800bd40:	4641      	mov	r1, r8
 800bd42:	b005      	add	sp, #20
 800bd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd48:	f240 126d 	movw	r2, #365	@ 0x16d
 800bd4c:	e78d      	b.n	800bc6a <mktime+0xaa>
 800bd4e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800bd52:	e78a      	b.n	800bc6a <mktime+0xaa>
 800bd54:	d08d      	beq.n	800bc72 <mktime+0xb2>
 800bd56:	2345      	movs	r3, #69	@ 0x45
 800bd58:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800bd5c:	2164      	movs	r1, #100	@ 0x64
 800bd5e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800bd62:	e012      	b.n	800bd8a <mktime+0x1ca>
 800bd64:	bb62      	cbnz	r2, 800bdc0 <mktime+0x200>
 800bd66:	fb93 f2f1 	sdiv	r2, r3, r1
 800bd6a:	fb01 3212 	mls	r2, r1, r2, r3
 800bd6e:	bb52      	cbnz	r2, 800bdc6 <mktime+0x206>
 800bd70:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800bd74:	fb92 fef0 	sdiv	lr, r2, r0
 800bd78:	fb00 221e 	mls	r2, r0, lr, r2
 800bd7c:	2a00      	cmp	r2, #0
 800bd7e:	bf14      	ite	ne
 800bd80:	4662      	movne	r2, ip
 800bd82:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800bd86:	1ab6      	subs	r6, r6, r2
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	429d      	cmp	r5, r3
 800bd8c:	f003 0203 	and.w	r2, r3, #3
 800bd90:	dbe8      	blt.n	800bd64 <mktime+0x1a4>
 800bd92:	b9da      	cbnz	r2, 800bdcc <mktime+0x20c>
 800bd94:	2264      	movs	r2, #100	@ 0x64
 800bd96:	fb95 f3f2 	sdiv	r3, r5, r2
 800bd9a:	fb02 5313 	mls	r3, r2, r3, r5
 800bd9e:	b9c3      	cbnz	r3, 800bdd2 <mktime+0x212>
 800bda0:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800bda4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800bda8:	fb93 f1f2 	sdiv	r1, r3, r2
 800bdac:	fb02 3311 	mls	r3, r2, r1, r3
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f240 136d 	movw	r3, #365	@ 0x16d
 800bdb6:	bf08      	it	eq
 800bdb8:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800bdbc:	1af6      	subs	r6, r6, r3
 800bdbe:	e758      	b.n	800bc72 <mktime+0xb2>
 800bdc0:	f240 126d 	movw	r2, #365	@ 0x16d
 800bdc4:	e7df      	b.n	800bd86 <mktime+0x1c6>
 800bdc6:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800bdca:	e7dc      	b.n	800bd86 <mktime+0x1c6>
 800bdcc:	f240 136d 	movw	r3, #365	@ 0x16d
 800bdd0:	e7f4      	b.n	800bdbc <mktime+0x1fc>
 800bdd2:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800bdd6:	e7f1      	b.n	800bdbc <mktime+0x1fc>
 800bdd8:	f000 f8a2 	bl	800bf20 <__tzcalc_limits>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	f47f af65 	bne.w	800bcac <mktime+0xec>
 800bde2:	f8dd b004 	ldr.w	fp, [sp, #4]
 800bde6:	e791      	b.n	800bd0c <mktime+0x14c>
 800bde8:	9a02      	ldr	r2, [sp, #8]
 800bdea:	1a12      	subs	r2, r2, r0
 800bdec:	9202      	str	r2, [sp, #8]
 800bdee:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800bdf2:	eb6c 0c02 	sbc.w	ip, ip, r2
 800bdf6:	9a02      	ldr	r2, [sp, #8]
 800bdf8:	4294      	cmp	r4, r2
 800bdfa:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800bdfe:	dbf0      	blt.n	800bde2 <mktime+0x222>
 800be00:	e76d      	b.n	800bcde <mktime+0x11e>
 800be02:	9a03      	ldr	r2, [sp, #12]
 800be04:	4294      	cmp	r4, r2
 800be06:	eb78 020b 	sbcs.w	r2, r8, fp
 800be0a:	f6ff af73 	blt.w	800bcf4 <mktime+0x134>
 800be0e:	f1ba 0f00 	cmp.w	sl, #0
 800be12:	f6ff af7f 	blt.w	800bd14 <mktime+0x154>
 800be16:	f04f 0b01 	mov.w	fp, #1
 800be1a:	9a01      	ldr	r2, [sp, #4]
 800be1c:	ea82 020b 	eor.w	r2, r2, fp
 800be20:	2a01      	cmp	r2, #1
 800be22:	f47f af73 	bne.w	800bd0c <mktime+0x14c>
 800be26:	f1bb 0f00 	cmp.w	fp, #0
 800be2a:	d035      	beq.n	800be98 <mktime+0x2d8>
 800be2c:	1a1b      	subs	r3, r3, r0
 800be2e:	683a      	ldr	r2, [r7, #0]
 800be30:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800be34:	441a      	add	r2, r3
 800be36:	191c      	adds	r4, r3, r4
 800be38:	603a      	str	r2, [r7, #0]
 800be3a:	4638      	mov	r0, r7
 800be3c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800be40:	f7ff fdea 	bl	800ba18 <validate_structure>
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	ebb2 020a 	subs.w	r2, r2, sl
 800be4a:	f43f af5f 	beq.w	800bd0c <mktime+0x14c>
 800be4e:	2a01      	cmp	r2, #1
 800be50:	dc24      	bgt.n	800be9c <mktime+0x2dc>
 800be52:	1c93      	adds	r3, r2, #2
 800be54:	bfd8      	it	le
 800be56:	2201      	movle	r2, #1
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	18d3      	adds	r3, r2, r3
 800be5c:	d527      	bpl.n	800beae <mktime+0x2ee>
 800be5e:	1e6b      	subs	r3, r5, #1
 800be60:	0798      	lsls	r0, r3, #30
 800be62:	d11e      	bne.n	800bea2 <mktime+0x2e2>
 800be64:	2164      	movs	r1, #100	@ 0x64
 800be66:	fb93 f0f1 	sdiv	r0, r3, r1
 800be6a:	fb01 3310 	mls	r3, r1, r0, r3
 800be6e:	b9db      	cbnz	r3, 800bea8 <mktime+0x2e8>
 800be70:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800be74:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800be78:	fb95 f1f3 	sdiv	r1, r5, r3
 800be7c:	fb03 5511 	mls	r5, r3, r1, r5
 800be80:	2d00      	cmp	r5, #0
 800be82:	f240 136d 	movw	r3, #365	@ 0x16d
 800be86:	bf18      	it	ne
 800be88:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800be8c:	61fb      	str	r3, [r7, #28]
 800be8e:	4416      	add	r6, r2
 800be90:	e73c      	b.n	800bd0c <mktime+0x14c>
 800be92:	f04f 0b00 	mov.w	fp, #0
 800be96:	e7c0      	b.n	800be1a <mktime+0x25a>
 800be98:	1ac3      	subs	r3, r0, r3
 800be9a:	e7c8      	b.n	800be2e <mktime+0x26e>
 800be9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bea0:	e7da      	b.n	800be58 <mktime+0x298>
 800bea2:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800bea6:	e7f1      	b.n	800be8c <mktime+0x2cc>
 800bea8:	f240 136d 	movw	r3, #365	@ 0x16d
 800beac:	e7ee      	b.n	800be8c <mktime+0x2cc>
 800beae:	07a9      	lsls	r1, r5, #30
 800beb0:	d117      	bne.n	800bee2 <mktime+0x322>
 800beb2:	2064      	movs	r0, #100	@ 0x64
 800beb4:	fb95 f1f0 	sdiv	r1, r5, r0
 800beb8:	fb00 5111 	mls	r1, r0, r1, r5
 800bebc:	b9a1      	cbnz	r1, 800bee8 <mktime+0x328>
 800bebe:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800bec2:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800bec6:	fb95 f0f1 	sdiv	r0, r5, r1
 800beca:	fb01 5510 	mls	r5, r1, r0, r5
 800bece:	2d00      	cmp	r5, #0
 800bed0:	f240 116d 	movw	r1, #365	@ 0x16d
 800bed4:	bf08      	it	eq
 800bed6:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 800beda:	428b      	cmp	r3, r1
 800bedc:	bfa8      	it	ge
 800bede:	1a5b      	subge	r3, r3, r1
 800bee0:	e7d4      	b.n	800be8c <mktime+0x2cc>
 800bee2:	f240 116d 	movw	r1, #365	@ 0x16d
 800bee6:	e7f8      	b.n	800beda <mktime+0x31a>
 800bee8:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 800beec:	e7f5      	b.n	800beda <mktime+0x31a>
 800beee:	3607      	adds	r6, #7
 800bef0:	e722      	b.n	800bd38 <mktime+0x178>
 800bef2:	bf00      	nop
 800bef4:	08011b58 	.word	0x08011b58
 800bef8:	00015180 	.word	0x00015180
 800befc:	20009840 	.word	0x20009840
 800bf00:	f04f 34ff 	mov.w	r4, #4294967295
 800bf04:	46a0      	mov	r8, r4
 800bf06:	e71a      	b.n	800bd3e <mktime+0x17e>
 800bf08:	f1ba 0f00 	cmp.w	sl, #0
 800bf0c:	dac1      	bge.n	800be92 <mktime+0x2d2>
 800bf0e:	f04f 0b00 	mov.w	fp, #0
 800bf12:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800bf16:	191c      	adds	r4, r3, r4
 800bf18:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800bf1c:	e701      	b.n	800bd22 <mktime+0x162>
 800bf1e:	bf00      	nop

0800bf20 <__tzcalc_limits>:
 800bf20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf24:	4604      	mov	r4, r0
 800bf26:	f003 f895 	bl	800f054 <__gettzinfo>
 800bf2a:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800bf2e:	429c      	cmp	r4, r3
 800bf30:	f340 8099 	ble.w	800c066 <__tzcalc_limits+0x146>
 800bf34:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800bf38:	19e5      	adds	r5, r4, r7
 800bf3a:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800bf3e:	f240 126d 	movw	r2, #365	@ 0x16d
 800bf42:	10ad      	asrs	r5, r5, #2
 800bf44:	fb02 5503 	mla	r5, r2, r3, r5
 800bf48:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800bf4c:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800bf50:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800bf54:	4f45      	ldr	r7, [pc, #276]	@ (800c06c <__tzcalc_limits+0x14c>)
 800bf56:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf5a:	441d      	add	r5, r3
 800bf5c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800bf60:	eb04 030c 	add.w	r3, r4, ip
 800bf64:	6044      	str	r4, [r0, #4]
 800bf66:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf6a:	4601      	mov	r1, r0
 800bf6c:	441d      	add	r5, r3
 800bf6e:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800bf72:	7a0b      	ldrb	r3, [r1, #8]
 800bf74:	694a      	ldr	r2, [r1, #20]
 800bf76:	2b4a      	cmp	r3, #74	@ 0x4a
 800bf78:	d133      	bne.n	800bfe2 <__tzcalc_limits+0xc2>
 800bf7a:	07a6      	lsls	r6, r4, #30
 800bf7c:	eb05 0302 	add.w	r3, r5, r2
 800bf80:	d106      	bne.n	800bf90 <__tzcalc_limits+0x70>
 800bf82:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800bf86:	fb94 f6fe 	sdiv	r6, r4, lr
 800bf8a:	fb0e 4616 	mls	r6, lr, r6, r4
 800bf8e:	b936      	cbnz	r6, 800bf9e <__tzcalc_limits+0x7e>
 800bf90:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800bf94:	fb94 f6fe 	sdiv	r6, r4, lr
 800bf98:	fb0e 4616 	mls	r6, lr, r6, r4
 800bf9c:	b9fe      	cbnz	r6, 800bfde <__tzcalc_limits+0xbe>
 800bf9e:	2a3b      	cmp	r2, #59	@ 0x3b
 800bfa0:	bfd4      	ite	le
 800bfa2:	2200      	movle	r2, #0
 800bfa4:	2201      	movgt	r2, #1
 800bfa6:	4413      	add	r3, r2
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	698a      	ldr	r2, [r1, #24]
 800bfac:	17d6      	asrs	r6, r2, #31
 800bfae:	fbc3 2607 	smlal	r2, r6, r3, r7
 800bfb2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800bfb4:	18d2      	adds	r2, r2, r3
 800bfb6:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800bfba:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800bfbe:	3128      	adds	r1, #40	@ 0x28
 800bfc0:	458c      	cmp	ip, r1
 800bfc2:	d1d6      	bne.n	800bf72 <__tzcalc_limits+0x52>
 800bfc4:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800bfc8:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800bfcc:	428c      	cmp	r4, r1
 800bfce:	4193      	sbcs	r3, r2
 800bfd0:	bfb4      	ite	lt
 800bfd2:	2301      	movlt	r3, #1
 800bfd4:	2300      	movge	r3, #0
 800bfd6:	6003      	str	r3, [r0, #0]
 800bfd8:	2001      	movs	r0, #1
 800bfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfde:	2200      	movs	r2, #0
 800bfe0:	e7e1      	b.n	800bfa6 <__tzcalc_limits+0x86>
 800bfe2:	2b44      	cmp	r3, #68	@ 0x44
 800bfe4:	d101      	bne.n	800bfea <__tzcalc_limits+0xca>
 800bfe6:	18ab      	adds	r3, r5, r2
 800bfe8:	e7df      	b.n	800bfaa <__tzcalc_limits+0x8a>
 800bfea:	07a3      	lsls	r3, r4, #30
 800bfec:	d105      	bne.n	800bffa <__tzcalc_limits+0xda>
 800bfee:	2664      	movs	r6, #100	@ 0x64
 800bff0:	fb94 f3f6 	sdiv	r3, r4, r6
 800bff4:	fb06 4313 	mls	r3, r6, r3, r4
 800bff8:	bb7b      	cbnz	r3, 800c05a <__tzcalc_limits+0x13a>
 800bffa:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800bffe:	fb94 f6f3 	sdiv	r6, r4, r3
 800c002:	fb03 4616 	mls	r6, r3, r6, r4
 800c006:	fab6 f686 	clz	r6, r6
 800c00a:	0976      	lsrs	r6, r6, #5
 800c00c:	f8df e060 	ldr.w	lr, [pc, #96]	@ 800c070 <__tzcalc_limits+0x150>
 800c010:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800c014:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800c018:	462b      	mov	r3, r5
 800c01a:	f04f 0800 	mov.w	r8, #0
 800c01e:	fb0a e606 	mla	r6, sl, r6, lr
 800c022:	f108 0801 	add.w	r8, r8, #1
 800c026:	45c1      	cmp	r9, r8
 800c028:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800c02c:	dc17      	bgt.n	800c05e <__tzcalc_limits+0x13e>
 800c02e:	f103 0804 	add.w	r8, r3, #4
 800c032:	2607      	movs	r6, #7
 800c034:	fb98 f6f6 	sdiv	r6, r8, r6
 800c038:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800c03c:	eba8 0606 	sub.w	r6, r8, r6
 800c040:	1b92      	subs	r2, r2, r6
 800c042:	690e      	ldr	r6, [r1, #16]
 800c044:	f106 36ff 	add.w	r6, r6, #4294967295
 800c048:	bf48      	it	mi
 800c04a:	3207      	addmi	r2, #7
 800c04c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800c050:	4432      	add	r2, r6
 800c052:	4572      	cmp	r2, lr
 800c054:	da05      	bge.n	800c062 <__tzcalc_limits+0x142>
 800c056:	4413      	add	r3, r2
 800c058:	e7a7      	b.n	800bfaa <__tzcalc_limits+0x8a>
 800c05a:	2601      	movs	r6, #1
 800c05c:	e7d6      	b.n	800c00c <__tzcalc_limits+0xec>
 800c05e:	4473      	add	r3, lr
 800c060:	e7df      	b.n	800c022 <__tzcalc_limits+0x102>
 800c062:	3a07      	subs	r2, #7
 800c064:	e7f5      	b.n	800c052 <__tzcalc_limits+0x132>
 800c066:	2000      	movs	r0, #0
 800c068:	e7b7      	b.n	800bfda <__tzcalc_limits+0xba>
 800c06a:	bf00      	nop
 800c06c:	00015180 	.word	0x00015180
 800c070:	08011e78 	.word	0x08011e78

0800c074 <__tz_lock>:
 800c074:	4801      	ldr	r0, [pc, #4]	@ (800c07c <__tz_lock+0x8>)
 800c076:	f7f8 bdf0 	b.w	8004c5a <__retarget_lock_acquire>
 800c07a:	bf00      	nop
 800c07c:	20001734 	.word	0x20001734

0800c080 <__tz_unlock>:
 800c080:	4801      	ldr	r0, [pc, #4]	@ (800c088 <__tz_unlock+0x8>)
 800c082:	f7f8 bdf4 	b.w	8004c6e <__retarget_lock_release>
 800c086:	bf00      	nop
 800c088:	20001734 	.word	0x20001734

0800c08c <_tzset_unlocked>:
 800c08c:	4b01      	ldr	r3, [pc, #4]	@ (800c094 <_tzset_unlocked+0x8>)
 800c08e:	6818      	ldr	r0, [r3, #0]
 800c090:	f000 b802 	b.w	800c098 <_tzset_unlocked_r>
 800c094:	200001a0 	.word	0x200001a0

0800c098 <_tzset_unlocked_r>:
 800c098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09c:	b08d      	sub	sp, #52	@ 0x34
 800c09e:	4607      	mov	r7, r0
 800c0a0:	f002 ffd8 	bl	800f054 <__gettzinfo>
 800c0a4:	49bc      	ldr	r1, [pc, #752]	@ (800c398 <_tzset_unlocked_r+0x300>)
 800c0a6:	4dbd      	ldr	r5, [pc, #756]	@ (800c39c <_tzset_unlocked_r+0x304>)
 800c0a8:	4604      	mov	r4, r0
 800c0aa:	4638      	mov	r0, r7
 800c0ac:	f001 fcd4 	bl	800da58 <_getenv_r>
 800c0b0:	4606      	mov	r6, r0
 800c0b2:	bb10      	cbnz	r0, 800c0fa <_tzset_unlocked_r+0x62>
 800c0b4:	4bba      	ldr	r3, [pc, #744]	@ (800c3a0 <_tzset_unlocked_r+0x308>)
 800c0b6:	4abb      	ldr	r2, [pc, #748]	@ (800c3a4 <_tzset_unlocked_r+0x30c>)
 800c0b8:	6018      	str	r0, [r3, #0]
 800c0ba:	4bbb      	ldr	r3, [pc, #748]	@ (800c3a8 <_tzset_unlocked_r+0x310>)
 800c0bc:	62a0      	str	r0, [r4, #40]	@ 0x28
 800c0be:	6018      	str	r0, [r3, #0]
 800c0c0:	4bba      	ldr	r3, [pc, #744]	@ (800c3ac <_tzset_unlocked_r+0x314>)
 800c0c2:	6520      	str	r0, [r4, #80]	@ 0x50
 800c0c4:	e9c3 2200 	strd	r2, r2, [r3]
 800c0c8:	214a      	movs	r1, #74	@ 0x4a
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800c0d2:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800c0d6:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800c0da:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800c0de:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800c0e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800c0e6:	6828      	ldr	r0, [r5, #0]
 800c0e8:	7221      	strb	r1, [r4, #8]
 800c0ea:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800c0ee:	f7fd fcbd 	bl	8009a6c <free>
 800c0f2:	602e      	str	r6, [r5, #0]
 800c0f4:	b00d      	add	sp, #52	@ 0x34
 800c0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fa:	6829      	ldr	r1, [r5, #0]
 800c0fc:	2900      	cmp	r1, #0
 800c0fe:	f040 808e 	bne.w	800c21e <_tzset_unlocked_r+0x186>
 800c102:	6828      	ldr	r0, [r5, #0]
 800c104:	f7fd fcb2 	bl	8009a6c <free>
 800c108:	4630      	mov	r0, r6
 800c10a:	f7f4 f8c1 	bl	8000290 <strlen>
 800c10e:	1c41      	adds	r1, r0, #1
 800c110:	4638      	mov	r0, r7
 800c112:	f7fd fcd5 	bl	8009ac0 <_malloc_r>
 800c116:	6028      	str	r0, [r5, #0]
 800c118:	2800      	cmp	r0, #0
 800c11a:	f040 8086 	bne.w	800c22a <_tzset_unlocked_r+0x192>
 800c11e:	4aa2      	ldr	r2, [pc, #648]	@ (800c3a8 <_tzset_unlocked_r+0x310>)
 800c120:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800c3ac <_tzset_unlocked_r+0x314>
 800c124:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800c3a0 <_tzset_unlocked_r+0x308>
 800c128:	2300      	movs	r3, #0
 800c12a:	6013      	str	r3, [r2, #0]
 800c12c:	4aa0      	ldr	r2, [pc, #640]	@ (800c3b0 <_tzset_unlocked_r+0x318>)
 800c12e:	f8ca 3000 	str.w	r3, [sl]
 800c132:	2000      	movs	r0, #0
 800c134:	2100      	movs	r1, #0
 800c136:	e9c8 2200 	strd	r2, r2, [r8]
 800c13a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800c13e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800c142:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800c146:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800c14a:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800c14e:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800c152:	224a      	movs	r2, #74	@ 0x4a
 800c154:	7222      	strb	r2, [r4, #8]
 800c156:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c158:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800c15c:	6523      	str	r3, [r4, #80]	@ 0x50
 800c15e:	7833      	ldrb	r3, [r6, #0]
 800c160:	2b3a      	cmp	r3, #58	@ 0x3a
 800c162:	bf08      	it	eq
 800c164:	3601      	addeq	r6, #1
 800c166:	7833      	ldrb	r3, [r6, #0]
 800c168:	2b3c      	cmp	r3, #60	@ 0x3c
 800c16a:	d162      	bne.n	800c232 <_tzset_unlocked_r+0x19a>
 800c16c:	1c75      	adds	r5, r6, #1
 800c16e:	4a91      	ldr	r2, [pc, #580]	@ (800c3b4 <_tzset_unlocked_r+0x31c>)
 800c170:	4991      	ldr	r1, [pc, #580]	@ (800c3b8 <_tzset_unlocked_r+0x320>)
 800c172:	ab0a      	add	r3, sp, #40	@ 0x28
 800c174:	4628      	mov	r0, r5
 800c176:	f7ff fb41 	bl	800b7fc <siscanf>
 800c17a:	2800      	cmp	r0, #0
 800c17c:	ddba      	ble.n	800c0f4 <_tzset_unlocked_r+0x5c>
 800c17e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c180:	1eda      	subs	r2, r3, #3
 800c182:	2a07      	cmp	r2, #7
 800c184:	d8b6      	bhi.n	800c0f4 <_tzset_unlocked_r+0x5c>
 800c186:	5ceb      	ldrb	r3, [r5, r3]
 800c188:	2b3e      	cmp	r3, #62	@ 0x3e
 800c18a:	d1b3      	bne.n	800c0f4 <_tzset_unlocked_r+0x5c>
 800c18c:	3602      	adds	r6, #2
 800c18e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c190:	18f5      	adds	r5, r6, r3
 800c192:	5cf3      	ldrb	r3, [r6, r3]
 800c194:	2b2d      	cmp	r3, #45	@ 0x2d
 800c196:	d15a      	bne.n	800c24e <_tzset_unlocked_r+0x1b6>
 800c198:	3501      	adds	r5, #1
 800c19a:	f04f 39ff 	mov.w	r9, #4294967295
 800c19e:	2300      	movs	r3, #0
 800c1a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c1a4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c1a8:	af08      	add	r7, sp, #32
 800c1aa:	ab0a      	add	r3, sp, #40	@ 0x28
 800c1ac:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800c1b0:	9303      	str	r3, [sp, #12]
 800c1b2:	f10d 031e 	add.w	r3, sp, #30
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	4980      	ldr	r1, [pc, #512]	@ (800c3bc <_tzset_unlocked_r+0x324>)
 800c1ba:	ab0a      	add	r3, sp, #40	@ 0x28
 800c1bc:	aa07      	add	r2, sp, #28
 800c1be:	4628      	mov	r0, r5
 800c1c0:	f7ff fb1c 	bl	800b7fc <siscanf>
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	dd95      	ble.n	800c0f4 <_tzset_unlocked_r+0x5c>
 800c1c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800c1cc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800c1d0:	223c      	movs	r2, #60	@ 0x3c
 800c1d2:	fb02 6603 	mla	r6, r2, r3, r6
 800c1d6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800c1da:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800c1de:	fb02 6603 	mla	r6, r2, r3, r6
 800c1e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1e4:	fb09 f606 	mul.w	r6, r9, r6
 800c1e8:	eb05 0903 	add.w	r9, r5, r3
 800c1ec:	5ceb      	ldrb	r3, [r5, r3]
 800c1ee:	2b3c      	cmp	r3, #60	@ 0x3c
 800c1f0:	f040 80ee 	bne.w	800c3d0 <_tzset_unlocked_r+0x338>
 800c1f4:	f109 0501 	add.w	r5, r9, #1
 800c1f8:	4a71      	ldr	r2, [pc, #452]	@ (800c3c0 <_tzset_unlocked_r+0x328>)
 800c1fa:	496f      	ldr	r1, [pc, #444]	@ (800c3b8 <_tzset_unlocked_r+0x320>)
 800c1fc:	ab0a      	add	r3, sp, #40	@ 0x28
 800c1fe:	4628      	mov	r0, r5
 800c200:	f7ff fafc 	bl	800b7fc <siscanf>
 800c204:	2800      	cmp	r0, #0
 800c206:	dc28      	bgt.n	800c25a <_tzset_unlocked_r+0x1c2>
 800c208:	f899 3001 	ldrb.w	r3, [r9, #1]
 800c20c:	2b3e      	cmp	r3, #62	@ 0x3e
 800c20e:	d124      	bne.n	800c25a <_tzset_unlocked_r+0x1c2>
 800c210:	4b68      	ldr	r3, [pc, #416]	@ (800c3b4 <_tzset_unlocked_r+0x31c>)
 800c212:	62a6      	str	r6, [r4, #40]	@ 0x28
 800c214:	e9c8 3300 	strd	r3, r3, [r8]
 800c218:	f8ca 6000 	str.w	r6, [sl]
 800c21c:	e76a      	b.n	800c0f4 <_tzset_unlocked_r+0x5c>
 800c21e:	f7f3 ffd7 	bl	80001d0 <strcmp>
 800c222:	2800      	cmp	r0, #0
 800c224:	f47f af6d 	bne.w	800c102 <_tzset_unlocked_r+0x6a>
 800c228:	e764      	b.n	800c0f4 <_tzset_unlocked_r+0x5c>
 800c22a:	4631      	mov	r1, r6
 800c22c:	f000 f9da 	bl	800c5e4 <strcpy>
 800c230:	e775      	b.n	800c11e <_tzset_unlocked_r+0x86>
 800c232:	4a60      	ldr	r2, [pc, #384]	@ (800c3b4 <_tzset_unlocked_r+0x31c>)
 800c234:	4963      	ldr	r1, [pc, #396]	@ (800c3c4 <_tzset_unlocked_r+0x32c>)
 800c236:	ab0a      	add	r3, sp, #40	@ 0x28
 800c238:	4630      	mov	r0, r6
 800c23a:	f7ff fadf 	bl	800b7fc <siscanf>
 800c23e:	2800      	cmp	r0, #0
 800c240:	f77f af58 	ble.w	800c0f4 <_tzset_unlocked_r+0x5c>
 800c244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c246:	3b03      	subs	r3, #3
 800c248:	2b07      	cmp	r3, #7
 800c24a:	d9a0      	bls.n	800c18e <_tzset_unlocked_r+0xf6>
 800c24c:	e752      	b.n	800c0f4 <_tzset_unlocked_r+0x5c>
 800c24e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c250:	bf08      	it	eq
 800c252:	3501      	addeq	r5, #1
 800c254:	f04f 0901 	mov.w	r9, #1
 800c258:	e7a1      	b.n	800c19e <_tzset_unlocked_r+0x106>
 800c25a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c25c:	1eda      	subs	r2, r3, #3
 800c25e:	2a07      	cmp	r2, #7
 800c260:	f63f af48 	bhi.w	800c0f4 <_tzset_unlocked_r+0x5c>
 800c264:	5ceb      	ldrb	r3, [r5, r3]
 800c266:	2b3e      	cmp	r3, #62	@ 0x3e
 800c268:	f47f af44 	bne.w	800c0f4 <_tzset_unlocked_r+0x5c>
 800c26c:	f109 0902 	add.w	r9, r9, #2
 800c270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c272:	eb09 0503 	add.w	r5, r9, r3
 800c276:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c27a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c27c:	f040 80b7 	bne.w	800c3ee <_tzset_unlocked_r+0x356>
 800c280:	3501      	adds	r5, #1
 800c282:	f04f 39ff 	mov.w	r9, #4294967295
 800c286:	2300      	movs	r3, #0
 800c288:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c28c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c290:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c294:	930a      	str	r3, [sp, #40]	@ 0x28
 800c296:	ab0a      	add	r3, sp, #40	@ 0x28
 800c298:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800c29c:	9301      	str	r3, [sp, #4]
 800c29e:	f10d 031e 	add.w	r3, sp, #30
 800c2a2:	9300      	str	r3, [sp, #0]
 800c2a4:	4945      	ldr	r1, [pc, #276]	@ (800c3bc <_tzset_unlocked_r+0x324>)
 800c2a6:	ab0a      	add	r3, sp, #40	@ 0x28
 800c2a8:	aa07      	add	r2, sp, #28
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	f7ff faa6 	bl	800b7fc <siscanf>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	f300 80a2 	bgt.w	800c3fa <_tzset_unlocked_r+0x362>
 800c2b6:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800c2ba:	9304      	str	r3, [sp, #16]
 800c2bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2be:	4627      	mov	r7, r4
 800c2c0:	441d      	add	r5, r3
 800c2c2:	f04f 0b00 	mov.w	fp, #0
 800c2c6:	782b      	ldrb	r3, [r5, #0]
 800c2c8:	2b2c      	cmp	r3, #44	@ 0x2c
 800c2ca:	bf08      	it	eq
 800c2cc:	3501      	addeq	r5, #1
 800c2ce:	f895 9000 	ldrb.w	r9, [r5]
 800c2d2:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800c2d6:	f040 80a3 	bne.w	800c420 <_tzset_unlocked_r+0x388>
 800c2da:	ab0a      	add	r3, sp, #40	@ 0x28
 800c2dc:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800c2e0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c2e4:	aa09      	add	r2, sp, #36	@ 0x24
 800c2e6:	9200      	str	r2, [sp, #0]
 800c2e8:	4937      	ldr	r1, [pc, #220]	@ (800c3c8 <_tzset_unlocked_r+0x330>)
 800c2ea:	9303      	str	r3, [sp, #12]
 800c2ec:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	f7ff fa83 	bl	800b7fc <siscanf>
 800c2f6:	2803      	cmp	r0, #3
 800c2f8:	f47f aefc 	bne.w	800c0f4 <_tzset_unlocked_r+0x5c>
 800c2fc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800c300:	1e4b      	subs	r3, r1, #1
 800c302:	2b0b      	cmp	r3, #11
 800c304:	f63f aef6 	bhi.w	800c0f4 <_tzset_unlocked_r+0x5c>
 800c308:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800c30c:	1e53      	subs	r3, r2, #1
 800c30e:	2b04      	cmp	r3, #4
 800c310:	f63f aef0 	bhi.w	800c0f4 <_tzset_unlocked_r+0x5c>
 800c314:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800c318:	2b06      	cmp	r3, #6
 800c31a:	f63f aeeb 	bhi.w	800c0f4 <_tzset_unlocked_r+0x5c>
 800c31e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800c322:	f887 9008 	strb.w	r9, [r7, #8]
 800c326:	617b      	str	r3, [r7, #20]
 800c328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c32a:	eb05 0903 	add.w	r9, r5, r3
 800c32e:	2500      	movs	r5, #0
 800c330:	f04f 0302 	mov.w	r3, #2
 800c334:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c338:	f8ad 501e 	strh.w	r5, [sp, #30]
 800c33c:	f8ad 5020 	strh.w	r5, [sp, #32]
 800c340:	950a      	str	r5, [sp, #40]	@ 0x28
 800c342:	f899 3000 	ldrb.w	r3, [r9]
 800c346:	2b2f      	cmp	r3, #47	@ 0x2f
 800c348:	f040 8096 	bne.w	800c478 <_tzset_unlocked_r+0x3e0>
 800c34c:	ab0a      	add	r3, sp, #40	@ 0x28
 800c34e:	aa08      	add	r2, sp, #32
 800c350:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c354:	f10d 021e 	add.w	r2, sp, #30
 800c358:	9200      	str	r2, [sp, #0]
 800c35a:	491c      	ldr	r1, [pc, #112]	@ (800c3cc <_tzset_unlocked_r+0x334>)
 800c35c:	9303      	str	r3, [sp, #12]
 800c35e:	aa07      	add	r2, sp, #28
 800c360:	4648      	mov	r0, r9
 800c362:	f7ff fa4b 	bl	800b7fc <siscanf>
 800c366:	42a8      	cmp	r0, r5
 800c368:	f300 8086 	bgt.w	800c478 <_tzset_unlocked_r+0x3e0>
 800c36c:	214a      	movs	r1, #74	@ 0x4a
 800c36e:	2200      	movs	r2, #0
 800c370:	2300      	movs	r3, #0
 800c372:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800c376:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c37a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800c37e:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800c382:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800c386:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800c38a:	7221      	strb	r1, [r4, #8]
 800c38c:	62a5      	str	r5, [r4, #40]	@ 0x28
 800c38e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800c392:	6525      	str	r5, [r4, #80]	@ 0x50
 800c394:	e6ae      	b.n	800c0f4 <_tzset_unlocked_r+0x5c>
 800c396:	bf00      	nop
 800c398:	08011bb8 	.word	0x08011bb8
 800c39c:	20009820 	.word	0x20009820
 800c3a0:	2000983c 	.word	0x2000983c
 800c3a4:	08011bbb 	.word	0x08011bbb
 800c3a8:	20009840 	.word	0x20009840
 800c3ac:	2000002c 	.word	0x2000002c
 800c3b0:	080109db 	.word	0x080109db
 800c3b4:	20009830 	.word	0x20009830
 800c3b8:	08011bbf 	.word	0x08011bbf
 800c3bc:	08011bf4 	.word	0x08011bf4
 800c3c0:	20009824 	.word	0x20009824
 800c3c4:	08011bd2 	.word	0x08011bd2
 800c3c8:	08011be0 	.word	0x08011be0
 800c3cc:	08011bf3 	.word	0x08011bf3
 800c3d0:	4a3e      	ldr	r2, [pc, #248]	@ (800c4cc <_tzset_unlocked_r+0x434>)
 800c3d2:	493f      	ldr	r1, [pc, #252]	@ (800c4d0 <_tzset_unlocked_r+0x438>)
 800c3d4:	ab0a      	add	r3, sp, #40	@ 0x28
 800c3d6:	4648      	mov	r0, r9
 800c3d8:	f7ff fa10 	bl	800b7fc <siscanf>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	f77f af17 	ble.w	800c210 <_tzset_unlocked_r+0x178>
 800c3e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3e4:	3b03      	subs	r3, #3
 800c3e6:	2b07      	cmp	r3, #7
 800c3e8:	f67f af42 	bls.w	800c270 <_tzset_unlocked_r+0x1d8>
 800c3ec:	e682      	b.n	800c0f4 <_tzset_unlocked_r+0x5c>
 800c3ee:	2b2b      	cmp	r3, #43	@ 0x2b
 800c3f0:	bf08      	it	eq
 800c3f2:	3501      	addeq	r5, #1
 800c3f4:	f04f 0901 	mov.w	r9, #1
 800c3f8:	e745      	b.n	800c286 <_tzset_unlocked_r+0x1ee>
 800c3fa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c3fe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c402:	213c      	movs	r1, #60	@ 0x3c
 800c404:	fb01 3302 	mla	r3, r1, r2, r3
 800c408:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c40c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800c410:	fb01 3302 	mla	r3, r1, r2, r3
 800c414:	fb09 f303 	mul.w	r3, r9, r3
 800c418:	e74f      	b.n	800c2ba <_tzset_unlocked_r+0x222>
 800c41a:	f04f 0b01 	mov.w	fp, #1
 800c41e:	e752      	b.n	800c2c6 <_tzset_unlocked_r+0x22e>
 800c420:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800c424:	bf06      	itte	eq
 800c426:	3501      	addeq	r5, #1
 800c428:	464b      	moveq	r3, r9
 800c42a:	2344      	movne	r3, #68	@ 0x44
 800c42c:	220a      	movs	r2, #10
 800c42e:	a90b      	add	r1, sp, #44	@ 0x2c
 800c430:	4628      	mov	r0, r5
 800c432:	9305      	str	r3, [sp, #20]
 800c434:	f002 f84c 	bl	800e4d0 <strtoul>
 800c438:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800c43c:	9b05      	ldr	r3, [sp, #20]
 800c43e:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800c442:	45a9      	cmp	r9, r5
 800c444:	d114      	bne.n	800c470 <_tzset_unlocked_r+0x3d8>
 800c446:	234d      	movs	r3, #77	@ 0x4d
 800c448:	f1bb 0f00 	cmp.w	fp, #0
 800c44c:	d107      	bne.n	800c45e <_tzset_unlocked_r+0x3c6>
 800c44e:	7223      	strb	r3, [r4, #8]
 800c450:	2103      	movs	r1, #3
 800c452:	2302      	movs	r3, #2
 800c454:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800c458:	f8c4 b014 	str.w	fp, [r4, #20]
 800c45c:	e767      	b.n	800c32e <_tzset_unlocked_r+0x296>
 800c45e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800c462:	220b      	movs	r2, #11
 800c464:	2301      	movs	r3, #1
 800c466:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800c46a:	2300      	movs	r3, #0
 800c46c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800c46e:	e75e      	b.n	800c32e <_tzset_unlocked_r+0x296>
 800c470:	b280      	uxth	r0, r0
 800c472:	723b      	strb	r3, [r7, #8]
 800c474:	6178      	str	r0, [r7, #20]
 800c476:	e75a      	b.n	800c32e <_tzset_unlocked_r+0x296>
 800c478:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c47c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c480:	213c      	movs	r1, #60	@ 0x3c
 800c482:	fb01 3302 	mla	r3, r1, r2, r3
 800c486:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c48a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800c48e:	fb01 3302 	mla	r3, r1, r2, r3
 800c492:	61bb      	str	r3, [r7, #24]
 800c494:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c496:	3728      	adds	r7, #40	@ 0x28
 800c498:	444d      	add	r5, r9
 800c49a:	f1bb 0f00 	cmp.w	fp, #0
 800c49e:	d0bc      	beq.n	800c41a <_tzset_unlocked_r+0x382>
 800c4a0:	9b04      	ldr	r3, [sp, #16]
 800c4a2:	6523      	str	r3, [r4, #80]	@ 0x50
 800c4a4:	4b0b      	ldr	r3, [pc, #44]	@ (800c4d4 <_tzset_unlocked_r+0x43c>)
 800c4a6:	f8c8 3000 	str.w	r3, [r8]
 800c4aa:	6860      	ldr	r0, [r4, #4]
 800c4ac:	4b07      	ldr	r3, [pc, #28]	@ (800c4cc <_tzset_unlocked_r+0x434>)
 800c4ae:	62a6      	str	r6, [r4, #40]	@ 0x28
 800c4b0:	f8c8 3004 	str.w	r3, [r8, #4]
 800c4b4:	f7ff fd34 	bl	800bf20 <__tzcalc_limits>
 800c4b8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c4ba:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800c4bc:	f8ca 2000 	str.w	r2, [sl]
 800c4c0:	1a9b      	subs	r3, r3, r2
 800c4c2:	4a05      	ldr	r2, [pc, #20]	@ (800c4d8 <_tzset_unlocked_r+0x440>)
 800c4c4:	bf18      	it	ne
 800c4c6:	2301      	movne	r3, #1
 800c4c8:	6013      	str	r3, [r2, #0]
 800c4ca:	e613      	b.n	800c0f4 <_tzset_unlocked_r+0x5c>
 800c4cc:	20009824 	.word	0x20009824
 800c4d0:	08011bd2 	.word	0x08011bd2
 800c4d4:	20009830 	.word	0x20009830
 800c4d8:	20009840 	.word	0x20009840

0800c4dc <_localeconv_r>:
 800c4dc:	4800      	ldr	r0, [pc, #0]	@ (800c4e0 <_localeconv_r+0x4>)
 800c4de:	4770      	bx	lr
 800c4e0:	20000124 	.word	0x20000124

0800c4e4 <_close_r>:
 800c4e4:	b538      	push	{r3, r4, r5, lr}
 800c4e6:	4d06      	ldr	r5, [pc, #24]	@ (800c500 <_close_r+0x1c>)
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	4608      	mov	r0, r1
 800c4ee:	602b      	str	r3, [r5, #0]
 800c4f0:	f7f8 faec 	bl	8004acc <_close>
 800c4f4:	1c43      	adds	r3, r0, #1
 800c4f6:	d102      	bne.n	800c4fe <_close_r+0x1a>
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	b103      	cbz	r3, 800c4fe <_close_r+0x1a>
 800c4fc:	6023      	str	r3, [r4, #0]
 800c4fe:	bd38      	pop	{r3, r4, r5, pc}
 800c500:	20009844 	.word	0x20009844

0800c504 <_lseek_r>:
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	4d07      	ldr	r5, [pc, #28]	@ (800c524 <_lseek_r+0x20>)
 800c508:	4604      	mov	r4, r0
 800c50a:	4608      	mov	r0, r1
 800c50c:	4611      	mov	r1, r2
 800c50e:	2200      	movs	r2, #0
 800c510:	602a      	str	r2, [r5, #0]
 800c512:	461a      	mov	r2, r3
 800c514:	f7f8 fae4 	bl	8004ae0 <_lseek>
 800c518:	1c43      	adds	r3, r0, #1
 800c51a:	d102      	bne.n	800c522 <_lseek_r+0x1e>
 800c51c:	682b      	ldr	r3, [r5, #0]
 800c51e:	b103      	cbz	r3, 800c522 <_lseek_r+0x1e>
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	bd38      	pop	{r3, r4, r5, pc}
 800c524:	20009844 	.word	0x20009844

0800c528 <_read_r>:
 800c528:	b538      	push	{r3, r4, r5, lr}
 800c52a:	4d07      	ldr	r5, [pc, #28]	@ (800c548 <_read_r+0x20>)
 800c52c:	4604      	mov	r4, r0
 800c52e:	4608      	mov	r0, r1
 800c530:	4611      	mov	r1, r2
 800c532:	2200      	movs	r2, #0
 800c534:	602a      	str	r2, [r5, #0]
 800c536:	461a      	mov	r2, r3
 800c538:	f7f8 faac 	bl	8004a94 <_read>
 800c53c:	1c43      	adds	r3, r0, #1
 800c53e:	d102      	bne.n	800c546 <_read_r+0x1e>
 800c540:	682b      	ldr	r3, [r5, #0]
 800c542:	b103      	cbz	r3, 800c546 <_read_r+0x1e>
 800c544:	6023      	str	r3, [r4, #0]
 800c546:	bd38      	pop	{r3, r4, r5, pc}
 800c548:	20009844 	.word	0x20009844

0800c54c <_sbrk_r>:
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	4d06      	ldr	r5, [pc, #24]	@ (800c568 <_sbrk_r+0x1c>)
 800c550:	2300      	movs	r3, #0
 800c552:	4604      	mov	r4, r0
 800c554:	4608      	mov	r0, r1
 800c556:	602b      	str	r3, [r5, #0]
 800c558:	f7f8 fac4 	bl	8004ae4 <_sbrk>
 800c55c:	1c43      	adds	r3, r0, #1
 800c55e:	d102      	bne.n	800c566 <_sbrk_r+0x1a>
 800c560:	682b      	ldr	r3, [r5, #0]
 800c562:	b103      	cbz	r3, 800c566 <_sbrk_r+0x1a>
 800c564:	6023      	str	r3, [r4, #0]
 800c566:	bd38      	pop	{r3, r4, r5, pc}
 800c568:	20009844 	.word	0x20009844

0800c56c <_write_r>:
 800c56c:	b538      	push	{r3, r4, r5, lr}
 800c56e:	4d07      	ldr	r5, [pc, #28]	@ (800c58c <_write_r+0x20>)
 800c570:	4604      	mov	r4, r0
 800c572:	4608      	mov	r0, r1
 800c574:	4611      	mov	r1, r2
 800c576:	2200      	movs	r2, #0
 800c578:	602a      	str	r2, [r5, #0]
 800c57a:	461a      	mov	r2, r3
 800c57c:	f7f8 fa98 	bl	8004ab0 <_write>
 800c580:	1c43      	adds	r3, r0, #1
 800c582:	d102      	bne.n	800c58a <_write_r+0x1e>
 800c584:	682b      	ldr	r3, [r5, #0]
 800c586:	b103      	cbz	r3, 800c58a <_write_r+0x1e>
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	bd38      	pop	{r3, r4, r5, pc}
 800c58c:	20009844 	.word	0x20009844

0800c590 <__errno>:
 800c590:	4b01      	ldr	r3, [pc, #4]	@ (800c598 <__errno+0x8>)
 800c592:	6818      	ldr	r0, [r3, #0]
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop
 800c598:	200001a0 	.word	0x200001a0

0800c59c <__libc_init_array>:
 800c59c:	b570      	push	{r4, r5, r6, lr}
 800c59e:	4d0d      	ldr	r5, [pc, #52]	@ (800c5d4 <__libc_init_array+0x38>)
 800c5a0:	4c0d      	ldr	r4, [pc, #52]	@ (800c5d8 <__libc_init_array+0x3c>)
 800c5a2:	1b64      	subs	r4, r4, r5
 800c5a4:	10a4      	asrs	r4, r4, #2
 800c5a6:	2600      	movs	r6, #0
 800c5a8:	42a6      	cmp	r6, r4
 800c5aa:	d109      	bne.n	800c5c0 <__libc_init_array+0x24>
 800c5ac:	4d0b      	ldr	r5, [pc, #44]	@ (800c5dc <__libc_init_array+0x40>)
 800c5ae:	4c0c      	ldr	r4, [pc, #48]	@ (800c5e0 <__libc_init_array+0x44>)
 800c5b0:	f003 f8c4 	bl	800f73c <_init>
 800c5b4:	1b64      	subs	r4, r4, r5
 800c5b6:	10a4      	asrs	r4, r4, #2
 800c5b8:	2600      	movs	r6, #0
 800c5ba:	42a6      	cmp	r6, r4
 800c5bc:	d105      	bne.n	800c5ca <__libc_init_array+0x2e>
 800c5be:	bd70      	pop	{r4, r5, r6, pc}
 800c5c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5c4:	4798      	blx	r3
 800c5c6:	3601      	adds	r6, #1
 800c5c8:	e7ee      	b.n	800c5a8 <__libc_init_array+0xc>
 800c5ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5ce:	4798      	blx	r3
 800c5d0:	3601      	adds	r6, #1
 800c5d2:	e7f2      	b.n	800c5ba <__libc_init_array+0x1e>
 800c5d4:	08011f20 	.word	0x08011f20
 800c5d8:	08011f20 	.word	0x08011f20
 800c5dc:	08011f20 	.word	0x08011f20
 800c5e0:	08011f24 	.word	0x08011f24

0800c5e4 <strcpy>:
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5ea:	f803 2b01 	strb.w	r2, [r3], #1
 800c5ee:	2a00      	cmp	r2, #0
 800c5f0:	d1f9      	bne.n	800c5e6 <strcpy+0x2>
 800c5f2:	4770      	bx	lr

0800c5f4 <memcpy>:
 800c5f4:	440a      	add	r2, r1
 800c5f6:	4291      	cmp	r1, r2
 800c5f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5fc:	d100      	bne.n	800c600 <memcpy+0xc>
 800c5fe:	4770      	bx	lr
 800c600:	b510      	push	{r4, lr}
 800c602:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c60a:	4291      	cmp	r1, r2
 800c60c:	d1f9      	bne.n	800c602 <memcpy+0xe>
 800c60e:	bd10      	pop	{r4, pc}

0800c610 <nan>:
 800c610:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c618 <nan+0x8>
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop
 800c618:	00000000 	.word	0x00000000
 800c61c:	7ff80000 	.word	0x7ff80000

0800c620 <nanf>:
 800c620:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c628 <nanf+0x8>
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	7fc00000 	.word	0x7fc00000

0800c62c <div>:
 800c62c:	b510      	push	{r4, lr}
 800c62e:	fb91 f4f2 	sdiv	r4, r1, r2
 800c632:	fb02 1114 	mls	r1, r2, r4, r1
 800c636:	6004      	str	r4, [r0, #0]
 800c638:	6041      	str	r1, [r0, #4]
 800c63a:	bd10      	pop	{r4, pc}

0800c63c <quorem>:
 800c63c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c640:	6903      	ldr	r3, [r0, #16]
 800c642:	690c      	ldr	r4, [r1, #16]
 800c644:	42a3      	cmp	r3, r4
 800c646:	4607      	mov	r7, r0
 800c648:	db7e      	blt.n	800c748 <quorem+0x10c>
 800c64a:	3c01      	subs	r4, #1
 800c64c:	f101 0814 	add.w	r8, r1, #20
 800c650:	00a3      	lsls	r3, r4, #2
 800c652:	f100 0514 	add.w	r5, r0, #20
 800c656:	9300      	str	r3, [sp, #0]
 800c658:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c65c:	9301      	str	r3, [sp, #4]
 800c65e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c662:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c666:	3301      	adds	r3, #1
 800c668:	429a      	cmp	r2, r3
 800c66a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c66e:	fbb2 f6f3 	udiv	r6, r2, r3
 800c672:	d32e      	bcc.n	800c6d2 <quorem+0x96>
 800c674:	f04f 0a00 	mov.w	sl, #0
 800c678:	46c4      	mov	ip, r8
 800c67a:	46ae      	mov	lr, r5
 800c67c:	46d3      	mov	fp, sl
 800c67e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c682:	b298      	uxth	r0, r3
 800c684:	fb06 a000 	mla	r0, r6, r0, sl
 800c688:	0c02      	lsrs	r2, r0, #16
 800c68a:	0c1b      	lsrs	r3, r3, #16
 800c68c:	fb06 2303 	mla	r3, r6, r3, r2
 800c690:	f8de 2000 	ldr.w	r2, [lr]
 800c694:	b280      	uxth	r0, r0
 800c696:	b292      	uxth	r2, r2
 800c698:	1a12      	subs	r2, r2, r0
 800c69a:	445a      	add	r2, fp
 800c69c:	f8de 0000 	ldr.w	r0, [lr]
 800c6a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c6aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c6ae:	b292      	uxth	r2, r2
 800c6b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c6b4:	45e1      	cmp	r9, ip
 800c6b6:	f84e 2b04 	str.w	r2, [lr], #4
 800c6ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c6be:	d2de      	bcs.n	800c67e <quorem+0x42>
 800c6c0:	9b00      	ldr	r3, [sp, #0]
 800c6c2:	58eb      	ldr	r3, [r5, r3]
 800c6c4:	b92b      	cbnz	r3, 800c6d2 <quorem+0x96>
 800c6c6:	9b01      	ldr	r3, [sp, #4]
 800c6c8:	3b04      	subs	r3, #4
 800c6ca:	429d      	cmp	r5, r3
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	d32f      	bcc.n	800c730 <quorem+0xf4>
 800c6d0:	613c      	str	r4, [r7, #16]
 800c6d2:	4638      	mov	r0, r7
 800c6d4:	f001 fc9e 	bl	800e014 <__mcmp>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	db25      	blt.n	800c728 <quorem+0xec>
 800c6dc:	4629      	mov	r1, r5
 800c6de:	2000      	movs	r0, #0
 800c6e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c6e4:	f8d1 c000 	ldr.w	ip, [r1]
 800c6e8:	fa1f fe82 	uxth.w	lr, r2
 800c6ec:	fa1f f38c 	uxth.w	r3, ip
 800c6f0:	eba3 030e 	sub.w	r3, r3, lr
 800c6f4:	4403      	add	r3, r0
 800c6f6:	0c12      	lsrs	r2, r2, #16
 800c6f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c6fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c700:	b29b      	uxth	r3, r3
 800c702:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c706:	45c1      	cmp	r9, r8
 800c708:	f841 3b04 	str.w	r3, [r1], #4
 800c70c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c710:	d2e6      	bcs.n	800c6e0 <quorem+0xa4>
 800c712:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c716:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c71a:	b922      	cbnz	r2, 800c726 <quorem+0xea>
 800c71c:	3b04      	subs	r3, #4
 800c71e:	429d      	cmp	r5, r3
 800c720:	461a      	mov	r2, r3
 800c722:	d30b      	bcc.n	800c73c <quorem+0x100>
 800c724:	613c      	str	r4, [r7, #16]
 800c726:	3601      	adds	r6, #1
 800c728:	4630      	mov	r0, r6
 800c72a:	b003      	add	sp, #12
 800c72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c730:	6812      	ldr	r2, [r2, #0]
 800c732:	3b04      	subs	r3, #4
 800c734:	2a00      	cmp	r2, #0
 800c736:	d1cb      	bne.n	800c6d0 <quorem+0x94>
 800c738:	3c01      	subs	r4, #1
 800c73a:	e7c6      	b.n	800c6ca <quorem+0x8e>
 800c73c:	6812      	ldr	r2, [r2, #0]
 800c73e:	3b04      	subs	r3, #4
 800c740:	2a00      	cmp	r2, #0
 800c742:	d1ef      	bne.n	800c724 <quorem+0xe8>
 800c744:	3c01      	subs	r4, #1
 800c746:	e7ea      	b.n	800c71e <quorem+0xe2>
 800c748:	2000      	movs	r0, #0
 800c74a:	e7ee      	b.n	800c72a <quorem+0xee>
 800c74c:	0000      	movs	r0, r0
	...

0800c750 <_dtoa_r>:
 800c750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c754:	69c7      	ldr	r7, [r0, #28]
 800c756:	b099      	sub	sp, #100	@ 0x64
 800c758:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c75c:	ec55 4b10 	vmov	r4, r5, d0
 800c760:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c762:	9109      	str	r1, [sp, #36]	@ 0x24
 800c764:	4683      	mov	fp, r0
 800c766:	920e      	str	r2, [sp, #56]	@ 0x38
 800c768:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c76a:	b97f      	cbnz	r7, 800c78c <_dtoa_r+0x3c>
 800c76c:	2010      	movs	r0, #16
 800c76e:	f7fd f975 	bl	8009a5c <malloc>
 800c772:	4602      	mov	r2, r0
 800c774:	f8cb 001c 	str.w	r0, [fp, #28]
 800c778:	b920      	cbnz	r0, 800c784 <_dtoa_r+0x34>
 800c77a:	4ba7      	ldr	r3, [pc, #668]	@ (800ca18 <_dtoa_r+0x2c8>)
 800c77c:	21ef      	movs	r1, #239	@ 0xef
 800c77e:	48a7      	ldr	r0, [pc, #668]	@ (800ca1c <_dtoa_r+0x2cc>)
 800c780:	f002 fc6c 	bl	800f05c <__assert_func>
 800c784:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c788:	6007      	str	r7, [r0, #0]
 800c78a:	60c7      	str	r7, [r0, #12]
 800c78c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c790:	6819      	ldr	r1, [r3, #0]
 800c792:	b159      	cbz	r1, 800c7ac <_dtoa_r+0x5c>
 800c794:	685a      	ldr	r2, [r3, #4]
 800c796:	604a      	str	r2, [r1, #4]
 800c798:	2301      	movs	r3, #1
 800c79a:	4093      	lsls	r3, r2
 800c79c:	608b      	str	r3, [r1, #8]
 800c79e:	4658      	mov	r0, fp
 800c7a0:	f001 f9b4 	bl	800db0c <_Bfree>
 800c7a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	601a      	str	r2, [r3, #0]
 800c7ac:	1e2b      	subs	r3, r5, #0
 800c7ae:	bfb9      	ittee	lt
 800c7b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c7b4:	9303      	strlt	r3, [sp, #12]
 800c7b6:	2300      	movge	r3, #0
 800c7b8:	6033      	strge	r3, [r6, #0]
 800c7ba:	9f03      	ldr	r7, [sp, #12]
 800c7bc:	4b98      	ldr	r3, [pc, #608]	@ (800ca20 <_dtoa_r+0x2d0>)
 800c7be:	bfbc      	itt	lt
 800c7c0:	2201      	movlt	r2, #1
 800c7c2:	6032      	strlt	r2, [r6, #0]
 800c7c4:	43bb      	bics	r3, r7
 800c7c6:	d112      	bne.n	800c7ee <_dtoa_r+0x9e>
 800c7c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c7ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c7ce:	6013      	str	r3, [r2, #0]
 800c7d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c7d4:	4323      	orrs	r3, r4
 800c7d6:	f000 854d 	beq.w	800d274 <_dtoa_r+0xb24>
 800c7da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c7dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ca34 <_dtoa_r+0x2e4>
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	f000 854f 	beq.w	800d284 <_dtoa_r+0xb34>
 800c7e6:	f10a 0303 	add.w	r3, sl, #3
 800c7ea:	f000 bd49 	b.w	800d280 <_dtoa_r+0xb30>
 800c7ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	ec51 0b17 	vmov	r0, r1, d7
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c7fe:	f7f4 f973 	bl	8000ae8 <__aeabi_dcmpeq>
 800c802:	4680      	mov	r8, r0
 800c804:	b158      	cbz	r0, 800c81e <_dtoa_r+0xce>
 800c806:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c808:	2301      	movs	r3, #1
 800c80a:	6013      	str	r3, [r2, #0]
 800c80c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c80e:	b113      	cbz	r3, 800c816 <_dtoa_r+0xc6>
 800c810:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c812:	4b84      	ldr	r3, [pc, #528]	@ (800ca24 <_dtoa_r+0x2d4>)
 800c814:	6013      	str	r3, [r2, #0]
 800c816:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ca38 <_dtoa_r+0x2e8>
 800c81a:	f000 bd33 	b.w	800d284 <_dtoa_r+0xb34>
 800c81e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c822:	aa16      	add	r2, sp, #88	@ 0x58
 800c824:	a917      	add	r1, sp, #92	@ 0x5c
 800c826:	4658      	mov	r0, fp
 800c828:	f001 fd14 	bl	800e254 <__d2b>
 800c82c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c830:	4681      	mov	r9, r0
 800c832:	2e00      	cmp	r6, #0
 800c834:	d077      	beq.n	800c926 <_dtoa_r+0x1d6>
 800c836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c838:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c83c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c840:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c844:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c848:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c84c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c850:	4619      	mov	r1, r3
 800c852:	2200      	movs	r2, #0
 800c854:	4b74      	ldr	r3, [pc, #464]	@ (800ca28 <_dtoa_r+0x2d8>)
 800c856:	f7f3 fd27 	bl	80002a8 <__aeabi_dsub>
 800c85a:	a369      	add	r3, pc, #420	@ (adr r3, 800ca00 <_dtoa_r+0x2b0>)
 800c85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c860:	f7f3 feda 	bl	8000618 <__aeabi_dmul>
 800c864:	a368      	add	r3, pc, #416	@ (adr r3, 800ca08 <_dtoa_r+0x2b8>)
 800c866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86a:	f7f3 fd1f 	bl	80002ac <__adddf3>
 800c86e:	4604      	mov	r4, r0
 800c870:	4630      	mov	r0, r6
 800c872:	460d      	mov	r5, r1
 800c874:	f7f3 fe66 	bl	8000544 <__aeabi_i2d>
 800c878:	a365      	add	r3, pc, #404	@ (adr r3, 800ca10 <_dtoa_r+0x2c0>)
 800c87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87e:	f7f3 fecb 	bl	8000618 <__aeabi_dmul>
 800c882:	4602      	mov	r2, r0
 800c884:	460b      	mov	r3, r1
 800c886:	4620      	mov	r0, r4
 800c888:	4629      	mov	r1, r5
 800c88a:	f7f3 fd0f 	bl	80002ac <__adddf3>
 800c88e:	4604      	mov	r4, r0
 800c890:	460d      	mov	r5, r1
 800c892:	f7f4 f971 	bl	8000b78 <__aeabi_d2iz>
 800c896:	2200      	movs	r2, #0
 800c898:	4607      	mov	r7, r0
 800c89a:	2300      	movs	r3, #0
 800c89c:	4620      	mov	r0, r4
 800c89e:	4629      	mov	r1, r5
 800c8a0:	f7f4 f92c 	bl	8000afc <__aeabi_dcmplt>
 800c8a4:	b140      	cbz	r0, 800c8b8 <_dtoa_r+0x168>
 800c8a6:	4638      	mov	r0, r7
 800c8a8:	f7f3 fe4c 	bl	8000544 <__aeabi_i2d>
 800c8ac:	4622      	mov	r2, r4
 800c8ae:	462b      	mov	r3, r5
 800c8b0:	f7f4 f91a 	bl	8000ae8 <__aeabi_dcmpeq>
 800c8b4:	b900      	cbnz	r0, 800c8b8 <_dtoa_r+0x168>
 800c8b6:	3f01      	subs	r7, #1
 800c8b8:	2f16      	cmp	r7, #22
 800c8ba:	d851      	bhi.n	800c960 <_dtoa_r+0x210>
 800c8bc:	4b5b      	ldr	r3, [pc, #364]	@ (800ca2c <_dtoa_r+0x2dc>)
 800c8be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8ca:	f7f4 f917 	bl	8000afc <__aeabi_dcmplt>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	d048      	beq.n	800c964 <_dtoa_r+0x214>
 800c8d2:	3f01      	subs	r7, #1
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	9312      	str	r3, [sp, #72]	@ 0x48
 800c8d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c8da:	1b9b      	subs	r3, r3, r6
 800c8dc:	1e5a      	subs	r2, r3, #1
 800c8de:	bf44      	itt	mi
 800c8e0:	f1c3 0801 	rsbmi	r8, r3, #1
 800c8e4:	2300      	movmi	r3, #0
 800c8e6:	9208      	str	r2, [sp, #32]
 800c8e8:	bf54      	ite	pl
 800c8ea:	f04f 0800 	movpl.w	r8, #0
 800c8ee:	9308      	strmi	r3, [sp, #32]
 800c8f0:	2f00      	cmp	r7, #0
 800c8f2:	db39      	blt.n	800c968 <_dtoa_r+0x218>
 800c8f4:	9b08      	ldr	r3, [sp, #32]
 800c8f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c8f8:	443b      	add	r3, r7
 800c8fa:	9308      	str	r3, [sp, #32]
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800c900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c902:	2b09      	cmp	r3, #9
 800c904:	d864      	bhi.n	800c9d0 <_dtoa_r+0x280>
 800c906:	2b05      	cmp	r3, #5
 800c908:	bfc4      	itt	gt
 800c90a:	3b04      	subgt	r3, #4
 800c90c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c90e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c910:	f1a3 0302 	sub.w	r3, r3, #2
 800c914:	bfcc      	ite	gt
 800c916:	2400      	movgt	r4, #0
 800c918:	2401      	movle	r4, #1
 800c91a:	2b03      	cmp	r3, #3
 800c91c:	d863      	bhi.n	800c9e6 <_dtoa_r+0x296>
 800c91e:	e8df f003 	tbb	[pc, r3]
 800c922:	372a      	.short	0x372a
 800c924:	5535      	.short	0x5535
 800c926:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c92a:	441e      	add	r6, r3
 800c92c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c930:	2b20      	cmp	r3, #32
 800c932:	bfc1      	itttt	gt
 800c934:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c938:	409f      	lslgt	r7, r3
 800c93a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c93e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c942:	bfd6      	itet	le
 800c944:	f1c3 0320 	rsble	r3, r3, #32
 800c948:	ea47 0003 	orrgt.w	r0, r7, r3
 800c94c:	fa04 f003 	lslle.w	r0, r4, r3
 800c950:	f7f3 fde8 	bl	8000524 <__aeabi_ui2d>
 800c954:	2201      	movs	r2, #1
 800c956:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c95a:	3e01      	subs	r6, #1
 800c95c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c95e:	e777      	b.n	800c850 <_dtoa_r+0x100>
 800c960:	2301      	movs	r3, #1
 800c962:	e7b8      	b.n	800c8d6 <_dtoa_r+0x186>
 800c964:	9012      	str	r0, [sp, #72]	@ 0x48
 800c966:	e7b7      	b.n	800c8d8 <_dtoa_r+0x188>
 800c968:	427b      	negs	r3, r7
 800c96a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c96c:	2300      	movs	r3, #0
 800c96e:	eba8 0807 	sub.w	r8, r8, r7
 800c972:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c974:	e7c4      	b.n	800c900 <_dtoa_r+0x1b0>
 800c976:	2300      	movs	r3, #0
 800c978:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c97a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	dc35      	bgt.n	800c9ec <_dtoa_r+0x29c>
 800c980:	2301      	movs	r3, #1
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	9307      	str	r3, [sp, #28]
 800c986:	461a      	mov	r2, r3
 800c988:	920e      	str	r2, [sp, #56]	@ 0x38
 800c98a:	e00b      	b.n	800c9a4 <_dtoa_r+0x254>
 800c98c:	2301      	movs	r3, #1
 800c98e:	e7f3      	b.n	800c978 <_dtoa_r+0x228>
 800c990:	2300      	movs	r3, #0
 800c992:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c994:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c996:	18fb      	adds	r3, r7, r3
 800c998:	9300      	str	r3, [sp, #0]
 800c99a:	3301      	adds	r3, #1
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	9307      	str	r3, [sp, #28]
 800c9a0:	bfb8      	it	lt
 800c9a2:	2301      	movlt	r3, #1
 800c9a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c9a8:	2100      	movs	r1, #0
 800c9aa:	2204      	movs	r2, #4
 800c9ac:	f102 0514 	add.w	r5, r2, #20
 800c9b0:	429d      	cmp	r5, r3
 800c9b2:	d91f      	bls.n	800c9f4 <_dtoa_r+0x2a4>
 800c9b4:	6041      	str	r1, [r0, #4]
 800c9b6:	4658      	mov	r0, fp
 800c9b8:	f001 f868 	bl	800da8c <_Balloc>
 800c9bc:	4682      	mov	sl, r0
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	d13c      	bne.n	800ca3c <_dtoa_r+0x2ec>
 800c9c2:	4b1b      	ldr	r3, [pc, #108]	@ (800ca30 <_dtoa_r+0x2e0>)
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	f240 11af 	movw	r1, #431	@ 0x1af
 800c9ca:	e6d8      	b.n	800c77e <_dtoa_r+0x2e>
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e7e0      	b.n	800c992 <_dtoa_r+0x242>
 800c9d0:	2401      	movs	r4, #1
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c9d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	9307      	str	r3, [sp, #28]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	2312      	movs	r3, #18
 800c9e4:	e7d0      	b.n	800c988 <_dtoa_r+0x238>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c9ea:	e7f5      	b.n	800c9d8 <_dtoa_r+0x288>
 800c9ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9ee:	9300      	str	r3, [sp, #0]
 800c9f0:	9307      	str	r3, [sp, #28]
 800c9f2:	e7d7      	b.n	800c9a4 <_dtoa_r+0x254>
 800c9f4:	3101      	adds	r1, #1
 800c9f6:	0052      	lsls	r2, r2, #1
 800c9f8:	e7d8      	b.n	800c9ac <_dtoa_r+0x25c>
 800c9fa:	bf00      	nop
 800c9fc:	f3af 8000 	nop.w
 800ca00:	636f4361 	.word	0x636f4361
 800ca04:	3fd287a7 	.word	0x3fd287a7
 800ca08:	8b60c8b3 	.word	0x8b60c8b3
 800ca0c:	3fc68a28 	.word	0x3fc68a28
 800ca10:	509f79fb 	.word	0x509f79fb
 800ca14:	3fd34413 	.word	0x3fd34413
 800ca18:	08011c19 	.word	0x08011c19
 800ca1c:	08011c30 	.word	0x08011c30
 800ca20:	7ff00000 	.word	0x7ff00000
 800ca24:	08011e78 	.word	0x08011e78
 800ca28:	3ff80000 	.word	0x3ff80000
 800ca2c:	08011d88 	.word	0x08011d88
 800ca30:	08011c88 	.word	0x08011c88
 800ca34:	08011c15 	.word	0x08011c15
 800ca38:	08011e77 	.word	0x08011e77
 800ca3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ca40:	6018      	str	r0, [r3, #0]
 800ca42:	9b07      	ldr	r3, [sp, #28]
 800ca44:	2b0e      	cmp	r3, #14
 800ca46:	f200 80a4 	bhi.w	800cb92 <_dtoa_r+0x442>
 800ca4a:	2c00      	cmp	r4, #0
 800ca4c:	f000 80a1 	beq.w	800cb92 <_dtoa_r+0x442>
 800ca50:	2f00      	cmp	r7, #0
 800ca52:	dd33      	ble.n	800cabc <_dtoa_r+0x36c>
 800ca54:	4bad      	ldr	r3, [pc, #692]	@ (800cd0c <_dtoa_r+0x5bc>)
 800ca56:	f007 020f 	and.w	r2, r7, #15
 800ca5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca5e:	ed93 7b00 	vldr	d7, [r3]
 800ca62:	05f8      	lsls	r0, r7, #23
 800ca64:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ca68:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ca6c:	d516      	bpl.n	800ca9c <_dtoa_r+0x34c>
 800ca6e:	4ba8      	ldr	r3, [pc, #672]	@ (800cd10 <_dtoa_r+0x5c0>)
 800ca70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca78:	f7f3 fef8 	bl	800086c <__aeabi_ddiv>
 800ca7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca80:	f004 040f 	and.w	r4, r4, #15
 800ca84:	2603      	movs	r6, #3
 800ca86:	4da2      	ldr	r5, [pc, #648]	@ (800cd10 <_dtoa_r+0x5c0>)
 800ca88:	b954      	cbnz	r4, 800caa0 <_dtoa_r+0x350>
 800ca8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca92:	f7f3 feeb 	bl	800086c <__aeabi_ddiv>
 800ca96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca9a:	e028      	b.n	800caee <_dtoa_r+0x39e>
 800ca9c:	2602      	movs	r6, #2
 800ca9e:	e7f2      	b.n	800ca86 <_dtoa_r+0x336>
 800caa0:	07e1      	lsls	r1, r4, #31
 800caa2:	d508      	bpl.n	800cab6 <_dtoa_r+0x366>
 800caa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800caa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800caac:	f7f3 fdb4 	bl	8000618 <__aeabi_dmul>
 800cab0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cab4:	3601      	adds	r6, #1
 800cab6:	1064      	asrs	r4, r4, #1
 800cab8:	3508      	adds	r5, #8
 800caba:	e7e5      	b.n	800ca88 <_dtoa_r+0x338>
 800cabc:	f000 80d2 	beq.w	800cc64 <_dtoa_r+0x514>
 800cac0:	427c      	negs	r4, r7
 800cac2:	4b92      	ldr	r3, [pc, #584]	@ (800cd0c <_dtoa_r+0x5bc>)
 800cac4:	4d92      	ldr	r5, [pc, #584]	@ (800cd10 <_dtoa_r+0x5c0>)
 800cac6:	f004 020f 	and.w	r2, r4, #15
 800caca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cad6:	f7f3 fd9f 	bl	8000618 <__aeabi_dmul>
 800cada:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cade:	1124      	asrs	r4, r4, #4
 800cae0:	2300      	movs	r3, #0
 800cae2:	2602      	movs	r6, #2
 800cae4:	2c00      	cmp	r4, #0
 800cae6:	f040 80b2 	bne.w	800cc4e <_dtoa_r+0x4fe>
 800caea:	2b00      	cmp	r3, #0
 800caec:	d1d3      	bne.n	800ca96 <_dtoa_r+0x346>
 800caee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800caf0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f000 80b7 	beq.w	800cc68 <_dtoa_r+0x518>
 800cafa:	4b86      	ldr	r3, [pc, #536]	@ (800cd14 <_dtoa_r+0x5c4>)
 800cafc:	2200      	movs	r2, #0
 800cafe:	4620      	mov	r0, r4
 800cb00:	4629      	mov	r1, r5
 800cb02:	f7f3 fffb 	bl	8000afc <__aeabi_dcmplt>
 800cb06:	2800      	cmp	r0, #0
 800cb08:	f000 80ae 	beq.w	800cc68 <_dtoa_r+0x518>
 800cb0c:	9b07      	ldr	r3, [sp, #28]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	f000 80aa 	beq.w	800cc68 <_dtoa_r+0x518>
 800cb14:	9b00      	ldr	r3, [sp, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	dd37      	ble.n	800cb8a <_dtoa_r+0x43a>
 800cb1a:	1e7b      	subs	r3, r7, #1
 800cb1c:	9304      	str	r3, [sp, #16]
 800cb1e:	4620      	mov	r0, r4
 800cb20:	4b7d      	ldr	r3, [pc, #500]	@ (800cd18 <_dtoa_r+0x5c8>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	4629      	mov	r1, r5
 800cb26:	f7f3 fd77 	bl	8000618 <__aeabi_dmul>
 800cb2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb2e:	9c00      	ldr	r4, [sp, #0]
 800cb30:	3601      	adds	r6, #1
 800cb32:	4630      	mov	r0, r6
 800cb34:	f7f3 fd06 	bl	8000544 <__aeabi_i2d>
 800cb38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb3c:	f7f3 fd6c 	bl	8000618 <__aeabi_dmul>
 800cb40:	4b76      	ldr	r3, [pc, #472]	@ (800cd1c <_dtoa_r+0x5cc>)
 800cb42:	2200      	movs	r2, #0
 800cb44:	f7f3 fbb2 	bl	80002ac <__adddf3>
 800cb48:	4605      	mov	r5, r0
 800cb4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cb4e:	2c00      	cmp	r4, #0
 800cb50:	f040 808d 	bne.w	800cc6e <_dtoa_r+0x51e>
 800cb54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb58:	4b71      	ldr	r3, [pc, #452]	@ (800cd20 <_dtoa_r+0x5d0>)
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f7f3 fba4 	bl	80002a8 <__aeabi_dsub>
 800cb60:	4602      	mov	r2, r0
 800cb62:	460b      	mov	r3, r1
 800cb64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb68:	462a      	mov	r2, r5
 800cb6a:	4633      	mov	r3, r6
 800cb6c:	f7f3 ffe4 	bl	8000b38 <__aeabi_dcmpgt>
 800cb70:	2800      	cmp	r0, #0
 800cb72:	f040 828b 	bne.w	800d08c <_dtoa_r+0x93c>
 800cb76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb7a:	462a      	mov	r2, r5
 800cb7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cb80:	f7f3 ffbc 	bl	8000afc <__aeabi_dcmplt>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	f040 8128 	bne.w	800cdda <_dtoa_r+0x68a>
 800cb8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cb8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cb92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f2c0 815a 	blt.w	800ce4e <_dtoa_r+0x6fe>
 800cb9a:	2f0e      	cmp	r7, #14
 800cb9c:	f300 8157 	bgt.w	800ce4e <_dtoa_r+0x6fe>
 800cba0:	4b5a      	ldr	r3, [pc, #360]	@ (800cd0c <_dtoa_r+0x5bc>)
 800cba2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cba6:	ed93 7b00 	vldr	d7, [r3]
 800cbaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	ed8d 7b00 	vstr	d7, [sp]
 800cbb2:	da03      	bge.n	800cbbc <_dtoa_r+0x46c>
 800cbb4:	9b07      	ldr	r3, [sp, #28]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	f340 8101 	ble.w	800cdbe <_dtoa_r+0x66e>
 800cbbc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cbc0:	4656      	mov	r6, sl
 800cbc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	4629      	mov	r1, r5
 800cbca:	f7f3 fe4f 	bl	800086c <__aeabi_ddiv>
 800cbce:	f7f3 ffd3 	bl	8000b78 <__aeabi_d2iz>
 800cbd2:	4680      	mov	r8, r0
 800cbd4:	f7f3 fcb6 	bl	8000544 <__aeabi_i2d>
 800cbd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbdc:	f7f3 fd1c 	bl	8000618 <__aeabi_dmul>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cbec:	f7f3 fb5c 	bl	80002a8 <__aeabi_dsub>
 800cbf0:	f806 4b01 	strb.w	r4, [r6], #1
 800cbf4:	9d07      	ldr	r5, [sp, #28]
 800cbf6:	eba6 040a 	sub.w	r4, r6, sl
 800cbfa:	42a5      	cmp	r5, r4
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	460b      	mov	r3, r1
 800cc00:	f040 8117 	bne.w	800ce32 <_dtoa_r+0x6e2>
 800cc04:	f7f3 fb52 	bl	80002ac <__adddf3>
 800cc08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	460d      	mov	r5, r1
 800cc10:	f7f3 ff92 	bl	8000b38 <__aeabi_dcmpgt>
 800cc14:	2800      	cmp	r0, #0
 800cc16:	f040 80f9 	bne.w	800ce0c <_dtoa_r+0x6bc>
 800cc1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc1e:	4620      	mov	r0, r4
 800cc20:	4629      	mov	r1, r5
 800cc22:	f7f3 ff61 	bl	8000ae8 <__aeabi_dcmpeq>
 800cc26:	b118      	cbz	r0, 800cc30 <_dtoa_r+0x4e0>
 800cc28:	f018 0f01 	tst.w	r8, #1
 800cc2c:	f040 80ee 	bne.w	800ce0c <_dtoa_r+0x6bc>
 800cc30:	4649      	mov	r1, r9
 800cc32:	4658      	mov	r0, fp
 800cc34:	f000 ff6a 	bl	800db0c <_Bfree>
 800cc38:	2300      	movs	r3, #0
 800cc3a:	7033      	strb	r3, [r6, #0]
 800cc3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cc3e:	3701      	adds	r7, #1
 800cc40:	601f      	str	r7, [r3, #0]
 800cc42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	f000 831d 	beq.w	800d284 <_dtoa_r+0xb34>
 800cc4a:	601e      	str	r6, [r3, #0]
 800cc4c:	e31a      	b.n	800d284 <_dtoa_r+0xb34>
 800cc4e:	07e2      	lsls	r2, r4, #31
 800cc50:	d505      	bpl.n	800cc5e <_dtoa_r+0x50e>
 800cc52:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cc56:	f7f3 fcdf 	bl	8000618 <__aeabi_dmul>
 800cc5a:	3601      	adds	r6, #1
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	1064      	asrs	r4, r4, #1
 800cc60:	3508      	adds	r5, #8
 800cc62:	e73f      	b.n	800cae4 <_dtoa_r+0x394>
 800cc64:	2602      	movs	r6, #2
 800cc66:	e742      	b.n	800caee <_dtoa_r+0x39e>
 800cc68:	9c07      	ldr	r4, [sp, #28]
 800cc6a:	9704      	str	r7, [sp, #16]
 800cc6c:	e761      	b.n	800cb32 <_dtoa_r+0x3e2>
 800cc6e:	4b27      	ldr	r3, [pc, #156]	@ (800cd0c <_dtoa_r+0x5bc>)
 800cc70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cc72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc7a:	4454      	add	r4, sl
 800cc7c:	2900      	cmp	r1, #0
 800cc7e:	d053      	beq.n	800cd28 <_dtoa_r+0x5d8>
 800cc80:	4928      	ldr	r1, [pc, #160]	@ (800cd24 <_dtoa_r+0x5d4>)
 800cc82:	2000      	movs	r0, #0
 800cc84:	f7f3 fdf2 	bl	800086c <__aeabi_ddiv>
 800cc88:	4633      	mov	r3, r6
 800cc8a:	462a      	mov	r2, r5
 800cc8c:	f7f3 fb0c 	bl	80002a8 <__aeabi_dsub>
 800cc90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cc94:	4656      	mov	r6, sl
 800cc96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc9a:	f7f3 ff6d 	bl	8000b78 <__aeabi_d2iz>
 800cc9e:	4605      	mov	r5, r0
 800cca0:	f7f3 fc50 	bl	8000544 <__aeabi_i2d>
 800cca4:	4602      	mov	r2, r0
 800cca6:	460b      	mov	r3, r1
 800cca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccac:	f7f3 fafc 	bl	80002a8 <__aeabi_dsub>
 800ccb0:	3530      	adds	r5, #48	@ 0x30
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ccba:	f806 5b01 	strb.w	r5, [r6], #1
 800ccbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ccc2:	f7f3 ff1b 	bl	8000afc <__aeabi_dcmplt>
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	d171      	bne.n	800cdae <_dtoa_r+0x65e>
 800ccca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccce:	4911      	ldr	r1, [pc, #68]	@ (800cd14 <_dtoa_r+0x5c4>)
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	f7f3 fae9 	bl	80002a8 <__aeabi_dsub>
 800ccd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ccda:	f7f3 ff0f 	bl	8000afc <__aeabi_dcmplt>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	f040 8095 	bne.w	800ce0e <_dtoa_r+0x6be>
 800cce4:	42a6      	cmp	r6, r4
 800cce6:	f43f af50 	beq.w	800cb8a <_dtoa_r+0x43a>
 800ccea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ccee:	4b0a      	ldr	r3, [pc, #40]	@ (800cd18 <_dtoa_r+0x5c8>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f7f3 fc91 	bl	8000618 <__aeabi_dmul>
 800ccf6:	4b08      	ldr	r3, [pc, #32]	@ (800cd18 <_dtoa_r+0x5c8>)
 800ccf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd02:	f7f3 fc89 	bl	8000618 <__aeabi_dmul>
 800cd06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd0a:	e7c4      	b.n	800cc96 <_dtoa_r+0x546>
 800cd0c:	08011d88 	.word	0x08011d88
 800cd10:	08011d60 	.word	0x08011d60
 800cd14:	3ff00000 	.word	0x3ff00000
 800cd18:	40240000 	.word	0x40240000
 800cd1c:	401c0000 	.word	0x401c0000
 800cd20:	40140000 	.word	0x40140000
 800cd24:	3fe00000 	.word	0x3fe00000
 800cd28:	4631      	mov	r1, r6
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	f7f3 fc74 	bl	8000618 <__aeabi_dmul>
 800cd30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cd34:	9415      	str	r4, [sp, #84]	@ 0x54
 800cd36:	4656      	mov	r6, sl
 800cd38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd3c:	f7f3 ff1c 	bl	8000b78 <__aeabi_d2iz>
 800cd40:	4605      	mov	r5, r0
 800cd42:	f7f3 fbff 	bl	8000544 <__aeabi_i2d>
 800cd46:	4602      	mov	r2, r0
 800cd48:	460b      	mov	r3, r1
 800cd4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd4e:	f7f3 faab 	bl	80002a8 <__aeabi_dsub>
 800cd52:	3530      	adds	r5, #48	@ 0x30
 800cd54:	f806 5b01 	strb.w	r5, [r6], #1
 800cd58:	4602      	mov	r2, r0
 800cd5a:	460b      	mov	r3, r1
 800cd5c:	42a6      	cmp	r6, r4
 800cd5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd62:	f04f 0200 	mov.w	r2, #0
 800cd66:	d124      	bne.n	800cdb2 <_dtoa_r+0x662>
 800cd68:	4bac      	ldr	r3, [pc, #688]	@ (800d01c <_dtoa_r+0x8cc>)
 800cd6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cd6e:	f7f3 fa9d 	bl	80002ac <__adddf3>
 800cd72:	4602      	mov	r2, r0
 800cd74:	460b      	mov	r3, r1
 800cd76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd7a:	f7f3 fedd 	bl	8000b38 <__aeabi_dcmpgt>
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	d145      	bne.n	800ce0e <_dtoa_r+0x6be>
 800cd82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cd86:	49a5      	ldr	r1, [pc, #660]	@ (800d01c <_dtoa_r+0x8cc>)
 800cd88:	2000      	movs	r0, #0
 800cd8a:	f7f3 fa8d 	bl	80002a8 <__aeabi_dsub>
 800cd8e:	4602      	mov	r2, r0
 800cd90:	460b      	mov	r3, r1
 800cd92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd96:	f7f3 feb1 	bl	8000afc <__aeabi_dcmplt>
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	f43f aef5 	beq.w	800cb8a <_dtoa_r+0x43a>
 800cda0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cda2:	1e73      	subs	r3, r6, #1
 800cda4:	9315      	str	r3, [sp, #84]	@ 0x54
 800cda6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cdaa:	2b30      	cmp	r3, #48	@ 0x30
 800cdac:	d0f8      	beq.n	800cda0 <_dtoa_r+0x650>
 800cdae:	9f04      	ldr	r7, [sp, #16]
 800cdb0:	e73e      	b.n	800cc30 <_dtoa_r+0x4e0>
 800cdb2:	4b9b      	ldr	r3, [pc, #620]	@ (800d020 <_dtoa_r+0x8d0>)
 800cdb4:	f7f3 fc30 	bl	8000618 <__aeabi_dmul>
 800cdb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdbc:	e7bc      	b.n	800cd38 <_dtoa_r+0x5e8>
 800cdbe:	d10c      	bne.n	800cdda <_dtoa_r+0x68a>
 800cdc0:	4b98      	ldr	r3, [pc, #608]	@ (800d024 <_dtoa_r+0x8d4>)
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdc8:	f7f3 fc26 	bl	8000618 <__aeabi_dmul>
 800cdcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdd0:	f7f3 fea8 	bl	8000b24 <__aeabi_dcmpge>
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	f000 8157 	beq.w	800d088 <_dtoa_r+0x938>
 800cdda:	2400      	movs	r4, #0
 800cddc:	4625      	mov	r5, r4
 800cdde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cde0:	43db      	mvns	r3, r3
 800cde2:	9304      	str	r3, [sp, #16]
 800cde4:	4656      	mov	r6, sl
 800cde6:	2700      	movs	r7, #0
 800cde8:	4621      	mov	r1, r4
 800cdea:	4658      	mov	r0, fp
 800cdec:	f000 fe8e 	bl	800db0c <_Bfree>
 800cdf0:	2d00      	cmp	r5, #0
 800cdf2:	d0dc      	beq.n	800cdae <_dtoa_r+0x65e>
 800cdf4:	b12f      	cbz	r7, 800ce02 <_dtoa_r+0x6b2>
 800cdf6:	42af      	cmp	r7, r5
 800cdf8:	d003      	beq.n	800ce02 <_dtoa_r+0x6b2>
 800cdfa:	4639      	mov	r1, r7
 800cdfc:	4658      	mov	r0, fp
 800cdfe:	f000 fe85 	bl	800db0c <_Bfree>
 800ce02:	4629      	mov	r1, r5
 800ce04:	4658      	mov	r0, fp
 800ce06:	f000 fe81 	bl	800db0c <_Bfree>
 800ce0a:	e7d0      	b.n	800cdae <_dtoa_r+0x65e>
 800ce0c:	9704      	str	r7, [sp, #16]
 800ce0e:	4633      	mov	r3, r6
 800ce10:	461e      	mov	r6, r3
 800ce12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce16:	2a39      	cmp	r2, #57	@ 0x39
 800ce18:	d107      	bne.n	800ce2a <_dtoa_r+0x6da>
 800ce1a:	459a      	cmp	sl, r3
 800ce1c:	d1f8      	bne.n	800ce10 <_dtoa_r+0x6c0>
 800ce1e:	9a04      	ldr	r2, [sp, #16]
 800ce20:	3201      	adds	r2, #1
 800ce22:	9204      	str	r2, [sp, #16]
 800ce24:	2230      	movs	r2, #48	@ 0x30
 800ce26:	f88a 2000 	strb.w	r2, [sl]
 800ce2a:	781a      	ldrb	r2, [r3, #0]
 800ce2c:	3201      	adds	r2, #1
 800ce2e:	701a      	strb	r2, [r3, #0]
 800ce30:	e7bd      	b.n	800cdae <_dtoa_r+0x65e>
 800ce32:	4b7b      	ldr	r3, [pc, #492]	@ (800d020 <_dtoa_r+0x8d0>)
 800ce34:	2200      	movs	r2, #0
 800ce36:	f7f3 fbef 	bl	8000618 <__aeabi_dmul>
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	4604      	mov	r4, r0
 800ce40:	460d      	mov	r5, r1
 800ce42:	f7f3 fe51 	bl	8000ae8 <__aeabi_dcmpeq>
 800ce46:	2800      	cmp	r0, #0
 800ce48:	f43f aebb 	beq.w	800cbc2 <_dtoa_r+0x472>
 800ce4c:	e6f0      	b.n	800cc30 <_dtoa_r+0x4e0>
 800ce4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ce50:	2a00      	cmp	r2, #0
 800ce52:	f000 80db 	beq.w	800d00c <_dtoa_r+0x8bc>
 800ce56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce58:	2a01      	cmp	r2, #1
 800ce5a:	f300 80bf 	bgt.w	800cfdc <_dtoa_r+0x88c>
 800ce5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ce60:	2a00      	cmp	r2, #0
 800ce62:	f000 80b7 	beq.w	800cfd4 <_dtoa_r+0x884>
 800ce66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ce6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ce6c:	4646      	mov	r6, r8
 800ce6e:	9a08      	ldr	r2, [sp, #32]
 800ce70:	2101      	movs	r1, #1
 800ce72:	441a      	add	r2, r3
 800ce74:	4658      	mov	r0, fp
 800ce76:	4498      	add	r8, r3
 800ce78:	9208      	str	r2, [sp, #32]
 800ce7a:	f000 ff45 	bl	800dd08 <__i2b>
 800ce7e:	4605      	mov	r5, r0
 800ce80:	b15e      	cbz	r6, 800ce9a <_dtoa_r+0x74a>
 800ce82:	9b08      	ldr	r3, [sp, #32]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	dd08      	ble.n	800ce9a <_dtoa_r+0x74a>
 800ce88:	42b3      	cmp	r3, r6
 800ce8a:	9a08      	ldr	r2, [sp, #32]
 800ce8c:	bfa8      	it	ge
 800ce8e:	4633      	movge	r3, r6
 800ce90:	eba8 0803 	sub.w	r8, r8, r3
 800ce94:	1af6      	subs	r6, r6, r3
 800ce96:	1ad3      	subs	r3, r2, r3
 800ce98:	9308      	str	r3, [sp, #32]
 800ce9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce9c:	b1f3      	cbz	r3, 800cedc <_dtoa_r+0x78c>
 800ce9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f000 80b7 	beq.w	800d014 <_dtoa_r+0x8c4>
 800cea6:	b18c      	cbz	r4, 800cecc <_dtoa_r+0x77c>
 800cea8:	4629      	mov	r1, r5
 800ceaa:	4622      	mov	r2, r4
 800ceac:	4658      	mov	r0, fp
 800ceae:	f000 ffeb 	bl	800de88 <__pow5mult>
 800ceb2:	464a      	mov	r2, r9
 800ceb4:	4601      	mov	r1, r0
 800ceb6:	4605      	mov	r5, r0
 800ceb8:	4658      	mov	r0, fp
 800ceba:	f000 ff3b 	bl	800dd34 <__multiply>
 800cebe:	4649      	mov	r1, r9
 800cec0:	9004      	str	r0, [sp, #16]
 800cec2:	4658      	mov	r0, fp
 800cec4:	f000 fe22 	bl	800db0c <_Bfree>
 800cec8:	9b04      	ldr	r3, [sp, #16]
 800ceca:	4699      	mov	r9, r3
 800cecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cece:	1b1a      	subs	r2, r3, r4
 800ced0:	d004      	beq.n	800cedc <_dtoa_r+0x78c>
 800ced2:	4649      	mov	r1, r9
 800ced4:	4658      	mov	r0, fp
 800ced6:	f000 ffd7 	bl	800de88 <__pow5mult>
 800ceda:	4681      	mov	r9, r0
 800cedc:	2101      	movs	r1, #1
 800cede:	4658      	mov	r0, fp
 800cee0:	f000 ff12 	bl	800dd08 <__i2b>
 800cee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cee6:	4604      	mov	r4, r0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f000 81cf 	beq.w	800d28c <_dtoa_r+0xb3c>
 800ceee:	461a      	mov	r2, r3
 800cef0:	4601      	mov	r1, r0
 800cef2:	4658      	mov	r0, fp
 800cef4:	f000 ffc8 	bl	800de88 <__pow5mult>
 800cef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	4604      	mov	r4, r0
 800cefe:	f300 8095 	bgt.w	800d02c <_dtoa_r+0x8dc>
 800cf02:	9b02      	ldr	r3, [sp, #8]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f040 8087 	bne.w	800d018 <_dtoa_r+0x8c8>
 800cf0a:	9b03      	ldr	r3, [sp, #12]
 800cf0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	f040 8089 	bne.w	800d028 <_dtoa_r+0x8d8>
 800cf16:	9b03      	ldr	r3, [sp, #12]
 800cf18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cf1c:	0d1b      	lsrs	r3, r3, #20
 800cf1e:	051b      	lsls	r3, r3, #20
 800cf20:	b12b      	cbz	r3, 800cf2e <_dtoa_r+0x7de>
 800cf22:	9b08      	ldr	r3, [sp, #32]
 800cf24:	3301      	adds	r3, #1
 800cf26:	9308      	str	r3, [sp, #32]
 800cf28:	f108 0801 	add.w	r8, r8, #1
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	f000 81b0 	beq.w	800d298 <_dtoa_r+0xb48>
 800cf38:	6923      	ldr	r3, [r4, #16]
 800cf3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cf3e:	6918      	ldr	r0, [r3, #16]
 800cf40:	f000 fe96 	bl	800dc70 <__hi0bits>
 800cf44:	f1c0 0020 	rsb	r0, r0, #32
 800cf48:	9b08      	ldr	r3, [sp, #32]
 800cf4a:	4418      	add	r0, r3
 800cf4c:	f010 001f 	ands.w	r0, r0, #31
 800cf50:	d077      	beq.n	800d042 <_dtoa_r+0x8f2>
 800cf52:	f1c0 0320 	rsb	r3, r0, #32
 800cf56:	2b04      	cmp	r3, #4
 800cf58:	dd6b      	ble.n	800d032 <_dtoa_r+0x8e2>
 800cf5a:	9b08      	ldr	r3, [sp, #32]
 800cf5c:	f1c0 001c 	rsb	r0, r0, #28
 800cf60:	4403      	add	r3, r0
 800cf62:	4480      	add	r8, r0
 800cf64:	4406      	add	r6, r0
 800cf66:	9308      	str	r3, [sp, #32]
 800cf68:	f1b8 0f00 	cmp.w	r8, #0
 800cf6c:	dd05      	ble.n	800cf7a <_dtoa_r+0x82a>
 800cf6e:	4649      	mov	r1, r9
 800cf70:	4642      	mov	r2, r8
 800cf72:	4658      	mov	r0, fp
 800cf74:	f000 ffe2 	bl	800df3c <__lshift>
 800cf78:	4681      	mov	r9, r0
 800cf7a:	9b08      	ldr	r3, [sp, #32]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	dd05      	ble.n	800cf8c <_dtoa_r+0x83c>
 800cf80:	4621      	mov	r1, r4
 800cf82:	461a      	mov	r2, r3
 800cf84:	4658      	mov	r0, fp
 800cf86:	f000 ffd9 	bl	800df3c <__lshift>
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d059      	beq.n	800d046 <_dtoa_r+0x8f6>
 800cf92:	4621      	mov	r1, r4
 800cf94:	4648      	mov	r0, r9
 800cf96:	f001 f83d 	bl	800e014 <__mcmp>
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	da53      	bge.n	800d046 <_dtoa_r+0x8f6>
 800cf9e:	1e7b      	subs	r3, r7, #1
 800cfa0:	9304      	str	r3, [sp, #16]
 800cfa2:	4649      	mov	r1, r9
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	220a      	movs	r2, #10
 800cfa8:	4658      	mov	r0, fp
 800cfaa:	f000 fdd1 	bl	800db50 <__multadd>
 800cfae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfb0:	4681      	mov	r9, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f000 8172 	beq.w	800d29c <_dtoa_r+0xb4c>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	4629      	mov	r1, r5
 800cfbc:	220a      	movs	r2, #10
 800cfbe:	4658      	mov	r0, fp
 800cfc0:	f000 fdc6 	bl	800db50 <__multadd>
 800cfc4:	9b00      	ldr	r3, [sp, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	4605      	mov	r5, r0
 800cfca:	dc67      	bgt.n	800d09c <_dtoa_r+0x94c>
 800cfcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfce:	2b02      	cmp	r3, #2
 800cfd0:	dc41      	bgt.n	800d056 <_dtoa_r+0x906>
 800cfd2:	e063      	b.n	800d09c <_dtoa_r+0x94c>
 800cfd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cfd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cfda:	e746      	b.n	800ce6a <_dtoa_r+0x71a>
 800cfdc:	9b07      	ldr	r3, [sp, #28]
 800cfde:	1e5c      	subs	r4, r3, #1
 800cfe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfe2:	42a3      	cmp	r3, r4
 800cfe4:	bfbf      	itttt	lt
 800cfe6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cfe8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cfea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cfec:	1ae3      	sublt	r3, r4, r3
 800cfee:	bfb4      	ite	lt
 800cff0:	18d2      	addlt	r2, r2, r3
 800cff2:	1b1c      	subge	r4, r3, r4
 800cff4:	9b07      	ldr	r3, [sp, #28]
 800cff6:	bfbc      	itt	lt
 800cff8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800cffa:	2400      	movlt	r4, #0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	bfb5      	itete	lt
 800d000:	eba8 0603 	sublt.w	r6, r8, r3
 800d004:	9b07      	ldrge	r3, [sp, #28]
 800d006:	2300      	movlt	r3, #0
 800d008:	4646      	movge	r6, r8
 800d00a:	e730      	b.n	800ce6e <_dtoa_r+0x71e>
 800d00c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d00e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d010:	4646      	mov	r6, r8
 800d012:	e735      	b.n	800ce80 <_dtoa_r+0x730>
 800d014:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d016:	e75c      	b.n	800ced2 <_dtoa_r+0x782>
 800d018:	2300      	movs	r3, #0
 800d01a:	e788      	b.n	800cf2e <_dtoa_r+0x7de>
 800d01c:	3fe00000 	.word	0x3fe00000
 800d020:	40240000 	.word	0x40240000
 800d024:	40140000 	.word	0x40140000
 800d028:	9b02      	ldr	r3, [sp, #8]
 800d02a:	e780      	b.n	800cf2e <_dtoa_r+0x7de>
 800d02c:	2300      	movs	r3, #0
 800d02e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d030:	e782      	b.n	800cf38 <_dtoa_r+0x7e8>
 800d032:	d099      	beq.n	800cf68 <_dtoa_r+0x818>
 800d034:	9a08      	ldr	r2, [sp, #32]
 800d036:	331c      	adds	r3, #28
 800d038:	441a      	add	r2, r3
 800d03a:	4498      	add	r8, r3
 800d03c:	441e      	add	r6, r3
 800d03e:	9208      	str	r2, [sp, #32]
 800d040:	e792      	b.n	800cf68 <_dtoa_r+0x818>
 800d042:	4603      	mov	r3, r0
 800d044:	e7f6      	b.n	800d034 <_dtoa_r+0x8e4>
 800d046:	9b07      	ldr	r3, [sp, #28]
 800d048:	9704      	str	r7, [sp, #16]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	dc20      	bgt.n	800d090 <_dtoa_r+0x940>
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d052:	2b02      	cmp	r3, #2
 800d054:	dd1e      	ble.n	800d094 <_dtoa_r+0x944>
 800d056:	9b00      	ldr	r3, [sp, #0]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	f47f aec0 	bne.w	800cdde <_dtoa_r+0x68e>
 800d05e:	4621      	mov	r1, r4
 800d060:	2205      	movs	r2, #5
 800d062:	4658      	mov	r0, fp
 800d064:	f000 fd74 	bl	800db50 <__multadd>
 800d068:	4601      	mov	r1, r0
 800d06a:	4604      	mov	r4, r0
 800d06c:	4648      	mov	r0, r9
 800d06e:	f000 ffd1 	bl	800e014 <__mcmp>
 800d072:	2800      	cmp	r0, #0
 800d074:	f77f aeb3 	ble.w	800cdde <_dtoa_r+0x68e>
 800d078:	4656      	mov	r6, sl
 800d07a:	2331      	movs	r3, #49	@ 0x31
 800d07c:	f806 3b01 	strb.w	r3, [r6], #1
 800d080:	9b04      	ldr	r3, [sp, #16]
 800d082:	3301      	adds	r3, #1
 800d084:	9304      	str	r3, [sp, #16]
 800d086:	e6ae      	b.n	800cde6 <_dtoa_r+0x696>
 800d088:	9c07      	ldr	r4, [sp, #28]
 800d08a:	9704      	str	r7, [sp, #16]
 800d08c:	4625      	mov	r5, r4
 800d08e:	e7f3      	b.n	800d078 <_dtoa_r+0x928>
 800d090:	9b07      	ldr	r3, [sp, #28]
 800d092:	9300      	str	r3, [sp, #0]
 800d094:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d096:	2b00      	cmp	r3, #0
 800d098:	f000 8104 	beq.w	800d2a4 <_dtoa_r+0xb54>
 800d09c:	2e00      	cmp	r6, #0
 800d09e:	dd05      	ble.n	800d0ac <_dtoa_r+0x95c>
 800d0a0:	4629      	mov	r1, r5
 800d0a2:	4632      	mov	r2, r6
 800d0a4:	4658      	mov	r0, fp
 800d0a6:	f000 ff49 	bl	800df3c <__lshift>
 800d0aa:	4605      	mov	r5, r0
 800d0ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d05a      	beq.n	800d168 <_dtoa_r+0xa18>
 800d0b2:	6869      	ldr	r1, [r5, #4]
 800d0b4:	4658      	mov	r0, fp
 800d0b6:	f000 fce9 	bl	800da8c <_Balloc>
 800d0ba:	4606      	mov	r6, r0
 800d0bc:	b928      	cbnz	r0, 800d0ca <_dtoa_r+0x97a>
 800d0be:	4b84      	ldr	r3, [pc, #528]	@ (800d2d0 <_dtoa_r+0xb80>)
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d0c6:	f7ff bb5a 	b.w	800c77e <_dtoa_r+0x2e>
 800d0ca:	692a      	ldr	r2, [r5, #16]
 800d0cc:	3202      	adds	r2, #2
 800d0ce:	0092      	lsls	r2, r2, #2
 800d0d0:	f105 010c 	add.w	r1, r5, #12
 800d0d4:	300c      	adds	r0, #12
 800d0d6:	f7ff fa8d 	bl	800c5f4 <memcpy>
 800d0da:	2201      	movs	r2, #1
 800d0dc:	4631      	mov	r1, r6
 800d0de:	4658      	mov	r0, fp
 800d0e0:	f000 ff2c 	bl	800df3c <__lshift>
 800d0e4:	f10a 0301 	add.w	r3, sl, #1
 800d0e8:	9307      	str	r3, [sp, #28]
 800d0ea:	9b00      	ldr	r3, [sp, #0]
 800d0ec:	4453      	add	r3, sl
 800d0ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0f0:	9b02      	ldr	r3, [sp, #8]
 800d0f2:	f003 0301 	and.w	r3, r3, #1
 800d0f6:	462f      	mov	r7, r5
 800d0f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0fa:	4605      	mov	r5, r0
 800d0fc:	9b07      	ldr	r3, [sp, #28]
 800d0fe:	4621      	mov	r1, r4
 800d100:	3b01      	subs	r3, #1
 800d102:	4648      	mov	r0, r9
 800d104:	9300      	str	r3, [sp, #0]
 800d106:	f7ff fa99 	bl	800c63c <quorem>
 800d10a:	4639      	mov	r1, r7
 800d10c:	9002      	str	r0, [sp, #8]
 800d10e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d112:	4648      	mov	r0, r9
 800d114:	f000 ff7e 	bl	800e014 <__mcmp>
 800d118:	462a      	mov	r2, r5
 800d11a:	9008      	str	r0, [sp, #32]
 800d11c:	4621      	mov	r1, r4
 800d11e:	4658      	mov	r0, fp
 800d120:	f000 ff94 	bl	800e04c <__mdiff>
 800d124:	68c2      	ldr	r2, [r0, #12]
 800d126:	4606      	mov	r6, r0
 800d128:	bb02      	cbnz	r2, 800d16c <_dtoa_r+0xa1c>
 800d12a:	4601      	mov	r1, r0
 800d12c:	4648      	mov	r0, r9
 800d12e:	f000 ff71 	bl	800e014 <__mcmp>
 800d132:	4602      	mov	r2, r0
 800d134:	4631      	mov	r1, r6
 800d136:	4658      	mov	r0, fp
 800d138:	920e      	str	r2, [sp, #56]	@ 0x38
 800d13a:	f000 fce7 	bl	800db0c <_Bfree>
 800d13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d140:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d142:	9e07      	ldr	r6, [sp, #28]
 800d144:	ea43 0102 	orr.w	r1, r3, r2
 800d148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d14a:	4319      	orrs	r1, r3
 800d14c:	d110      	bne.n	800d170 <_dtoa_r+0xa20>
 800d14e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d152:	d029      	beq.n	800d1a8 <_dtoa_r+0xa58>
 800d154:	9b08      	ldr	r3, [sp, #32]
 800d156:	2b00      	cmp	r3, #0
 800d158:	dd02      	ble.n	800d160 <_dtoa_r+0xa10>
 800d15a:	9b02      	ldr	r3, [sp, #8]
 800d15c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d160:	9b00      	ldr	r3, [sp, #0]
 800d162:	f883 8000 	strb.w	r8, [r3]
 800d166:	e63f      	b.n	800cde8 <_dtoa_r+0x698>
 800d168:	4628      	mov	r0, r5
 800d16a:	e7bb      	b.n	800d0e4 <_dtoa_r+0x994>
 800d16c:	2201      	movs	r2, #1
 800d16e:	e7e1      	b.n	800d134 <_dtoa_r+0x9e4>
 800d170:	9b08      	ldr	r3, [sp, #32]
 800d172:	2b00      	cmp	r3, #0
 800d174:	db04      	blt.n	800d180 <_dtoa_r+0xa30>
 800d176:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d178:	430b      	orrs	r3, r1
 800d17a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d17c:	430b      	orrs	r3, r1
 800d17e:	d120      	bne.n	800d1c2 <_dtoa_r+0xa72>
 800d180:	2a00      	cmp	r2, #0
 800d182:	dded      	ble.n	800d160 <_dtoa_r+0xa10>
 800d184:	4649      	mov	r1, r9
 800d186:	2201      	movs	r2, #1
 800d188:	4658      	mov	r0, fp
 800d18a:	f000 fed7 	bl	800df3c <__lshift>
 800d18e:	4621      	mov	r1, r4
 800d190:	4681      	mov	r9, r0
 800d192:	f000 ff3f 	bl	800e014 <__mcmp>
 800d196:	2800      	cmp	r0, #0
 800d198:	dc03      	bgt.n	800d1a2 <_dtoa_r+0xa52>
 800d19a:	d1e1      	bne.n	800d160 <_dtoa_r+0xa10>
 800d19c:	f018 0f01 	tst.w	r8, #1
 800d1a0:	d0de      	beq.n	800d160 <_dtoa_r+0xa10>
 800d1a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d1a6:	d1d8      	bne.n	800d15a <_dtoa_r+0xa0a>
 800d1a8:	9a00      	ldr	r2, [sp, #0]
 800d1aa:	2339      	movs	r3, #57	@ 0x39
 800d1ac:	7013      	strb	r3, [r2, #0]
 800d1ae:	4633      	mov	r3, r6
 800d1b0:	461e      	mov	r6, r3
 800d1b2:	3b01      	subs	r3, #1
 800d1b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d1b8:	2a39      	cmp	r2, #57	@ 0x39
 800d1ba:	d052      	beq.n	800d262 <_dtoa_r+0xb12>
 800d1bc:	3201      	adds	r2, #1
 800d1be:	701a      	strb	r2, [r3, #0]
 800d1c0:	e612      	b.n	800cde8 <_dtoa_r+0x698>
 800d1c2:	2a00      	cmp	r2, #0
 800d1c4:	dd07      	ble.n	800d1d6 <_dtoa_r+0xa86>
 800d1c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d1ca:	d0ed      	beq.n	800d1a8 <_dtoa_r+0xa58>
 800d1cc:	9a00      	ldr	r2, [sp, #0]
 800d1ce:	f108 0301 	add.w	r3, r8, #1
 800d1d2:	7013      	strb	r3, [r2, #0]
 800d1d4:	e608      	b.n	800cde8 <_dtoa_r+0x698>
 800d1d6:	9b07      	ldr	r3, [sp, #28]
 800d1d8:	9a07      	ldr	r2, [sp, #28]
 800d1da:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d1de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d028      	beq.n	800d236 <_dtoa_r+0xae6>
 800d1e4:	4649      	mov	r1, r9
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	220a      	movs	r2, #10
 800d1ea:	4658      	mov	r0, fp
 800d1ec:	f000 fcb0 	bl	800db50 <__multadd>
 800d1f0:	42af      	cmp	r7, r5
 800d1f2:	4681      	mov	r9, r0
 800d1f4:	f04f 0300 	mov.w	r3, #0
 800d1f8:	f04f 020a 	mov.w	r2, #10
 800d1fc:	4639      	mov	r1, r7
 800d1fe:	4658      	mov	r0, fp
 800d200:	d107      	bne.n	800d212 <_dtoa_r+0xac2>
 800d202:	f000 fca5 	bl	800db50 <__multadd>
 800d206:	4607      	mov	r7, r0
 800d208:	4605      	mov	r5, r0
 800d20a:	9b07      	ldr	r3, [sp, #28]
 800d20c:	3301      	adds	r3, #1
 800d20e:	9307      	str	r3, [sp, #28]
 800d210:	e774      	b.n	800d0fc <_dtoa_r+0x9ac>
 800d212:	f000 fc9d 	bl	800db50 <__multadd>
 800d216:	4629      	mov	r1, r5
 800d218:	4607      	mov	r7, r0
 800d21a:	2300      	movs	r3, #0
 800d21c:	220a      	movs	r2, #10
 800d21e:	4658      	mov	r0, fp
 800d220:	f000 fc96 	bl	800db50 <__multadd>
 800d224:	4605      	mov	r5, r0
 800d226:	e7f0      	b.n	800d20a <_dtoa_r+0xaba>
 800d228:	9b00      	ldr	r3, [sp, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	bfcc      	ite	gt
 800d22e:	461e      	movgt	r6, r3
 800d230:	2601      	movle	r6, #1
 800d232:	4456      	add	r6, sl
 800d234:	2700      	movs	r7, #0
 800d236:	4649      	mov	r1, r9
 800d238:	2201      	movs	r2, #1
 800d23a:	4658      	mov	r0, fp
 800d23c:	f000 fe7e 	bl	800df3c <__lshift>
 800d240:	4621      	mov	r1, r4
 800d242:	4681      	mov	r9, r0
 800d244:	f000 fee6 	bl	800e014 <__mcmp>
 800d248:	2800      	cmp	r0, #0
 800d24a:	dcb0      	bgt.n	800d1ae <_dtoa_r+0xa5e>
 800d24c:	d102      	bne.n	800d254 <_dtoa_r+0xb04>
 800d24e:	f018 0f01 	tst.w	r8, #1
 800d252:	d1ac      	bne.n	800d1ae <_dtoa_r+0xa5e>
 800d254:	4633      	mov	r3, r6
 800d256:	461e      	mov	r6, r3
 800d258:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d25c:	2a30      	cmp	r2, #48	@ 0x30
 800d25e:	d0fa      	beq.n	800d256 <_dtoa_r+0xb06>
 800d260:	e5c2      	b.n	800cde8 <_dtoa_r+0x698>
 800d262:	459a      	cmp	sl, r3
 800d264:	d1a4      	bne.n	800d1b0 <_dtoa_r+0xa60>
 800d266:	9b04      	ldr	r3, [sp, #16]
 800d268:	3301      	adds	r3, #1
 800d26a:	9304      	str	r3, [sp, #16]
 800d26c:	2331      	movs	r3, #49	@ 0x31
 800d26e:	f88a 3000 	strb.w	r3, [sl]
 800d272:	e5b9      	b.n	800cde8 <_dtoa_r+0x698>
 800d274:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d276:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d2d4 <_dtoa_r+0xb84>
 800d27a:	b11b      	cbz	r3, 800d284 <_dtoa_r+0xb34>
 800d27c:	f10a 0308 	add.w	r3, sl, #8
 800d280:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d282:	6013      	str	r3, [r2, #0]
 800d284:	4650      	mov	r0, sl
 800d286:	b019      	add	sp, #100	@ 0x64
 800d288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d28e:	2b01      	cmp	r3, #1
 800d290:	f77f ae37 	ble.w	800cf02 <_dtoa_r+0x7b2>
 800d294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d296:	930a      	str	r3, [sp, #40]	@ 0x28
 800d298:	2001      	movs	r0, #1
 800d29a:	e655      	b.n	800cf48 <_dtoa_r+0x7f8>
 800d29c:	9b00      	ldr	r3, [sp, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	f77f aed6 	ble.w	800d050 <_dtoa_r+0x900>
 800d2a4:	4656      	mov	r6, sl
 800d2a6:	4621      	mov	r1, r4
 800d2a8:	4648      	mov	r0, r9
 800d2aa:	f7ff f9c7 	bl	800c63c <quorem>
 800d2ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d2b2:	f806 8b01 	strb.w	r8, [r6], #1
 800d2b6:	9b00      	ldr	r3, [sp, #0]
 800d2b8:	eba6 020a 	sub.w	r2, r6, sl
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	ddb3      	ble.n	800d228 <_dtoa_r+0xad8>
 800d2c0:	4649      	mov	r1, r9
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	220a      	movs	r2, #10
 800d2c6:	4658      	mov	r0, fp
 800d2c8:	f000 fc42 	bl	800db50 <__multadd>
 800d2cc:	4681      	mov	r9, r0
 800d2ce:	e7ea      	b.n	800d2a6 <_dtoa_r+0xb56>
 800d2d0:	08011c88 	.word	0x08011c88
 800d2d4:	08011c0c 	.word	0x08011c0c

0800d2d8 <_free_r>:
 800d2d8:	b538      	push	{r3, r4, r5, lr}
 800d2da:	4605      	mov	r5, r0
 800d2dc:	2900      	cmp	r1, #0
 800d2de:	d041      	beq.n	800d364 <_free_r+0x8c>
 800d2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2e4:	1f0c      	subs	r4, r1, #4
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	bfb8      	it	lt
 800d2ea:	18e4      	addlt	r4, r4, r3
 800d2ec:	f7fc fc68 	bl	8009bc0 <__malloc_lock>
 800d2f0:	4a1d      	ldr	r2, [pc, #116]	@ (800d368 <_free_r+0x90>)
 800d2f2:	6813      	ldr	r3, [r2, #0]
 800d2f4:	b933      	cbnz	r3, 800d304 <_free_r+0x2c>
 800d2f6:	6063      	str	r3, [r4, #4]
 800d2f8:	6014      	str	r4, [r2, #0]
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d300:	f7fc bc64 	b.w	8009bcc <__malloc_unlock>
 800d304:	42a3      	cmp	r3, r4
 800d306:	d908      	bls.n	800d31a <_free_r+0x42>
 800d308:	6820      	ldr	r0, [r4, #0]
 800d30a:	1821      	adds	r1, r4, r0
 800d30c:	428b      	cmp	r3, r1
 800d30e:	bf01      	itttt	eq
 800d310:	6819      	ldreq	r1, [r3, #0]
 800d312:	685b      	ldreq	r3, [r3, #4]
 800d314:	1809      	addeq	r1, r1, r0
 800d316:	6021      	streq	r1, [r4, #0]
 800d318:	e7ed      	b.n	800d2f6 <_free_r+0x1e>
 800d31a:	461a      	mov	r2, r3
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	b10b      	cbz	r3, 800d324 <_free_r+0x4c>
 800d320:	42a3      	cmp	r3, r4
 800d322:	d9fa      	bls.n	800d31a <_free_r+0x42>
 800d324:	6811      	ldr	r1, [r2, #0]
 800d326:	1850      	adds	r0, r2, r1
 800d328:	42a0      	cmp	r0, r4
 800d32a:	d10b      	bne.n	800d344 <_free_r+0x6c>
 800d32c:	6820      	ldr	r0, [r4, #0]
 800d32e:	4401      	add	r1, r0
 800d330:	1850      	adds	r0, r2, r1
 800d332:	4283      	cmp	r3, r0
 800d334:	6011      	str	r1, [r2, #0]
 800d336:	d1e0      	bne.n	800d2fa <_free_r+0x22>
 800d338:	6818      	ldr	r0, [r3, #0]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	6053      	str	r3, [r2, #4]
 800d33e:	4408      	add	r0, r1
 800d340:	6010      	str	r0, [r2, #0]
 800d342:	e7da      	b.n	800d2fa <_free_r+0x22>
 800d344:	d902      	bls.n	800d34c <_free_r+0x74>
 800d346:	230c      	movs	r3, #12
 800d348:	602b      	str	r3, [r5, #0]
 800d34a:	e7d6      	b.n	800d2fa <_free_r+0x22>
 800d34c:	6820      	ldr	r0, [r4, #0]
 800d34e:	1821      	adds	r1, r4, r0
 800d350:	428b      	cmp	r3, r1
 800d352:	bf04      	itt	eq
 800d354:	6819      	ldreq	r1, [r3, #0]
 800d356:	685b      	ldreq	r3, [r3, #4]
 800d358:	6063      	str	r3, [r4, #4]
 800d35a:	bf04      	itt	eq
 800d35c:	1809      	addeq	r1, r1, r0
 800d35e:	6021      	streq	r1, [r4, #0]
 800d360:	6054      	str	r4, [r2, #4]
 800d362:	e7ca      	b.n	800d2fa <_free_r+0x22>
 800d364:	bd38      	pop	{r3, r4, r5, pc}
 800d366:	bf00      	nop
 800d368:	200096e0 	.word	0x200096e0

0800d36c <rshift>:
 800d36c:	6903      	ldr	r3, [r0, #16]
 800d36e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d376:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d37a:	f100 0414 	add.w	r4, r0, #20
 800d37e:	dd45      	ble.n	800d40c <rshift+0xa0>
 800d380:	f011 011f 	ands.w	r1, r1, #31
 800d384:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d388:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d38c:	d10c      	bne.n	800d3a8 <rshift+0x3c>
 800d38e:	f100 0710 	add.w	r7, r0, #16
 800d392:	4629      	mov	r1, r5
 800d394:	42b1      	cmp	r1, r6
 800d396:	d334      	bcc.n	800d402 <rshift+0x96>
 800d398:	1a9b      	subs	r3, r3, r2
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	1eea      	subs	r2, r5, #3
 800d39e:	4296      	cmp	r6, r2
 800d3a0:	bf38      	it	cc
 800d3a2:	2300      	movcc	r3, #0
 800d3a4:	4423      	add	r3, r4
 800d3a6:	e015      	b.n	800d3d4 <rshift+0x68>
 800d3a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d3ac:	f1c1 0820 	rsb	r8, r1, #32
 800d3b0:	40cf      	lsrs	r7, r1
 800d3b2:	f105 0e04 	add.w	lr, r5, #4
 800d3b6:	46a1      	mov	r9, r4
 800d3b8:	4576      	cmp	r6, lr
 800d3ba:	46f4      	mov	ip, lr
 800d3bc:	d815      	bhi.n	800d3ea <rshift+0x7e>
 800d3be:	1a9a      	subs	r2, r3, r2
 800d3c0:	0092      	lsls	r2, r2, #2
 800d3c2:	3a04      	subs	r2, #4
 800d3c4:	3501      	adds	r5, #1
 800d3c6:	42ae      	cmp	r6, r5
 800d3c8:	bf38      	it	cc
 800d3ca:	2200      	movcc	r2, #0
 800d3cc:	18a3      	adds	r3, r4, r2
 800d3ce:	50a7      	str	r7, [r4, r2]
 800d3d0:	b107      	cbz	r7, 800d3d4 <rshift+0x68>
 800d3d2:	3304      	adds	r3, #4
 800d3d4:	1b1a      	subs	r2, r3, r4
 800d3d6:	42a3      	cmp	r3, r4
 800d3d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d3dc:	bf08      	it	eq
 800d3de:	2300      	moveq	r3, #0
 800d3e0:	6102      	str	r2, [r0, #16]
 800d3e2:	bf08      	it	eq
 800d3e4:	6143      	streq	r3, [r0, #20]
 800d3e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3ea:	f8dc c000 	ldr.w	ip, [ip]
 800d3ee:	fa0c fc08 	lsl.w	ip, ip, r8
 800d3f2:	ea4c 0707 	orr.w	r7, ip, r7
 800d3f6:	f849 7b04 	str.w	r7, [r9], #4
 800d3fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d3fe:	40cf      	lsrs	r7, r1
 800d400:	e7da      	b.n	800d3b8 <rshift+0x4c>
 800d402:	f851 cb04 	ldr.w	ip, [r1], #4
 800d406:	f847 cf04 	str.w	ip, [r7, #4]!
 800d40a:	e7c3      	b.n	800d394 <rshift+0x28>
 800d40c:	4623      	mov	r3, r4
 800d40e:	e7e1      	b.n	800d3d4 <rshift+0x68>

0800d410 <__hexdig_fun>:
 800d410:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d414:	2b09      	cmp	r3, #9
 800d416:	d802      	bhi.n	800d41e <__hexdig_fun+0xe>
 800d418:	3820      	subs	r0, #32
 800d41a:	b2c0      	uxtb	r0, r0
 800d41c:	4770      	bx	lr
 800d41e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d422:	2b05      	cmp	r3, #5
 800d424:	d801      	bhi.n	800d42a <__hexdig_fun+0x1a>
 800d426:	3847      	subs	r0, #71	@ 0x47
 800d428:	e7f7      	b.n	800d41a <__hexdig_fun+0xa>
 800d42a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d42e:	2b05      	cmp	r3, #5
 800d430:	d801      	bhi.n	800d436 <__hexdig_fun+0x26>
 800d432:	3827      	subs	r0, #39	@ 0x27
 800d434:	e7f1      	b.n	800d41a <__hexdig_fun+0xa>
 800d436:	2000      	movs	r0, #0
 800d438:	4770      	bx	lr
	...

0800d43c <__gethex>:
 800d43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d440:	b085      	sub	sp, #20
 800d442:	468a      	mov	sl, r1
 800d444:	9302      	str	r3, [sp, #8]
 800d446:	680b      	ldr	r3, [r1, #0]
 800d448:	9001      	str	r0, [sp, #4]
 800d44a:	4690      	mov	r8, r2
 800d44c:	1c9c      	adds	r4, r3, #2
 800d44e:	46a1      	mov	r9, r4
 800d450:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d454:	2830      	cmp	r0, #48	@ 0x30
 800d456:	d0fa      	beq.n	800d44e <__gethex+0x12>
 800d458:	eba9 0303 	sub.w	r3, r9, r3
 800d45c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d460:	f7ff ffd6 	bl	800d410 <__hexdig_fun>
 800d464:	4605      	mov	r5, r0
 800d466:	2800      	cmp	r0, #0
 800d468:	d168      	bne.n	800d53c <__gethex+0x100>
 800d46a:	49a0      	ldr	r1, [pc, #640]	@ (800d6ec <__gethex+0x2b0>)
 800d46c:	2201      	movs	r2, #1
 800d46e:	4648      	mov	r0, r9
 800d470:	f7fe fa81 	bl	800b976 <strncmp>
 800d474:	4607      	mov	r7, r0
 800d476:	2800      	cmp	r0, #0
 800d478:	d167      	bne.n	800d54a <__gethex+0x10e>
 800d47a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d47e:	4626      	mov	r6, r4
 800d480:	f7ff ffc6 	bl	800d410 <__hexdig_fun>
 800d484:	2800      	cmp	r0, #0
 800d486:	d062      	beq.n	800d54e <__gethex+0x112>
 800d488:	4623      	mov	r3, r4
 800d48a:	7818      	ldrb	r0, [r3, #0]
 800d48c:	2830      	cmp	r0, #48	@ 0x30
 800d48e:	4699      	mov	r9, r3
 800d490:	f103 0301 	add.w	r3, r3, #1
 800d494:	d0f9      	beq.n	800d48a <__gethex+0x4e>
 800d496:	f7ff ffbb 	bl	800d410 <__hexdig_fun>
 800d49a:	fab0 f580 	clz	r5, r0
 800d49e:	096d      	lsrs	r5, r5, #5
 800d4a0:	f04f 0b01 	mov.w	fp, #1
 800d4a4:	464a      	mov	r2, r9
 800d4a6:	4616      	mov	r6, r2
 800d4a8:	3201      	adds	r2, #1
 800d4aa:	7830      	ldrb	r0, [r6, #0]
 800d4ac:	f7ff ffb0 	bl	800d410 <__hexdig_fun>
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	d1f8      	bne.n	800d4a6 <__gethex+0x6a>
 800d4b4:	498d      	ldr	r1, [pc, #564]	@ (800d6ec <__gethex+0x2b0>)
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	4630      	mov	r0, r6
 800d4ba:	f7fe fa5c 	bl	800b976 <strncmp>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d13f      	bne.n	800d542 <__gethex+0x106>
 800d4c2:	b944      	cbnz	r4, 800d4d6 <__gethex+0x9a>
 800d4c4:	1c74      	adds	r4, r6, #1
 800d4c6:	4622      	mov	r2, r4
 800d4c8:	4616      	mov	r6, r2
 800d4ca:	3201      	adds	r2, #1
 800d4cc:	7830      	ldrb	r0, [r6, #0]
 800d4ce:	f7ff ff9f 	bl	800d410 <__hexdig_fun>
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	d1f8      	bne.n	800d4c8 <__gethex+0x8c>
 800d4d6:	1ba4      	subs	r4, r4, r6
 800d4d8:	00a7      	lsls	r7, r4, #2
 800d4da:	7833      	ldrb	r3, [r6, #0]
 800d4dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d4e0:	2b50      	cmp	r3, #80	@ 0x50
 800d4e2:	d13e      	bne.n	800d562 <__gethex+0x126>
 800d4e4:	7873      	ldrb	r3, [r6, #1]
 800d4e6:	2b2b      	cmp	r3, #43	@ 0x2b
 800d4e8:	d033      	beq.n	800d552 <__gethex+0x116>
 800d4ea:	2b2d      	cmp	r3, #45	@ 0x2d
 800d4ec:	d034      	beq.n	800d558 <__gethex+0x11c>
 800d4ee:	1c71      	adds	r1, r6, #1
 800d4f0:	2400      	movs	r4, #0
 800d4f2:	7808      	ldrb	r0, [r1, #0]
 800d4f4:	f7ff ff8c 	bl	800d410 <__hexdig_fun>
 800d4f8:	1e43      	subs	r3, r0, #1
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	2b18      	cmp	r3, #24
 800d4fe:	d830      	bhi.n	800d562 <__gethex+0x126>
 800d500:	f1a0 0210 	sub.w	r2, r0, #16
 800d504:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d508:	f7ff ff82 	bl	800d410 <__hexdig_fun>
 800d50c:	f100 3cff 	add.w	ip, r0, #4294967295
 800d510:	fa5f fc8c 	uxtb.w	ip, ip
 800d514:	f1bc 0f18 	cmp.w	ip, #24
 800d518:	f04f 030a 	mov.w	r3, #10
 800d51c:	d91e      	bls.n	800d55c <__gethex+0x120>
 800d51e:	b104      	cbz	r4, 800d522 <__gethex+0xe6>
 800d520:	4252      	negs	r2, r2
 800d522:	4417      	add	r7, r2
 800d524:	f8ca 1000 	str.w	r1, [sl]
 800d528:	b1ed      	cbz	r5, 800d566 <__gethex+0x12a>
 800d52a:	f1bb 0f00 	cmp.w	fp, #0
 800d52e:	bf0c      	ite	eq
 800d530:	2506      	moveq	r5, #6
 800d532:	2500      	movne	r5, #0
 800d534:	4628      	mov	r0, r5
 800d536:	b005      	add	sp, #20
 800d538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d53c:	2500      	movs	r5, #0
 800d53e:	462c      	mov	r4, r5
 800d540:	e7b0      	b.n	800d4a4 <__gethex+0x68>
 800d542:	2c00      	cmp	r4, #0
 800d544:	d1c7      	bne.n	800d4d6 <__gethex+0x9a>
 800d546:	4627      	mov	r7, r4
 800d548:	e7c7      	b.n	800d4da <__gethex+0x9e>
 800d54a:	464e      	mov	r6, r9
 800d54c:	462f      	mov	r7, r5
 800d54e:	2501      	movs	r5, #1
 800d550:	e7c3      	b.n	800d4da <__gethex+0x9e>
 800d552:	2400      	movs	r4, #0
 800d554:	1cb1      	adds	r1, r6, #2
 800d556:	e7cc      	b.n	800d4f2 <__gethex+0xb6>
 800d558:	2401      	movs	r4, #1
 800d55a:	e7fb      	b.n	800d554 <__gethex+0x118>
 800d55c:	fb03 0002 	mla	r0, r3, r2, r0
 800d560:	e7ce      	b.n	800d500 <__gethex+0xc4>
 800d562:	4631      	mov	r1, r6
 800d564:	e7de      	b.n	800d524 <__gethex+0xe8>
 800d566:	eba6 0309 	sub.w	r3, r6, r9
 800d56a:	3b01      	subs	r3, #1
 800d56c:	4629      	mov	r1, r5
 800d56e:	2b07      	cmp	r3, #7
 800d570:	dc0a      	bgt.n	800d588 <__gethex+0x14c>
 800d572:	9801      	ldr	r0, [sp, #4]
 800d574:	f000 fa8a 	bl	800da8c <_Balloc>
 800d578:	4604      	mov	r4, r0
 800d57a:	b940      	cbnz	r0, 800d58e <__gethex+0x152>
 800d57c:	4b5c      	ldr	r3, [pc, #368]	@ (800d6f0 <__gethex+0x2b4>)
 800d57e:	4602      	mov	r2, r0
 800d580:	21e4      	movs	r1, #228	@ 0xe4
 800d582:	485c      	ldr	r0, [pc, #368]	@ (800d6f4 <__gethex+0x2b8>)
 800d584:	f001 fd6a 	bl	800f05c <__assert_func>
 800d588:	3101      	adds	r1, #1
 800d58a:	105b      	asrs	r3, r3, #1
 800d58c:	e7ef      	b.n	800d56e <__gethex+0x132>
 800d58e:	f100 0a14 	add.w	sl, r0, #20
 800d592:	2300      	movs	r3, #0
 800d594:	4655      	mov	r5, sl
 800d596:	469b      	mov	fp, r3
 800d598:	45b1      	cmp	r9, r6
 800d59a:	d337      	bcc.n	800d60c <__gethex+0x1d0>
 800d59c:	f845 bb04 	str.w	fp, [r5], #4
 800d5a0:	eba5 050a 	sub.w	r5, r5, sl
 800d5a4:	10ad      	asrs	r5, r5, #2
 800d5a6:	6125      	str	r5, [r4, #16]
 800d5a8:	4658      	mov	r0, fp
 800d5aa:	f000 fb61 	bl	800dc70 <__hi0bits>
 800d5ae:	016d      	lsls	r5, r5, #5
 800d5b0:	f8d8 6000 	ldr.w	r6, [r8]
 800d5b4:	1a2d      	subs	r5, r5, r0
 800d5b6:	42b5      	cmp	r5, r6
 800d5b8:	dd54      	ble.n	800d664 <__gethex+0x228>
 800d5ba:	1bad      	subs	r5, r5, r6
 800d5bc:	4629      	mov	r1, r5
 800d5be:	4620      	mov	r0, r4
 800d5c0:	f000 fef5 	bl	800e3ae <__any_on>
 800d5c4:	4681      	mov	r9, r0
 800d5c6:	b178      	cbz	r0, 800d5e8 <__gethex+0x1ac>
 800d5c8:	1e6b      	subs	r3, r5, #1
 800d5ca:	1159      	asrs	r1, r3, #5
 800d5cc:	f003 021f 	and.w	r2, r3, #31
 800d5d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d5d4:	f04f 0901 	mov.w	r9, #1
 800d5d8:	fa09 f202 	lsl.w	r2, r9, r2
 800d5dc:	420a      	tst	r2, r1
 800d5de:	d003      	beq.n	800d5e8 <__gethex+0x1ac>
 800d5e0:	454b      	cmp	r3, r9
 800d5e2:	dc36      	bgt.n	800d652 <__gethex+0x216>
 800d5e4:	f04f 0902 	mov.w	r9, #2
 800d5e8:	4629      	mov	r1, r5
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	f7ff febe 	bl	800d36c <rshift>
 800d5f0:	442f      	add	r7, r5
 800d5f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d5f6:	42bb      	cmp	r3, r7
 800d5f8:	da42      	bge.n	800d680 <__gethex+0x244>
 800d5fa:	9801      	ldr	r0, [sp, #4]
 800d5fc:	4621      	mov	r1, r4
 800d5fe:	f000 fa85 	bl	800db0c <_Bfree>
 800d602:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d604:	2300      	movs	r3, #0
 800d606:	6013      	str	r3, [r2, #0]
 800d608:	25a3      	movs	r5, #163	@ 0xa3
 800d60a:	e793      	b.n	800d534 <__gethex+0xf8>
 800d60c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d610:	2a2e      	cmp	r2, #46	@ 0x2e
 800d612:	d012      	beq.n	800d63a <__gethex+0x1fe>
 800d614:	2b20      	cmp	r3, #32
 800d616:	d104      	bne.n	800d622 <__gethex+0x1e6>
 800d618:	f845 bb04 	str.w	fp, [r5], #4
 800d61c:	f04f 0b00 	mov.w	fp, #0
 800d620:	465b      	mov	r3, fp
 800d622:	7830      	ldrb	r0, [r6, #0]
 800d624:	9303      	str	r3, [sp, #12]
 800d626:	f7ff fef3 	bl	800d410 <__hexdig_fun>
 800d62a:	9b03      	ldr	r3, [sp, #12]
 800d62c:	f000 000f 	and.w	r0, r0, #15
 800d630:	4098      	lsls	r0, r3
 800d632:	ea4b 0b00 	orr.w	fp, fp, r0
 800d636:	3304      	adds	r3, #4
 800d638:	e7ae      	b.n	800d598 <__gethex+0x15c>
 800d63a:	45b1      	cmp	r9, r6
 800d63c:	d8ea      	bhi.n	800d614 <__gethex+0x1d8>
 800d63e:	492b      	ldr	r1, [pc, #172]	@ (800d6ec <__gethex+0x2b0>)
 800d640:	9303      	str	r3, [sp, #12]
 800d642:	2201      	movs	r2, #1
 800d644:	4630      	mov	r0, r6
 800d646:	f7fe f996 	bl	800b976 <strncmp>
 800d64a:	9b03      	ldr	r3, [sp, #12]
 800d64c:	2800      	cmp	r0, #0
 800d64e:	d1e1      	bne.n	800d614 <__gethex+0x1d8>
 800d650:	e7a2      	b.n	800d598 <__gethex+0x15c>
 800d652:	1ea9      	subs	r1, r5, #2
 800d654:	4620      	mov	r0, r4
 800d656:	f000 feaa 	bl	800e3ae <__any_on>
 800d65a:	2800      	cmp	r0, #0
 800d65c:	d0c2      	beq.n	800d5e4 <__gethex+0x1a8>
 800d65e:	f04f 0903 	mov.w	r9, #3
 800d662:	e7c1      	b.n	800d5e8 <__gethex+0x1ac>
 800d664:	da09      	bge.n	800d67a <__gethex+0x23e>
 800d666:	1b75      	subs	r5, r6, r5
 800d668:	4621      	mov	r1, r4
 800d66a:	9801      	ldr	r0, [sp, #4]
 800d66c:	462a      	mov	r2, r5
 800d66e:	f000 fc65 	bl	800df3c <__lshift>
 800d672:	1b7f      	subs	r7, r7, r5
 800d674:	4604      	mov	r4, r0
 800d676:	f100 0a14 	add.w	sl, r0, #20
 800d67a:	f04f 0900 	mov.w	r9, #0
 800d67e:	e7b8      	b.n	800d5f2 <__gethex+0x1b6>
 800d680:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d684:	42bd      	cmp	r5, r7
 800d686:	dd6f      	ble.n	800d768 <__gethex+0x32c>
 800d688:	1bed      	subs	r5, r5, r7
 800d68a:	42ae      	cmp	r6, r5
 800d68c:	dc34      	bgt.n	800d6f8 <__gethex+0x2bc>
 800d68e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d692:	2b02      	cmp	r3, #2
 800d694:	d022      	beq.n	800d6dc <__gethex+0x2a0>
 800d696:	2b03      	cmp	r3, #3
 800d698:	d024      	beq.n	800d6e4 <__gethex+0x2a8>
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d115      	bne.n	800d6ca <__gethex+0x28e>
 800d69e:	42ae      	cmp	r6, r5
 800d6a0:	d113      	bne.n	800d6ca <__gethex+0x28e>
 800d6a2:	2e01      	cmp	r6, #1
 800d6a4:	d10b      	bne.n	800d6be <__gethex+0x282>
 800d6a6:	9a02      	ldr	r2, [sp, #8]
 800d6a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d6ac:	6013      	str	r3, [r2, #0]
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	6123      	str	r3, [r4, #16]
 800d6b2:	f8ca 3000 	str.w	r3, [sl]
 800d6b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6b8:	2562      	movs	r5, #98	@ 0x62
 800d6ba:	601c      	str	r4, [r3, #0]
 800d6bc:	e73a      	b.n	800d534 <__gethex+0xf8>
 800d6be:	1e71      	subs	r1, r6, #1
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	f000 fe74 	bl	800e3ae <__any_on>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	d1ed      	bne.n	800d6a6 <__gethex+0x26a>
 800d6ca:	9801      	ldr	r0, [sp, #4]
 800d6cc:	4621      	mov	r1, r4
 800d6ce:	f000 fa1d 	bl	800db0c <_Bfree>
 800d6d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	6013      	str	r3, [r2, #0]
 800d6d8:	2550      	movs	r5, #80	@ 0x50
 800d6da:	e72b      	b.n	800d534 <__gethex+0xf8>
 800d6dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1f3      	bne.n	800d6ca <__gethex+0x28e>
 800d6e2:	e7e0      	b.n	800d6a6 <__gethex+0x26a>
 800d6e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1dd      	bne.n	800d6a6 <__gethex+0x26a>
 800d6ea:	e7ee      	b.n	800d6ca <__gethex+0x28e>
 800d6ec:	080119ca 	.word	0x080119ca
 800d6f0:	08011c88 	.word	0x08011c88
 800d6f4:	08011c99 	.word	0x08011c99
 800d6f8:	1e6f      	subs	r7, r5, #1
 800d6fa:	f1b9 0f00 	cmp.w	r9, #0
 800d6fe:	d130      	bne.n	800d762 <__gethex+0x326>
 800d700:	b127      	cbz	r7, 800d70c <__gethex+0x2d0>
 800d702:	4639      	mov	r1, r7
 800d704:	4620      	mov	r0, r4
 800d706:	f000 fe52 	bl	800e3ae <__any_on>
 800d70a:	4681      	mov	r9, r0
 800d70c:	117a      	asrs	r2, r7, #5
 800d70e:	2301      	movs	r3, #1
 800d710:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d714:	f007 071f 	and.w	r7, r7, #31
 800d718:	40bb      	lsls	r3, r7
 800d71a:	4213      	tst	r3, r2
 800d71c:	4629      	mov	r1, r5
 800d71e:	4620      	mov	r0, r4
 800d720:	bf18      	it	ne
 800d722:	f049 0902 	orrne.w	r9, r9, #2
 800d726:	f7ff fe21 	bl	800d36c <rshift>
 800d72a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d72e:	1b76      	subs	r6, r6, r5
 800d730:	2502      	movs	r5, #2
 800d732:	f1b9 0f00 	cmp.w	r9, #0
 800d736:	d047      	beq.n	800d7c8 <__gethex+0x38c>
 800d738:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d73c:	2b02      	cmp	r3, #2
 800d73e:	d015      	beq.n	800d76c <__gethex+0x330>
 800d740:	2b03      	cmp	r3, #3
 800d742:	d017      	beq.n	800d774 <__gethex+0x338>
 800d744:	2b01      	cmp	r3, #1
 800d746:	d109      	bne.n	800d75c <__gethex+0x320>
 800d748:	f019 0f02 	tst.w	r9, #2
 800d74c:	d006      	beq.n	800d75c <__gethex+0x320>
 800d74e:	f8da 3000 	ldr.w	r3, [sl]
 800d752:	ea49 0903 	orr.w	r9, r9, r3
 800d756:	f019 0f01 	tst.w	r9, #1
 800d75a:	d10e      	bne.n	800d77a <__gethex+0x33e>
 800d75c:	f045 0510 	orr.w	r5, r5, #16
 800d760:	e032      	b.n	800d7c8 <__gethex+0x38c>
 800d762:	f04f 0901 	mov.w	r9, #1
 800d766:	e7d1      	b.n	800d70c <__gethex+0x2d0>
 800d768:	2501      	movs	r5, #1
 800d76a:	e7e2      	b.n	800d732 <__gethex+0x2f6>
 800d76c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d76e:	f1c3 0301 	rsb	r3, r3, #1
 800d772:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d776:	2b00      	cmp	r3, #0
 800d778:	d0f0      	beq.n	800d75c <__gethex+0x320>
 800d77a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d77e:	f104 0314 	add.w	r3, r4, #20
 800d782:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d786:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d78a:	f04f 0c00 	mov.w	ip, #0
 800d78e:	4618      	mov	r0, r3
 800d790:	f853 2b04 	ldr.w	r2, [r3], #4
 800d794:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d798:	d01b      	beq.n	800d7d2 <__gethex+0x396>
 800d79a:	3201      	adds	r2, #1
 800d79c:	6002      	str	r2, [r0, #0]
 800d79e:	2d02      	cmp	r5, #2
 800d7a0:	f104 0314 	add.w	r3, r4, #20
 800d7a4:	d13c      	bne.n	800d820 <__gethex+0x3e4>
 800d7a6:	f8d8 2000 	ldr.w	r2, [r8]
 800d7aa:	3a01      	subs	r2, #1
 800d7ac:	42b2      	cmp	r2, r6
 800d7ae:	d109      	bne.n	800d7c4 <__gethex+0x388>
 800d7b0:	1171      	asrs	r1, r6, #5
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d7b8:	f006 061f 	and.w	r6, r6, #31
 800d7bc:	fa02 f606 	lsl.w	r6, r2, r6
 800d7c0:	421e      	tst	r6, r3
 800d7c2:	d13a      	bne.n	800d83a <__gethex+0x3fe>
 800d7c4:	f045 0520 	orr.w	r5, r5, #32
 800d7c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7ca:	601c      	str	r4, [r3, #0]
 800d7cc:	9b02      	ldr	r3, [sp, #8]
 800d7ce:	601f      	str	r7, [r3, #0]
 800d7d0:	e6b0      	b.n	800d534 <__gethex+0xf8>
 800d7d2:	4299      	cmp	r1, r3
 800d7d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800d7d8:	d8d9      	bhi.n	800d78e <__gethex+0x352>
 800d7da:	68a3      	ldr	r3, [r4, #8]
 800d7dc:	459b      	cmp	fp, r3
 800d7de:	db17      	blt.n	800d810 <__gethex+0x3d4>
 800d7e0:	6861      	ldr	r1, [r4, #4]
 800d7e2:	9801      	ldr	r0, [sp, #4]
 800d7e4:	3101      	adds	r1, #1
 800d7e6:	f000 f951 	bl	800da8c <_Balloc>
 800d7ea:	4681      	mov	r9, r0
 800d7ec:	b918      	cbnz	r0, 800d7f6 <__gethex+0x3ba>
 800d7ee:	4b1a      	ldr	r3, [pc, #104]	@ (800d858 <__gethex+0x41c>)
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	2184      	movs	r1, #132	@ 0x84
 800d7f4:	e6c5      	b.n	800d582 <__gethex+0x146>
 800d7f6:	6922      	ldr	r2, [r4, #16]
 800d7f8:	3202      	adds	r2, #2
 800d7fa:	f104 010c 	add.w	r1, r4, #12
 800d7fe:	0092      	lsls	r2, r2, #2
 800d800:	300c      	adds	r0, #12
 800d802:	f7fe fef7 	bl	800c5f4 <memcpy>
 800d806:	4621      	mov	r1, r4
 800d808:	9801      	ldr	r0, [sp, #4]
 800d80a:	f000 f97f 	bl	800db0c <_Bfree>
 800d80e:	464c      	mov	r4, r9
 800d810:	6923      	ldr	r3, [r4, #16]
 800d812:	1c5a      	adds	r2, r3, #1
 800d814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d818:	6122      	str	r2, [r4, #16]
 800d81a:	2201      	movs	r2, #1
 800d81c:	615a      	str	r2, [r3, #20]
 800d81e:	e7be      	b.n	800d79e <__gethex+0x362>
 800d820:	6922      	ldr	r2, [r4, #16]
 800d822:	455a      	cmp	r2, fp
 800d824:	dd0b      	ble.n	800d83e <__gethex+0x402>
 800d826:	2101      	movs	r1, #1
 800d828:	4620      	mov	r0, r4
 800d82a:	f7ff fd9f 	bl	800d36c <rshift>
 800d82e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d832:	3701      	adds	r7, #1
 800d834:	42bb      	cmp	r3, r7
 800d836:	f6ff aee0 	blt.w	800d5fa <__gethex+0x1be>
 800d83a:	2501      	movs	r5, #1
 800d83c:	e7c2      	b.n	800d7c4 <__gethex+0x388>
 800d83e:	f016 061f 	ands.w	r6, r6, #31
 800d842:	d0fa      	beq.n	800d83a <__gethex+0x3fe>
 800d844:	4453      	add	r3, sl
 800d846:	f1c6 0620 	rsb	r6, r6, #32
 800d84a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d84e:	f000 fa0f 	bl	800dc70 <__hi0bits>
 800d852:	42b0      	cmp	r0, r6
 800d854:	dbe7      	blt.n	800d826 <__gethex+0x3ea>
 800d856:	e7f0      	b.n	800d83a <__gethex+0x3fe>
 800d858:	08011c88 	.word	0x08011c88

0800d85c <L_shift>:
 800d85c:	f1c2 0208 	rsb	r2, r2, #8
 800d860:	0092      	lsls	r2, r2, #2
 800d862:	b570      	push	{r4, r5, r6, lr}
 800d864:	f1c2 0620 	rsb	r6, r2, #32
 800d868:	6843      	ldr	r3, [r0, #4]
 800d86a:	6804      	ldr	r4, [r0, #0]
 800d86c:	fa03 f506 	lsl.w	r5, r3, r6
 800d870:	432c      	orrs	r4, r5
 800d872:	40d3      	lsrs	r3, r2
 800d874:	6004      	str	r4, [r0, #0]
 800d876:	f840 3f04 	str.w	r3, [r0, #4]!
 800d87a:	4288      	cmp	r0, r1
 800d87c:	d3f4      	bcc.n	800d868 <L_shift+0xc>
 800d87e:	bd70      	pop	{r4, r5, r6, pc}

0800d880 <__match>:
 800d880:	b530      	push	{r4, r5, lr}
 800d882:	6803      	ldr	r3, [r0, #0]
 800d884:	3301      	adds	r3, #1
 800d886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d88a:	b914      	cbnz	r4, 800d892 <__match+0x12>
 800d88c:	6003      	str	r3, [r0, #0]
 800d88e:	2001      	movs	r0, #1
 800d890:	bd30      	pop	{r4, r5, pc}
 800d892:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d896:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d89a:	2d19      	cmp	r5, #25
 800d89c:	bf98      	it	ls
 800d89e:	3220      	addls	r2, #32
 800d8a0:	42a2      	cmp	r2, r4
 800d8a2:	d0f0      	beq.n	800d886 <__match+0x6>
 800d8a4:	2000      	movs	r0, #0
 800d8a6:	e7f3      	b.n	800d890 <__match+0x10>

0800d8a8 <__hexnan>:
 800d8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ac:	680b      	ldr	r3, [r1, #0]
 800d8ae:	6801      	ldr	r1, [r0, #0]
 800d8b0:	115e      	asrs	r6, r3, #5
 800d8b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d8b6:	f013 031f 	ands.w	r3, r3, #31
 800d8ba:	b087      	sub	sp, #28
 800d8bc:	bf18      	it	ne
 800d8be:	3604      	addne	r6, #4
 800d8c0:	2500      	movs	r5, #0
 800d8c2:	1f37      	subs	r7, r6, #4
 800d8c4:	4682      	mov	sl, r0
 800d8c6:	4690      	mov	r8, r2
 800d8c8:	9301      	str	r3, [sp, #4]
 800d8ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800d8ce:	46b9      	mov	r9, r7
 800d8d0:	463c      	mov	r4, r7
 800d8d2:	9502      	str	r5, [sp, #8]
 800d8d4:	46ab      	mov	fp, r5
 800d8d6:	784a      	ldrb	r2, [r1, #1]
 800d8d8:	1c4b      	adds	r3, r1, #1
 800d8da:	9303      	str	r3, [sp, #12]
 800d8dc:	b342      	cbz	r2, 800d930 <__hexnan+0x88>
 800d8de:	4610      	mov	r0, r2
 800d8e0:	9105      	str	r1, [sp, #20]
 800d8e2:	9204      	str	r2, [sp, #16]
 800d8e4:	f7ff fd94 	bl	800d410 <__hexdig_fun>
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	d151      	bne.n	800d990 <__hexnan+0xe8>
 800d8ec:	9a04      	ldr	r2, [sp, #16]
 800d8ee:	9905      	ldr	r1, [sp, #20]
 800d8f0:	2a20      	cmp	r2, #32
 800d8f2:	d818      	bhi.n	800d926 <__hexnan+0x7e>
 800d8f4:	9b02      	ldr	r3, [sp, #8]
 800d8f6:	459b      	cmp	fp, r3
 800d8f8:	dd13      	ble.n	800d922 <__hexnan+0x7a>
 800d8fa:	454c      	cmp	r4, r9
 800d8fc:	d206      	bcs.n	800d90c <__hexnan+0x64>
 800d8fe:	2d07      	cmp	r5, #7
 800d900:	dc04      	bgt.n	800d90c <__hexnan+0x64>
 800d902:	462a      	mov	r2, r5
 800d904:	4649      	mov	r1, r9
 800d906:	4620      	mov	r0, r4
 800d908:	f7ff ffa8 	bl	800d85c <L_shift>
 800d90c:	4544      	cmp	r4, r8
 800d90e:	d952      	bls.n	800d9b6 <__hexnan+0x10e>
 800d910:	2300      	movs	r3, #0
 800d912:	f1a4 0904 	sub.w	r9, r4, #4
 800d916:	f844 3c04 	str.w	r3, [r4, #-4]
 800d91a:	f8cd b008 	str.w	fp, [sp, #8]
 800d91e:	464c      	mov	r4, r9
 800d920:	461d      	mov	r5, r3
 800d922:	9903      	ldr	r1, [sp, #12]
 800d924:	e7d7      	b.n	800d8d6 <__hexnan+0x2e>
 800d926:	2a29      	cmp	r2, #41	@ 0x29
 800d928:	d157      	bne.n	800d9da <__hexnan+0x132>
 800d92a:	3102      	adds	r1, #2
 800d92c:	f8ca 1000 	str.w	r1, [sl]
 800d930:	f1bb 0f00 	cmp.w	fp, #0
 800d934:	d051      	beq.n	800d9da <__hexnan+0x132>
 800d936:	454c      	cmp	r4, r9
 800d938:	d206      	bcs.n	800d948 <__hexnan+0xa0>
 800d93a:	2d07      	cmp	r5, #7
 800d93c:	dc04      	bgt.n	800d948 <__hexnan+0xa0>
 800d93e:	462a      	mov	r2, r5
 800d940:	4649      	mov	r1, r9
 800d942:	4620      	mov	r0, r4
 800d944:	f7ff ff8a 	bl	800d85c <L_shift>
 800d948:	4544      	cmp	r4, r8
 800d94a:	d936      	bls.n	800d9ba <__hexnan+0x112>
 800d94c:	f1a8 0204 	sub.w	r2, r8, #4
 800d950:	4623      	mov	r3, r4
 800d952:	f853 1b04 	ldr.w	r1, [r3], #4
 800d956:	f842 1f04 	str.w	r1, [r2, #4]!
 800d95a:	429f      	cmp	r7, r3
 800d95c:	d2f9      	bcs.n	800d952 <__hexnan+0xaa>
 800d95e:	1b3b      	subs	r3, r7, r4
 800d960:	f023 0303 	bic.w	r3, r3, #3
 800d964:	3304      	adds	r3, #4
 800d966:	3401      	adds	r4, #1
 800d968:	3e03      	subs	r6, #3
 800d96a:	42b4      	cmp	r4, r6
 800d96c:	bf88      	it	hi
 800d96e:	2304      	movhi	r3, #4
 800d970:	4443      	add	r3, r8
 800d972:	2200      	movs	r2, #0
 800d974:	f843 2b04 	str.w	r2, [r3], #4
 800d978:	429f      	cmp	r7, r3
 800d97a:	d2fb      	bcs.n	800d974 <__hexnan+0xcc>
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	b91b      	cbnz	r3, 800d988 <__hexnan+0xe0>
 800d980:	4547      	cmp	r7, r8
 800d982:	d128      	bne.n	800d9d6 <__hexnan+0x12e>
 800d984:	2301      	movs	r3, #1
 800d986:	603b      	str	r3, [r7, #0]
 800d988:	2005      	movs	r0, #5
 800d98a:	b007      	add	sp, #28
 800d98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d990:	3501      	adds	r5, #1
 800d992:	2d08      	cmp	r5, #8
 800d994:	f10b 0b01 	add.w	fp, fp, #1
 800d998:	dd06      	ble.n	800d9a8 <__hexnan+0x100>
 800d99a:	4544      	cmp	r4, r8
 800d99c:	d9c1      	bls.n	800d922 <__hexnan+0x7a>
 800d99e:	2300      	movs	r3, #0
 800d9a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800d9a4:	2501      	movs	r5, #1
 800d9a6:	3c04      	subs	r4, #4
 800d9a8:	6822      	ldr	r2, [r4, #0]
 800d9aa:	f000 000f 	and.w	r0, r0, #15
 800d9ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d9b2:	6020      	str	r0, [r4, #0]
 800d9b4:	e7b5      	b.n	800d922 <__hexnan+0x7a>
 800d9b6:	2508      	movs	r5, #8
 800d9b8:	e7b3      	b.n	800d922 <__hexnan+0x7a>
 800d9ba:	9b01      	ldr	r3, [sp, #4]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d0dd      	beq.n	800d97c <__hexnan+0xd4>
 800d9c0:	f1c3 0320 	rsb	r3, r3, #32
 800d9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c8:	40da      	lsrs	r2, r3
 800d9ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d9ce:	4013      	ands	r3, r2
 800d9d0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d9d4:	e7d2      	b.n	800d97c <__hexnan+0xd4>
 800d9d6:	3f04      	subs	r7, #4
 800d9d8:	e7d0      	b.n	800d97c <__hexnan+0xd4>
 800d9da:	2004      	movs	r0, #4
 800d9dc:	e7d5      	b.n	800d98a <__hexnan+0xe2>
	...

0800d9e0 <_findenv_r>:
 800d9e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800da54 <_findenv_r+0x74>
 800d9e8:	4606      	mov	r6, r0
 800d9ea:	4689      	mov	r9, r1
 800d9ec:	4617      	mov	r7, r2
 800d9ee:	f001 fb67 	bl	800f0c0 <__env_lock>
 800d9f2:	f8da 4000 	ldr.w	r4, [sl]
 800d9f6:	b134      	cbz	r4, 800da06 <_findenv_r+0x26>
 800d9f8:	464b      	mov	r3, r9
 800d9fa:	4698      	mov	r8, r3
 800d9fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da00:	b13a      	cbz	r2, 800da12 <_findenv_r+0x32>
 800da02:	2a3d      	cmp	r2, #61	@ 0x3d
 800da04:	d1f9      	bne.n	800d9fa <_findenv_r+0x1a>
 800da06:	4630      	mov	r0, r6
 800da08:	f001 fb60 	bl	800f0cc <__env_unlock>
 800da0c:	2000      	movs	r0, #0
 800da0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da12:	eba8 0809 	sub.w	r8, r8, r9
 800da16:	46a3      	mov	fp, r4
 800da18:	f854 0b04 	ldr.w	r0, [r4], #4
 800da1c:	2800      	cmp	r0, #0
 800da1e:	d0f2      	beq.n	800da06 <_findenv_r+0x26>
 800da20:	4642      	mov	r2, r8
 800da22:	4649      	mov	r1, r9
 800da24:	f7fd ffa7 	bl	800b976 <strncmp>
 800da28:	2800      	cmp	r0, #0
 800da2a:	d1f4      	bne.n	800da16 <_findenv_r+0x36>
 800da2c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800da30:	eb03 0508 	add.w	r5, r3, r8
 800da34:	f813 3008 	ldrb.w	r3, [r3, r8]
 800da38:	2b3d      	cmp	r3, #61	@ 0x3d
 800da3a:	d1ec      	bne.n	800da16 <_findenv_r+0x36>
 800da3c:	f8da 3000 	ldr.w	r3, [sl]
 800da40:	ebab 0303 	sub.w	r3, fp, r3
 800da44:	109b      	asrs	r3, r3, #2
 800da46:	4630      	mov	r0, r6
 800da48:	603b      	str	r3, [r7, #0]
 800da4a:	f001 fb3f 	bl	800f0cc <__env_unlock>
 800da4e:	1c68      	adds	r0, r5, #1
 800da50:	e7dd      	b.n	800da0e <_findenv_r+0x2e>
 800da52:	bf00      	nop
 800da54:	2000000c 	.word	0x2000000c

0800da58 <_getenv_r>:
 800da58:	b507      	push	{r0, r1, r2, lr}
 800da5a:	aa01      	add	r2, sp, #4
 800da5c:	f7ff ffc0 	bl	800d9e0 <_findenv_r>
 800da60:	b003      	add	sp, #12
 800da62:	f85d fb04 	ldr.w	pc, [sp], #4

0800da66 <__ascii_mbtowc>:
 800da66:	b082      	sub	sp, #8
 800da68:	b901      	cbnz	r1, 800da6c <__ascii_mbtowc+0x6>
 800da6a:	a901      	add	r1, sp, #4
 800da6c:	b142      	cbz	r2, 800da80 <__ascii_mbtowc+0x1a>
 800da6e:	b14b      	cbz	r3, 800da84 <__ascii_mbtowc+0x1e>
 800da70:	7813      	ldrb	r3, [r2, #0]
 800da72:	600b      	str	r3, [r1, #0]
 800da74:	7812      	ldrb	r2, [r2, #0]
 800da76:	1e10      	subs	r0, r2, #0
 800da78:	bf18      	it	ne
 800da7a:	2001      	movne	r0, #1
 800da7c:	b002      	add	sp, #8
 800da7e:	4770      	bx	lr
 800da80:	4610      	mov	r0, r2
 800da82:	e7fb      	b.n	800da7c <__ascii_mbtowc+0x16>
 800da84:	f06f 0001 	mvn.w	r0, #1
 800da88:	e7f8      	b.n	800da7c <__ascii_mbtowc+0x16>
	...

0800da8c <_Balloc>:
 800da8c:	b570      	push	{r4, r5, r6, lr}
 800da8e:	69c6      	ldr	r6, [r0, #28]
 800da90:	4604      	mov	r4, r0
 800da92:	460d      	mov	r5, r1
 800da94:	b976      	cbnz	r6, 800dab4 <_Balloc+0x28>
 800da96:	2010      	movs	r0, #16
 800da98:	f7fb ffe0 	bl	8009a5c <malloc>
 800da9c:	4602      	mov	r2, r0
 800da9e:	61e0      	str	r0, [r4, #28]
 800daa0:	b920      	cbnz	r0, 800daac <_Balloc+0x20>
 800daa2:	4b18      	ldr	r3, [pc, #96]	@ (800db04 <_Balloc+0x78>)
 800daa4:	4818      	ldr	r0, [pc, #96]	@ (800db08 <_Balloc+0x7c>)
 800daa6:	216b      	movs	r1, #107	@ 0x6b
 800daa8:	f001 fad8 	bl	800f05c <__assert_func>
 800daac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dab0:	6006      	str	r6, [r0, #0]
 800dab2:	60c6      	str	r6, [r0, #12]
 800dab4:	69e6      	ldr	r6, [r4, #28]
 800dab6:	68f3      	ldr	r3, [r6, #12]
 800dab8:	b183      	cbz	r3, 800dadc <_Balloc+0x50>
 800daba:	69e3      	ldr	r3, [r4, #28]
 800dabc:	68db      	ldr	r3, [r3, #12]
 800dabe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dac2:	b9b8      	cbnz	r0, 800daf4 <_Balloc+0x68>
 800dac4:	2101      	movs	r1, #1
 800dac6:	fa01 f605 	lsl.w	r6, r1, r5
 800daca:	1d72      	adds	r2, r6, #5
 800dacc:	0092      	lsls	r2, r2, #2
 800dace:	4620      	mov	r0, r4
 800dad0:	f001 fae2 	bl	800f098 <_calloc_r>
 800dad4:	b160      	cbz	r0, 800daf0 <_Balloc+0x64>
 800dad6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dada:	e00e      	b.n	800dafa <_Balloc+0x6e>
 800dadc:	2221      	movs	r2, #33	@ 0x21
 800dade:	2104      	movs	r1, #4
 800dae0:	4620      	mov	r0, r4
 800dae2:	f001 fad9 	bl	800f098 <_calloc_r>
 800dae6:	69e3      	ldr	r3, [r4, #28]
 800dae8:	60f0      	str	r0, [r6, #12]
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d1e4      	bne.n	800daba <_Balloc+0x2e>
 800daf0:	2000      	movs	r0, #0
 800daf2:	bd70      	pop	{r4, r5, r6, pc}
 800daf4:	6802      	ldr	r2, [r0, #0]
 800daf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dafa:	2300      	movs	r3, #0
 800dafc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db00:	e7f7      	b.n	800daf2 <_Balloc+0x66>
 800db02:	bf00      	nop
 800db04:	08011c19 	.word	0x08011c19
 800db08:	08011cf9 	.word	0x08011cf9

0800db0c <_Bfree>:
 800db0c:	b570      	push	{r4, r5, r6, lr}
 800db0e:	69c6      	ldr	r6, [r0, #28]
 800db10:	4605      	mov	r5, r0
 800db12:	460c      	mov	r4, r1
 800db14:	b976      	cbnz	r6, 800db34 <_Bfree+0x28>
 800db16:	2010      	movs	r0, #16
 800db18:	f7fb ffa0 	bl	8009a5c <malloc>
 800db1c:	4602      	mov	r2, r0
 800db1e:	61e8      	str	r0, [r5, #28]
 800db20:	b920      	cbnz	r0, 800db2c <_Bfree+0x20>
 800db22:	4b09      	ldr	r3, [pc, #36]	@ (800db48 <_Bfree+0x3c>)
 800db24:	4809      	ldr	r0, [pc, #36]	@ (800db4c <_Bfree+0x40>)
 800db26:	218f      	movs	r1, #143	@ 0x8f
 800db28:	f001 fa98 	bl	800f05c <__assert_func>
 800db2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db30:	6006      	str	r6, [r0, #0]
 800db32:	60c6      	str	r6, [r0, #12]
 800db34:	b13c      	cbz	r4, 800db46 <_Bfree+0x3a>
 800db36:	69eb      	ldr	r3, [r5, #28]
 800db38:	6862      	ldr	r2, [r4, #4]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db40:	6021      	str	r1, [r4, #0]
 800db42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800db46:	bd70      	pop	{r4, r5, r6, pc}
 800db48:	08011c19 	.word	0x08011c19
 800db4c:	08011cf9 	.word	0x08011cf9

0800db50 <__multadd>:
 800db50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db54:	690d      	ldr	r5, [r1, #16]
 800db56:	4607      	mov	r7, r0
 800db58:	460c      	mov	r4, r1
 800db5a:	461e      	mov	r6, r3
 800db5c:	f101 0c14 	add.w	ip, r1, #20
 800db60:	2000      	movs	r0, #0
 800db62:	f8dc 3000 	ldr.w	r3, [ip]
 800db66:	b299      	uxth	r1, r3
 800db68:	fb02 6101 	mla	r1, r2, r1, r6
 800db6c:	0c1e      	lsrs	r6, r3, #16
 800db6e:	0c0b      	lsrs	r3, r1, #16
 800db70:	fb02 3306 	mla	r3, r2, r6, r3
 800db74:	b289      	uxth	r1, r1
 800db76:	3001      	adds	r0, #1
 800db78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db7c:	4285      	cmp	r5, r0
 800db7e:	f84c 1b04 	str.w	r1, [ip], #4
 800db82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db86:	dcec      	bgt.n	800db62 <__multadd+0x12>
 800db88:	b30e      	cbz	r6, 800dbce <__multadd+0x7e>
 800db8a:	68a3      	ldr	r3, [r4, #8]
 800db8c:	42ab      	cmp	r3, r5
 800db8e:	dc19      	bgt.n	800dbc4 <__multadd+0x74>
 800db90:	6861      	ldr	r1, [r4, #4]
 800db92:	4638      	mov	r0, r7
 800db94:	3101      	adds	r1, #1
 800db96:	f7ff ff79 	bl	800da8c <_Balloc>
 800db9a:	4680      	mov	r8, r0
 800db9c:	b928      	cbnz	r0, 800dbaa <__multadd+0x5a>
 800db9e:	4602      	mov	r2, r0
 800dba0:	4b0c      	ldr	r3, [pc, #48]	@ (800dbd4 <__multadd+0x84>)
 800dba2:	480d      	ldr	r0, [pc, #52]	@ (800dbd8 <__multadd+0x88>)
 800dba4:	21ba      	movs	r1, #186	@ 0xba
 800dba6:	f001 fa59 	bl	800f05c <__assert_func>
 800dbaa:	6922      	ldr	r2, [r4, #16]
 800dbac:	3202      	adds	r2, #2
 800dbae:	f104 010c 	add.w	r1, r4, #12
 800dbb2:	0092      	lsls	r2, r2, #2
 800dbb4:	300c      	adds	r0, #12
 800dbb6:	f7fe fd1d 	bl	800c5f4 <memcpy>
 800dbba:	4621      	mov	r1, r4
 800dbbc:	4638      	mov	r0, r7
 800dbbe:	f7ff ffa5 	bl	800db0c <_Bfree>
 800dbc2:	4644      	mov	r4, r8
 800dbc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dbc8:	3501      	adds	r5, #1
 800dbca:	615e      	str	r6, [r3, #20]
 800dbcc:	6125      	str	r5, [r4, #16]
 800dbce:	4620      	mov	r0, r4
 800dbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd4:	08011c88 	.word	0x08011c88
 800dbd8:	08011cf9 	.word	0x08011cf9

0800dbdc <__s2b>:
 800dbdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbe0:	460c      	mov	r4, r1
 800dbe2:	4615      	mov	r5, r2
 800dbe4:	461f      	mov	r7, r3
 800dbe6:	2209      	movs	r2, #9
 800dbe8:	3308      	adds	r3, #8
 800dbea:	4606      	mov	r6, r0
 800dbec:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	db09      	blt.n	800dc0c <__s2b+0x30>
 800dbf8:	4630      	mov	r0, r6
 800dbfa:	f7ff ff47 	bl	800da8c <_Balloc>
 800dbfe:	b940      	cbnz	r0, 800dc12 <__s2b+0x36>
 800dc00:	4602      	mov	r2, r0
 800dc02:	4b19      	ldr	r3, [pc, #100]	@ (800dc68 <__s2b+0x8c>)
 800dc04:	4819      	ldr	r0, [pc, #100]	@ (800dc6c <__s2b+0x90>)
 800dc06:	21d3      	movs	r1, #211	@ 0xd3
 800dc08:	f001 fa28 	bl	800f05c <__assert_func>
 800dc0c:	0052      	lsls	r2, r2, #1
 800dc0e:	3101      	adds	r1, #1
 800dc10:	e7f0      	b.n	800dbf4 <__s2b+0x18>
 800dc12:	9b08      	ldr	r3, [sp, #32]
 800dc14:	6143      	str	r3, [r0, #20]
 800dc16:	2d09      	cmp	r5, #9
 800dc18:	f04f 0301 	mov.w	r3, #1
 800dc1c:	6103      	str	r3, [r0, #16]
 800dc1e:	dd16      	ble.n	800dc4e <__s2b+0x72>
 800dc20:	f104 0909 	add.w	r9, r4, #9
 800dc24:	46c8      	mov	r8, r9
 800dc26:	442c      	add	r4, r5
 800dc28:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dc2c:	4601      	mov	r1, r0
 800dc2e:	3b30      	subs	r3, #48	@ 0x30
 800dc30:	220a      	movs	r2, #10
 800dc32:	4630      	mov	r0, r6
 800dc34:	f7ff ff8c 	bl	800db50 <__multadd>
 800dc38:	45a0      	cmp	r8, r4
 800dc3a:	d1f5      	bne.n	800dc28 <__s2b+0x4c>
 800dc3c:	f1a5 0408 	sub.w	r4, r5, #8
 800dc40:	444c      	add	r4, r9
 800dc42:	1b2d      	subs	r5, r5, r4
 800dc44:	1963      	adds	r3, r4, r5
 800dc46:	42bb      	cmp	r3, r7
 800dc48:	db04      	blt.n	800dc54 <__s2b+0x78>
 800dc4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc4e:	340a      	adds	r4, #10
 800dc50:	2509      	movs	r5, #9
 800dc52:	e7f6      	b.n	800dc42 <__s2b+0x66>
 800dc54:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dc58:	4601      	mov	r1, r0
 800dc5a:	3b30      	subs	r3, #48	@ 0x30
 800dc5c:	220a      	movs	r2, #10
 800dc5e:	4630      	mov	r0, r6
 800dc60:	f7ff ff76 	bl	800db50 <__multadd>
 800dc64:	e7ee      	b.n	800dc44 <__s2b+0x68>
 800dc66:	bf00      	nop
 800dc68:	08011c88 	.word	0x08011c88
 800dc6c:	08011cf9 	.word	0x08011cf9

0800dc70 <__hi0bits>:
 800dc70:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dc74:	4603      	mov	r3, r0
 800dc76:	bf36      	itet	cc
 800dc78:	0403      	lslcc	r3, r0, #16
 800dc7a:	2000      	movcs	r0, #0
 800dc7c:	2010      	movcc	r0, #16
 800dc7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dc82:	bf3c      	itt	cc
 800dc84:	021b      	lslcc	r3, r3, #8
 800dc86:	3008      	addcc	r0, #8
 800dc88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc8c:	bf3c      	itt	cc
 800dc8e:	011b      	lslcc	r3, r3, #4
 800dc90:	3004      	addcc	r0, #4
 800dc92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc96:	bf3c      	itt	cc
 800dc98:	009b      	lslcc	r3, r3, #2
 800dc9a:	3002      	addcc	r0, #2
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	db05      	blt.n	800dcac <__hi0bits+0x3c>
 800dca0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dca4:	f100 0001 	add.w	r0, r0, #1
 800dca8:	bf08      	it	eq
 800dcaa:	2020      	moveq	r0, #32
 800dcac:	4770      	bx	lr

0800dcae <__lo0bits>:
 800dcae:	6803      	ldr	r3, [r0, #0]
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	f013 0007 	ands.w	r0, r3, #7
 800dcb6:	d00b      	beq.n	800dcd0 <__lo0bits+0x22>
 800dcb8:	07d9      	lsls	r1, r3, #31
 800dcba:	d421      	bmi.n	800dd00 <__lo0bits+0x52>
 800dcbc:	0798      	lsls	r0, r3, #30
 800dcbe:	bf49      	itett	mi
 800dcc0:	085b      	lsrmi	r3, r3, #1
 800dcc2:	089b      	lsrpl	r3, r3, #2
 800dcc4:	2001      	movmi	r0, #1
 800dcc6:	6013      	strmi	r3, [r2, #0]
 800dcc8:	bf5c      	itt	pl
 800dcca:	6013      	strpl	r3, [r2, #0]
 800dccc:	2002      	movpl	r0, #2
 800dcce:	4770      	bx	lr
 800dcd0:	b299      	uxth	r1, r3
 800dcd2:	b909      	cbnz	r1, 800dcd8 <__lo0bits+0x2a>
 800dcd4:	0c1b      	lsrs	r3, r3, #16
 800dcd6:	2010      	movs	r0, #16
 800dcd8:	b2d9      	uxtb	r1, r3
 800dcda:	b909      	cbnz	r1, 800dce0 <__lo0bits+0x32>
 800dcdc:	3008      	adds	r0, #8
 800dcde:	0a1b      	lsrs	r3, r3, #8
 800dce0:	0719      	lsls	r1, r3, #28
 800dce2:	bf04      	itt	eq
 800dce4:	091b      	lsreq	r3, r3, #4
 800dce6:	3004      	addeq	r0, #4
 800dce8:	0799      	lsls	r1, r3, #30
 800dcea:	bf04      	itt	eq
 800dcec:	089b      	lsreq	r3, r3, #2
 800dcee:	3002      	addeq	r0, #2
 800dcf0:	07d9      	lsls	r1, r3, #31
 800dcf2:	d403      	bmi.n	800dcfc <__lo0bits+0x4e>
 800dcf4:	085b      	lsrs	r3, r3, #1
 800dcf6:	f100 0001 	add.w	r0, r0, #1
 800dcfa:	d003      	beq.n	800dd04 <__lo0bits+0x56>
 800dcfc:	6013      	str	r3, [r2, #0]
 800dcfe:	4770      	bx	lr
 800dd00:	2000      	movs	r0, #0
 800dd02:	4770      	bx	lr
 800dd04:	2020      	movs	r0, #32
 800dd06:	4770      	bx	lr

0800dd08 <__i2b>:
 800dd08:	b510      	push	{r4, lr}
 800dd0a:	460c      	mov	r4, r1
 800dd0c:	2101      	movs	r1, #1
 800dd0e:	f7ff febd 	bl	800da8c <_Balloc>
 800dd12:	4602      	mov	r2, r0
 800dd14:	b928      	cbnz	r0, 800dd22 <__i2b+0x1a>
 800dd16:	4b05      	ldr	r3, [pc, #20]	@ (800dd2c <__i2b+0x24>)
 800dd18:	4805      	ldr	r0, [pc, #20]	@ (800dd30 <__i2b+0x28>)
 800dd1a:	f240 1145 	movw	r1, #325	@ 0x145
 800dd1e:	f001 f99d 	bl	800f05c <__assert_func>
 800dd22:	2301      	movs	r3, #1
 800dd24:	6144      	str	r4, [r0, #20]
 800dd26:	6103      	str	r3, [r0, #16]
 800dd28:	bd10      	pop	{r4, pc}
 800dd2a:	bf00      	nop
 800dd2c:	08011c88 	.word	0x08011c88
 800dd30:	08011cf9 	.word	0x08011cf9

0800dd34 <__multiply>:
 800dd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd38:	4614      	mov	r4, r2
 800dd3a:	690a      	ldr	r2, [r1, #16]
 800dd3c:	6923      	ldr	r3, [r4, #16]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	bfa8      	it	ge
 800dd42:	4623      	movge	r3, r4
 800dd44:	460f      	mov	r7, r1
 800dd46:	bfa4      	itt	ge
 800dd48:	460c      	movge	r4, r1
 800dd4a:	461f      	movge	r7, r3
 800dd4c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dd50:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dd54:	68a3      	ldr	r3, [r4, #8]
 800dd56:	6861      	ldr	r1, [r4, #4]
 800dd58:	eb0a 0609 	add.w	r6, sl, r9
 800dd5c:	42b3      	cmp	r3, r6
 800dd5e:	b085      	sub	sp, #20
 800dd60:	bfb8      	it	lt
 800dd62:	3101      	addlt	r1, #1
 800dd64:	f7ff fe92 	bl	800da8c <_Balloc>
 800dd68:	b930      	cbnz	r0, 800dd78 <__multiply+0x44>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	4b44      	ldr	r3, [pc, #272]	@ (800de80 <__multiply+0x14c>)
 800dd6e:	4845      	ldr	r0, [pc, #276]	@ (800de84 <__multiply+0x150>)
 800dd70:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dd74:	f001 f972 	bl	800f05c <__assert_func>
 800dd78:	f100 0514 	add.w	r5, r0, #20
 800dd7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dd80:	462b      	mov	r3, r5
 800dd82:	2200      	movs	r2, #0
 800dd84:	4543      	cmp	r3, r8
 800dd86:	d321      	bcc.n	800ddcc <__multiply+0x98>
 800dd88:	f107 0114 	add.w	r1, r7, #20
 800dd8c:	f104 0214 	add.w	r2, r4, #20
 800dd90:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dd94:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dd98:	9302      	str	r3, [sp, #8]
 800dd9a:	1b13      	subs	r3, r2, r4
 800dd9c:	3b15      	subs	r3, #21
 800dd9e:	f023 0303 	bic.w	r3, r3, #3
 800dda2:	3304      	adds	r3, #4
 800dda4:	f104 0715 	add.w	r7, r4, #21
 800dda8:	42ba      	cmp	r2, r7
 800ddaa:	bf38      	it	cc
 800ddac:	2304      	movcc	r3, #4
 800ddae:	9301      	str	r3, [sp, #4]
 800ddb0:	9b02      	ldr	r3, [sp, #8]
 800ddb2:	9103      	str	r1, [sp, #12]
 800ddb4:	428b      	cmp	r3, r1
 800ddb6:	d80c      	bhi.n	800ddd2 <__multiply+0x9e>
 800ddb8:	2e00      	cmp	r6, #0
 800ddba:	dd03      	ble.n	800ddc4 <__multiply+0x90>
 800ddbc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d05b      	beq.n	800de7c <__multiply+0x148>
 800ddc4:	6106      	str	r6, [r0, #16]
 800ddc6:	b005      	add	sp, #20
 800ddc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddcc:	f843 2b04 	str.w	r2, [r3], #4
 800ddd0:	e7d8      	b.n	800dd84 <__multiply+0x50>
 800ddd2:	f8b1 a000 	ldrh.w	sl, [r1]
 800ddd6:	f1ba 0f00 	cmp.w	sl, #0
 800ddda:	d024      	beq.n	800de26 <__multiply+0xf2>
 800dddc:	f104 0e14 	add.w	lr, r4, #20
 800dde0:	46a9      	mov	r9, r5
 800dde2:	f04f 0c00 	mov.w	ip, #0
 800dde6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ddea:	f8d9 3000 	ldr.w	r3, [r9]
 800ddee:	fa1f fb87 	uxth.w	fp, r7
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	fb0a 330b 	mla	r3, sl, fp, r3
 800ddf8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ddfc:	f8d9 7000 	ldr.w	r7, [r9]
 800de00:	4463      	add	r3, ip
 800de02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800de06:	fb0a c70b 	mla	r7, sl, fp, ip
 800de0a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800de0e:	b29b      	uxth	r3, r3
 800de10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800de14:	4572      	cmp	r2, lr
 800de16:	f849 3b04 	str.w	r3, [r9], #4
 800de1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800de1e:	d8e2      	bhi.n	800dde6 <__multiply+0xb2>
 800de20:	9b01      	ldr	r3, [sp, #4]
 800de22:	f845 c003 	str.w	ip, [r5, r3]
 800de26:	9b03      	ldr	r3, [sp, #12]
 800de28:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800de2c:	3104      	adds	r1, #4
 800de2e:	f1b9 0f00 	cmp.w	r9, #0
 800de32:	d021      	beq.n	800de78 <__multiply+0x144>
 800de34:	682b      	ldr	r3, [r5, #0]
 800de36:	f104 0c14 	add.w	ip, r4, #20
 800de3a:	46ae      	mov	lr, r5
 800de3c:	f04f 0a00 	mov.w	sl, #0
 800de40:	f8bc b000 	ldrh.w	fp, [ip]
 800de44:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800de48:	fb09 770b 	mla	r7, r9, fp, r7
 800de4c:	4457      	add	r7, sl
 800de4e:	b29b      	uxth	r3, r3
 800de50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800de54:	f84e 3b04 	str.w	r3, [lr], #4
 800de58:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de60:	f8be 3000 	ldrh.w	r3, [lr]
 800de64:	fb09 330a 	mla	r3, r9, sl, r3
 800de68:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800de6c:	4562      	cmp	r2, ip
 800de6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de72:	d8e5      	bhi.n	800de40 <__multiply+0x10c>
 800de74:	9f01      	ldr	r7, [sp, #4]
 800de76:	51eb      	str	r3, [r5, r7]
 800de78:	3504      	adds	r5, #4
 800de7a:	e799      	b.n	800ddb0 <__multiply+0x7c>
 800de7c:	3e01      	subs	r6, #1
 800de7e:	e79b      	b.n	800ddb8 <__multiply+0x84>
 800de80:	08011c88 	.word	0x08011c88
 800de84:	08011cf9 	.word	0x08011cf9

0800de88 <__pow5mult>:
 800de88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de8c:	4615      	mov	r5, r2
 800de8e:	f012 0203 	ands.w	r2, r2, #3
 800de92:	4607      	mov	r7, r0
 800de94:	460e      	mov	r6, r1
 800de96:	d007      	beq.n	800dea8 <__pow5mult+0x20>
 800de98:	4c25      	ldr	r4, [pc, #148]	@ (800df30 <__pow5mult+0xa8>)
 800de9a:	3a01      	subs	r2, #1
 800de9c:	2300      	movs	r3, #0
 800de9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dea2:	f7ff fe55 	bl	800db50 <__multadd>
 800dea6:	4606      	mov	r6, r0
 800dea8:	10ad      	asrs	r5, r5, #2
 800deaa:	d03d      	beq.n	800df28 <__pow5mult+0xa0>
 800deac:	69fc      	ldr	r4, [r7, #28]
 800deae:	b97c      	cbnz	r4, 800ded0 <__pow5mult+0x48>
 800deb0:	2010      	movs	r0, #16
 800deb2:	f7fb fdd3 	bl	8009a5c <malloc>
 800deb6:	4602      	mov	r2, r0
 800deb8:	61f8      	str	r0, [r7, #28]
 800deba:	b928      	cbnz	r0, 800dec8 <__pow5mult+0x40>
 800debc:	4b1d      	ldr	r3, [pc, #116]	@ (800df34 <__pow5mult+0xac>)
 800debe:	481e      	ldr	r0, [pc, #120]	@ (800df38 <__pow5mult+0xb0>)
 800dec0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dec4:	f001 f8ca 	bl	800f05c <__assert_func>
 800dec8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800decc:	6004      	str	r4, [r0, #0]
 800dece:	60c4      	str	r4, [r0, #12]
 800ded0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ded4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ded8:	b94c      	cbnz	r4, 800deee <__pow5mult+0x66>
 800deda:	f240 2171 	movw	r1, #625	@ 0x271
 800dede:	4638      	mov	r0, r7
 800dee0:	f7ff ff12 	bl	800dd08 <__i2b>
 800dee4:	2300      	movs	r3, #0
 800dee6:	f8c8 0008 	str.w	r0, [r8, #8]
 800deea:	4604      	mov	r4, r0
 800deec:	6003      	str	r3, [r0, #0]
 800deee:	f04f 0900 	mov.w	r9, #0
 800def2:	07eb      	lsls	r3, r5, #31
 800def4:	d50a      	bpl.n	800df0c <__pow5mult+0x84>
 800def6:	4631      	mov	r1, r6
 800def8:	4622      	mov	r2, r4
 800defa:	4638      	mov	r0, r7
 800defc:	f7ff ff1a 	bl	800dd34 <__multiply>
 800df00:	4631      	mov	r1, r6
 800df02:	4680      	mov	r8, r0
 800df04:	4638      	mov	r0, r7
 800df06:	f7ff fe01 	bl	800db0c <_Bfree>
 800df0a:	4646      	mov	r6, r8
 800df0c:	106d      	asrs	r5, r5, #1
 800df0e:	d00b      	beq.n	800df28 <__pow5mult+0xa0>
 800df10:	6820      	ldr	r0, [r4, #0]
 800df12:	b938      	cbnz	r0, 800df24 <__pow5mult+0x9c>
 800df14:	4622      	mov	r2, r4
 800df16:	4621      	mov	r1, r4
 800df18:	4638      	mov	r0, r7
 800df1a:	f7ff ff0b 	bl	800dd34 <__multiply>
 800df1e:	6020      	str	r0, [r4, #0]
 800df20:	f8c0 9000 	str.w	r9, [r0]
 800df24:	4604      	mov	r4, r0
 800df26:	e7e4      	b.n	800def2 <__pow5mult+0x6a>
 800df28:	4630      	mov	r0, r6
 800df2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df2e:	bf00      	nop
 800df30:	08011d54 	.word	0x08011d54
 800df34:	08011c19 	.word	0x08011c19
 800df38:	08011cf9 	.word	0x08011cf9

0800df3c <__lshift>:
 800df3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df40:	460c      	mov	r4, r1
 800df42:	6849      	ldr	r1, [r1, #4]
 800df44:	6923      	ldr	r3, [r4, #16]
 800df46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df4a:	68a3      	ldr	r3, [r4, #8]
 800df4c:	4607      	mov	r7, r0
 800df4e:	4691      	mov	r9, r2
 800df50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df54:	f108 0601 	add.w	r6, r8, #1
 800df58:	42b3      	cmp	r3, r6
 800df5a:	db0b      	blt.n	800df74 <__lshift+0x38>
 800df5c:	4638      	mov	r0, r7
 800df5e:	f7ff fd95 	bl	800da8c <_Balloc>
 800df62:	4605      	mov	r5, r0
 800df64:	b948      	cbnz	r0, 800df7a <__lshift+0x3e>
 800df66:	4602      	mov	r2, r0
 800df68:	4b28      	ldr	r3, [pc, #160]	@ (800e00c <__lshift+0xd0>)
 800df6a:	4829      	ldr	r0, [pc, #164]	@ (800e010 <__lshift+0xd4>)
 800df6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800df70:	f001 f874 	bl	800f05c <__assert_func>
 800df74:	3101      	adds	r1, #1
 800df76:	005b      	lsls	r3, r3, #1
 800df78:	e7ee      	b.n	800df58 <__lshift+0x1c>
 800df7a:	2300      	movs	r3, #0
 800df7c:	f100 0114 	add.w	r1, r0, #20
 800df80:	f100 0210 	add.w	r2, r0, #16
 800df84:	4618      	mov	r0, r3
 800df86:	4553      	cmp	r3, sl
 800df88:	db33      	blt.n	800dff2 <__lshift+0xb6>
 800df8a:	6920      	ldr	r0, [r4, #16]
 800df8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df90:	f104 0314 	add.w	r3, r4, #20
 800df94:	f019 091f 	ands.w	r9, r9, #31
 800df98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800df9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dfa0:	d02b      	beq.n	800dffa <__lshift+0xbe>
 800dfa2:	f1c9 0e20 	rsb	lr, r9, #32
 800dfa6:	468a      	mov	sl, r1
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	6818      	ldr	r0, [r3, #0]
 800dfac:	fa00 f009 	lsl.w	r0, r0, r9
 800dfb0:	4310      	orrs	r0, r2
 800dfb2:	f84a 0b04 	str.w	r0, [sl], #4
 800dfb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfba:	459c      	cmp	ip, r3
 800dfbc:	fa22 f20e 	lsr.w	r2, r2, lr
 800dfc0:	d8f3      	bhi.n	800dfaa <__lshift+0x6e>
 800dfc2:	ebac 0304 	sub.w	r3, ip, r4
 800dfc6:	3b15      	subs	r3, #21
 800dfc8:	f023 0303 	bic.w	r3, r3, #3
 800dfcc:	3304      	adds	r3, #4
 800dfce:	f104 0015 	add.w	r0, r4, #21
 800dfd2:	4584      	cmp	ip, r0
 800dfd4:	bf38      	it	cc
 800dfd6:	2304      	movcc	r3, #4
 800dfd8:	50ca      	str	r2, [r1, r3]
 800dfda:	b10a      	cbz	r2, 800dfe0 <__lshift+0xa4>
 800dfdc:	f108 0602 	add.w	r6, r8, #2
 800dfe0:	3e01      	subs	r6, #1
 800dfe2:	4638      	mov	r0, r7
 800dfe4:	612e      	str	r6, [r5, #16]
 800dfe6:	4621      	mov	r1, r4
 800dfe8:	f7ff fd90 	bl	800db0c <_Bfree>
 800dfec:	4628      	mov	r0, r5
 800dfee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dff2:	f842 0f04 	str.w	r0, [r2, #4]!
 800dff6:	3301      	adds	r3, #1
 800dff8:	e7c5      	b.n	800df86 <__lshift+0x4a>
 800dffa:	3904      	subs	r1, #4
 800dffc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e000:	f841 2f04 	str.w	r2, [r1, #4]!
 800e004:	459c      	cmp	ip, r3
 800e006:	d8f9      	bhi.n	800dffc <__lshift+0xc0>
 800e008:	e7ea      	b.n	800dfe0 <__lshift+0xa4>
 800e00a:	bf00      	nop
 800e00c:	08011c88 	.word	0x08011c88
 800e010:	08011cf9 	.word	0x08011cf9

0800e014 <__mcmp>:
 800e014:	690a      	ldr	r2, [r1, #16]
 800e016:	4603      	mov	r3, r0
 800e018:	6900      	ldr	r0, [r0, #16]
 800e01a:	1a80      	subs	r0, r0, r2
 800e01c:	b530      	push	{r4, r5, lr}
 800e01e:	d10e      	bne.n	800e03e <__mcmp+0x2a>
 800e020:	3314      	adds	r3, #20
 800e022:	3114      	adds	r1, #20
 800e024:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e028:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e02c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e030:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e034:	4295      	cmp	r5, r2
 800e036:	d003      	beq.n	800e040 <__mcmp+0x2c>
 800e038:	d205      	bcs.n	800e046 <__mcmp+0x32>
 800e03a:	f04f 30ff 	mov.w	r0, #4294967295
 800e03e:	bd30      	pop	{r4, r5, pc}
 800e040:	42a3      	cmp	r3, r4
 800e042:	d3f3      	bcc.n	800e02c <__mcmp+0x18>
 800e044:	e7fb      	b.n	800e03e <__mcmp+0x2a>
 800e046:	2001      	movs	r0, #1
 800e048:	e7f9      	b.n	800e03e <__mcmp+0x2a>
	...

0800e04c <__mdiff>:
 800e04c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e050:	4689      	mov	r9, r1
 800e052:	4606      	mov	r6, r0
 800e054:	4611      	mov	r1, r2
 800e056:	4648      	mov	r0, r9
 800e058:	4614      	mov	r4, r2
 800e05a:	f7ff ffdb 	bl	800e014 <__mcmp>
 800e05e:	1e05      	subs	r5, r0, #0
 800e060:	d112      	bne.n	800e088 <__mdiff+0x3c>
 800e062:	4629      	mov	r1, r5
 800e064:	4630      	mov	r0, r6
 800e066:	f7ff fd11 	bl	800da8c <_Balloc>
 800e06a:	4602      	mov	r2, r0
 800e06c:	b928      	cbnz	r0, 800e07a <__mdiff+0x2e>
 800e06e:	4b3f      	ldr	r3, [pc, #252]	@ (800e16c <__mdiff+0x120>)
 800e070:	f240 2137 	movw	r1, #567	@ 0x237
 800e074:	483e      	ldr	r0, [pc, #248]	@ (800e170 <__mdiff+0x124>)
 800e076:	f000 fff1 	bl	800f05c <__assert_func>
 800e07a:	2301      	movs	r3, #1
 800e07c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e080:	4610      	mov	r0, r2
 800e082:	b003      	add	sp, #12
 800e084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e088:	bfbc      	itt	lt
 800e08a:	464b      	movlt	r3, r9
 800e08c:	46a1      	movlt	r9, r4
 800e08e:	4630      	mov	r0, r6
 800e090:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e094:	bfba      	itte	lt
 800e096:	461c      	movlt	r4, r3
 800e098:	2501      	movlt	r5, #1
 800e09a:	2500      	movge	r5, #0
 800e09c:	f7ff fcf6 	bl	800da8c <_Balloc>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	b918      	cbnz	r0, 800e0ac <__mdiff+0x60>
 800e0a4:	4b31      	ldr	r3, [pc, #196]	@ (800e16c <__mdiff+0x120>)
 800e0a6:	f240 2145 	movw	r1, #581	@ 0x245
 800e0aa:	e7e3      	b.n	800e074 <__mdiff+0x28>
 800e0ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e0b0:	6926      	ldr	r6, [r4, #16]
 800e0b2:	60c5      	str	r5, [r0, #12]
 800e0b4:	f109 0310 	add.w	r3, r9, #16
 800e0b8:	f109 0514 	add.w	r5, r9, #20
 800e0bc:	f104 0e14 	add.w	lr, r4, #20
 800e0c0:	f100 0b14 	add.w	fp, r0, #20
 800e0c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e0c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e0cc:	9301      	str	r3, [sp, #4]
 800e0ce:	46d9      	mov	r9, fp
 800e0d0:	f04f 0c00 	mov.w	ip, #0
 800e0d4:	9b01      	ldr	r3, [sp, #4]
 800e0d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e0da:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e0de:	9301      	str	r3, [sp, #4]
 800e0e0:	fa1f f38a 	uxth.w	r3, sl
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	b283      	uxth	r3, r0
 800e0e8:	1acb      	subs	r3, r1, r3
 800e0ea:	0c00      	lsrs	r0, r0, #16
 800e0ec:	4463      	add	r3, ip
 800e0ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e0f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e0fc:	4576      	cmp	r6, lr
 800e0fe:	f849 3b04 	str.w	r3, [r9], #4
 800e102:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e106:	d8e5      	bhi.n	800e0d4 <__mdiff+0x88>
 800e108:	1b33      	subs	r3, r6, r4
 800e10a:	3b15      	subs	r3, #21
 800e10c:	f023 0303 	bic.w	r3, r3, #3
 800e110:	3415      	adds	r4, #21
 800e112:	3304      	adds	r3, #4
 800e114:	42a6      	cmp	r6, r4
 800e116:	bf38      	it	cc
 800e118:	2304      	movcc	r3, #4
 800e11a:	441d      	add	r5, r3
 800e11c:	445b      	add	r3, fp
 800e11e:	461e      	mov	r6, r3
 800e120:	462c      	mov	r4, r5
 800e122:	4544      	cmp	r4, r8
 800e124:	d30e      	bcc.n	800e144 <__mdiff+0xf8>
 800e126:	f108 0103 	add.w	r1, r8, #3
 800e12a:	1b49      	subs	r1, r1, r5
 800e12c:	f021 0103 	bic.w	r1, r1, #3
 800e130:	3d03      	subs	r5, #3
 800e132:	45a8      	cmp	r8, r5
 800e134:	bf38      	it	cc
 800e136:	2100      	movcc	r1, #0
 800e138:	440b      	add	r3, r1
 800e13a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e13e:	b191      	cbz	r1, 800e166 <__mdiff+0x11a>
 800e140:	6117      	str	r7, [r2, #16]
 800e142:	e79d      	b.n	800e080 <__mdiff+0x34>
 800e144:	f854 1b04 	ldr.w	r1, [r4], #4
 800e148:	46e6      	mov	lr, ip
 800e14a:	0c08      	lsrs	r0, r1, #16
 800e14c:	fa1c fc81 	uxtah	ip, ip, r1
 800e150:	4471      	add	r1, lr
 800e152:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e156:	b289      	uxth	r1, r1
 800e158:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e15c:	f846 1b04 	str.w	r1, [r6], #4
 800e160:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e164:	e7dd      	b.n	800e122 <__mdiff+0xd6>
 800e166:	3f01      	subs	r7, #1
 800e168:	e7e7      	b.n	800e13a <__mdiff+0xee>
 800e16a:	bf00      	nop
 800e16c:	08011c88 	.word	0x08011c88
 800e170:	08011cf9 	.word	0x08011cf9

0800e174 <__ulp>:
 800e174:	b082      	sub	sp, #8
 800e176:	ed8d 0b00 	vstr	d0, [sp]
 800e17a:	9a01      	ldr	r2, [sp, #4]
 800e17c:	4b0f      	ldr	r3, [pc, #60]	@ (800e1bc <__ulp+0x48>)
 800e17e:	4013      	ands	r3, r2
 800e180:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e184:	2b00      	cmp	r3, #0
 800e186:	dc08      	bgt.n	800e19a <__ulp+0x26>
 800e188:	425b      	negs	r3, r3
 800e18a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e18e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e192:	da04      	bge.n	800e19e <__ulp+0x2a>
 800e194:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e198:	4113      	asrs	r3, r2
 800e19a:	2200      	movs	r2, #0
 800e19c:	e008      	b.n	800e1b0 <__ulp+0x3c>
 800e19e:	f1a2 0314 	sub.w	r3, r2, #20
 800e1a2:	2b1e      	cmp	r3, #30
 800e1a4:	bfda      	itte	le
 800e1a6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e1aa:	40da      	lsrle	r2, r3
 800e1ac:	2201      	movgt	r2, #1
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	4610      	mov	r0, r2
 800e1b4:	ec41 0b10 	vmov	d0, r0, r1
 800e1b8:	b002      	add	sp, #8
 800e1ba:	4770      	bx	lr
 800e1bc:	7ff00000 	.word	0x7ff00000

0800e1c0 <__b2d>:
 800e1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c4:	6906      	ldr	r6, [r0, #16]
 800e1c6:	f100 0814 	add.w	r8, r0, #20
 800e1ca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e1ce:	1f37      	subs	r7, r6, #4
 800e1d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e1d4:	4610      	mov	r0, r2
 800e1d6:	f7ff fd4b 	bl	800dc70 <__hi0bits>
 800e1da:	f1c0 0320 	rsb	r3, r0, #32
 800e1de:	280a      	cmp	r0, #10
 800e1e0:	600b      	str	r3, [r1, #0]
 800e1e2:	491b      	ldr	r1, [pc, #108]	@ (800e250 <__b2d+0x90>)
 800e1e4:	dc15      	bgt.n	800e212 <__b2d+0x52>
 800e1e6:	f1c0 0c0b 	rsb	ip, r0, #11
 800e1ea:	fa22 f30c 	lsr.w	r3, r2, ip
 800e1ee:	45b8      	cmp	r8, r7
 800e1f0:	ea43 0501 	orr.w	r5, r3, r1
 800e1f4:	bf34      	ite	cc
 800e1f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e1fa:	2300      	movcs	r3, #0
 800e1fc:	3015      	adds	r0, #21
 800e1fe:	fa02 f000 	lsl.w	r0, r2, r0
 800e202:	fa23 f30c 	lsr.w	r3, r3, ip
 800e206:	4303      	orrs	r3, r0
 800e208:	461c      	mov	r4, r3
 800e20a:	ec45 4b10 	vmov	d0, r4, r5
 800e20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e212:	45b8      	cmp	r8, r7
 800e214:	bf3a      	itte	cc
 800e216:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e21a:	f1a6 0708 	subcc.w	r7, r6, #8
 800e21e:	2300      	movcs	r3, #0
 800e220:	380b      	subs	r0, #11
 800e222:	d012      	beq.n	800e24a <__b2d+0x8a>
 800e224:	f1c0 0120 	rsb	r1, r0, #32
 800e228:	fa23 f401 	lsr.w	r4, r3, r1
 800e22c:	4082      	lsls	r2, r0
 800e22e:	4322      	orrs	r2, r4
 800e230:	4547      	cmp	r7, r8
 800e232:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e236:	bf8c      	ite	hi
 800e238:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e23c:	2200      	movls	r2, #0
 800e23e:	4083      	lsls	r3, r0
 800e240:	40ca      	lsrs	r2, r1
 800e242:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e246:	4313      	orrs	r3, r2
 800e248:	e7de      	b.n	800e208 <__b2d+0x48>
 800e24a:	ea42 0501 	orr.w	r5, r2, r1
 800e24e:	e7db      	b.n	800e208 <__b2d+0x48>
 800e250:	3ff00000 	.word	0x3ff00000

0800e254 <__d2b>:
 800e254:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e258:	460f      	mov	r7, r1
 800e25a:	2101      	movs	r1, #1
 800e25c:	ec59 8b10 	vmov	r8, r9, d0
 800e260:	4616      	mov	r6, r2
 800e262:	f7ff fc13 	bl	800da8c <_Balloc>
 800e266:	4604      	mov	r4, r0
 800e268:	b930      	cbnz	r0, 800e278 <__d2b+0x24>
 800e26a:	4602      	mov	r2, r0
 800e26c:	4b23      	ldr	r3, [pc, #140]	@ (800e2fc <__d2b+0xa8>)
 800e26e:	4824      	ldr	r0, [pc, #144]	@ (800e300 <__d2b+0xac>)
 800e270:	f240 310f 	movw	r1, #783	@ 0x30f
 800e274:	f000 fef2 	bl	800f05c <__assert_func>
 800e278:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e27c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e280:	b10d      	cbz	r5, 800e286 <__d2b+0x32>
 800e282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e286:	9301      	str	r3, [sp, #4]
 800e288:	f1b8 0300 	subs.w	r3, r8, #0
 800e28c:	d023      	beq.n	800e2d6 <__d2b+0x82>
 800e28e:	4668      	mov	r0, sp
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	f7ff fd0c 	bl	800dcae <__lo0bits>
 800e296:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e29a:	b1d0      	cbz	r0, 800e2d2 <__d2b+0x7e>
 800e29c:	f1c0 0320 	rsb	r3, r0, #32
 800e2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800e2a4:	430b      	orrs	r3, r1
 800e2a6:	40c2      	lsrs	r2, r0
 800e2a8:	6163      	str	r3, [r4, #20]
 800e2aa:	9201      	str	r2, [sp, #4]
 800e2ac:	9b01      	ldr	r3, [sp, #4]
 800e2ae:	61a3      	str	r3, [r4, #24]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	bf0c      	ite	eq
 800e2b4:	2201      	moveq	r2, #1
 800e2b6:	2202      	movne	r2, #2
 800e2b8:	6122      	str	r2, [r4, #16]
 800e2ba:	b1a5      	cbz	r5, 800e2e6 <__d2b+0x92>
 800e2bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e2c0:	4405      	add	r5, r0
 800e2c2:	603d      	str	r5, [r7, #0]
 800e2c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e2c8:	6030      	str	r0, [r6, #0]
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	b003      	add	sp, #12
 800e2ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2d2:	6161      	str	r1, [r4, #20]
 800e2d4:	e7ea      	b.n	800e2ac <__d2b+0x58>
 800e2d6:	a801      	add	r0, sp, #4
 800e2d8:	f7ff fce9 	bl	800dcae <__lo0bits>
 800e2dc:	9b01      	ldr	r3, [sp, #4]
 800e2de:	6163      	str	r3, [r4, #20]
 800e2e0:	3020      	adds	r0, #32
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	e7e8      	b.n	800e2b8 <__d2b+0x64>
 800e2e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e2ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e2ee:	6038      	str	r0, [r7, #0]
 800e2f0:	6918      	ldr	r0, [r3, #16]
 800e2f2:	f7ff fcbd 	bl	800dc70 <__hi0bits>
 800e2f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e2fa:	e7e5      	b.n	800e2c8 <__d2b+0x74>
 800e2fc:	08011c88 	.word	0x08011c88
 800e300:	08011cf9 	.word	0x08011cf9

0800e304 <__ratio>:
 800e304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e308:	b085      	sub	sp, #20
 800e30a:	e9cd 1000 	strd	r1, r0, [sp]
 800e30e:	a902      	add	r1, sp, #8
 800e310:	f7ff ff56 	bl	800e1c0 <__b2d>
 800e314:	9800      	ldr	r0, [sp, #0]
 800e316:	a903      	add	r1, sp, #12
 800e318:	ec55 4b10 	vmov	r4, r5, d0
 800e31c:	f7ff ff50 	bl	800e1c0 <__b2d>
 800e320:	9b01      	ldr	r3, [sp, #4]
 800e322:	6919      	ldr	r1, [r3, #16]
 800e324:	9b00      	ldr	r3, [sp, #0]
 800e326:	691b      	ldr	r3, [r3, #16]
 800e328:	1ac9      	subs	r1, r1, r3
 800e32a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e32e:	1a9b      	subs	r3, r3, r2
 800e330:	ec5b ab10 	vmov	sl, fp, d0
 800e334:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e338:	2b00      	cmp	r3, #0
 800e33a:	bfce      	itee	gt
 800e33c:	462a      	movgt	r2, r5
 800e33e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e342:	465a      	movle	r2, fp
 800e344:	462f      	mov	r7, r5
 800e346:	46d9      	mov	r9, fp
 800e348:	bfcc      	ite	gt
 800e34a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e34e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e352:	464b      	mov	r3, r9
 800e354:	4652      	mov	r2, sl
 800e356:	4620      	mov	r0, r4
 800e358:	4639      	mov	r1, r7
 800e35a:	f7f2 fa87 	bl	800086c <__aeabi_ddiv>
 800e35e:	ec41 0b10 	vmov	d0, r0, r1
 800e362:	b005      	add	sp, #20
 800e364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e368 <__copybits>:
 800e368:	3901      	subs	r1, #1
 800e36a:	b570      	push	{r4, r5, r6, lr}
 800e36c:	1149      	asrs	r1, r1, #5
 800e36e:	6914      	ldr	r4, [r2, #16]
 800e370:	3101      	adds	r1, #1
 800e372:	f102 0314 	add.w	r3, r2, #20
 800e376:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e37a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e37e:	1f05      	subs	r5, r0, #4
 800e380:	42a3      	cmp	r3, r4
 800e382:	d30c      	bcc.n	800e39e <__copybits+0x36>
 800e384:	1aa3      	subs	r3, r4, r2
 800e386:	3b11      	subs	r3, #17
 800e388:	f023 0303 	bic.w	r3, r3, #3
 800e38c:	3211      	adds	r2, #17
 800e38e:	42a2      	cmp	r2, r4
 800e390:	bf88      	it	hi
 800e392:	2300      	movhi	r3, #0
 800e394:	4418      	add	r0, r3
 800e396:	2300      	movs	r3, #0
 800e398:	4288      	cmp	r0, r1
 800e39a:	d305      	bcc.n	800e3a8 <__copybits+0x40>
 800e39c:	bd70      	pop	{r4, r5, r6, pc}
 800e39e:	f853 6b04 	ldr.w	r6, [r3], #4
 800e3a2:	f845 6f04 	str.w	r6, [r5, #4]!
 800e3a6:	e7eb      	b.n	800e380 <__copybits+0x18>
 800e3a8:	f840 3b04 	str.w	r3, [r0], #4
 800e3ac:	e7f4      	b.n	800e398 <__copybits+0x30>

0800e3ae <__any_on>:
 800e3ae:	f100 0214 	add.w	r2, r0, #20
 800e3b2:	6900      	ldr	r0, [r0, #16]
 800e3b4:	114b      	asrs	r3, r1, #5
 800e3b6:	4298      	cmp	r0, r3
 800e3b8:	b510      	push	{r4, lr}
 800e3ba:	db11      	blt.n	800e3e0 <__any_on+0x32>
 800e3bc:	dd0a      	ble.n	800e3d4 <__any_on+0x26>
 800e3be:	f011 011f 	ands.w	r1, r1, #31
 800e3c2:	d007      	beq.n	800e3d4 <__any_on+0x26>
 800e3c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e3c8:	fa24 f001 	lsr.w	r0, r4, r1
 800e3cc:	fa00 f101 	lsl.w	r1, r0, r1
 800e3d0:	428c      	cmp	r4, r1
 800e3d2:	d10b      	bne.n	800e3ec <__any_on+0x3e>
 800e3d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d803      	bhi.n	800e3e4 <__any_on+0x36>
 800e3dc:	2000      	movs	r0, #0
 800e3de:	bd10      	pop	{r4, pc}
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	e7f7      	b.n	800e3d4 <__any_on+0x26>
 800e3e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e3e8:	2900      	cmp	r1, #0
 800e3ea:	d0f5      	beq.n	800e3d8 <__any_on+0x2a>
 800e3ec:	2001      	movs	r0, #1
 800e3ee:	e7f6      	b.n	800e3de <__any_on+0x30>

0800e3f0 <_strtoul_l.constprop.0>:
 800e3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3f4:	4e34      	ldr	r6, [pc, #208]	@ (800e4c8 <_strtoul_l.constprop.0+0xd8>)
 800e3f6:	4686      	mov	lr, r0
 800e3f8:	460d      	mov	r5, r1
 800e3fa:	4628      	mov	r0, r5
 800e3fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e400:	5d37      	ldrb	r7, [r6, r4]
 800e402:	f017 0708 	ands.w	r7, r7, #8
 800e406:	d1f8      	bne.n	800e3fa <_strtoul_l.constprop.0+0xa>
 800e408:	2c2d      	cmp	r4, #45	@ 0x2d
 800e40a:	d12f      	bne.n	800e46c <_strtoul_l.constprop.0+0x7c>
 800e40c:	782c      	ldrb	r4, [r5, #0]
 800e40e:	2701      	movs	r7, #1
 800e410:	1c85      	adds	r5, r0, #2
 800e412:	f033 0010 	bics.w	r0, r3, #16
 800e416:	d109      	bne.n	800e42c <_strtoul_l.constprop.0+0x3c>
 800e418:	2c30      	cmp	r4, #48	@ 0x30
 800e41a:	d12c      	bne.n	800e476 <_strtoul_l.constprop.0+0x86>
 800e41c:	7828      	ldrb	r0, [r5, #0]
 800e41e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e422:	2858      	cmp	r0, #88	@ 0x58
 800e424:	d127      	bne.n	800e476 <_strtoul_l.constprop.0+0x86>
 800e426:	786c      	ldrb	r4, [r5, #1]
 800e428:	2310      	movs	r3, #16
 800e42a:	3502      	adds	r5, #2
 800e42c:	f04f 38ff 	mov.w	r8, #4294967295
 800e430:	2600      	movs	r6, #0
 800e432:	fbb8 f8f3 	udiv	r8, r8, r3
 800e436:	fb03 f908 	mul.w	r9, r3, r8
 800e43a:	ea6f 0909 	mvn.w	r9, r9
 800e43e:	4630      	mov	r0, r6
 800e440:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e444:	f1bc 0f09 	cmp.w	ip, #9
 800e448:	d81c      	bhi.n	800e484 <_strtoul_l.constprop.0+0x94>
 800e44a:	4664      	mov	r4, ip
 800e44c:	42a3      	cmp	r3, r4
 800e44e:	dd2a      	ble.n	800e4a6 <_strtoul_l.constprop.0+0xb6>
 800e450:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e454:	d007      	beq.n	800e466 <_strtoul_l.constprop.0+0x76>
 800e456:	4580      	cmp	r8, r0
 800e458:	d322      	bcc.n	800e4a0 <_strtoul_l.constprop.0+0xb0>
 800e45a:	d101      	bne.n	800e460 <_strtoul_l.constprop.0+0x70>
 800e45c:	45a1      	cmp	r9, r4
 800e45e:	db1f      	blt.n	800e4a0 <_strtoul_l.constprop.0+0xb0>
 800e460:	fb00 4003 	mla	r0, r0, r3, r4
 800e464:	2601      	movs	r6, #1
 800e466:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e46a:	e7e9      	b.n	800e440 <_strtoul_l.constprop.0+0x50>
 800e46c:	2c2b      	cmp	r4, #43	@ 0x2b
 800e46e:	bf04      	itt	eq
 800e470:	782c      	ldrbeq	r4, [r5, #0]
 800e472:	1c85      	addeq	r5, r0, #2
 800e474:	e7cd      	b.n	800e412 <_strtoul_l.constprop.0+0x22>
 800e476:	2b00      	cmp	r3, #0
 800e478:	d1d8      	bne.n	800e42c <_strtoul_l.constprop.0+0x3c>
 800e47a:	2c30      	cmp	r4, #48	@ 0x30
 800e47c:	bf0c      	ite	eq
 800e47e:	2308      	moveq	r3, #8
 800e480:	230a      	movne	r3, #10
 800e482:	e7d3      	b.n	800e42c <_strtoul_l.constprop.0+0x3c>
 800e484:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e488:	f1bc 0f19 	cmp.w	ip, #25
 800e48c:	d801      	bhi.n	800e492 <_strtoul_l.constprop.0+0xa2>
 800e48e:	3c37      	subs	r4, #55	@ 0x37
 800e490:	e7dc      	b.n	800e44c <_strtoul_l.constprop.0+0x5c>
 800e492:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e496:	f1bc 0f19 	cmp.w	ip, #25
 800e49a:	d804      	bhi.n	800e4a6 <_strtoul_l.constprop.0+0xb6>
 800e49c:	3c57      	subs	r4, #87	@ 0x57
 800e49e:	e7d5      	b.n	800e44c <_strtoul_l.constprop.0+0x5c>
 800e4a0:	f04f 36ff 	mov.w	r6, #4294967295
 800e4a4:	e7df      	b.n	800e466 <_strtoul_l.constprop.0+0x76>
 800e4a6:	1c73      	adds	r3, r6, #1
 800e4a8:	d106      	bne.n	800e4b8 <_strtoul_l.constprop.0+0xc8>
 800e4aa:	2322      	movs	r3, #34	@ 0x22
 800e4ac:	f8ce 3000 	str.w	r3, [lr]
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	b932      	cbnz	r2, 800e4c2 <_strtoul_l.constprop.0+0xd2>
 800e4b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4b8:	b107      	cbz	r7, 800e4bc <_strtoul_l.constprop.0+0xcc>
 800e4ba:	4240      	negs	r0, r0
 800e4bc:	2a00      	cmp	r2, #0
 800e4be:	d0f9      	beq.n	800e4b4 <_strtoul_l.constprop.0+0xc4>
 800e4c0:	b106      	cbz	r6, 800e4c4 <_strtoul_l.constprop.0+0xd4>
 800e4c2:	1e69      	subs	r1, r5, #1
 800e4c4:	6011      	str	r1, [r2, #0]
 800e4c6:	e7f5      	b.n	800e4b4 <_strtoul_l.constprop.0+0xc4>
 800e4c8:	08011a21 	.word	0x08011a21

0800e4cc <_strtoul_r>:
 800e4cc:	f7ff bf90 	b.w	800e3f0 <_strtoul_l.constprop.0>

0800e4d0 <strtoul>:
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	460a      	mov	r2, r1
 800e4d4:	4601      	mov	r1, r0
 800e4d6:	4802      	ldr	r0, [pc, #8]	@ (800e4e0 <strtoul+0x10>)
 800e4d8:	6800      	ldr	r0, [r0, #0]
 800e4da:	f7ff bf89 	b.w	800e3f0 <_strtoul_l.constprop.0>
 800e4de:	bf00      	nop
 800e4e0:	200001a0 	.word	0x200001a0

0800e4e4 <__ascii_wctomb>:
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	4608      	mov	r0, r1
 800e4e8:	b141      	cbz	r1, 800e4fc <__ascii_wctomb+0x18>
 800e4ea:	2aff      	cmp	r2, #255	@ 0xff
 800e4ec:	d904      	bls.n	800e4f8 <__ascii_wctomb+0x14>
 800e4ee:	228a      	movs	r2, #138	@ 0x8a
 800e4f0:	601a      	str	r2, [r3, #0]
 800e4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f6:	4770      	bx	lr
 800e4f8:	700a      	strb	r2, [r1, #0]
 800e4fa:	2001      	movs	r0, #1
 800e4fc:	4770      	bx	lr

0800e4fe <__ssputs_r>:
 800e4fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e502:	688e      	ldr	r6, [r1, #8]
 800e504:	461f      	mov	r7, r3
 800e506:	42be      	cmp	r6, r7
 800e508:	680b      	ldr	r3, [r1, #0]
 800e50a:	4682      	mov	sl, r0
 800e50c:	460c      	mov	r4, r1
 800e50e:	4690      	mov	r8, r2
 800e510:	d82d      	bhi.n	800e56e <__ssputs_r+0x70>
 800e512:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e516:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e51a:	d026      	beq.n	800e56a <__ssputs_r+0x6c>
 800e51c:	6965      	ldr	r5, [r4, #20]
 800e51e:	6909      	ldr	r1, [r1, #16]
 800e520:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e524:	eba3 0901 	sub.w	r9, r3, r1
 800e528:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e52c:	1c7b      	adds	r3, r7, #1
 800e52e:	444b      	add	r3, r9
 800e530:	106d      	asrs	r5, r5, #1
 800e532:	429d      	cmp	r5, r3
 800e534:	bf38      	it	cc
 800e536:	461d      	movcc	r5, r3
 800e538:	0553      	lsls	r3, r2, #21
 800e53a:	d527      	bpl.n	800e58c <__ssputs_r+0x8e>
 800e53c:	4629      	mov	r1, r5
 800e53e:	f7fb fabf 	bl	8009ac0 <_malloc_r>
 800e542:	4606      	mov	r6, r0
 800e544:	b360      	cbz	r0, 800e5a0 <__ssputs_r+0xa2>
 800e546:	6921      	ldr	r1, [r4, #16]
 800e548:	464a      	mov	r2, r9
 800e54a:	f7fe f853 	bl	800c5f4 <memcpy>
 800e54e:	89a3      	ldrh	r3, [r4, #12]
 800e550:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e558:	81a3      	strh	r3, [r4, #12]
 800e55a:	6126      	str	r6, [r4, #16]
 800e55c:	6165      	str	r5, [r4, #20]
 800e55e:	444e      	add	r6, r9
 800e560:	eba5 0509 	sub.w	r5, r5, r9
 800e564:	6026      	str	r6, [r4, #0]
 800e566:	60a5      	str	r5, [r4, #8]
 800e568:	463e      	mov	r6, r7
 800e56a:	42be      	cmp	r6, r7
 800e56c:	d900      	bls.n	800e570 <__ssputs_r+0x72>
 800e56e:	463e      	mov	r6, r7
 800e570:	6820      	ldr	r0, [r4, #0]
 800e572:	4632      	mov	r2, r6
 800e574:	4641      	mov	r1, r8
 800e576:	f000 fd52 	bl	800f01e <memmove>
 800e57a:	68a3      	ldr	r3, [r4, #8]
 800e57c:	1b9b      	subs	r3, r3, r6
 800e57e:	60a3      	str	r3, [r4, #8]
 800e580:	6823      	ldr	r3, [r4, #0]
 800e582:	4433      	add	r3, r6
 800e584:	6023      	str	r3, [r4, #0]
 800e586:	2000      	movs	r0, #0
 800e588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e58c:	462a      	mov	r2, r5
 800e58e:	f000 fda3 	bl	800f0d8 <_realloc_r>
 800e592:	4606      	mov	r6, r0
 800e594:	2800      	cmp	r0, #0
 800e596:	d1e0      	bne.n	800e55a <__ssputs_r+0x5c>
 800e598:	6921      	ldr	r1, [r4, #16]
 800e59a:	4650      	mov	r0, sl
 800e59c:	f7fe fe9c 	bl	800d2d8 <_free_r>
 800e5a0:	230c      	movs	r3, #12
 800e5a2:	f8ca 3000 	str.w	r3, [sl]
 800e5a6:	89a3      	ldrh	r3, [r4, #12]
 800e5a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5ac:	81a3      	strh	r3, [r4, #12]
 800e5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b2:	e7e9      	b.n	800e588 <__ssputs_r+0x8a>

0800e5b4 <_svfiprintf_r>:
 800e5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b8:	4698      	mov	r8, r3
 800e5ba:	898b      	ldrh	r3, [r1, #12]
 800e5bc:	061b      	lsls	r3, r3, #24
 800e5be:	b09d      	sub	sp, #116	@ 0x74
 800e5c0:	4607      	mov	r7, r0
 800e5c2:	460d      	mov	r5, r1
 800e5c4:	4614      	mov	r4, r2
 800e5c6:	d510      	bpl.n	800e5ea <_svfiprintf_r+0x36>
 800e5c8:	690b      	ldr	r3, [r1, #16]
 800e5ca:	b973      	cbnz	r3, 800e5ea <_svfiprintf_r+0x36>
 800e5cc:	2140      	movs	r1, #64	@ 0x40
 800e5ce:	f7fb fa77 	bl	8009ac0 <_malloc_r>
 800e5d2:	6028      	str	r0, [r5, #0]
 800e5d4:	6128      	str	r0, [r5, #16]
 800e5d6:	b930      	cbnz	r0, 800e5e6 <_svfiprintf_r+0x32>
 800e5d8:	230c      	movs	r3, #12
 800e5da:	603b      	str	r3, [r7, #0]
 800e5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e0:	b01d      	add	sp, #116	@ 0x74
 800e5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5e6:	2340      	movs	r3, #64	@ 0x40
 800e5e8:	616b      	str	r3, [r5, #20]
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5ee:	2320      	movs	r3, #32
 800e5f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e5f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5f8:	2330      	movs	r3, #48	@ 0x30
 800e5fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e798 <_svfiprintf_r+0x1e4>
 800e5fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e602:	f04f 0901 	mov.w	r9, #1
 800e606:	4623      	mov	r3, r4
 800e608:	469a      	mov	sl, r3
 800e60a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e60e:	b10a      	cbz	r2, 800e614 <_svfiprintf_r+0x60>
 800e610:	2a25      	cmp	r2, #37	@ 0x25
 800e612:	d1f9      	bne.n	800e608 <_svfiprintf_r+0x54>
 800e614:	ebba 0b04 	subs.w	fp, sl, r4
 800e618:	d00b      	beq.n	800e632 <_svfiprintf_r+0x7e>
 800e61a:	465b      	mov	r3, fp
 800e61c:	4622      	mov	r2, r4
 800e61e:	4629      	mov	r1, r5
 800e620:	4638      	mov	r0, r7
 800e622:	f7ff ff6c 	bl	800e4fe <__ssputs_r>
 800e626:	3001      	adds	r0, #1
 800e628:	f000 80a7 	beq.w	800e77a <_svfiprintf_r+0x1c6>
 800e62c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e62e:	445a      	add	r2, fp
 800e630:	9209      	str	r2, [sp, #36]	@ 0x24
 800e632:	f89a 3000 	ldrb.w	r3, [sl]
 800e636:	2b00      	cmp	r3, #0
 800e638:	f000 809f 	beq.w	800e77a <_svfiprintf_r+0x1c6>
 800e63c:	2300      	movs	r3, #0
 800e63e:	f04f 32ff 	mov.w	r2, #4294967295
 800e642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e646:	f10a 0a01 	add.w	sl, sl, #1
 800e64a:	9304      	str	r3, [sp, #16]
 800e64c:	9307      	str	r3, [sp, #28]
 800e64e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e652:	931a      	str	r3, [sp, #104]	@ 0x68
 800e654:	4654      	mov	r4, sl
 800e656:	2205      	movs	r2, #5
 800e658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e65c:	484e      	ldr	r0, [pc, #312]	@ (800e798 <_svfiprintf_r+0x1e4>)
 800e65e:	f7f1 fdc7 	bl	80001f0 <memchr>
 800e662:	9a04      	ldr	r2, [sp, #16]
 800e664:	b9d8      	cbnz	r0, 800e69e <_svfiprintf_r+0xea>
 800e666:	06d0      	lsls	r0, r2, #27
 800e668:	bf44      	itt	mi
 800e66a:	2320      	movmi	r3, #32
 800e66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e670:	0711      	lsls	r1, r2, #28
 800e672:	bf44      	itt	mi
 800e674:	232b      	movmi	r3, #43	@ 0x2b
 800e676:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e67a:	f89a 3000 	ldrb.w	r3, [sl]
 800e67e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e680:	d015      	beq.n	800e6ae <_svfiprintf_r+0xfa>
 800e682:	9a07      	ldr	r2, [sp, #28]
 800e684:	4654      	mov	r4, sl
 800e686:	2000      	movs	r0, #0
 800e688:	f04f 0c0a 	mov.w	ip, #10
 800e68c:	4621      	mov	r1, r4
 800e68e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e692:	3b30      	subs	r3, #48	@ 0x30
 800e694:	2b09      	cmp	r3, #9
 800e696:	d94b      	bls.n	800e730 <_svfiprintf_r+0x17c>
 800e698:	b1b0      	cbz	r0, 800e6c8 <_svfiprintf_r+0x114>
 800e69a:	9207      	str	r2, [sp, #28]
 800e69c:	e014      	b.n	800e6c8 <_svfiprintf_r+0x114>
 800e69e:	eba0 0308 	sub.w	r3, r0, r8
 800e6a2:	fa09 f303 	lsl.w	r3, r9, r3
 800e6a6:	4313      	orrs	r3, r2
 800e6a8:	9304      	str	r3, [sp, #16]
 800e6aa:	46a2      	mov	sl, r4
 800e6ac:	e7d2      	b.n	800e654 <_svfiprintf_r+0xa0>
 800e6ae:	9b03      	ldr	r3, [sp, #12]
 800e6b0:	1d19      	adds	r1, r3, #4
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	9103      	str	r1, [sp, #12]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	bfbb      	ittet	lt
 800e6ba:	425b      	neglt	r3, r3
 800e6bc:	f042 0202 	orrlt.w	r2, r2, #2
 800e6c0:	9307      	strge	r3, [sp, #28]
 800e6c2:	9307      	strlt	r3, [sp, #28]
 800e6c4:	bfb8      	it	lt
 800e6c6:	9204      	strlt	r2, [sp, #16]
 800e6c8:	7823      	ldrb	r3, [r4, #0]
 800e6ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6cc:	d10a      	bne.n	800e6e4 <_svfiprintf_r+0x130>
 800e6ce:	7863      	ldrb	r3, [r4, #1]
 800e6d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6d2:	d132      	bne.n	800e73a <_svfiprintf_r+0x186>
 800e6d4:	9b03      	ldr	r3, [sp, #12]
 800e6d6:	1d1a      	adds	r2, r3, #4
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	9203      	str	r2, [sp, #12]
 800e6dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e6e0:	3402      	adds	r4, #2
 800e6e2:	9305      	str	r3, [sp, #20]
 800e6e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e7a8 <_svfiprintf_r+0x1f4>
 800e6e8:	7821      	ldrb	r1, [r4, #0]
 800e6ea:	2203      	movs	r2, #3
 800e6ec:	4650      	mov	r0, sl
 800e6ee:	f7f1 fd7f 	bl	80001f0 <memchr>
 800e6f2:	b138      	cbz	r0, 800e704 <_svfiprintf_r+0x150>
 800e6f4:	9b04      	ldr	r3, [sp, #16]
 800e6f6:	eba0 000a 	sub.w	r0, r0, sl
 800e6fa:	2240      	movs	r2, #64	@ 0x40
 800e6fc:	4082      	lsls	r2, r0
 800e6fe:	4313      	orrs	r3, r2
 800e700:	3401      	adds	r4, #1
 800e702:	9304      	str	r3, [sp, #16]
 800e704:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e708:	4824      	ldr	r0, [pc, #144]	@ (800e79c <_svfiprintf_r+0x1e8>)
 800e70a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e70e:	2206      	movs	r2, #6
 800e710:	f7f1 fd6e 	bl	80001f0 <memchr>
 800e714:	2800      	cmp	r0, #0
 800e716:	d036      	beq.n	800e786 <_svfiprintf_r+0x1d2>
 800e718:	4b21      	ldr	r3, [pc, #132]	@ (800e7a0 <_svfiprintf_r+0x1ec>)
 800e71a:	bb1b      	cbnz	r3, 800e764 <_svfiprintf_r+0x1b0>
 800e71c:	9b03      	ldr	r3, [sp, #12]
 800e71e:	3307      	adds	r3, #7
 800e720:	f023 0307 	bic.w	r3, r3, #7
 800e724:	3308      	adds	r3, #8
 800e726:	9303      	str	r3, [sp, #12]
 800e728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e72a:	4433      	add	r3, r6
 800e72c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e72e:	e76a      	b.n	800e606 <_svfiprintf_r+0x52>
 800e730:	fb0c 3202 	mla	r2, ip, r2, r3
 800e734:	460c      	mov	r4, r1
 800e736:	2001      	movs	r0, #1
 800e738:	e7a8      	b.n	800e68c <_svfiprintf_r+0xd8>
 800e73a:	2300      	movs	r3, #0
 800e73c:	3401      	adds	r4, #1
 800e73e:	9305      	str	r3, [sp, #20]
 800e740:	4619      	mov	r1, r3
 800e742:	f04f 0c0a 	mov.w	ip, #10
 800e746:	4620      	mov	r0, r4
 800e748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e74c:	3a30      	subs	r2, #48	@ 0x30
 800e74e:	2a09      	cmp	r2, #9
 800e750:	d903      	bls.n	800e75a <_svfiprintf_r+0x1a6>
 800e752:	2b00      	cmp	r3, #0
 800e754:	d0c6      	beq.n	800e6e4 <_svfiprintf_r+0x130>
 800e756:	9105      	str	r1, [sp, #20]
 800e758:	e7c4      	b.n	800e6e4 <_svfiprintf_r+0x130>
 800e75a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e75e:	4604      	mov	r4, r0
 800e760:	2301      	movs	r3, #1
 800e762:	e7f0      	b.n	800e746 <_svfiprintf_r+0x192>
 800e764:	ab03      	add	r3, sp, #12
 800e766:	9300      	str	r3, [sp, #0]
 800e768:	462a      	mov	r2, r5
 800e76a:	4b0e      	ldr	r3, [pc, #56]	@ (800e7a4 <_svfiprintf_r+0x1f0>)
 800e76c:	a904      	add	r1, sp, #16
 800e76e:	4638      	mov	r0, r7
 800e770:	f7fc f962 	bl	800aa38 <_printf_float>
 800e774:	1c42      	adds	r2, r0, #1
 800e776:	4606      	mov	r6, r0
 800e778:	d1d6      	bne.n	800e728 <_svfiprintf_r+0x174>
 800e77a:	89ab      	ldrh	r3, [r5, #12]
 800e77c:	065b      	lsls	r3, r3, #25
 800e77e:	f53f af2d 	bmi.w	800e5dc <_svfiprintf_r+0x28>
 800e782:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e784:	e72c      	b.n	800e5e0 <_svfiprintf_r+0x2c>
 800e786:	ab03      	add	r3, sp, #12
 800e788:	9300      	str	r3, [sp, #0]
 800e78a:	462a      	mov	r2, r5
 800e78c:	4b05      	ldr	r3, [pc, #20]	@ (800e7a4 <_svfiprintf_r+0x1f0>)
 800e78e:	a904      	add	r1, sp, #16
 800e790:	4638      	mov	r0, r7
 800e792:	f7fc fbe9 	bl	800af68 <_printf_i>
 800e796:	e7ed      	b.n	800e774 <_svfiprintf_r+0x1c0>
 800e798:	08011e50 	.word	0x08011e50
 800e79c:	08011e5a 	.word	0x08011e5a
 800e7a0:	0800aa39 	.word	0x0800aa39
 800e7a4:	0800e4ff 	.word	0x0800e4ff
 800e7a8:	08011e56 	.word	0x08011e56

0800e7ac <_sungetc_r>:
 800e7ac:	b538      	push	{r3, r4, r5, lr}
 800e7ae:	1c4b      	adds	r3, r1, #1
 800e7b0:	4614      	mov	r4, r2
 800e7b2:	d103      	bne.n	800e7bc <_sungetc_r+0x10>
 800e7b4:	f04f 35ff 	mov.w	r5, #4294967295
 800e7b8:	4628      	mov	r0, r5
 800e7ba:	bd38      	pop	{r3, r4, r5, pc}
 800e7bc:	8993      	ldrh	r3, [r2, #12]
 800e7be:	f023 0320 	bic.w	r3, r3, #32
 800e7c2:	8193      	strh	r3, [r2, #12]
 800e7c4:	6853      	ldr	r3, [r2, #4]
 800e7c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e7c8:	b2cd      	uxtb	r5, r1
 800e7ca:	b18a      	cbz	r2, 800e7f0 <_sungetc_r+0x44>
 800e7cc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	dd08      	ble.n	800e7e4 <_sungetc_r+0x38>
 800e7d2:	6823      	ldr	r3, [r4, #0]
 800e7d4:	1e5a      	subs	r2, r3, #1
 800e7d6:	6022      	str	r2, [r4, #0]
 800e7d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e7dc:	6863      	ldr	r3, [r4, #4]
 800e7de:	3301      	adds	r3, #1
 800e7e0:	6063      	str	r3, [r4, #4]
 800e7e2:	e7e9      	b.n	800e7b8 <_sungetc_r+0xc>
 800e7e4:	4621      	mov	r1, r4
 800e7e6:	f000 fbe0 	bl	800efaa <__submore>
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	d0f1      	beq.n	800e7d2 <_sungetc_r+0x26>
 800e7ee:	e7e1      	b.n	800e7b4 <_sungetc_r+0x8>
 800e7f0:	6921      	ldr	r1, [r4, #16]
 800e7f2:	6822      	ldr	r2, [r4, #0]
 800e7f4:	b141      	cbz	r1, 800e808 <_sungetc_r+0x5c>
 800e7f6:	4291      	cmp	r1, r2
 800e7f8:	d206      	bcs.n	800e808 <_sungetc_r+0x5c>
 800e7fa:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800e7fe:	42a9      	cmp	r1, r5
 800e800:	d102      	bne.n	800e808 <_sungetc_r+0x5c>
 800e802:	3a01      	subs	r2, #1
 800e804:	6022      	str	r2, [r4, #0]
 800e806:	e7ea      	b.n	800e7de <_sungetc_r+0x32>
 800e808:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800e80c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e810:	6363      	str	r3, [r4, #52]	@ 0x34
 800e812:	2303      	movs	r3, #3
 800e814:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e816:	4623      	mov	r3, r4
 800e818:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e81c:	6023      	str	r3, [r4, #0]
 800e81e:	2301      	movs	r3, #1
 800e820:	e7de      	b.n	800e7e0 <_sungetc_r+0x34>

0800e822 <__ssrefill_r>:
 800e822:	b510      	push	{r4, lr}
 800e824:	460c      	mov	r4, r1
 800e826:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e828:	b169      	cbz	r1, 800e846 <__ssrefill_r+0x24>
 800e82a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e82e:	4299      	cmp	r1, r3
 800e830:	d001      	beq.n	800e836 <__ssrefill_r+0x14>
 800e832:	f7fe fd51 	bl	800d2d8 <_free_r>
 800e836:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e838:	6063      	str	r3, [r4, #4]
 800e83a:	2000      	movs	r0, #0
 800e83c:	6360      	str	r0, [r4, #52]	@ 0x34
 800e83e:	b113      	cbz	r3, 800e846 <__ssrefill_r+0x24>
 800e840:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e842:	6023      	str	r3, [r4, #0]
 800e844:	bd10      	pop	{r4, pc}
 800e846:	6923      	ldr	r3, [r4, #16]
 800e848:	6023      	str	r3, [r4, #0]
 800e84a:	2300      	movs	r3, #0
 800e84c:	6063      	str	r3, [r4, #4]
 800e84e:	89a3      	ldrh	r3, [r4, #12]
 800e850:	f043 0320 	orr.w	r3, r3, #32
 800e854:	81a3      	strh	r3, [r4, #12]
 800e856:	f04f 30ff 	mov.w	r0, #4294967295
 800e85a:	e7f3      	b.n	800e844 <__ssrefill_r+0x22>

0800e85c <__ssvfiscanf_r>:
 800e85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e860:	460c      	mov	r4, r1
 800e862:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e866:	2100      	movs	r1, #0
 800e868:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800e86c:	49a5      	ldr	r1, [pc, #660]	@ (800eb04 <__ssvfiscanf_r+0x2a8>)
 800e86e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800e870:	f10d 0804 	add.w	r8, sp, #4
 800e874:	49a4      	ldr	r1, [pc, #656]	@ (800eb08 <__ssvfiscanf_r+0x2ac>)
 800e876:	4fa5      	ldr	r7, [pc, #660]	@ (800eb0c <__ssvfiscanf_r+0x2b0>)
 800e878:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800e87c:	4606      	mov	r6, r0
 800e87e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800e880:	9300      	str	r3, [sp, #0]
 800e882:	7813      	ldrb	r3, [r2, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	f000 8158 	beq.w	800eb3a <__ssvfiscanf_r+0x2de>
 800e88a:	5cf9      	ldrb	r1, [r7, r3]
 800e88c:	f011 0108 	ands.w	r1, r1, #8
 800e890:	f102 0501 	add.w	r5, r2, #1
 800e894:	d019      	beq.n	800e8ca <__ssvfiscanf_r+0x6e>
 800e896:	6863      	ldr	r3, [r4, #4]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	dd0f      	ble.n	800e8bc <__ssvfiscanf_r+0x60>
 800e89c:	6823      	ldr	r3, [r4, #0]
 800e89e:	781a      	ldrb	r2, [r3, #0]
 800e8a0:	5cba      	ldrb	r2, [r7, r2]
 800e8a2:	0712      	lsls	r2, r2, #28
 800e8a4:	d401      	bmi.n	800e8aa <__ssvfiscanf_r+0x4e>
 800e8a6:	462a      	mov	r2, r5
 800e8a8:	e7eb      	b.n	800e882 <__ssvfiscanf_r+0x26>
 800e8aa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e8ac:	3201      	adds	r2, #1
 800e8ae:	9245      	str	r2, [sp, #276]	@ 0x114
 800e8b0:	6862      	ldr	r2, [r4, #4]
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	3a01      	subs	r2, #1
 800e8b6:	6062      	str	r2, [r4, #4]
 800e8b8:	6023      	str	r3, [r4, #0]
 800e8ba:	e7ec      	b.n	800e896 <__ssvfiscanf_r+0x3a>
 800e8bc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e8be:	4621      	mov	r1, r4
 800e8c0:	4630      	mov	r0, r6
 800e8c2:	4798      	blx	r3
 800e8c4:	2800      	cmp	r0, #0
 800e8c6:	d0e9      	beq.n	800e89c <__ssvfiscanf_r+0x40>
 800e8c8:	e7ed      	b.n	800e8a6 <__ssvfiscanf_r+0x4a>
 800e8ca:	2b25      	cmp	r3, #37	@ 0x25
 800e8cc:	d012      	beq.n	800e8f4 <__ssvfiscanf_r+0x98>
 800e8ce:	4699      	mov	r9, r3
 800e8d0:	6863      	ldr	r3, [r4, #4]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	f340 8093 	ble.w	800e9fe <__ssvfiscanf_r+0x1a2>
 800e8d8:	6822      	ldr	r2, [r4, #0]
 800e8da:	7813      	ldrb	r3, [r2, #0]
 800e8dc:	454b      	cmp	r3, r9
 800e8de:	f040 812c 	bne.w	800eb3a <__ssvfiscanf_r+0x2de>
 800e8e2:	6863      	ldr	r3, [r4, #4]
 800e8e4:	3b01      	subs	r3, #1
 800e8e6:	6063      	str	r3, [r4, #4]
 800e8e8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800e8ea:	3201      	adds	r2, #1
 800e8ec:	3301      	adds	r3, #1
 800e8ee:	6022      	str	r2, [r4, #0]
 800e8f0:	9345      	str	r3, [sp, #276]	@ 0x114
 800e8f2:	e7d8      	b.n	800e8a6 <__ssvfiscanf_r+0x4a>
 800e8f4:	9141      	str	r1, [sp, #260]	@ 0x104
 800e8f6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e8f8:	7853      	ldrb	r3, [r2, #1]
 800e8fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8fc:	bf02      	ittt	eq
 800e8fe:	2310      	moveq	r3, #16
 800e900:	1c95      	addeq	r5, r2, #2
 800e902:	9341      	streq	r3, [sp, #260]	@ 0x104
 800e904:	220a      	movs	r2, #10
 800e906:	46a9      	mov	r9, r5
 800e908:	f819 1b01 	ldrb.w	r1, [r9], #1
 800e90c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800e910:	2b09      	cmp	r3, #9
 800e912:	d91e      	bls.n	800e952 <__ssvfiscanf_r+0xf6>
 800e914:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800eb10 <__ssvfiscanf_r+0x2b4>
 800e918:	2203      	movs	r2, #3
 800e91a:	4650      	mov	r0, sl
 800e91c:	f7f1 fc68 	bl	80001f0 <memchr>
 800e920:	b138      	cbz	r0, 800e932 <__ssvfiscanf_r+0xd6>
 800e922:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e924:	eba0 000a 	sub.w	r0, r0, sl
 800e928:	2301      	movs	r3, #1
 800e92a:	4083      	lsls	r3, r0
 800e92c:	4313      	orrs	r3, r2
 800e92e:	9341      	str	r3, [sp, #260]	@ 0x104
 800e930:	464d      	mov	r5, r9
 800e932:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e936:	2b78      	cmp	r3, #120	@ 0x78
 800e938:	d806      	bhi.n	800e948 <__ssvfiscanf_r+0xec>
 800e93a:	2b57      	cmp	r3, #87	@ 0x57
 800e93c:	d810      	bhi.n	800e960 <__ssvfiscanf_r+0x104>
 800e93e:	2b25      	cmp	r3, #37	@ 0x25
 800e940:	d0c5      	beq.n	800e8ce <__ssvfiscanf_r+0x72>
 800e942:	d857      	bhi.n	800e9f4 <__ssvfiscanf_r+0x198>
 800e944:	2b00      	cmp	r3, #0
 800e946:	d065      	beq.n	800ea14 <__ssvfiscanf_r+0x1b8>
 800e948:	2303      	movs	r3, #3
 800e94a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e94c:	230a      	movs	r3, #10
 800e94e:	9342      	str	r3, [sp, #264]	@ 0x108
 800e950:	e078      	b.n	800ea44 <__ssvfiscanf_r+0x1e8>
 800e952:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800e954:	fb02 1103 	mla	r1, r2, r3, r1
 800e958:	3930      	subs	r1, #48	@ 0x30
 800e95a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e95c:	464d      	mov	r5, r9
 800e95e:	e7d2      	b.n	800e906 <__ssvfiscanf_r+0xaa>
 800e960:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800e964:	2a20      	cmp	r2, #32
 800e966:	d8ef      	bhi.n	800e948 <__ssvfiscanf_r+0xec>
 800e968:	a101      	add	r1, pc, #4	@ (adr r1, 800e970 <__ssvfiscanf_r+0x114>)
 800e96a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e96e:	bf00      	nop
 800e970:	0800ea23 	.word	0x0800ea23
 800e974:	0800e949 	.word	0x0800e949
 800e978:	0800e949 	.word	0x0800e949
 800e97c:	0800ea7d 	.word	0x0800ea7d
 800e980:	0800e949 	.word	0x0800e949
 800e984:	0800e949 	.word	0x0800e949
 800e988:	0800e949 	.word	0x0800e949
 800e98c:	0800e949 	.word	0x0800e949
 800e990:	0800e949 	.word	0x0800e949
 800e994:	0800e949 	.word	0x0800e949
 800e998:	0800e949 	.word	0x0800e949
 800e99c:	0800ea93 	.word	0x0800ea93
 800e9a0:	0800ea79 	.word	0x0800ea79
 800e9a4:	0800e9fb 	.word	0x0800e9fb
 800e9a8:	0800e9fb 	.word	0x0800e9fb
 800e9ac:	0800e9fb 	.word	0x0800e9fb
 800e9b0:	0800e949 	.word	0x0800e949
 800e9b4:	0800ea35 	.word	0x0800ea35
 800e9b8:	0800e949 	.word	0x0800e949
 800e9bc:	0800e949 	.word	0x0800e949
 800e9c0:	0800e949 	.word	0x0800e949
 800e9c4:	0800e949 	.word	0x0800e949
 800e9c8:	0800eaa3 	.word	0x0800eaa3
 800e9cc:	0800ea3d 	.word	0x0800ea3d
 800e9d0:	0800ea1b 	.word	0x0800ea1b
 800e9d4:	0800e949 	.word	0x0800e949
 800e9d8:	0800e949 	.word	0x0800e949
 800e9dc:	0800ea9f 	.word	0x0800ea9f
 800e9e0:	0800e949 	.word	0x0800e949
 800e9e4:	0800ea79 	.word	0x0800ea79
 800e9e8:	0800e949 	.word	0x0800e949
 800e9ec:	0800e949 	.word	0x0800e949
 800e9f0:	0800ea23 	.word	0x0800ea23
 800e9f4:	3b45      	subs	r3, #69	@ 0x45
 800e9f6:	2b02      	cmp	r3, #2
 800e9f8:	d8a6      	bhi.n	800e948 <__ssvfiscanf_r+0xec>
 800e9fa:	2305      	movs	r3, #5
 800e9fc:	e021      	b.n	800ea42 <__ssvfiscanf_r+0x1e6>
 800e9fe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ea00:	4621      	mov	r1, r4
 800ea02:	4630      	mov	r0, r6
 800ea04:	4798      	blx	r3
 800ea06:	2800      	cmp	r0, #0
 800ea08:	f43f af66 	beq.w	800e8d8 <__ssvfiscanf_r+0x7c>
 800ea0c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	f040 808b 	bne.w	800eb2a <__ssvfiscanf_r+0x2ce>
 800ea14:	f04f 30ff 	mov.w	r0, #4294967295
 800ea18:	e08b      	b.n	800eb32 <__ssvfiscanf_r+0x2d6>
 800ea1a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ea1c:	f042 0220 	orr.w	r2, r2, #32
 800ea20:	9241      	str	r2, [sp, #260]	@ 0x104
 800ea22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ea24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ea28:	9241      	str	r2, [sp, #260]	@ 0x104
 800ea2a:	2210      	movs	r2, #16
 800ea2c:	2b6e      	cmp	r3, #110	@ 0x6e
 800ea2e:	9242      	str	r2, [sp, #264]	@ 0x108
 800ea30:	d902      	bls.n	800ea38 <__ssvfiscanf_r+0x1dc>
 800ea32:	e005      	b.n	800ea40 <__ssvfiscanf_r+0x1e4>
 800ea34:	2300      	movs	r3, #0
 800ea36:	9342      	str	r3, [sp, #264]	@ 0x108
 800ea38:	2303      	movs	r3, #3
 800ea3a:	e002      	b.n	800ea42 <__ssvfiscanf_r+0x1e6>
 800ea3c:	2308      	movs	r3, #8
 800ea3e:	9342      	str	r3, [sp, #264]	@ 0x108
 800ea40:	2304      	movs	r3, #4
 800ea42:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ea44:	6863      	ldr	r3, [r4, #4]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	dd39      	ble.n	800eabe <__ssvfiscanf_r+0x262>
 800ea4a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ea4c:	0659      	lsls	r1, r3, #25
 800ea4e:	d404      	bmi.n	800ea5a <__ssvfiscanf_r+0x1fe>
 800ea50:	6823      	ldr	r3, [r4, #0]
 800ea52:	781a      	ldrb	r2, [r3, #0]
 800ea54:	5cba      	ldrb	r2, [r7, r2]
 800ea56:	0712      	lsls	r2, r2, #28
 800ea58:	d438      	bmi.n	800eacc <__ssvfiscanf_r+0x270>
 800ea5a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800ea5c:	2b02      	cmp	r3, #2
 800ea5e:	dc47      	bgt.n	800eaf0 <__ssvfiscanf_r+0x294>
 800ea60:	466b      	mov	r3, sp
 800ea62:	4622      	mov	r2, r4
 800ea64:	a941      	add	r1, sp, #260	@ 0x104
 800ea66:	4630      	mov	r0, r6
 800ea68:	f000 f86c 	bl	800eb44 <_scanf_chars>
 800ea6c:	2801      	cmp	r0, #1
 800ea6e:	d064      	beq.n	800eb3a <__ssvfiscanf_r+0x2de>
 800ea70:	2802      	cmp	r0, #2
 800ea72:	f47f af18 	bne.w	800e8a6 <__ssvfiscanf_r+0x4a>
 800ea76:	e7c9      	b.n	800ea0c <__ssvfiscanf_r+0x1b0>
 800ea78:	220a      	movs	r2, #10
 800ea7a:	e7d7      	b.n	800ea2c <__ssvfiscanf_r+0x1d0>
 800ea7c:	4629      	mov	r1, r5
 800ea7e:	4640      	mov	r0, r8
 800ea80:	f000 fa5a 	bl	800ef38 <__sccl>
 800ea84:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ea86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea8a:	9341      	str	r3, [sp, #260]	@ 0x104
 800ea8c:	4605      	mov	r5, r0
 800ea8e:	2301      	movs	r3, #1
 800ea90:	e7d7      	b.n	800ea42 <__ssvfiscanf_r+0x1e6>
 800ea92:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ea94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea98:	9341      	str	r3, [sp, #260]	@ 0x104
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	e7d1      	b.n	800ea42 <__ssvfiscanf_r+0x1e6>
 800ea9e:	2302      	movs	r3, #2
 800eaa0:	e7cf      	b.n	800ea42 <__ssvfiscanf_r+0x1e6>
 800eaa2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800eaa4:	06c3      	lsls	r3, r0, #27
 800eaa6:	f53f aefe 	bmi.w	800e8a6 <__ssvfiscanf_r+0x4a>
 800eaaa:	9b00      	ldr	r3, [sp, #0]
 800eaac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800eaae:	1d19      	adds	r1, r3, #4
 800eab0:	9100      	str	r1, [sp, #0]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	07c0      	lsls	r0, r0, #31
 800eab6:	bf4c      	ite	mi
 800eab8:	801a      	strhmi	r2, [r3, #0]
 800eaba:	601a      	strpl	r2, [r3, #0]
 800eabc:	e6f3      	b.n	800e8a6 <__ssvfiscanf_r+0x4a>
 800eabe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800eac0:	4621      	mov	r1, r4
 800eac2:	4630      	mov	r0, r6
 800eac4:	4798      	blx	r3
 800eac6:	2800      	cmp	r0, #0
 800eac8:	d0bf      	beq.n	800ea4a <__ssvfiscanf_r+0x1ee>
 800eaca:	e79f      	b.n	800ea0c <__ssvfiscanf_r+0x1b0>
 800eacc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800eace:	3201      	adds	r2, #1
 800ead0:	9245      	str	r2, [sp, #276]	@ 0x114
 800ead2:	6862      	ldr	r2, [r4, #4]
 800ead4:	3a01      	subs	r2, #1
 800ead6:	2a00      	cmp	r2, #0
 800ead8:	6062      	str	r2, [r4, #4]
 800eada:	dd02      	ble.n	800eae2 <__ssvfiscanf_r+0x286>
 800eadc:	3301      	adds	r3, #1
 800eade:	6023      	str	r3, [r4, #0]
 800eae0:	e7b6      	b.n	800ea50 <__ssvfiscanf_r+0x1f4>
 800eae2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800eae4:	4621      	mov	r1, r4
 800eae6:	4630      	mov	r0, r6
 800eae8:	4798      	blx	r3
 800eaea:	2800      	cmp	r0, #0
 800eaec:	d0b0      	beq.n	800ea50 <__ssvfiscanf_r+0x1f4>
 800eaee:	e78d      	b.n	800ea0c <__ssvfiscanf_r+0x1b0>
 800eaf0:	2b04      	cmp	r3, #4
 800eaf2:	dc0f      	bgt.n	800eb14 <__ssvfiscanf_r+0x2b8>
 800eaf4:	466b      	mov	r3, sp
 800eaf6:	4622      	mov	r2, r4
 800eaf8:	a941      	add	r1, sp, #260	@ 0x104
 800eafa:	4630      	mov	r0, r6
 800eafc:	f000 f87c 	bl	800ebf8 <_scanf_i>
 800eb00:	e7b4      	b.n	800ea6c <__ssvfiscanf_r+0x210>
 800eb02:	bf00      	nop
 800eb04:	0800e7ad 	.word	0x0800e7ad
 800eb08:	0800e823 	.word	0x0800e823
 800eb0c:	08011a21 	.word	0x08011a21
 800eb10:	08011e56 	.word	0x08011e56
 800eb14:	4b0a      	ldr	r3, [pc, #40]	@ (800eb40 <__ssvfiscanf_r+0x2e4>)
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	f43f aec5 	beq.w	800e8a6 <__ssvfiscanf_r+0x4a>
 800eb1c:	466b      	mov	r3, sp
 800eb1e:	4622      	mov	r2, r4
 800eb20:	a941      	add	r1, sp, #260	@ 0x104
 800eb22:	4630      	mov	r0, r6
 800eb24:	f7fc fb40 	bl	800b1a8 <_scanf_float>
 800eb28:	e7a0      	b.n	800ea6c <__ssvfiscanf_r+0x210>
 800eb2a:	89a3      	ldrh	r3, [r4, #12]
 800eb2c:	065b      	lsls	r3, r3, #25
 800eb2e:	f53f af71 	bmi.w	800ea14 <__ssvfiscanf_r+0x1b8>
 800eb32:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800eb36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb3a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800eb3c:	e7f9      	b.n	800eb32 <__ssvfiscanf_r+0x2d6>
 800eb3e:	bf00      	nop
 800eb40:	0800b1a9 	.word	0x0800b1a9

0800eb44 <_scanf_chars>:
 800eb44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb48:	4615      	mov	r5, r2
 800eb4a:	688a      	ldr	r2, [r1, #8]
 800eb4c:	4680      	mov	r8, r0
 800eb4e:	460c      	mov	r4, r1
 800eb50:	b932      	cbnz	r2, 800eb60 <_scanf_chars+0x1c>
 800eb52:	698a      	ldr	r2, [r1, #24]
 800eb54:	2a00      	cmp	r2, #0
 800eb56:	bf14      	ite	ne
 800eb58:	f04f 32ff 	movne.w	r2, #4294967295
 800eb5c:	2201      	moveq	r2, #1
 800eb5e:	608a      	str	r2, [r1, #8]
 800eb60:	6822      	ldr	r2, [r4, #0]
 800eb62:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ebf4 <_scanf_chars+0xb0>
 800eb66:	06d1      	lsls	r1, r2, #27
 800eb68:	bf5f      	itttt	pl
 800eb6a:	681a      	ldrpl	r2, [r3, #0]
 800eb6c:	1d11      	addpl	r1, r2, #4
 800eb6e:	6019      	strpl	r1, [r3, #0]
 800eb70:	6816      	ldrpl	r6, [r2, #0]
 800eb72:	2700      	movs	r7, #0
 800eb74:	69a0      	ldr	r0, [r4, #24]
 800eb76:	b188      	cbz	r0, 800eb9c <_scanf_chars+0x58>
 800eb78:	2801      	cmp	r0, #1
 800eb7a:	d107      	bne.n	800eb8c <_scanf_chars+0x48>
 800eb7c:	682b      	ldr	r3, [r5, #0]
 800eb7e:	781a      	ldrb	r2, [r3, #0]
 800eb80:	6963      	ldr	r3, [r4, #20]
 800eb82:	5c9b      	ldrb	r3, [r3, r2]
 800eb84:	b953      	cbnz	r3, 800eb9c <_scanf_chars+0x58>
 800eb86:	2f00      	cmp	r7, #0
 800eb88:	d031      	beq.n	800ebee <_scanf_chars+0xaa>
 800eb8a:	e022      	b.n	800ebd2 <_scanf_chars+0x8e>
 800eb8c:	2802      	cmp	r0, #2
 800eb8e:	d120      	bne.n	800ebd2 <_scanf_chars+0x8e>
 800eb90:	682b      	ldr	r3, [r5, #0]
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	f819 3003 	ldrb.w	r3, [r9, r3]
 800eb98:	071b      	lsls	r3, r3, #28
 800eb9a:	d41a      	bmi.n	800ebd2 <_scanf_chars+0x8e>
 800eb9c:	6823      	ldr	r3, [r4, #0]
 800eb9e:	06da      	lsls	r2, r3, #27
 800eba0:	bf5e      	ittt	pl
 800eba2:	682b      	ldrpl	r3, [r5, #0]
 800eba4:	781b      	ldrbpl	r3, [r3, #0]
 800eba6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ebaa:	682a      	ldr	r2, [r5, #0]
 800ebac:	686b      	ldr	r3, [r5, #4]
 800ebae:	3201      	adds	r2, #1
 800ebb0:	602a      	str	r2, [r5, #0]
 800ebb2:	68a2      	ldr	r2, [r4, #8]
 800ebb4:	3b01      	subs	r3, #1
 800ebb6:	3a01      	subs	r2, #1
 800ebb8:	606b      	str	r3, [r5, #4]
 800ebba:	3701      	adds	r7, #1
 800ebbc:	60a2      	str	r2, [r4, #8]
 800ebbe:	b142      	cbz	r2, 800ebd2 <_scanf_chars+0x8e>
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	dcd7      	bgt.n	800eb74 <_scanf_chars+0x30>
 800ebc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ebc8:	4629      	mov	r1, r5
 800ebca:	4640      	mov	r0, r8
 800ebcc:	4798      	blx	r3
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	d0d0      	beq.n	800eb74 <_scanf_chars+0x30>
 800ebd2:	6823      	ldr	r3, [r4, #0]
 800ebd4:	f013 0310 	ands.w	r3, r3, #16
 800ebd8:	d105      	bne.n	800ebe6 <_scanf_chars+0xa2>
 800ebda:	68e2      	ldr	r2, [r4, #12]
 800ebdc:	3201      	adds	r2, #1
 800ebde:	60e2      	str	r2, [r4, #12]
 800ebe0:	69a2      	ldr	r2, [r4, #24]
 800ebe2:	b102      	cbz	r2, 800ebe6 <_scanf_chars+0xa2>
 800ebe4:	7033      	strb	r3, [r6, #0]
 800ebe6:	6923      	ldr	r3, [r4, #16]
 800ebe8:	443b      	add	r3, r7
 800ebea:	6123      	str	r3, [r4, #16]
 800ebec:	2000      	movs	r0, #0
 800ebee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebf2:	bf00      	nop
 800ebf4:	08011a21 	.word	0x08011a21

0800ebf8 <_scanf_i>:
 800ebf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebfc:	4698      	mov	r8, r3
 800ebfe:	4b74      	ldr	r3, [pc, #464]	@ (800edd0 <_scanf_i+0x1d8>)
 800ec00:	460c      	mov	r4, r1
 800ec02:	4682      	mov	sl, r0
 800ec04:	4616      	mov	r6, r2
 800ec06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ec0a:	b087      	sub	sp, #28
 800ec0c:	ab03      	add	r3, sp, #12
 800ec0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ec12:	4b70      	ldr	r3, [pc, #448]	@ (800edd4 <_scanf_i+0x1dc>)
 800ec14:	69a1      	ldr	r1, [r4, #24]
 800ec16:	4a70      	ldr	r2, [pc, #448]	@ (800edd8 <_scanf_i+0x1e0>)
 800ec18:	2903      	cmp	r1, #3
 800ec1a:	bf08      	it	eq
 800ec1c:	461a      	moveq	r2, r3
 800ec1e:	68a3      	ldr	r3, [r4, #8]
 800ec20:	9201      	str	r2, [sp, #4]
 800ec22:	1e5a      	subs	r2, r3, #1
 800ec24:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ec28:	bf88      	it	hi
 800ec2a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ec2e:	4627      	mov	r7, r4
 800ec30:	bf82      	ittt	hi
 800ec32:	eb03 0905 	addhi.w	r9, r3, r5
 800ec36:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ec3a:	60a3      	strhi	r3, [r4, #8]
 800ec3c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ec40:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ec44:	bf98      	it	ls
 800ec46:	f04f 0900 	movls.w	r9, #0
 800ec4a:	6023      	str	r3, [r4, #0]
 800ec4c:	463d      	mov	r5, r7
 800ec4e:	f04f 0b00 	mov.w	fp, #0
 800ec52:	6831      	ldr	r1, [r6, #0]
 800ec54:	ab03      	add	r3, sp, #12
 800ec56:	7809      	ldrb	r1, [r1, #0]
 800ec58:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ec5c:	2202      	movs	r2, #2
 800ec5e:	f7f1 fac7 	bl	80001f0 <memchr>
 800ec62:	b328      	cbz	r0, 800ecb0 <_scanf_i+0xb8>
 800ec64:	f1bb 0f01 	cmp.w	fp, #1
 800ec68:	d159      	bne.n	800ed1e <_scanf_i+0x126>
 800ec6a:	6862      	ldr	r2, [r4, #4]
 800ec6c:	b92a      	cbnz	r2, 800ec7a <_scanf_i+0x82>
 800ec6e:	6822      	ldr	r2, [r4, #0]
 800ec70:	2108      	movs	r1, #8
 800ec72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ec76:	6061      	str	r1, [r4, #4]
 800ec78:	6022      	str	r2, [r4, #0]
 800ec7a:	6822      	ldr	r2, [r4, #0]
 800ec7c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ec80:	6022      	str	r2, [r4, #0]
 800ec82:	68a2      	ldr	r2, [r4, #8]
 800ec84:	1e51      	subs	r1, r2, #1
 800ec86:	60a1      	str	r1, [r4, #8]
 800ec88:	b192      	cbz	r2, 800ecb0 <_scanf_i+0xb8>
 800ec8a:	6832      	ldr	r2, [r6, #0]
 800ec8c:	1c51      	adds	r1, r2, #1
 800ec8e:	6031      	str	r1, [r6, #0]
 800ec90:	7812      	ldrb	r2, [r2, #0]
 800ec92:	f805 2b01 	strb.w	r2, [r5], #1
 800ec96:	6872      	ldr	r2, [r6, #4]
 800ec98:	3a01      	subs	r2, #1
 800ec9a:	2a00      	cmp	r2, #0
 800ec9c:	6072      	str	r2, [r6, #4]
 800ec9e:	dc07      	bgt.n	800ecb0 <_scanf_i+0xb8>
 800eca0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800eca4:	4631      	mov	r1, r6
 800eca6:	4650      	mov	r0, sl
 800eca8:	4790      	blx	r2
 800ecaa:	2800      	cmp	r0, #0
 800ecac:	f040 8085 	bne.w	800edba <_scanf_i+0x1c2>
 800ecb0:	f10b 0b01 	add.w	fp, fp, #1
 800ecb4:	f1bb 0f03 	cmp.w	fp, #3
 800ecb8:	d1cb      	bne.n	800ec52 <_scanf_i+0x5a>
 800ecba:	6863      	ldr	r3, [r4, #4]
 800ecbc:	b90b      	cbnz	r3, 800ecc2 <_scanf_i+0xca>
 800ecbe:	230a      	movs	r3, #10
 800ecc0:	6063      	str	r3, [r4, #4]
 800ecc2:	6863      	ldr	r3, [r4, #4]
 800ecc4:	4945      	ldr	r1, [pc, #276]	@ (800eddc <_scanf_i+0x1e4>)
 800ecc6:	6960      	ldr	r0, [r4, #20]
 800ecc8:	1ac9      	subs	r1, r1, r3
 800ecca:	f000 f935 	bl	800ef38 <__sccl>
 800ecce:	f04f 0b00 	mov.w	fp, #0
 800ecd2:	68a3      	ldr	r3, [r4, #8]
 800ecd4:	6822      	ldr	r2, [r4, #0]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d03d      	beq.n	800ed56 <_scanf_i+0x15e>
 800ecda:	6831      	ldr	r1, [r6, #0]
 800ecdc:	6960      	ldr	r0, [r4, #20]
 800ecde:	f891 c000 	ldrb.w	ip, [r1]
 800ece2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ece6:	2800      	cmp	r0, #0
 800ece8:	d035      	beq.n	800ed56 <_scanf_i+0x15e>
 800ecea:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ecee:	d124      	bne.n	800ed3a <_scanf_i+0x142>
 800ecf0:	0510      	lsls	r0, r2, #20
 800ecf2:	d522      	bpl.n	800ed3a <_scanf_i+0x142>
 800ecf4:	f10b 0b01 	add.w	fp, fp, #1
 800ecf8:	f1b9 0f00 	cmp.w	r9, #0
 800ecfc:	d003      	beq.n	800ed06 <_scanf_i+0x10e>
 800ecfe:	3301      	adds	r3, #1
 800ed00:	f109 39ff 	add.w	r9, r9, #4294967295
 800ed04:	60a3      	str	r3, [r4, #8]
 800ed06:	6873      	ldr	r3, [r6, #4]
 800ed08:	3b01      	subs	r3, #1
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	6073      	str	r3, [r6, #4]
 800ed0e:	dd1b      	ble.n	800ed48 <_scanf_i+0x150>
 800ed10:	6833      	ldr	r3, [r6, #0]
 800ed12:	3301      	adds	r3, #1
 800ed14:	6033      	str	r3, [r6, #0]
 800ed16:	68a3      	ldr	r3, [r4, #8]
 800ed18:	3b01      	subs	r3, #1
 800ed1a:	60a3      	str	r3, [r4, #8]
 800ed1c:	e7d9      	b.n	800ecd2 <_scanf_i+0xda>
 800ed1e:	f1bb 0f02 	cmp.w	fp, #2
 800ed22:	d1ae      	bne.n	800ec82 <_scanf_i+0x8a>
 800ed24:	6822      	ldr	r2, [r4, #0]
 800ed26:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ed2a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ed2e:	d1bf      	bne.n	800ecb0 <_scanf_i+0xb8>
 800ed30:	2110      	movs	r1, #16
 800ed32:	6061      	str	r1, [r4, #4]
 800ed34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ed38:	e7a2      	b.n	800ec80 <_scanf_i+0x88>
 800ed3a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ed3e:	6022      	str	r2, [r4, #0]
 800ed40:	780b      	ldrb	r3, [r1, #0]
 800ed42:	f805 3b01 	strb.w	r3, [r5], #1
 800ed46:	e7de      	b.n	800ed06 <_scanf_i+0x10e>
 800ed48:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ed4c:	4631      	mov	r1, r6
 800ed4e:	4650      	mov	r0, sl
 800ed50:	4798      	blx	r3
 800ed52:	2800      	cmp	r0, #0
 800ed54:	d0df      	beq.n	800ed16 <_scanf_i+0x11e>
 800ed56:	6823      	ldr	r3, [r4, #0]
 800ed58:	05d9      	lsls	r1, r3, #23
 800ed5a:	d50d      	bpl.n	800ed78 <_scanf_i+0x180>
 800ed5c:	42bd      	cmp	r5, r7
 800ed5e:	d909      	bls.n	800ed74 <_scanf_i+0x17c>
 800ed60:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ed64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ed68:	4632      	mov	r2, r6
 800ed6a:	4650      	mov	r0, sl
 800ed6c:	4798      	blx	r3
 800ed6e:	f105 39ff 	add.w	r9, r5, #4294967295
 800ed72:	464d      	mov	r5, r9
 800ed74:	42bd      	cmp	r5, r7
 800ed76:	d028      	beq.n	800edca <_scanf_i+0x1d2>
 800ed78:	6822      	ldr	r2, [r4, #0]
 800ed7a:	f012 0210 	ands.w	r2, r2, #16
 800ed7e:	d113      	bne.n	800eda8 <_scanf_i+0x1b0>
 800ed80:	702a      	strb	r2, [r5, #0]
 800ed82:	6863      	ldr	r3, [r4, #4]
 800ed84:	9e01      	ldr	r6, [sp, #4]
 800ed86:	4639      	mov	r1, r7
 800ed88:	4650      	mov	r0, sl
 800ed8a:	47b0      	blx	r6
 800ed8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ed90:	6821      	ldr	r1, [r4, #0]
 800ed92:	1d1a      	adds	r2, r3, #4
 800ed94:	f8c8 2000 	str.w	r2, [r8]
 800ed98:	f011 0f20 	tst.w	r1, #32
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	d00f      	beq.n	800edc0 <_scanf_i+0x1c8>
 800eda0:	6018      	str	r0, [r3, #0]
 800eda2:	68e3      	ldr	r3, [r4, #12]
 800eda4:	3301      	adds	r3, #1
 800eda6:	60e3      	str	r3, [r4, #12]
 800eda8:	6923      	ldr	r3, [r4, #16]
 800edaa:	1bed      	subs	r5, r5, r7
 800edac:	445d      	add	r5, fp
 800edae:	442b      	add	r3, r5
 800edb0:	6123      	str	r3, [r4, #16]
 800edb2:	2000      	movs	r0, #0
 800edb4:	b007      	add	sp, #28
 800edb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edba:	f04f 0b00 	mov.w	fp, #0
 800edbe:	e7ca      	b.n	800ed56 <_scanf_i+0x15e>
 800edc0:	07ca      	lsls	r2, r1, #31
 800edc2:	bf4c      	ite	mi
 800edc4:	8018      	strhmi	r0, [r3, #0]
 800edc6:	6018      	strpl	r0, [r3, #0]
 800edc8:	e7eb      	b.n	800eda2 <_scanf_i+0x1aa>
 800edca:	2001      	movs	r0, #1
 800edcc:	e7f2      	b.n	800edb4 <_scanf_i+0x1bc>
 800edce:	bf00      	nop
 800edd0:	0800f828 	.word	0x0800f828
 800edd4:	0800a8e1 	.word	0x0800a8e1
 800edd8:	0800e4cd 	.word	0x0800e4cd
 800eddc:	08011e71 	.word	0x08011e71

0800ede0 <__sflush_r>:
 800ede0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ede4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ede8:	0716      	lsls	r6, r2, #28
 800edea:	4605      	mov	r5, r0
 800edec:	460c      	mov	r4, r1
 800edee:	d454      	bmi.n	800ee9a <__sflush_r+0xba>
 800edf0:	684b      	ldr	r3, [r1, #4]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	dc02      	bgt.n	800edfc <__sflush_r+0x1c>
 800edf6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	dd48      	ble.n	800ee8e <__sflush_r+0xae>
 800edfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800edfe:	2e00      	cmp	r6, #0
 800ee00:	d045      	beq.n	800ee8e <__sflush_r+0xae>
 800ee02:	2300      	movs	r3, #0
 800ee04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ee08:	682f      	ldr	r7, [r5, #0]
 800ee0a:	6a21      	ldr	r1, [r4, #32]
 800ee0c:	602b      	str	r3, [r5, #0]
 800ee0e:	d030      	beq.n	800ee72 <__sflush_r+0x92>
 800ee10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ee12:	89a3      	ldrh	r3, [r4, #12]
 800ee14:	0759      	lsls	r1, r3, #29
 800ee16:	d505      	bpl.n	800ee24 <__sflush_r+0x44>
 800ee18:	6863      	ldr	r3, [r4, #4]
 800ee1a:	1ad2      	subs	r2, r2, r3
 800ee1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ee1e:	b10b      	cbz	r3, 800ee24 <__sflush_r+0x44>
 800ee20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ee22:	1ad2      	subs	r2, r2, r3
 800ee24:	2300      	movs	r3, #0
 800ee26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee28:	6a21      	ldr	r1, [r4, #32]
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	47b0      	blx	r6
 800ee2e:	1c43      	adds	r3, r0, #1
 800ee30:	89a3      	ldrh	r3, [r4, #12]
 800ee32:	d106      	bne.n	800ee42 <__sflush_r+0x62>
 800ee34:	6829      	ldr	r1, [r5, #0]
 800ee36:	291d      	cmp	r1, #29
 800ee38:	d82b      	bhi.n	800ee92 <__sflush_r+0xb2>
 800ee3a:	4a2a      	ldr	r2, [pc, #168]	@ (800eee4 <__sflush_r+0x104>)
 800ee3c:	410a      	asrs	r2, r1
 800ee3e:	07d6      	lsls	r6, r2, #31
 800ee40:	d427      	bmi.n	800ee92 <__sflush_r+0xb2>
 800ee42:	2200      	movs	r2, #0
 800ee44:	6062      	str	r2, [r4, #4]
 800ee46:	04d9      	lsls	r1, r3, #19
 800ee48:	6922      	ldr	r2, [r4, #16]
 800ee4a:	6022      	str	r2, [r4, #0]
 800ee4c:	d504      	bpl.n	800ee58 <__sflush_r+0x78>
 800ee4e:	1c42      	adds	r2, r0, #1
 800ee50:	d101      	bne.n	800ee56 <__sflush_r+0x76>
 800ee52:	682b      	ldr	r3, [r5, #0]
 800ee54:	b903      	cbnz	r3, 800ee58 <__sflush_r+0x78>
 800ee56:	6560      	str	r0, [r4, #84]	@ 0x54
 800ee58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee5a:	602f      	str	r7, [r5, #0]
 800ee5c:	b1b9      	cbz	r1, 800ee8e <__sflush_r+0xae>
 800ee5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee62:	4299      	cmp	r1, r3
 800ee64:	d002      	beq.n	800ee6c <__sflush_r+0x8c>
 800ee66:	4628      	mov	r0, r5
 800ee68:	f7fe fa36 	bl	800d2d8 <_free_r>
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ee70:	e00d      	b.n	800ee8e <__sflush_r+0xae>
 800ee72:	2301      	movs	r3, #1
 800ee74:	4628      	mov	r0, r5
 800ee76:	47b0      	blx	r6
 800ee78:	4602      	mov	r2, r0
 800ee7a:	1c50      	adds	r0, r2, #1
 800ee7c:	d1c9      	bne.n	800ee12 <__sflush_r+0x32>
 800ee7e:	682b      	ldr	r3, [r5, #0]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d0c6      	beq.n	800ee12 <__sflush_r+0x32>
 800ee84:	2b1d      	cmp	r3, #29
 800ee86:	d001      	beq.n	800ee8c <__sflush_r+0xac>
 800ee88:	2b16      	cmp	r3, #22
 800ee8a:	d11e      	bne.n	800eeca <__sflush_r+0xea>
 800ee8c:	602f      	str	r7, [r5, #0]
 800ee8e:	2000      	movs	r0, #0
 800ee90:	e022      	b.n	800eed8 <__sflush_r+0xf8>
 800ee92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee96:	b21b      	sxth	r3, r3
 800ee98:	e01b      	b.n	800eed2 <__sflush_r+0xf2>
 800ee9a:	690f      	ldr	r7, [r1, #16]
 800ee9c:	2f00      	cmp	r7, #0
 800ee9e:	d0f6      	beq.n	800ee8e <__sflush_r+0xae>
 800eea0:	0793      	lsls	r3, r2, #30
 800eea2:	680e      	ldr	r6, [r1, #0]
 800eea4:	bf08      	it	eq
 800eea6:	694b      	ldreq	r3, [r1, #20]
 800eea8:	600f      	str	r7, [r1, #0]
 800eeaa:	bf18      	it	ne
 800eeac:	2300      	movne	r3, #0
 800eeae:	eba6 0807 	sub.w	r8, r6, r7
 800eeb2:	608b      	str	r3, [r1, #8]
 800eeb4:	f1b8 0f00 	cmp.w	r8, #0
 800eeb8:	dde9      	ble.n	800ee8e <__sflush_r+0xae>
 800eeba:	6a21      	ldr	r1, [r4, #32]
 800eebc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eebe:	4643      	mov	r3, r8
 800eec0:	463a      	mov	r2, r7
 800eec2:	4628      	mov	r0, r5
 800eec4:	47b0      	blx	r6
 800eec6:	2800      	cmp	r0, #0
 800eec8:	dc08      	bgt.n	800eedc <__sflush_r+0xfc>
 800eeca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eed2:	81a3      	strh	r3, [r4, #12]
 800eed4:	f04f 30ff 	mov.w	r0, #4294967295
 800eed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eedc:	4407      	add	r7, r0
 800eede:	eba8 0800 	sub.w	r8, r8, r0
 800eee2:	e7e7      	b.n	800eeb4 <__sflush_r+0xd4>
 800eee4:	dfbffffe 	.word	0xdfbffffe

0800eee8 <_fflush_r>:
 800eee8:	b538      	push	{r3, r4, r5, lr}
 800eeea:	690b      	ldr	r3, [r1, #16]
 800eeec:	4605      	mov	r5, r0
 800eeee:	460c      	mov	r4, r1
 800eef0:	b913      	cbnz	r3, 800eef8 <_fflush_r+0x10>
 800eef2:	2500      	movs	r5, #0
 800eef4:	4628      	mov	r0, r5
 800eef6:	bd38      	pop	{r3, r4, r5, pc}
 800eef8:	b118      	cbz	r0, 800ef02 <_fflush_r+0x1a>
 800eefa:	6a03      	ldr	r3, [r0, #32]
 800eefc:	b90b      	cbnz	r3, 800ef02 <_fflush_r+0x1a>
 800eefe:	f7fc fbf3 	bl	800b6e8 <__sinit>
 800ef02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d0f3      	beq.n	800eef2 <_fflush_r+0xa>
 800ef0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ef0c:	07d0      	lsls	r0, r2, #31
 800ef0e:	d404      	bmi.n	800ef1a <_fflush_r+0x32>
 800ef10:	0599      	lsls	r1, r3, #22
 800ef12:	d402      	bmi.n	800ef1a <_fflush_r+0x32>
 800ef14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef16:	f7f5 fea8 	bl	8004c6a <__retarget_lock_acquire_recursive>
 800ef1a:	4628      	mov	r0, r5
 800ef1c:	4621      	mov	r1, r4
 800ef1e:	f7ff ff5f 	bl	800ede0 <__sflush_r>
 800ef22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef24:	07da      	lsls	r2, r3, #31
 800ef26:	4605      	mov	r5, r0
 800ef28:	d4e4      	bmi.n	800eef4 <_fflush_r+0xc>
 800ef2a:	89a3      	ldrh	r3, [r4, #12]
 800ef2c:	059b      	lsls	r3, r3, #22
 800ef2e:	d4e1      	bmi.n	800eef4 <_fflush_r+0xc>
 800ef30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef32:	f7f5 fea6 	bl	8004c82 <__retarget_lock_release_recursive>
 800ef36:	e7dd      	b.n	800eef4 <_fflush_r+0xc>

0800ef38 <__sccl>:
 800ef38:	b570      	push	{r4, r5, r6, lr}
 800ef3a:	780b      	ldrb	r3, [r1, #0]
 800ef3c:	4604      	mov	r4, r0
 800ef3e:	2b5e      	cmp	r3, #94	@ 0x5e
 800ef40:	bf0b      	itete	eq
 800ef42:	784b      	ldrbeq	r3, [r1, #1]
 800ef44:	1c4a      	addne	r2, r1, #1
 800ef46:	1c8a      	addeq	r2, r1, #2
 800ef48:	2100      	movne	r1, #0
 800ef4a:	bf08      	it	eq
 800ef4c:	2101      	moveq	r1, #1
 800ef4e:	3801      	subs	r0, #1
 800ef50:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ef54:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ef58:	42a8      	cmp	r0, r5
 800ef5a:	d1fb      	bne.n	800ef54 <__sccl+0x1c>
 800ef5c:	b90b      	cbnz	r3, 800ef62 <__sccl+0x2a>
 800ef5e:	1e50      	subs	r0, r2, #1
 800ef60:	bd70      	pop	{r4, r5, r6, pc}
 800ef62:	f081 0101 	eor.w	r1, r1, #1
 800ef66:	54e1      	strb	r1, [r4, r3]
 800ef68:	4610      	mov	r0, r2
 800ef6a:	4602      	mov	r2, r0
 800ef6c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ef70:	2d2d      	cmp	r5, #45	@ 0x2d
 800ef72:	d005      	beq.n	800ef80 <__sccl+0x48>
 800ef74:	2d5d      	cmp	r5, #93	@ 0x5d
 800ef76:	d016      	beq.n	800efa6 <__sccl+0x6e>
 800ef78:	2d00      	cmp	r5, #0
 800ef7a:	d0f1      	beq.n	800ef60 <__sccl+0x28>
 800ef7c:	462b      	mov	r3, r5
 800ef7e:	e7f2      	b.n	800ef66 <__sccl+0x2e>
 800ef80:	7846      	ldrb	r6, [r0, #1]
 800ef82:	2e5d      	cmp	r6, #93	@ 0x5d
 800ef84:	d0fa      	beq.n	800ef7c <__sccl+0x44>
 800ef86:	42b3      	cmp	r3, r6
 800ef88:	dcf8      	bgt.n	800ef7c <__sccl+0x44>
 800ef8a:	3002      	adds	r0, #2
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	3201      	adds	r2, #1
 800ef90:	4296      	cmp	r6, r2
 800ef92:	54a1      	strb	r1, [r4, r2]
 800ef94:	dcfb      	bgt.n	800ef8e <__sccl+0x56>
 800ef96:	1af2      	subs	r2, r6, r3
 800ef98:	3a01      	subs	r2, #1
 800ef9a:	1c5d      	adds	r5, r3, #1
 800ef9c:	42b3      	cmp	r3, r6
 800ef9e:	bfa8      	it	ge
 800efa0:	2200      	movge	r2, #0
 800efa2:	18ab      	adds	r3, r5, r2
 800efa4:	e7e1      	b.n	800ef6a <__sccl+0x32>
 800efa6:	4610      	mov	r0, r2
 800efa8:	e7da      	b.n	800ef60 <__sccl+0x28>

0800efaa <__submore>:
 800efaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efae:	460c      	mov	r4, r1
 800efb0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800efb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800efb6:	4299      	cmp	r1, r3
 800efb8:	d11d      	bne.n	800eff6 <__submore+0x4c>
 800efba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800efbe:	f7fa fd7f 	bl	8009ac0 <_malloc_r>
 800efc2:	b918      	cbnz	r0, 800efcc <__submore+0x22>
 800efc4:	f04f 30ff 	mov.w	r0, #4294967295
 800efc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800efd0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800efd2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800efd6:	6360      	str	r0, [r4, #52]	@ 0x34
 800efd8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800efdc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800efe0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800efe4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800efe8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800efec:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800eff0:	6020      	str	r0, [r4, #0]
 800eff2:	2000      	movs	r0, #0
 800eff4:	e7e8      	b.n	800efc8 <__submore+0x1e>
 800eff6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800eff8:	0077      	lsls	r7, r6, #1
 800effa:	463a      	mov	r2, r7
 800effc:	f000 f86c 	bl	800f0d8 <_realloc_r>
 800f000:	4605      	mov	r5, r0
 800f002:	2800      	cmp	r0, #0
 800f004:	d0de      	beq.n	800efc4 <__submore+0x1a>
 800f006:	eb00 0806 	add.w	r8, r0, r6
 800f00a:	4601      	mov	r1, r0
 800f00c:	4632      	mov	r2, r6
 800f00e:	4640      	mov	r0, r8
 800f010:	f7fd faf0 	bl	800c5f4 <memcpy>
 800f014:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f018:	f8c4 8000 	str.w	r8, [r4]
 800f01c:	e7e9      	b.n	800eff2 <__submore+0x48>

0800f01e <memmove>:
 800f01e:	4288      	cmp	r0, r1
 800f020:	b510      	push	{r4, lr}
 800f022:	eb01 0402 	add.w	r4, r1, r2
 800f026:	d902      	bls.n	800f02e <memmove+0x10>
 800f028:	4284      	cmp	r4, r0
 800f02a:	4623      	mov	r3, r4
 800f02c:	d807      	bhi.n	800f03e <memmove+0x20>
 800f02e:	1e43      	subs	r3, r0, #1
 800f030:	42a1      	cmp	r1, r4
 800f032:	d008      	beq.n	800f046 <memmove+0x28>
 800f034:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f038:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f03c:	e7f8      	b.n	800f030 <memmove+0x12>
 800f03e:	4402      	add	r2, r0
 800f040:	4601      	mov	r1, r0
 800f042:	428a      	cmp	r2, r1
 800f044:	d100      	bne.n	800f048 <memmove+0x2a>
 800f046:	bd10      	pop	{r4, pc}
 800f048:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f04c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f050:	e7f7      	b.n	800f042 <memmove+0x24>
	...

0800f054 <__gettzinfo>:
 800f054:	4800      	ldr	r0, [pc, #0]	@ (800f058 <__gettzinfo+0x4>)
 800f056:	4770      	bx	lr
 800f058:	200001f0 	.word	0x200001f0

0800f05c <__assert_func>:
 800f05c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f05e:	4614      	mov	r4, r2
 800f060:	461a      	mov	r2, r3
 800f062:	4b09      	ldr	r3, [pc, #36]	@ (800f088 <__assert_func+0x2c>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	4605      	mov	r5, r0
 800f068:	68d8      	ldr	r0, [r3, #12]
 800f06a:	b954      	cbnz	r4, 800f082 <__assert_func+0x26>
 800f06c:	4b07      	ldr	r3, [pc, #28]	@ (800f08c <__assert_func+0x30>)
 800f06e:	461c      	mov	r4, r3
 800f070:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f074:	9100      	str	r1, [sp, #0]
 800f076:	462b      	mov	r3, r5
 800f078:	4905      	ldr	r1, [pc, #20]	@ (800f090 <__assert_func+0x34>)
 800f07a:	f000 f85b 	bl	800f134 <fiprintf>
 800f07e:	f000 f86b 	bl	800f158 <abort>
 800f082:	4b04      	ldr	r3, [pc, #16]	@ (800f094 <__assert_func+0x38>)
 800f084:	e7f4      	b.n	800f070 <__assert_func+0x14>
 800f086:	bf00      	nop
 800f088:	200001a0 	.word	0x200001a0
 800f08c:	080109db 	.word	0x080109db
 800f090:	08011ee9 	.word	0x08011ee9
 800f094:	08011edc 	.word	0x08011edc

0800f098 <_calloc_r>:
 800f098:	b570      	push	{r4, r5, r6, lr}
 800f09a:	fba1 5402 	umull	r5, r4, r1, r2
 800f09e:	b93c      	cbnz	r4, 800f0b0 <_calloc_r+0x18>
 800f0a0:	4629      	mov	r1, r5
 800f0a2:	f7fa fd0d 	bl	8009ac0 <_malloc_r>
 800f0a6:	4606      	mov	r6, r0
 800f0a8:	b928      	cbnz	r0, 800f0b6 <_calloc_r+0x1e>
 800f0aa:	2600      	movs	r6, #0
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	bd70      	pop	{r4, r5, r6, pc}
 800f0b0:	220c      	movs	r2, #12
 800f0b2:	6002      	str	r2, [r0, #0]
 800f0b4:	e7f9      	b.n	800f0aa <_calloc_r+0x12>
 800f0b6:	462a      	mov	r2, r5
 800f0b8:	4621      	mov	r1, r4
 800f0ba:	f7fc fc47 	bl	800b94c <memset>
 800f0be:	e7f5      	b.n	800f0ac <_calloc_r+0x14>

0800f0c0 <__env_lock>:
 800f0c0:	4801      	ldr	r0, [pc, #4]	@ (800f0c8 <__env_lock+0x8>)
 800f0c2:	f7f5 bdd2 	b.w	8004c6a <__retarget_lock_acquire_recursive>
 800f0c6:	bf00      	nop
 800f0c8:	20001740 	.word	0x20001740

0800f0cc <__env_unlock>:
 800f0cc:	4801      	ldr	r0, [pc, #4]	@ (800f0d4 <__env_unlock+0x8>)
 800f0ce:	f7f5 bdd8 	b.w	8004c82 <__retarget_lock_release_recursive>
 800f0d2:	bf00      	nop
 800f0d4:	20001740 	.word	0x20001740

0800f0d8 <_realloc_r>:
 800f0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0dc:	4680      	mov	r8, r0
 800f0de:	4615      	mov	r5, r2
 800f0e0:	460c      	mov	r4, r1
 800f0e2:	b921      	cbnz	r1, 800f0ee <_realloc_r+0x16>
 800f0e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0e8:	4611      	mov	r1, r2
 800f0ea:	f7fa bce9 	b.w	8009ac0 <_malloc_r>
 800f0ee:	b92a      	cbnz	r2, 800f0fc <_realloc_r+0x24>
 800f0f0:	f7fe f8f2 	bl	800d2d8 <_free_r>
 800f0f4:	2400      	movs	r4, #0
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0fc:	f000 f833 	bl	800f166 <_malloc_usable_size_r>
 800f100:	4285      	cmp	r5, r0
 800f102:	4606      	mov	r6, r0
 800f104:	d802      	bhi.n	800f10c <_realloc_r+0x34>
 800f106:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f10a:	d8f4      	bhi.n	800f0f6 <_realloc_r+0x1e>
 800f10c:	4629      	mov	r1, r5
 800f10e:	4640      	mov	r0, r8
 800f110:	f7fa fcd6 	bl	8009ac0 <_malloc_r>
 800f114:	4607      	mov	r7, r0
 800f116:	2800      	cmp	r0, #0
 800f118:	d0ec      	beq.n	800f0f4 <_realloc_r+0x1c>
 800f11a:	42b5      	cmp	r5, r6
 800f11c:	462a      	mov	r2, r5
 800f11e:	4621      	mov	r1, r4
 800f120:	bf28      	it	cs
 800f122:	4632      	movcs	r2, r6
 800f124:	f7fd fa66 	bl	800c5f4 <memcpy>
 800f128:	4621      	mov	r1, r4
 800f12a:	4640      	mov	r0, r8
 800f12c:	f7fe f8d4 	bl	800d2d8 <_free_r>
 800f130:	463c      	mov	r4, r7
 800f132:	e7e0      	b.n	800f0f6 <_realloc_r+0x1e>

0800f134 <fiprintf>:
 800f134:	b40e      	push	{r1, r2, r3}
 800f136:	b503      	push	{r0, r1, lr}
 800f138:	4601      	mov	r1, r0
 800f13a:	ab03      	add	r3, sp, #12
 800f13c:	4805      	ldr	r0, [pc, #20]	@ (800f154 <fiprintf+0x20>)
 800f13e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f142:	6800      	ldr	r0, [r0, #0]
 800f144:	9301      	str	r3, [sp, #4]
 800f146:	f000 f83f 	bl	800f1c8 <_vfiprintf_r>
 800f14a:	b002      	add	sp, #8
 800f14c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f150:	b003      	add	sp, #12
 800f152:	4770      	bx	lr
 800f154:	200001a0 	.word	0x200001a0

0800f158 <abort>:
 800f158:	b508      	push	{r3, lr}
 800f15a:	2006      	movs	r0, #6
 800f15c:	f000 fa08 	bl	800f570 <raise>
 800f160:	2001      	movs	r0, #1
 800f162:	f7f5 fc91 	bl	8004a88 <_exit>

0800f166 <_malloc_usable_size_r>:
 800f166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f16a:	1f18      	subs	r0, r3, #4
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	bfbc      	itt	lt
 800f170:	580b      	ldrlt	r3, [r1, r0]
 800f172:	18c0      	addlt	r0, r0, r3
 800f174:	4770      	bx	lr

0800f176 <__sfputc_r>:
 800f176:	6893      	ldr	r3, [r2, #8]
 800f178:	3b01      	subs	r3, #1
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	b410      	push	{r4}
 800f17e:	6093      	str	r3, [r2, #8]
 800f180:	da08      	bge.n	800f194 <__sfputc_r+0x1e>
 800f182:	6994      	ldr	r4, [r2, #24]
 800f184:	42a3      	cmp	r3, r4
 800f186:	db01      	blt.n	800f18c <__sfputc_r+0x16>
 800f188:	290a      	cmp	r1, #10
 800f18a:	d103      	bne.n	800f194 <__sfputc_r+0x1e>
 800f18c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f190:	f000 b932 	b.w	800f3f8 <__swbuf_r>
 800f194:	6813      	ldr	r3, [r2, #0]
 800f196:	1c58      	adds	r0, r3, #1
 800f198:	6010      	str	r0, [r2, #0]
 800f19a:	7019      	strb	r1, [r3, #0]
 800f19c:	4608      	mov	r0, r1
 800f19e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1a2:	4770      	bx	lr

0800f1a4 <__sfputs_r>:
 800f1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1a6:	4606      	mov	r6, r0
 800f1a8:	460f      	mov	r7, r1
 800f1aa:	4614      	mov	r4, r2
 800f1ac:	18d5      	adds	r5, r2, r3
 800f1ae:	42ac      	cmp	r4, r5
 800f1b0:	d101      	bne.n	800f1b6 <__sfputs_r+0x12>
 800f1b2:	2000      	movs	r0, #0
 800f1b4:	e007      	b.n	800f1c6 <__sfputs_r+0x22>
 800f1b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1ba:	463a      	mov	r2, r7
 800f1bc:	4630      	mov	r0, r6
 800f1be:	f7ff ffda 	bl	800f176 <__sfputc_r>
 800f1c2:	1c43      	adds	r3, r0, #1
 800f1c4:	d1f3      	bne.n	800f1ae <__sfputs_r+0xa>
 800f1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1c8 <_vfiprintf_r>:
 800f1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1cc:	460d      	mov	r5, r1
 800f1ce:	b09d      	sub	sp, #116	@ 0x74
 800f1d0:	4614      	mov	r4, r2
 800f1d2:	4698      	mov	r8, r3
 800f1d4:	4606      	mov	r6, r0
 800f1d6:	b118      	cbz	r0, 800f1e0 <_vfiprintf_r+0x18>
 800f1d8:	6a03      	ldr	r3, [r0, #32]
 800f1da:	b90b      	cbnz	r3, 800f1e0 <_vfiprintf_r+0x18>
 800f1dc:	f7fc fa84 	bl	800b6e8 <__sinit>
 800f1e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1e2:	07d9      	lsls	r1, r3, #31
 800f1e4:	d405      	bmi.n	800f1f2 <_vfiprintf_r+0x2a>
 800f1e6:	89ab      	ldrh	r3, [r5, #12]
 800f1e8:	059a      	lsls	r2, r3, #22
 800f1ea:	d402      	bmi.n	800f1f2 <_vfiprintf_r+0x2a>
 800f1ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1ee:	f7f5 fd3c 	bl	8004c6a <__retarget_lock_acquire_recursive>
 800f1f2:	89ab      	ldrh	r3, [r5, #12]
 800f1f4:	071b      	lsls	r3, r3, #28
 800f1f6:	d501      	bpl.n	800f1fc <_vfiprintf_r+0x34>
 800f1f8:	692b      	ldr	r3, [r5, #16]
 800f1fa:	b99b      	cbnz	r3, 800f224 <_vfiprintf_r+0x5c>
 800f1fc:	4629      	mov	r1, r5
 800f1fe:	4630      	mov	r0, r6
 800f200:	f000 f938 	bl	800f474 <__swsetup_r>
 800f204:	b170      	cbz	r0, 800f224 <_vfiprintf_r+0x5c>
 800f206:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f208:	07dc      	lsls	r4, r3, #31
 800f20a:	d504      	bpl.n	800f216 <_vfiprintf_r+0x4e>
 800f20c:	f04f 30ff 	mov.w	r0, #4294967295
 800f210:	b01d      	add	sp, #116	@ 0x74
 800f212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f216:	89ab      	ldrh	r3, [r5, #12]
 800f218:	0598      	lsls	r0, r3, #22
 800f21a:	d4f7      	bmi.n	800f20c <_vfiprintf_r+0x44>
 800f21c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f21e:	f7f5 fd30 	bl	8004c82 <__retarget_lock_release_recursive>
 800f222:	e7f3      	b.n	800f20c <_vfiprintf_r+0x44>
 800f224:	2300      	movs	r3, #0
 800f226:	9309      	str	r3, [sp, #36]	@ 0x24
 800f228:	2320      	movs	r3, #32
 800f22a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f22e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f232:	2330      	movs	r3, #48	@ 0x30
 800f234:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f3e4 <_vfiprintf_r+0x21c>
 800f238:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f23c:	f04f 0901 	mov.w	r9, #1
 800f240:	4623      	mov	r3, r4
 800f242:	469a      	mov	sl, r3
 800f244:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f248:	b10a      	cbz	r2, 800f24e <_vfiprintf_r+0x86>
 800f24a:	2a25      	cmp	r2, #37	@ 0x25
 800f24c:	d1f9      	bne.n	800f242 <_vfiprintf_r+0x7a>
 800f24e:	ebba 0b04 	subs.w	fp, sl, r4
 800f252:	d00b      	beq.n	800f26c <_vfiprintf_r+0xa4>
 800f254:	465b      	mov	r3, fp
 800f256:	4622      	mov	r2, r4
 800f258:	4629      	mov	r1, r5
 800f25a:	4630      	mov	r0, r6
 800f25c:	f7ff ffa2 	bl	800f1a4 <__sfputs_r>
 800f260:	3001      	adds	r0, #1
 800f262:	f000 80a7 	beq.w	800f3b4 <_vfiprintf_r+0x1ec>
 800f266:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f268:	445a      	add	r2, fp
 800f26a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f26c:	f89a 3000 	ldrb.w	r3, [sl]
 800f270:	2b00      	cmp	r3, #0
 800f272:	f000 809f 	beq.w	800f3b4 <_vfiprintf_r+0x1ec>
 800f276:	2300      	movs	r3, #0
 800f278:	f04f 32ff 	mov.w	r2, #4294967295
 800f27c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f280:	f10a 0a01 	add.w	sl, sl, #1
 800f284:	9304      	str	r3, [sp, #16]
 800f286:	9307      	str	r3, [sp, #28]
 800f288:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f28c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f28e:	4654      	mov	r4, sl
 800f290:	2205      	movs	r2, #5
 800f292:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f296:	4853      	ldr	r0, [pc, #332]	@ (800f3e4 <_vfiprintf_r+0x21c>)
 800f298:	f7f0 ffaa 	bl	80001f0 <memchr>
 800f29c:	9a04      	ldr	r2, [sp, #16]
 800f29e:	b9d8      	cbnz	r0, 800f2d8 <_vfiprintf_r+0x110>
 800f2a0:	06d1      	lsls	r1, r2, #27
 800f2a2:	bf44      	itt	mi
 800f2a4:	2320      	movmi	r3, #32
 800f2a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2aa:	0713      	lsls	r3, r2, #28
 800f2ac:	bf44      	itt	mi
 800f2ae:	232b      	movmi	r3, #43	@ 0x2b
 800f2b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2b4:	f89a 3000 	ldrb.w	r3, [sl]
 800f2b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2ba:	d015      	beq.n	800f2e8 <_vfiprintf_r+0x120>
 800f2bc:	9a07      	ldr	r2, [sp, #28]
 800f2be:	4654      	mov	r4, sl
 800f2c0:	2000      	movs	r0, #0
 800f2c2:	f04f 0c0a 	mov.w	ip, #10
 800f2c6:	4621      	mov	r1, r4
 800f2c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2cc:	3b30      	subs	r3, #48	@ 0x30
 800f2ce:	2b09      	cmp	r3, #9
 800f2d0:	d94b      	bls.n	800f36a <_vfiprintf_r+0x1a2>
 800f2d2:	b1b0      	cbz	r0, 800f302 <_vfiprintf_r+0x13a>
 800f2d4:	9207      	str	r2, [sp, #28]
 800f2d6:	e014      	b.n	800f302 <_vfiprintf_r+0x13a>
 800f2d8:	eba0 0308 	sub.w	r3, r0, r8
 800f2dc:	fa09 f303 	lsl.w	r3, r9, r3
 800f2e0:	4313      	orrs	r3, r2
 800f2e2:	9304      	str	r3, [sp, #16]
 800f2e4:	46a2      	mov	sl, r4
 800f2e6:	e7d2      	b.n	800f28e <_vfiprintf_r+0xc6>
 800f2e8:	9b03      	ldr	r3, [sp, #12]
 800f2ea:	1d19      	adds	r1, r3, #4
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	9103      	str	r1, [sp, #12]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	bfbb      	ittet	lt
 800f2f4:	425b      	neglt	r3, r3
 800f2f6:	f042 0202 	orrlt.w	r2, r2, #2
 800f2fa:	9307      	strge	r3, [sp, #28]
 800f2fc:	9307      	strlt	r3, [sp, #28]
 800f2fe:	bfb8      	it	lt
 800f300:	9204      	strlt	r2, [sp, #16]
 800f302:	7823      	ldrb	r3, [r4, #0]
 800f304:	2b2e      	cmp	r3, #46	@ 0x2e
 800f306:	d10a      	bne.n	800f31e <_vfiprintf_r+0x156>
 800f308:	7863      	ldrb	r3, [r4, #1]
 800f30a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f30c:	d132      	bne.n	800f374 <_vfiprintf_r+0x1ac>
 800f30e:	9b03      	ldr	r3, [sp, #12]
 800f310:	1d1a      	adds	r2, r3, #4
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	9203      	str	r2, [sp, #12]
 800f316:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f31a:	3402      	adds	r4, #2
 800f31c:	9305      	str	r3, [sp, #20]
 800f31e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f3f4 <_vfiprintf_r+0x22c>
 800f322:	7821      	ldrb	r1, [r4, #0]
 800f324:	2203      	movs	r2, #3
 800f326:	4650      	mov	r0, sl
 800f328:	f7f0 ff62 	bl	80001f0 <memchr>
 800f32c:	b138      	cbz	r0, 800f33e <_vfiprintf_r+0x176>
 800f32e:	9b04      	ldr	r3, [sp, #16]
 800f330:	eba0 000a 	sub.w	r0, r0, sl
 800f334:	2240      	movs	r2, #64	@ 0x40
 800f336:	4082      	lsls	r2, r0
 800f338:	4313      	orrs	r3, r2
 800f33a:	3401      	adds	r4, #1
 800f33c:	9304      	str	r3, [sp, #16]
 800f33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f342:	4829      	ldr	r0, [pc, #164]	@ (800f3e8 <_vfiprintf_r+0x220>)
 800f344:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f348:	2206      	movs	r2, #6
 800f34a:	f7f0 ff51 	bl	80001f0 <memchr>
 800f34e:	2800      	cmp	r0, #0
 800f350:	d03f      	beq.n	800f3d2 <_vfiprintf_r+0x20a>
 800f352:	4b26      	ldr	r3, [pc, #152]	@ (800f3ec <_vfiprintf_r+0x224>)
 800f354:	bb1b      	cbnz	r3, 800f39e <_vfiprintf_r+0x1d6>
 800f356:	9b03      	ldr	r3, [sp, #12]
 800f358:	3307      	adds	r3, #7
 800f35a:	f023 0307 	bic.w	r3, r3, #7
 800f35e:	3308      	adds	r3, #8
 800f360:	9303      	str	r3, [sp, #12]
 800f362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f364:	443b      	add	r3, r7
 800f366:	9309      	str	r3, [sp, #36]	@ 0x24
 800f368:	e76a      	b.n	800f240 <_vfiprintf_r+0x78>
 800f36a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f36e:	460c      	mov	r4, r1
 800f370:	2001      	movs	r0, #1
 800f372:	e7a8      	b.n	800f2c6 <_vfiprintf_r+0xfe>
 800f374:	2300      	movs	r3, #0
 800f376:	3401      	adds	r4, #1
 800f378:	9305      	str	r3, [sp, #20]
 800f37a:	4619      	mov	r1, r3
 800f37c:	f04f 0c0a 	mov.w	ip, #10
 800f380:	4620      	mov	r0, r4
 800f382:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f386:	3a30      	subs	r2, #48	@ 0x30
 800f388:	2a09      	cmp	r2, #9
 800f38a:	d903      	bls.n	800f394 <_vfiprintf_r+0x1cc>
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d0c6      	beq.n	800f31e <_vfiprintf_r+0x156>
 800f390:	9105      	str	r1, [sp, #20]
 800f392:	e7c4      	b.n	800f31e <_vfiprintf_r+0x156>
 800f394:	fb0c 2101 	mla	r1, ip, r1, r2
 800f398:	4604      	mov	r4, r0
 800f39a:	2301      	movs	r3, #1
 800f39c:	e7f0      	b.n	800f380 <_vfiprintf_r+0x1b8>
 800f39e:	ab03      	add	r3, sp, #12
 800f3a0:	9300      	str	r3, [sp, #0]
 800f3a2:	462a      	mov	r2, r5
 800f3a4:	4b12      	ldr	r3, [pc, #72]	@ (800f3f0 <_vfiprintf_r+0x228>)
 800f3a6:	a904      	add	r1, sp, #16
 800f3a8:	4630      	mov	r0, r6
 800f3aa:	f7fb fb45 	bl	800aa38 <_printf_float>
 800f3ae:	4607      	mov	r7, r0
 800f3b0:	1c78      	adds	r0, r7, #1
 800f3b2:	d1d6      	bne.n	800f362 <_vfiprintf_r+0x19a>
 800f3b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3b6:	07d9      	lsls	r1, r3, #31
 800f3b8:	d405      	bmi.n	800f3c6 <_vfiprintf_r+0x1fe>
 800f3ba:	89ab      	ldrh	r3, [r5, #12]
 800f3bc:	059a      	lsls	r2, r3, #22
 800f3be:	d402      	bmi.n	800f3c6 <_vfiprintf_r+0x1fe>
 800f3c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3c2:	f7f5 fc5e 	bl	8004c82 <__retarget_lock_release_recursive>
 800f3c6:	89ab      	ldrh	r3, [r5, #12]
 800f3c8:	065b      	lsls	r3, r3, #25
 800f3ca:	f53f af1f 	bmi.w	800f20c <_vfiprintf_r+0x44>
 800f3ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f3d0:	e71e      	b.n	800f210 <_vfiprintf_r+0x48>
 800f3d2:	ab03      	add	r3, sp, #12
 800f3d4:	9300      	str	r3, [sp, #0]
 800f3d6:	462a      	mov	r2, r5
 800f3d8:	4b05      	ldr	r3, [pc, #20]	@ (800f3f0 <_vfiprintf_r+0x228>)
 800f3da:	a904      	add	r1, sp, #16
 800f3dc:	4630      	mov	r0, r6
 800f3de:	f7fb fdc3 	bl	800af68 <_printf_i>
 800f3e2:	e7e4      	b.n	800f3ae <_vfiprintf_r+0x1e6>
 800f3e4:	08011e50 	.word	0x08011e50
 800f3e8:	08011e5a 	.word	0x08011e5a
 800f3ec:	0800aa39 	.word	0x0800aa39
 800f3f0:	0800f1a5 	.word	0x0800f1a5
 800f3f4:	08011e56 	.word	0x08011e56

0800f3f8 <__swbuf_r>:
 800f3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3fa:	460e      	mov	r6, r1
 800f3fc:	4614      	mov	r4, r2
 800f3fe:	4605      	mov	r5, r0
 800f400:	b118      	cbz	r0, 800f40a <__swbuf_r+0x12>
 800f402:	6a03      	ldr	r3, [r0, #32]
 800f404:	b90b      	cbnz	r3, 800f40a <__swbuf_r+0x12>
 800f406:	f7fc f96f 	bl	800b6e8 <__sinit>
 800f40a:	69a3      	ldr	r3, [r4, #24]
 800f40c:	60a3      	str	r3, [r4, #8]
 800f40e:	89a3      	ldrh	r3, [r4, #12]
 800f410:	071a      	lsls	r2, r3, #28
 800f412:	d501      	bpl.n	800f418 <__swbuf_r+0x20>
 800f414:	6923      	ldr	r3, [r4, #16]
 800f416:	b943      	cbnz	r3, 800f42a <__swbuf_r+0x32>
 800f418:	4621      	mov	r1, r4
 800f41a:	4628      	mov	r0, r5
 800f41c:	f000 f82a 	bl	800f474 <__swsetup_r>
 800f420:	b118      	cbz	r0, 800f42a <__swbuf_r+0x32>
 800f422:	f04f 37ff 	mov.w	r7, #4294967295
 800f426:	4638      	mov	r0, r7
 800f428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f42a:	6823      	ldr	r3, [r4, #0]
 800f42c:	6922      	ldr	r2, [r4, #16]
 800f42e:	1a98      	subs	r0, r3, r2
 800f430:	6963      	ldr	r3, [r4, #20]
 800f432:	b2f6      	uxtb	r6, r6
 800f434:	4283      	cmp	r3, r0
 800f436:	4637      	mov	r7, r6
 800f438:	dc05      	bgt.n	800f446 <__swbuf_r+0x4e>
 800f43a:	4621      	mov	r1, r4
 800f43c:	4628      	mov	r0, r5
 800f43e:	f7ff fd53 	bl	800eee8 <_fflush_r>
 800f442:	2800      	cmp	r0, #0
 800f444:	d1ed      	bne.n	800f422 <__swbuf_r+0x2a>
 800f446:	68a3      	ldr	r3, [r4, #8]
 800f448:	3b01      	subs	r3, #1
 800f44a:	60a3      	str	r3, [r4, #8]
 800f44c:	6823      	ldr	r3, [r4, #0]
 800f44e:	1c5a      	adds	r2, r3, #1
 800f450:	6022      	str	r2, [r4, #0]
 800f452:	701e      	strb	r6, [r3, #0]
 800f454:	6962      	ldr	r2, [r4, #20]
 800f456:	1c43      	adds	r3, r0, #1
 800f458:	429a      	cmp	r2, r3
 800f45a:	d004      	beq.n	800f466 <__swbuf_r+0x6e>
 800f45c:	89a3      	ldrh	r3, [r4, #12]
 800f45e:	07db      	lsls	r3, r3, #31
 800f460:	d5e1      	bpl.n	800f426 <__swbuf_r+0x2e>
 800f462:	2e0a      	cmp	r6, #10
 800f464:	d1df      	bne.n	800f426 <__swbuf_r+0x2e>
 800f466:	4621      	mov	r1, r4
 800f468:	4628      	mov	r0, r5
 800f46a:	f7ff fd3d 	bl	800eee8 <_fflush_r>
 800f46e:	2800      	cmp	r0, #0
 800f470:	d0d9      	beq.n	800f426 <__swbuf_r+0x2e>
 800f472:	e7d6      	b.n	800f422 <__swbuf_r+0x2a>

0800f474 <__swsetup_r>:
 800f474:	b538      	push	{r3, r4, r5, lr}
 800f476:	4b29      	ldr	r3, [pc, #164]	@ (800f51c <__swsetup_r+0xa8>)
 800f478:	4605      	mov	r5, r0
 800f47a:	6818      	ldr	r0, [r3, #0]
 800f47c:	460c      	mov	r4, r1
 800f47e:	b118      	cbz	r0, 800f488 <__swsetup_r+0x14>
 800f480:	6a03      	ldr	r3, [r0, #32]
 800f482:	b90b      	cbnz	r3, 800f488 <__swsetup_r+0x14>
 800f484:	f7fc f930 	bl	800b6e8 <__sinit>
 800f488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f48c:	0719      	lsls	r1, r3, #28
 800f48e:	d422      	bmi.n	800f4d6 <__swsetup_r+0x62>
 800f490:	06da      	lsls	r2, r3, #27
 800f492:	d407      	bmi.n	800f4a4 <__swsetup_r+0x30>
 800f494:	2209      	movs	r2, #9
 800f496:	602a      	str	r2, [r5, #0]
 800f498:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f49c:	81a3      	strh	r3, [r4, #12]
 800f49e:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a2:	e033      	b.n	800f50c <__swsetup_r+0x98>
 800f4a4:	0758      	lsls	r0, r3, #29
 800f4a6:	d512      	bpl.n	800f4ce <__swsetup_r+0x5a>
 800f4a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4aa:	b141      	cbz	r1, 800f4be <__swsetup_r+0x4a>
 800f4ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4b0:	4299      	cmp	r1, r3
 800f4b2:	d002      	beq.n	800f4ba <__swsetup_r+0x46>
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	f7fd ff0f 	bl	800d2d8 <_free_r>
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4be:	89a3      	ldrh	r3, [r4, #12]
 800f4c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f4c4:	81a3      	strh	r3, [r4, #12]
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	6063      	str	r3, [r4, #4]
 800f4ca:	6923      	ldr	r3, [r4, #16]
 800f4cc:	6023      	str	r3, [r4, #0]
 800f4ce:	89a3      	ldrh	r3, [r4, #12]
 800f4d0:	f043 0308 	orr.w	r3, r3, #8
 800f4d4:	81a3      	strh	r3, [r4, #12]
 800f4d6:	6923      	ldr	r3, [r4, #16]
 800f4d8:	b94b      	cbnz	r3, 800f4ee <__swsetup_r+0x7a>
 800f4da:	89a3      	ldrh	r3, [r4, #12]
 800f4dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f4e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4e4:	d003      	beq.n	800f4ee <__swsetup_r+0x7a>
 800f4e6:	4621      	mov	r1, r4
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	f000 f883 	bl	800f5f4 <__smakebuf_r>
 800f4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4f2:	f013 0201 	ands.w	r2, r3, #1
 800f4f6:	d00a      	beq.n	800f50e <__swsetup_r+0x9a>
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	60a2      	str	r2, [r4, #8]
 800f4fc:	6962      	ldr	r2, [r4, #20]
 800f4fe:	4252      	negs	r2, r2
 800f500:	61a2      	str	r2, [r4, #24]
 800f502:	6922      	ldr	r2, [r4, #16]
 800f504:	b942      	cbnz	r2, 800f518 <__swsetup_r+0xa4>
 800f506:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f50a:	d1c5      	bne.n	800f498 <__swsetup_r+0x24>
 800f50c:	bd38      	pop	{r3, r4, r5, pc}
 800f50e:	0799      	lsls	r1, r3, #30
 800f510:	bf58      	it	pl
 800f512:	6962      	ldrpl	r2, [r4, #20]
 800f514:	60a2      	str	r2, [r4, #8]
 800f516:	e7f4      	b.n	800f502 <__swsetup_r+0x8e>
 800f518:	2000      	movs	r0, #0
 800f51a:	e7f7      	b.n	800f50c <__swsetup_r+0x98>
 800f51c:	200001a0 	.word	0x200001a0

0800f520 <_raise_r>:
 800f520:	291f      	cmp	r1, #31
 800f522:	b538      	push	{r3, r4, r5, lr}
 800f524:	4605      	mov	r5, r0
 800f526:	460c      	mov	r4, r1
 800f528:	d904      	bls.n	800f534 <_raise_r+0x14>
 800f52a:	2316      	movs	r3, #22
 800f52c:	6003      	str	r3, [r0, #0]
 800f52e:	f04f 30ff 	mov.w	r0, #4294967295
 800f532:	bd38      	pop	{r3, r4, r5, pc}
 800f534:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f536:	b112      	cbz	r2, 800f53e <_raise_r+0x1e>
 800f538:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f53c:	b94b      	cbnz	r3, 800f552 <_raise_r+0x32>
 800f53e:	4628      	mov	r0, r5
 800f540:	f000 f830 	bl	800f5a4 <_getpid_r>
 800f544:	4622      	mov	r2, r4
 800f546:	4601      	mov	r1, r0
 800f548:	4628      	mov	r0, r5
 800f54a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f54e:	f000 b817 	b.w	800f580 <_kill_r>
 800f552:	2b01      	cmp	r3, #1
 800f554:	d00a      	beq.n	800f56c <_raise_r+0x4c>
 800f556:	1c59      	adds	r1, r3, #1
 800f558:	d103      	bne.n	800f562 <_raise_r+0x42>
 800f55a:	2316      	movs	r3, #22
 800f55c:	6003      	str	r3, [r0, #0]
 800f55e:	2001      	movs	r0, #1
 800f560:	e7e7      	b.n	800f532 <_raise_r+0x12>
 800f562:	2100      	movs	r1, #0
 800f564:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f568:	4620      	mov	r0, r4
 800f56a:	4798      	blx	r3
 800f56c:	2000      	movs	r0, #0
 800f56e:	e7e0      	b.n	800f532 <_raise_r+0x12>

0800f570 <raise>:
 800f570:	4b02      	ldr	r3, [pc, #8]	@ (800f57c <raise+0xc>)
 800f572:	4601      	mov	r1, r0
 800f574:	6818      	ldr	r0, [r3, #0]
 800f576:	f7ff bfd3 	b.w	800f520 <_raise_r>
 800f57a:	bf00      	nop
 800f57c:	200001a0 	.word	0x200001a0

0800f580 <_kill_r>:
 800f580:	b538      	push	{r3, r4, r5, lr}
 800f582:	4d07      	ldr	r5, [pc, #28]	@ (800f5a0 <_kill_r+0x20>)
 800f584:	2300      	movs	r3, #0
 800f586:	4604      	mov	r4, r0
 800f588:	4608      	mov	r0, r1
 800f58a:	4611      	mov	r1, r2
 800f58c:	602b      	str	r3, [r5, #0]
 800f58e:	f7f5 fa73 	bl	8004a78 <_kill>
 800f592:	1c43      	adds	r3, r0, #1
 800f594:	d102      	bne.n	800f59c <_kill_r+0x1c>
 800f596:	682b      	ldr	r3, [r5, #0]
 800f598:	b103      	cbz	r3, 800f59c <_kill_r+0x1c>
 800f59a:	6023      	str	r3, [r4, #0]
 800f59c:	bd38      	pop	{r3, r4, r5, pc}
 800f59e:	bf00      	nop
 800f5a0:	20009844 	.word	0x20009844

0800f5a4 <_getpid_r>:
 800f5a4:	f7f5 ba66 	b.w	8004a74 <_getpid>

0800f5a8 <__swhatbuf_r>:
 800f5a8:	b570      	push	{r4, r5, r6, lr}
 800f5aa:	460c      	mov	r4, r1
 800f5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5b0:	2900      	cmp	r1, #0
 800f5b2:	b096      	sub	sp, #88	@ 0x58
 800f5b4:	4615      	mov	r5, r2
 800f5b6:	461e      	mov	r6, r3
 800f5b8:	da0d      	bge.n	800f5d6 <__swhatbuf_r+0x2e>
 800f5ba:	89a3      	ldrh	r3, [r4, #12]
 800f5bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f5c0:	f04f 0100 	mov.w	r1, #0
 800f5c4:	bf14      	ite	ne
 800f5c6:	2340      	movne	r3, #64	@ 0x40
 800f5c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f5cc:	2000      	movs	r0, #0
 800f5ce:	6031      	str	r1, [r6, #0]
 800f5d0:	602b      	str	r3, [r5, #0]
 800f5d2:	b016      	add	sp, #88	@ 0x58
 800f5d4:	bd70      	pop	{r4, r5, r6, pc}
 800f5d6:	466a      	mov	r2, sp
 800f5d8:	f000 f848 	bl	800f66c <_fstat_r>
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	dbec      	blt.n	800f5ba <__swhatbuf_r+0x12>
 800f5e0:	9901      	ldr	r1, [sp, #4]
 800f5e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f5e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f5ea:	4259      	negs	r1, r3
 800f5ec:	4159      	adcs	r1, r3
 800f5ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f5f2:	e7eb      	b.n	800f5cc <__swhatbuf_r+0x24>

0800f5f4 <__smakebuf_r>:
 800f5f4:	898b      	ldrh	r3, [r1, #12]
 800f5f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5f8:	079d      	lsls	r5, r3, #30
 800f5fa:	4606      	mov	r6, r0
 800f5fc:	460c      	mov	r4, r1
 800f5fe:	d507      	bpl.n	800f610 <__smakebuf_r+0x1c>
 800f600:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f604:	6023      	str	r3, [r4, #0]
 800f606:	6123      	str	r3, [r4, #16]
 800f608:	2301      	movs	r3, #1
 800f60a:	6163      	str	r3, [r4, #20]
 800f60c:	b003      	add	sp, #12
 800f60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f610:	ab01      	add	r3, sp, #4
 800f612:	466a      	mov	r2, sp
 800f614:	f7ff ffc8 	bl	800f5a8 <__swhatbuf_r>
 800f618:	9f00      	ldr	r7, [sp, #0]
 800f61a:	4605      	mov	r5, r0
 800f61c:	4639      	mov	r1, r7
 800f61e:	4630      	mov	r0, r6
 800f620:	f7fa fa4e 	bl	8009ac0 <_malloc_r>
 800f624:	b948      	cbnz	r0, 800f63a <__smakebuf_r+0x46>
 800f626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f62a:	059a      	lsls	r2, r3, #22
 800f62c:	d4ee      	bmi.n	800f60c <__smakebuf_r+0x18>
 800f62e:	f023 0303 	bic.w	r3, r3, #3
 800f632:	f043 0302 	orr.w	r3, r3, #2
 800f636:	81a3      	strh	r3, [r4, #12]
 800f638:	e7e2      	b.n	800f600 <__smakebuf_r+0xc>
 800f63a:	89a3      	ldrh	r3, [r4, #12]
 800f63c:	6020      	str	r0, [r4, #0]
 800f63e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f642:	81a3      	strh	r3, [r4, #12]
 800f644:	9b01      	ldr	r3, [sp, #4]
 800f646:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f64a:	b15b      	cbz	r3, 800f664 <__smakebuf_r+0x70>
 800f64c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f650:	4630      	mov	r0, r6
 800f652:	f000 f81d 	bl	800f690 <_isatty_r>
 800f656:	b128      	cbz	r0, 800f664 <__smakebuf_r+0x70>
 800f658:	89a3      	ldrh	r3, [r4, #12]
 800f65a:	f023 0303 	bic.w	r3, r3, #3
 800f65e:	f043 0301 	orr.w	r3, r3, #1
 800f662:	81a3      	strh	r3, [r4, #12]
 800f664:	89a3      	ldrh	r3, [r4, #12]
 800f666:	431d      	orrs	r5, r3
 800f668:	81a5      	strh	r5, [r4, #12]
 800f66a:	e7cf      	b.n	800f60c <__smakebuf_r+0x18>

0800f66c <_fstat_r>:
 800f66c:	b538      	push	{r3, r4, r5, lr}
 800f66e:	4d07      	ldr	r5, [pc, #28]	@ (800f68c <_fstat_r+0x20>)
 800f670:	2300      	movs	r3, #0
 800f672:	4604      	mov	r4, r0
 800f674:	4608      	mov	r0, r1
 800f676:	4611      	mov	r1, r2
 800f678:	602b      	str	r3, [r5, #0]
 800f67a:	f7f5 fa2a 	bl	8004ad2 <_fstat>
 800f67e:	1c43      	adds	r3, r0, #1
 800f680:	d102      	bne.n	800f688 <_fstat_r+0x1c>
 800f682:	682b      	ldr	r3, [r5, #0]
 800f684:	b103      	cbz	r3, 800f688 <_fstat_r+0x1c>
 800f686:	6023      	str	r3, [r4, #0]
 800f688:	bd38      	pop	{r3, r4, r5, pc}
 800f68a:	bf00      	nop
 800f68c:	20009844 	.word	0x20009844

0800f690 <_isatty_r>:
 800f690:	b538      	push	{r3, r4, r5, lr}
 800f692:	4d06      	ldr	r5, [pc, #24]	@ (800f6ac <_isatty_r+0x1c>)
 800f694:	2300      	movs	r3, #0
 800f696:	4604      	mov	r4, r0
 800f698:	4608      	mov	r0, r1
 800f69a:	602b      	str	r3, [r5, #0]
 800f69c:	f7f5 fa1e 	bl	8004adc <_isatty>
 800f6a0:	1c43      	adds	r3, r0, #1
 800f6a2:	d102      	bne.n	800f6aa <_isatty_r+0x1a>
 800f6a4:	682b      	ldr	r3, [r5, #0]
 800f6a6:	b103      	cbz	r3, 800f6aa <_isatty_r+0x1a>
 800f6a8:	6023      	str	r3, [r4, #0]
 800f6aa:	bd38      	pop	{r3, r4, r5, pc}
 800f6ac:	20009844 	.word	0x20009844

0800f6b0 <round>:
 800f6b0:	ec51 0b10 	vmov	r0, r1, d0
 800f6b4:	b570      	push	{r4, r5, r6, lr}
 800f6b6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f6ba:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800f6be:	2a13      	cmp	r2, #19
 800f6c0:	460b      	mov	r3, r1
 800f6c2:	4605      	mov	r5, r0
 800f6c4:	dc1b      	bgt.n	800f6fe <round+0x4e>
 800f6c6:	2a00      	cmp	r2, #0
 800f6c8:	da0b      	bge.n	800f6e2 <round+0x32>
 800f6ca:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800f6ce:	3201      	adds	r2, #1
 800f6d0:	bf04      	itt	eq
 800f6d2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800f6d6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800f6da:	2200      	movs	r2, #0
 800f6dc:	4619      	mov	r1, r3
 800f6de:	4610      	mov	r0, r2
 800f6e0:	e015      	b.n	800f70e <round+0x5e>
 800f6e2:	4c15      	ldr	r4, [pc, #84]	@ (800f738 <round+0x88>)
 800f6e4:	4114      	asrs	r4, r2
 800f6e6:	ea04 0601 	and.w	r6, r4, r1
 800f6ea:	4306      	orrs	r6, r0
 800f6ec:	d00f      	beq.n	800f70e <round+0x5e>
 800f6ee:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800f6f2:	fa41 f202 	asr.w	r2, r1, r2
 800f6f6:	4413      	add	r3, r2
 800f6f8:	ea23 0304 	bic.w	r3, r3, r4
 800f6fc:	e7ed      	b.n	800f6da <round+0x2a>
 800f6fe:	2a33      	cmp	r2, #51	@ 0x33
 800f700:	dd08      	ble.n	800f714 <round+0x64>
 800f702:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800f706:	d102      	bne.n	800f70e <round+0x5e>
 800f708:	4602      	mov	r2, r0
 800f70a:	f7f0 fdcf 	bl	80002ac <__adddf3>
 800f70e:	ec41 0b10 	vmov	d0, r0, r1
 800f712:	bd70      	pop	{r4, r5, r6, pc}
 800f714:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800f718:	f04f 34ff 	mov.w	r4, #4294967295
 800f71c:	40f4      	lsrs	r4, r6
 800f71e:	4204      	tst	r4, r0
 800f720:	d0f5      	beq.n	800f70e <round+0x5e>
 800f722:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800f726:	2201      	movs	r2, #1
 800f728:	408a      	lsls	r2, r1
 800f72a:	1952      	adds	r2, r2, r5
 800f72c:	bf28      	it	cs
 800f72e:	3301      	addcs	r3, #1
 800f730:	ea22 0204 	bic.w	r2, r2, r4
 800f734:	e7d2      	b.n	800f6dc <round+0x2c>
 800f736:	bf00      	nop
 800f738:	000fffff 	.word	0x000fffff

0800f73c <_init>:
 800f73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f73e:	bf00      	nop
 800f740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f742:	bc08      	pop	{r3}
 800f744:	469e      	mov	lr, r3
 800f746:	4770      	bx	lr

0800f748 <_fini>:
 800f748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f74a:	bf00      	nop
 800f74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f74e:	bc08      	pop	{r3}
 800f750:	469e      	mov	lr, r3
 800f752:	4770      	bx	lr
